{"config":{"indexing":"full","lang":["en","ru","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"HOME \u8f6f\u4ef6\u652f\u6301 \u5728\u7ebf\u95ee\u9898\u54a8\u8be2 \u667a\u80fd\u95ee\u7b54\u5e73\u53f0 \u5982\u679c\u6709\u95ee\u9898\uff0c\u8bf7\u76f4\u63a5\u5728\u6b64\u9875\u9762\u8fdb\u884c\u63d0\u95ee\uff0c\u51e0\u4e4e\u6bcf\u5929\u90fd\u7ef4\u62a4 \u8f93\u5165\u8f6c\u4eba\u5de5\uff0c\u4e4b\u540e\uff0c\u5199\u4e0a\u4f60\u7684\u8be6\u7ec6\u95ee\u9898\uff0c\u6211\u7684\u5fae\u4fe1\u5c31\u4f1a\u6536\u5230\u4f60\u7684\u63d0\u95ee\uff0c\u6211\u5c06\u56de\u590d\u60a8\u7684\u95ee\u9898","title":"HOME"},{"location":"#home","text":"","title":"HOME"},{"location":"#_1","text":"\u5728\u7ebf\u95ee\u9898\u54a8\u8be2 \u667a\u80fd\u95ee\u7b54\u5e73\u53f0 \u5982\u679c\u6709\u95ee\u9898\uff0c\u8bf7\u76f4\u63a5\u5728\u6b64\u9875\u9762\u8fdb\u884c\u63d0\u95ee\uff0c\u51e0\u4e4e\u6bcf\u5929\u90fd\u7ef4\u62a4 \u8f93\u5165\u8f6c\u4eba\u5de5\uff0c\u4e4b\u540e\uff0c\u5199\u4e0a\u4f60\u7684\u8be6\u7ec6\u95ee\u9898\uff0c\u6211\u7684\u5fae\u4fe1\u5c31\u4f1a\u6536\u5230\u4f60\u7684\u63d0\u95ee\uff0c\u6211\u5c06\u56de\u590d\u60a8\u7684\u95ee\u9898","title":"\u8f6f\u4ef6\u652f\u6301"},{"location":"DS-CODE/Automation/AddLouvreWithEndOffsetByCurveFro/","text":"C C++ VBA Python VB.NET C# EKL #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Function AddLouvreWithEndOffsetByCurveFromOriginAxis(SketchProfileREF As Reference, GuideCurve As Variant, OffsetDim As Double, ConstSet As HybridBody, FinalSet As HybridBody) As HybridShapeSweepExplicit Dim EndPt1 As HybridShapePointOnCurve Set EndPt1 = MyHSFactory.AddNewPointOnCurveFromDistance(GuideCurve, OffsetDim, True) ConstSet.AppendHybridShape EndPt1 MyHSFactory.GSMVisibility EndPt1, 0 Dim EndPt3 As HybridShapePointOnCurve Set EndPt3 = MyHSFactory.AddNewPointOnCurveFromDistance(GuideCurve, OffsetDim, False) ConstSet.AppendHybridShape EndPt3 MyHSFactory.GSMVisibility EndPt3, 0 Dim MSupSpl1 As HybridShapeSplit Set MSupSpl1 = MyHSFactory.AddNewHybridSplit(GuideCurve, EndPt3, 1) MSupSpl1.AddElementToKeep EndPt1 ConstSet.AppendHybridShape MSupSpl1 MyHSFactory.GSMVisibility MSupSpl1, 0 Dim MSupSpl2 As HybridShapeSplit Set MSupSpl2 = MyHSFactory.AddNewHybridSplit(MSupSpl1, EndPt1, 1) MSupSpl2.AddElementToKeep EndPt3 ConstSet.AppendHybridShape MSupSpl2 MyHSFactory.GSMVisibility MSupSpl2, 0 Dim MSupFirstPt As HybridShapePointOnCurve Set MSupFirstPt = MyHSFactory.AddNewPointOnCurveFromPercent(MSupSpl2, 0, True) ConstSet.AppendHybridShape MSupFirstPt 'MyHSFactory.GSMVisibility MSupFirstPt, 0 Dim MSubStartDirLin As HybridShapeLineTangency Set MSubStartDirLin = MyHSFactory.AddNewLineTangency(MSupSpl2, MSupFirstPt, 0, 25.4, True) ConstSet.AppendHybridShape MSubStartDirLin MyPart.UpdateObject MSubStartDirLin 'MyHSFactory.GSMVisibility MSubStartDirLin, 0 Dim MSubNormPlane As HybridShapeLineNormal 'As HybridShapePlane2Lines Set MSubNormPlane = MyHSFactory.AddNewLineNormal(DriverSrf, MSupFirstPt, 0, 10, True) 'AddNewPlane2Lines(MSubStartDirLin, Zaxis) ConstSet.AppendHybridShape MSubNormPlane MyPart.UpdateObject MSubNormPlane 'MyHSFactory.GSMVisibility MSubNormPlane, 0 Dim MSub2LinesPlane As HybridShapePlane2Lines Set MSub2LinesPlane = MyHSFactory.AddNewPlane2Lines(MSubStartDirLin, MSubNormPlane) ConstSet.AppendHybridShape MSub2LinesPlane MyPart.UpdateObject MSub2LinesPlane 'MyHSFactory.GSMVisibility MSub2LinesPlane, 0 Dim axisSystems1 As AxisSystems Set axisSystems1 = MyPart.AxisSystems Dim axisSystem1 As AxisSystem Set axisSystem1 = axisSystems1.Add() axisSystem1.OriginType = catAxisSystemOriginByPoint axisSystem1.OriginPoint = MSupFirstPt axisSystem1.XAxisType = catAxisSystemAxisOppositeDirection axisSystem1.XAxisDirection = MSubNormPlane axisSystem1.YAxisType = catAxisSystemAxisOppositeDirection 'Dim hybridShapePlaneExplicit1 As HybridShapePlaneExplicit 'Set hybridShapePlaneExplicit1 = MyPart.OriginElements.PlaneXY 'axisSystem1.YAxisDirection = hybridShapePlaneExplicit1 axisSystem1.YAxisDirection = MSub2LinesPlane axisSystem1.ZAxisType = catAxisSystemAxisSameDirection axisSystem1.ZAxisDirection = MSubStartDirLin 'SafeHide axisSystem1 'x flips Dim MainAxisSysREF As Reference Set MainAxisSysREF = MyPart.CreateReferenceFromObject(MainAxisSys) Dim axisSystem1REF As Reference Set axisSystem1REF = MyPart.CreateReferenceFromObject(axisSystem1) Dim NAxis2Axis As HybridShapeAxisToAxis Set NAxis2Axis = MyHSFactory.AddNewAxisToAxis(SketchProfileREF, MainAxisSysREF, axisSystem1REF) ConstSet.AppendHybridShape NAxis2Axis 'MyHSFactory.GSMVisibility NAxis2Axis, 0 Dim LouvreSweep As HybridShapeSweepExplicit Set LouvreSweep = MyHSFactory.AddNewSweepExplicit(NAxis2Axis, MSupSpl2) LouvreSweep.SubType = 1 LouvreSweep.Reference = MyPart.OriginElements.PlaneXY LouvreSweep.SetAngleRef 1, 0# LouvreSweep.SolutionNo = 0 LouvreSweep.SmoothActivity = False LouvreSweep.GuideDeviationActivity = False FinalSet.AppendHybridShape LouvreSweep 'MyPart.UpdateObject LouvreSweep LouvreSweep.Name = GuideCurve.Name & \"_MULLGEOM\" 'MoveAxisSystemXDirFartherFromCoord axisSystem1, LouvreSweep, 0, 0, 0 Set AddLouvreByCurveFromOriginAxis = LouvreSweep IsUpdatable LouvreSweep End Function","title":"AddLouvreWithEndOffsetByCurveFro"},{"location":"DS-CODE/Automation/AddNewPointOnCurveSmall/","text":"VB.NET 'AddNewPointOnCurveSmall Function AddNewPointOnCurveSmall(InputCurve As Variant, RatioNum As Double, tempset As HybridBody, NameStr As String) As HybridShapePointOnCurve Dim ADN As HybridShapePointOnCurve Set ADN = MyHSFactory.AddNewPointOnCurveFromPercent(InputCurve, RatioNum, True) tempset.AppendHybridShape ADN ADN.Name = NameStr IsUpdatable ADN MyHSFactory.GSMVisibility ADN, 0 Set AddNewPointOnCurveSmall = ADN End Function","title":"AddNewPointOnCurveSmall"},{"location":"DS-CODE/Automation/AddObjectToList/","text":"VB.NET Function AddObjectToList(part, hb, list) Dim sel As INFITF.Selection Set sel = CATIA.ActiveEditor.Selection sel.Clear sel.Add hb 'sel.Search (\"Type='Ifc Reinforcing bar common',sel\") sel.Search (\"Name ='Reinforcing bars wire*',sel\") Dim lst As ListParameter Set lst = list For i = 1 To sel.Count lst.ValueList.Add sel.Item(i).Value Next End Function","title":"AddObjectToList"},{"location":"DS-CODE/Automation/AddObjectTolistFromSearch/","text":"VB Attribute VB_Name = \"AddObjectTolistFromSearch\" Dim CATIA As INFITF.Application Sub CATMain() Set CATIA = GetObject(, \"CATIA.Application\") Dim part As MECMOD.part Set part = CATIA.ActiveEditor.ActiveObject Dim sel As INFITF.Selection Set sel = CATIA.ActiveEditor.Selection Dim lst As ListParameter Set lst = sel.Item(1).Value 'a -- gailianggangj AddObjectToList part, part.FindObjectByName(\"\u627f\u53f0\u94a2\u7b4b\"), lst part.Update End Sub Function AddObjectToList(part, hb, list) Dim sel As INFITF.Selection Set sel = CATIA.ActiveEditor.Selection sel.Clear sel.Add hb sel.Search (\"Type='Ifc Reinforcing bar common',sel\") 'sel.Search (\"Name ='Reinforcing bars wire*',sel\") Dim lst As ListParameter Set lst = list For i = 1 To sel.Count lst.ValueList.Add sel.Item(i).Value Next End Function","title":"AddObjectTolistFromSearch"},{"location":"DS-CODE/Automation/AddSetIfNotThere/","text":"VB Python C#.NET VB.NET CAA Function AddSetIfNotThere(ContainerSet As Variant, HBName As String) As HybridBody Dim JKL As HybridBody If ContainerSet.HybridBodies.Count = 0 Then Set JKL = ContainerSet.HybridBodies.Add JKL.Name = HBName Set AddSetIfNotThere = JKL Exit Function End If Dim SetCounter As Integer SetCounter = 1 While SetCounter <= ContainerSet.HybridBodies.Count If ContainerSet.HybridBodies.Item(SetCounter).Name = HBName Then Set JKL = ContainerSet.HybridBodies.Item(HBName) Set AddSetIfNotThere = JKL Exit Function End If SetCounter = SetCounter + 1 Wend Set JKL = ContainerSet.HybridBodies.Add JKL.Name = HBName Set AddSetIfNotThere = JKL End Function","title":"AddSetIfNotThere"},{"location":"DS-CODE/Automation/AppendStringParm/","text":"VB Sub AppendStringParm(CurObj As Variant, ParmName As String, ParmValue As String, CurPart As Part) Dim CFParms As Parameters Set CFParms = CurPart.Parameters.SubList(CurObj, True) Dim CFStrParm As Parameter Set CFStrParm = CFParms.CreateString(ParmName, ParmValue) End Sub","title":"AppendStringParm"},{"location":"DS-CODE/Automation/BrowseForFile/","text":"VB Function BrowseForFile(FileTypeName as String) as String FilePath = CATIA.FileSelectionBox(\"Select a text file\", \"*.\" & FileTypeName , CatFileSelectionModeOpen) BrowseForFile = FilePath End Function","title":"BrowseForFile"},{"location":"DS-CODE/Automation/BrowseForFolder/","text":"VB Dim FolderName As String Dim RootPath FolderName = GetFolderName(\"Select a folder\") If FolderName = \"\" Then MsgBox \"You didn't select a folder.\" Else RootPath = FolderName & \"\\\" TextBoxSavePath.Value = RootPath 'MsgBox \"You selected this folder: \" & RootPath End If","title":"BrowseForFolder"},{"location":"DS-CODE/Automation/CATApp/","text":"V5 VB.NET Option Explicit Off #Region \"Import\" Imports MECMOD Imports HybridShapeTypeLib Imports SPATypeLib Imports INFITF Imports AnnotationTypeLib #End Region Public Class CATApp Public Shared CATIA As INFITF.Application = GetObject(, \"CATIA.Application\") Public Shared MyDoc As PartDocument = CATIA.ActiveDocument Public Shared MyPart As Part = MyDoc.Part Public Shared MyHSFactory As HybridShapeFactory = MyPart.HybridShapeFactory Public Shared MyHybridBodies As HybridBodies = MyPart.HybridBodies Public Shared MySel As Selection = CATIA.ActiveDocument.Selection Public Shared Zaxis = MyHSFactory.AddNewDirectionByCoord(0, 0, 1) Public Shared XYPln = MyPart.OriginElements.PlaneXY Public Shared YZPln = MyPart.OriginElements.PlaneYZ Public Shared ZXPln = MyPart.OriginElements.PlaneZX Public Shared TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") End Class V5 VBA Python C#.NET VB.NET CAA V6 VBA Python C#.NET VB.NET CAA","title":"CATApp"},{"location":"DS-CODE/Automation/CATApp/#v5","text":"","title":"V5"},{"location":"DS-CODE/Automation/CATApp/#vbnet","text":"Option Explicit Off #Region \"Import\" Imports MECMOD Imports HybridShapeTypeLib Imports SPATypeLib Imports INFITF Imports AnnotationTypeLib #End Region Public Class CATApp Public Shared CATIA As INFITF.Application = GetObject(, \"CATIA.Application\") Public Shared MyDoc As PartDocument = CATIA.ActiveDocument Public Shared MyPart As Part = MyDoc.Part Public Shared MyHSFactory As HybridShapeFactory = MyPart.HybridShapeFactory Public Shared MyHybridBodies As HybridBodies = MyPart.HybridBodies Public Shared MySel As Selection = CATIA.ActiveDocument.Selection Public Shared Zaxis = MyHSFactory.AddNewDirectionByCoord(0, 0, 1) Public Shared XYPln = MyPart.OriginElements.PlaneXY Public Shared YZPln = MyPart.OriginElements.PlaneYZ Public Shared ZXPln = MyPart.OriginElements.PlaneZX Public Shared TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") End Class","title":"VB.NET"},{"location":"DS-CODE/Automation/CATApp/#v5_1","text":"","title":"V5"},{"location":"DS-CODE/Automation/CATApp/#vba","text":"","title":"VBA"},{"location":"DS-CODE/Automation/CATApp/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/CATApp/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/CATApp/#vbnet_1","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/CATApp/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/CATApp/#v6","text":"","title":"V6"},{"location":"DS-CODE/Automation/CATApp/#vba_1","text":"","title":"VBA"},{"location":"DS-CODE/Automation/CATApp/#python_1","text":"","title":"Python"},{"location":"DS-CODE/Automation/CATApp/#cnet_1","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/CATApp/#vbnet_2","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/CATApp/#caa_1","text":"","title":"CAA"},{"location":"DS-CODE/Automation/CanGetAngle/","text":"VBA VB.NET CAA VBA Python C#.NET Function CanGetAngle(SampleCrv As Variant, SecondCrv As Variant) As Boolean On Error GoTo Blast2 Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(SecondCrv) Dim CCC As Double CCC = CMeas.GetAngleBetween(SampleCrv) CanGetAngle = True Exit Function Blast2: CanGetAngle = False End Function Public Shared Function CanGetAngle(SampleCrv As Object, SecondCrv As Object) As Boolean On Error GoTo Blast2 Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CMeas CMeas = TheSPAWorkbench.GetMeasurable(SecondCrv) Dim CCC As Double CCC = CMeas.GetAngleBetween(SampleCrv) CanGetAngle = True Exit Function Blast2: CanGetAngle = False End Function","title":"CanGetAngle"},{"location":"DS-CODE/Automation/CheckExcelDuplicates/","text":"VB Function CheckExcelDuplicates(ColumnNo As Integer, EndRow As Integer, CheckEmptyStrings As Boolean) As Boolean Dim ColStrArr() ReDim ColStrArr(0) For X = 1 To EndRow Dim XCounter As Integer XCounter = 0 Dim CurCellStr As String CurCellStr = CStr(CurCells(X, ColumnNo).Value) While XCounter < UBound(ColStrArr) If ColStrArr(XCounter) = CurCellStr Then CheckExcelDuplicates = True CurCells(X, ColumnNo).Font.colorindex = 41 Exit Function End If XCounter = XCounter + 1 Wend If CheckEmptyStrings = False And CurCellStr = \"\" Then Else ColStrArr(UBound(ColStrArr)) = CurCellStr ReDim Preserve ColStrArr(UBound(ColStrArr) + 1) End If Next X End Function","title":"CheckExcelDuplicates"},{"location":"DS-CODE/Automation/CheckFill/","text":"VB VB.NET Function CheckFill(BoundaryObj As Variant) As Boolean On Error GoTo NNN Dim CF As HybridShapeFill Set CF = MyHSFactory.AddNewFill() CF.AddBound BoundaryObj MyPart.UpdateObject CF CheckFill = True Exit Function NNN: CheckFill = False End Function Public Shared Function CheckFill(BoundaryObj As Object, MyPart As Part) As Boolean On Error GoTo NNN Dim CF As HybridShapeFill CF = MyPart.HybridShapeFactory.AddNewFill() CF.AddBound(BoundaryObj) MyPart.UpdateObject(CF) CheckFill = True Exit Function NNN: CheckFill = False End Function","title":"CheckFill"},{"location":"DS-CODE/Automation/CheckFolders/","text":"VB Sub CheckFolders(CurDirectoryStr As String) Dim curFolderStr As String curFolderStr = CurDirectoryStr If FS.FolderExists(curFolderStr) = False Then If curFolderStr <> \"\" Then If FolderVerify(curFolderStr) Then FS.CreateFolder (curFolderStr) Else harr = Split(curFolderStr, \"\\\") Dim HName As String HName = harr(0) For X2 = 1 To UBound(harr) HName = HName & \"\\\" & harr(X2) If FS.FolderExists(HName) = False Then FS.CreateFolder HName End If Next X2 End If End If End If End Sub","title":"CheckFolders"},{"location":"DS-CODE/Automation/CheckIfTwoObjectsAreDuplicates/","text":"VB Public Shared Function CheckIfTwoObjectsAreDuplicates(input1 As Object, input2 As Object, CurPart As Part, CurHSFactory As HybridShapeFactory, cur_set As HybridBody) As Boolean Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CMeas1 'As Measurable CMeas1 = TheSPAWorkbench.GetMeasurable(input1) Dim CMeas2 CMeas2 = TheSPAWorkbench.GetMeasurable(input2) If CMeas1.GeometryName = CMeas2.GeometryName Then Dim surface_check As Boolean surface_check = False If CMeas1.GeometryName = CatMeasurableName.CatMeasurableSurface Then Dim Coord1() ReDim Coord1(2) CMeas1.GetCOG(Coord1) Dim Coord2() ReDim Coord2(2) CMeas2.GetCOG(Coord2) If Coord1(0) = Coord2(0) And Coord1(1) = Coord2(1) And Coord1(2) = Coord2(2) Then surface_check = True Else surface_check = False End If Else surface_check = True End If If surface_check = True Then If CheckIntersectionWithMoreOptions(input1, input2, CurPart) = True Then CurHSFactory = CurPart.HybridShapeFactory Dim ref1 As Reference ref1 = CurPart.CreateReferenceFromObject(input1) Dim ref2 As Reference ref2 = CurPart.CreateReferenceFromObject(input2) Dim new_int As HybridShapeIntersection new_int = CurHSFactory.AddNewIntersection(ref1, ref2) cur_set.AppendHybridShape(new_int) CurPart.UpdateObject(new_int) Dim CMeas3 CMeas3 = TheSPAWorkbench.GetMeasurable(new_int) If CMeas3.GeometryName = CMeas1.GeometryName Then CheckIfTwoObjectsAreDuplicates = True CurHSFactory.DeleteObjectForDatum(new_int) Exit Function Else CheckIfTwoObjectsAreDuplicates = False CurHSFactory.DeleteObjectForDatum(new_int) Exit Function End If Else CheckIfTwoObjectsAreDuplicates = False Exit Function End If End If 'end of surface_check = true condition Else CheckIfTwoObjectsAreDuplicates = False Exit Function End If End Function","title":"CheckIfTwoObjectsAreDuplicates"},{"location":"DS-CODE/Automation/CheckInfiniteLineNormalIntersection/","text":"VB Function CheckInfiniteLineNormalIntersection(PtObj As Variant, SurfObj As Variant, ConstSet As HybridBody) As Boolean On Error GoTo blast Dim TestInt As HybridShapeLineNormal Set TestInt = MyHSFactory.AddNewLineNormal(SurfObj, PtObj, 0, 5, True) TestInt.SetLengthType 1 ConstSet.AppendHybridShape TestInt CATIA.ActiveDocument.Part.UpdateObject TestInt If CheckIntersection(TestInt, SurfObj) Then CheckInfiniteLineNormalIntersection = True Else CheckInfiniteLineNormalIntersection = False End If MyHSFactory.DeleteObjectForDatum TestInt Exit Function blast: MyHSFactory.DeleteObjectForDatum TestInt CheckInfiniteLineNormalIntersection = False End Function","title":"CheckInfiniteLineNormalIntersection"},{"location":"DS-CODE/Automation/CheckIntersection/","text":"\u68c0\u67e5\u5143\u7d20\u662f\u5426\u76f8\u4ea4 \u4e00\u822c\u4f1a\u9009\u62e9\u4e24\u4e2a\u4ee5\u4e0a\u5143\u7d20\u8fdb\u884c\u76f8\u4ea4\u8ba1\u7b97 VB \u591a\u9009\u9879\u76f8\u4ea4 VB.NET C#.NET Function CheckIntersection(Object1 As Variant, Object2 As Variant) As Boolean On Error GoTo Blast Dim TestInt As HybridShapeIntersection Set TestInt = MyHSFactory.AddNewIntersection(Object1, Object2) CATIA.ActiveDocument.Part.UpdateObject TestInt CheckIntersection = True Exit Function Blast: CheckIntersection = False End Function Function CheckIntersectionWithMoreOptions(Object1 As Variant, Object2 As Variant, CurPart As Part, CurHSFactory As HybridShapeFactory) As Boolean On Error GoTo Blast Dim TestInt As HybridShapeIntersection Set TestInt = CurHSFactory.AddNewIntersection(Object1, Object2) CurPart.UpdateObject TestInt CheckIntersectionWithMoreOptions = True Exit Function Blast: CheckIntersectionWithMoreOptions = False End Function Public Shared Function CheckIntersection(Object1 As Object, Object2 As Object\uff0c MyPart As Part) As Boolean On Error GoTo Blast Dim TestInt As HybridShapeIntersection TestInt = MyPart.HybridShapeFactory.AddNewIntersection(Object1, Object2) TestInt.Compute() MyPart.UpdateObject(TestInt) CheckIntersection = True Exit Function Blast: CheckIntersection = False End Function public Boolean CheckIntersection ( Object Object1 , Object Object2 , MECMOD . Part Part ) { try { HybridShapeIntersection TestInt ; HybridShapeFactory hsf = ( HybridShapeFactory ) Part . HybridShapeFactory ; TestInt = hsf . AddNewIntersection (( INFITF . Reference ) Object1 , ( Reference ) Object2 ); TestInt . Compute (); Part . UpdateObject ( TestInt ); return true ; } catch { return false ; } }","title":"CheckIntersection"},{"location":"DS-CODE/Automation/CheckIntersection/#_1","text":"\u4e00\u822c\u4f1a\u9009\u62e9\u4e24\u4e2a\u4ee5\u4e0a\u5143\u7d20\u8fdb\u884c\u76f8\u4ea4\u8ba1\u7b97 VB \u591a\u9009\u9879\u76f8\u4ea4 VB.NET C#.NET Function CheckIntersection(Object1 As Variant, Object2 As Variant) As Boolean On Error GoTo Blast Dim TestInt As HybridShapeIntersection Set TestInt = MyHSFactory.AddNewIntersection(Object1, Object2) CATIA.ActiveDocument.Part.UpdateObject TestInt CheckIntersection = True Exit Function Blast: CheckIntersection = False End Function Function CheckIntersectionWithMoreOptions(Object1 As Variant, Object2 As Variant, CurPart As Part, CurHSFactory As HybridShapeFactory) As Boolean On Error GoTo Blast Dim TestInt As HybridShapeIntersection Set TestInt = CurHSFactory.AddNewIntersection(Object1, Object2) CurPart.UpdateObject TestInt CheckIntersectionWithMoreOptions = True Exit Function Blast: CheckIntersectionWithMoreOptions = False End Function Public Shared Function CheckIntersection(Object1 As Object, Object2 As Object\uff0c MyPart As Part) As Boolean On Error GoTo Blast Dim TestInt As HybridShapeIntersection TestInt = MyPart.HybridShapeFactory.AddNewIntersection(Object1, Object2) TestInt.Compute() MyPart.UpdateObject(TestInt) CheckIntersection = True Exit Function Blast: CheckIntersection = False End Function public Boolean CheckIntersection ( Object Object1 , Object Object2 , MECMOD . Part Part ) { try { HybridShapeIntersection TestInt ; HybridShapeFactory hsf = ( HybridShapeFactory ) Part . HybridShapeFactory ; TestInt = hsf . AddNewIntersection (( INFITF . Reference ) Object1 , ( Reference ) Object2 ); TestInt . Compute (); Part . UpdateObject ( TestInt ); return true ; } catch { return false ; } }","title":"\u68c0\u67e5\u5143\u7d20\u662f\u5426\u76f8\u4ea4"},{"location":"DS-CODE/Automation/CheckLineNormal/","text":"VB Function CheckLineNormal(PtObj As Variant, SurfObj As Variant) As Boolean On Error GoTo Blast Dim TestInt As HybridShapeLineNormal Set TestInt = MyHSFactory.AddNewLineNormal(SurfObj, PtObj, 0, 5, True) CATIA.ActiveDocument.Part.UpdateObject TestInt CheckLineNormal = True Exit Function Blast: CheckLineNormal = False End Function","title":"CheckLineNormal"},{"location":"DS-CODE/Automation/CheckProduct/","text":"VB Function CheckProduct(InputProduct As Variant) As Boolean On Error GoTo Blast Set InputProduct2 = InputProduct.Parent.Parent CheckProduct = True Exit Function Blast: CheckProduct = False End Function","title":"CheckProduct"},{"location":"DS-CODE/Automation/CheckProjection/","text":"VB Function CheckProjection(CElement As Variant, CSupport As Variant) As Boolean On Error GoTo Blast Dim TestInt As HybridShapeProject Set TestInt = MyHSFactory.AddNewProject(CElement, CSupport) CATIA.ActiveDocument.Part.UpdateObject TestInt CheckProjection = True Exit Function Blast: CheckProjection = False End Function","title":"CheckProjection"},{"location":"DS-CODE/Automation/CheckProjectionByDirection/","text":"VB Function CheckProjectionByDirection(PointObj As Variant, LineObj As Variant, TargetObj As Variant) As Boolean On Error GoTo Blast Dim Pr As HybridShapeProject Set Pr = MyHSFactory.AddNewProject(PointObj, TargetObj) Pr.Direction = MyHSFactory.AddNewDirection(LineObj) CheckProjectionByDirection = True Exit Function Blast: CheckProjectionByDirection = False End Function","title":"CheckProjectionByDirection"},{"location":"DS-CODE/Automation/CivilSplitRoadSurf/","text":"VB Function CivilSplitRoadSurf(part, surf1, crv1, opt) ' \u8f93\u5165\u6761\u4ef6\uff1a part\uff0c\u8def\u9762\uff0c\u4e2d\u5fc3\u7ebf\uff0c\u4ea4\u70b9 Dim hsf As HybridShapeFactory Set hsf = part.HybridShapeFactory Dim hb As HybridBody Set hb = part.HybridBodies.Add hb.Name = \"\u5e73\u4ea4\u53e3\u9053\u8def\u66f2\u9762\" ' Dim hybridShapeSphere1 As HybridShapeSphere Set hybridShapeSphere1 = hsf.AddNewSphere(opt, Nothing, 45000, -45, 45, 0, 180) hybridShapeSphere1.Compute hybridShapeSphere1.Limitation = 1 'hb.AppendHybridShape hybridShapeSphere1 '\u521b\u5efa\u65b9\u5411\u5224\u65ad Dim hybridShapeLineTangency1 As HybridShapeLineTangency Set hybridShapeLineTangency1 = hsf.AddNewLineTangency(crv1, opt, -100#, 1000#, False) hybridShapeLineTangency1.Compute Dim hybridShapeLineTangency2 As HybridShapeLineTangency Set hybridShapeLineTangency2 = hsf.AddNewLineTangency(crv1, opt, -100#, -1000#, False) hybridShapeLineTangency2.Compute 'hb.AppendHybridShape hybridShapeLineTangency1 'hb.AppendHybridShape hybridShapeLineTangency2 Dim hybridShapeIntersection2 As HybridShapeIntersection Set hybridShapeIntersection2 = hsf.AddNewIntersection(hybridShapeSphere1, crv1) hybridShapeIntersection2.PointType = 0 'hb.AppendHybridShape hybridShapeIntersection2 ' Dim hybridShapeNear1 As HybridShapeNear Set hybridShapeNear1 = hsf.AddNewNear(hybridShapeIntersection2, hybridShapeLineTangency1) hb.AppendHybridShape hybridShapeNear1 hybridShapeNear1.Name = \"End_pt1\" Dim hybridShapeNear2 As HybridShapeNear Set hybridShapeNear2 = hsf.AddNewNear(hybridShapeIntersection2, hybridShapeLineTangency2) hb.AppendHybridShape hybridShapeNear2 hybridShapeNear2.Name = \"End_pt2\" ' \u521b\u5efa\u5e73\u9762 Dim pln1 As HybridShape Set pln1 = hsf.AddNewPlaneNormal(crv1, hybridShapeNear1) pln1.Compute Dim pln2 As HybridShape Set pln2 = hsf.AddNewPlaneNormal(crv1, hybridShapeNear2) pln2.Compute pln1.Name = \"Start_Pln\" pln2.Name = \"End_Pln\" hb.AppendHybridShape pln1 hb.AppendHybridShape pln2 Dim split1 As HybridShapeSplit Set split1 = hsf.AddNewHybridSplit(surf1, pln1, False) split1.BothSidesMode = True split1.Compute hsf.GSMVisibility split1.GetOtherSide, 0 Dim split2 As HybridShapeSplit Set split2 = hsf.AddNewHybridSplit(split1.GetOtherSide, pln2, True) split2.BothSidesMode = False split2.Compute split1.Name = \"Rd_Surf_1\" split2.Name = \"Rd_Surf_2\" hb.AppendHybridShape split1 hb.AppendHybridShape split2 End Function","title":"CivilSplitRoadSurf"},{"location":"DS-CODE/Automation/CleanOGS/","text":"VB Sub CleanOGS(CurOGS As OrderedGeometricalSet) Dim SecondPart As Part Set SecondPart = GetContainingPart(CurOGS) If CATIA.ActiveDocument.Selection.Count <> 0 Then CATIA.ActiveDocument.Selection.Clear End If For X = 1 To CurOGS.Bodies.Count CATIA.ActiveDocument.Selection.Add CurOGS.Bodies.Item(X) CATIA.ActiveDocument.Selection.Delete Next For X = 1 To CurOGS.HybridShapes.Count SecondPart.HybridShapeFactory.DeleteObjectForDatum CurOGS.HybridShapes.Item(1) Next For X = 1 To CurOGS.OrderedSketches.Count CATIA.ActiveDocument.Selection.Add CurOGS.OrderedSketches.Item(X) CATIA.ActiveDocument.Selection.Delete Next End Sub","title":"CleanOGS"},{"location":"DS-CODE/Automation/ClosestPoints/","text":"VB Sub ClosestPoints(Point1 As Variant, Point2 As Variant) Dim SmallestDist As Double SmallestDist = 100000000 Dim WinHH, WinJJ As Integer WinHH = 0: WinJJ = 0 For HH = 0 To 1 For jj = 0 To 1 Point1.Ratio.Value = HH Point2.Ratio.Value = jj CATIA.ActiveDocument.Part.UpdateObject Point1 CATIA.ActiveDocument.Part.UpdateObject Point2 Dim MeasuredDist As Double Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(Point1) MeasuredDist = CMeas.GetMinimumDistance(Point2) If MeasuredDist < SmallestDist Then SmallestDist = MeasuredDist WinHH = HH WinJJ = jj End If Next jj Next HH Point1.Ratio.Value = WinHH Point2.Ratio.Value = WinJJ End Sub","title":"ClosestPoints"},{"location":"DS-CODE/Automation/Color_to_RGB/","text":"VB Function Color_to_RGB(Color As Long) As Variant Dim CurRGB() As Integer ReDim CurRGB(2) CurRGB(0) = Color Mod 256 CurRGB(1) = (Color \\ 256) Mod 256 CurRGB(2) = (Color \\ 256 \\ 256) Mod 256 Color_to_RGB = CurRGB End Function","title":"Color to RGB"},{"location":"DS-CODE/Automation/ContainingPart/","text":"ContainingPart VB Function ContainingPart(ByVal CatObject) Dim found As Boolean Dim Current Set Current = CatObject found = False Do While found = False Set Current = Current.Parent If TypeName(Current) = \"Part\" Then found = True End If Loop Set ContainingPart = Current End Function","title":"ContainingPart"},{"location":"DS-CODE/Automation/ContainingPart/#containingpart","text":"VB Function ContainingPart(ByVal CatObject) Dim found As Boolean Dim Current Set Current = CatObject found = False Do While found = False Set Current = Current.Parent If TypeName(Current) = \"Part\" Then found = True End If Loop Set ContainingPart = Current End Function","title":"ContainingPart"},{"location":"DS-CODE/Automation/CreateAxisAlongCurve/","text":"C# public AxisSystem CreateAxisAlongCurve ( Part Part , HybridShape Curve , HybridShape Point , double AxisRotateAngle ) { HybridShapeFactory hsf = ( HybridShapeFactory ) Part . HybridShapeFactory ; HybridShapeDirection zdir = hsf . AddNewDirection (( Reference ) Part . OriginElements . PlaneXY ); HybridShape zln = hsf . AddNewLinePtDir (( INFITF . Reference ) Point , zdir , - 100 , 500 , false ); zln . Compute (); HybridShape pln = hsf . AddNewPlaneOffsetPt (( Reference ) Part . OriginElements . PlaneXY , ( Reference ) Point ); pln . Compute (); HybridShapeLineTangency tarln = hsf . AddNewLineTangency (( Reference ) Curve , ( Reference ) Point , - 100 , 300 , false ); tarln . Compute (); HybridShapeProject xdirln = hsf . AddNewProject (( Reference ) tarln , ( Reference ) pln ); xdirln . Compute (); xdirln . SolutionType = 0 ; xdirln . Normal = false ; xdirln . SmoothingType = 0 ; xdirln . Direction = zdir ; xdirln . ExtrapolationMode = 0 ; Reference reference1 = Part . CreateReferenceFromObject ( xdirln ); HybridShapeRotate hybridShapeRotate1 = hsf . AddNewEmptyRotate (); hybridShapeRotate1 . ElemToRotate = reference1 ; hybridShapeRotate1 . VolumeResult = false ; hybridShapeRotate1 . RotationType = 0 ; hybridShapeRotate1 . Compute (); hybridShapeRotate1 . Axis = ( Reference ) zln ; hybridShapeRotate1 . AngleValue = AxisRotateAngle ; hybridShapeRotate1 . set_Name ( \"Roatate_ln_\" + Convert . ToString ( AxisRotateAngle )); hybridShapeRotate1 . Compute (); AxisSystem axis = Part . AxisSystems . Add (); axis . OriginType = CATAxisSystemOriginType . catAxisSystemOriginByPoint ; axis . OriginPoint = ( Reference ) Point ; axis . XAxisType = CATAxisSystemAxisType . catAxisSystemAxisSameDirection ; axis . XAxisDirection = ( Reference ) hybridShapeRotate1 ; axis . YAxisType = CATAxisSystemAxisType . catAxisSystemAxisOppositeDirection ; axis . ZAxisType = CATAxisSystemAxisType . catAxisSystemAxisSameDirection ; axis . ZAxisDirection = ( Reference ) zln ; Part . UpdateObject ( axis ); axis . IsCurrent = true ; axis . set_Name ( Point . get_Name ()); Part . UpdateObject ( axis ); return axis ; }","title":"CreateAxisAlongCurve"},{"location":"DS-CODE/Automation/CrossProduct/","text":"VB Function CrossProduct(PtAx As Double, PtAy As Double, PtAz As Double, PtBx As Double, PtBy As Double, PtBz As Double, PtCx As Double, PtCy As Double, PtCz As Double) As Variant Dim Vec1() ReDim Vec1(2) Dim Vec2() ReDim Vec2(2) Vec1(0) = PtAx - PtBx Vec1(1) = PtAy - PtBy Vec1(2) = PtAz - PtBz Vec2(0) = PtCx - PtBx Vec2(1) = PtCy - PtBy Vec2(2) = PtCz - PtBz 'Ax As Double, Ay As Double, Az As Double, Bx As Double, By As Double, Bz As Double Dim CrossArr() ReDim CrossArr(2) CrossArr(0) = Vec1(1) * Vec2(2) - Vec2(1) * Vec1(2) CrossArr(1) = Vec1(2) * Vec2(0) - Vec2(2) * Vec1(0) CrossArr(2) = Vec1(0) * Vec2(1) - Vec2(0) * Vec1(1) CrossProduct = CrossArr End Function","title":"CrossProduct"},{"location":"DS-CODE/Automation/CrvCheck/","text":"VB Function CrvCheck(SampleCrv As Variant) As Boolean On Error GoTo Blast2 Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(SampleCrv) Dim ALen As Double ALen = CMeas.Length CrvCheck = True Exit Function Blast2: CrvCheck = False End Function","title":"CrvCheck"},{"location":"DS-CODE/Automation/CutObjectAndPaste/","text":"Function CutObjectAndPaste(Obj1 As Variant, DestSet As HybridBody) As Variant If MySel.Count <> 0 Then MySel.Clear End If MySel.Add Obj1 MySel.Cut If MySel.Count <> 0 Then MySel.Clear End If MySel.Add DestSet MySel.Paste Dim TempObj Set TempObj = DestSet.HybridShapes.Item(DestSet.HybridShapes.Count) Set CutObjectAndPaste = TempObj End Function Python C#.NET VB.NET CAA","title":"CutObjectAndPaste"},{"location":"DS-CODE/Automation/CutObjectAndPaste/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/CutObjectAndPaste/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/CutObjectAndPaste/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/CutObjectAndPaste/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/DeleteDuplicateHybridShapesInGeomSet/","text":"V5 Public Shared Sub DeleteDuplicateHybridShapesInGeomSet(geom_set As HybridBody, cur_part As Part, cur_HSF As HybridShapeFactory) Dim numb_set As Integer numb_set = geom_set.HybridShapes.Count Dim array_1() ReDim array_1(numb_set - 1) Dim loop1 As Integer For loop1 = 0 To (numb_set - 1) array_1(loop1) = geom_set.HybridShapes.Item(loop1 + 1) Next loop1 Dim loop2 As Integer For loop2 = 0 To (numb_set - 1) Dim compare_obj1 As HybridShape If Microsoft.VisualBasic.Information.IsNothing(array_1(loop2)) = False Then compare_obj1 = array_1(loop2) Dim compare_obj2 As HybridShape Dim loop3 As Integer For loop3 = 0 To (numb_set - 1) If Microsoft.VisualBasic.Information.IsNothing(array_1(loop3)) = False Then compare_obj2 = array_1(loop3) If compare_obj1.Name = compare_obj2.Name Then ElseIf CheckIfTwoObjectsAreDuplicates(compare_obj1, compare_obj2, cur_part, cur_HSF, geom_set) = True Then cur_HSF.DeleteObjectForDatum(compare_obj2) End If End If Next loop3 End If Next loop2 End Sub","title":"DeleteDuplicateHybridShapesInGeomSet"},{"location":"DS-CODE/Automation/DeleteDuplicateHybridShapesInGeomSet/#v5","text":"Public Shared Sub DeleteDuplicateHybridShapesInGeomSet(geom_set As HybridBody, cur_part As Part, cur_HSF As HybridShapeFactory) Dim numb_set As Integer numb_set = geom_set.HybridShapes.Count Dim array_1() ReDim array_1(numb_set - 1) Dim loop1 As Integer For loop1 = 0 To (numb_set - 1) array_1(loop1) = geom_set.HybridShapes.Item(loop1 + 1) Next loop1 Dim loop2 As Integer For loop2 = 0 To (numb_set - 1) Dim compare_obj1 As HybridShape If Microsoft.VisualBasic.Information.IsNothing(array_1(loop2)) = False Then compare_obj1 = array_1(loop2) Dim compare_obj2 As HybridShape Dim loop3 As Integer For loop3 = 0 To (numb_set - 1) If Microsoft.VisualBasic.Information.IsNothing(array_1(loop3)) = False Then compare_obj2 = array_1(loop3) If compare_obj1.Name = compare_obj2.Name Then ElseIf CheckIfTwoObjectsAreDuplicates(compare_obj1, compare_obj2, cur_part, cur_HSF, geom_set) = True Then cur_HSF.DeleteObjectForDatum(compare_obj2) End If End If Next loop3 End If Next loop2 End Sub","title":"V5"},{"location":"DS-CODE/Automation/DeleteHSObjectsArray/","text":"Sub DeleteHSObjectsArray(InputArray As Variant) If UBound(InputArray) = 0 Then Exit Sub End If For X = 0 To UBound(InputArray) - 1 MyHSFactory.DeleteObjectForDatum InputArray(X) Next X End Sub Python C#.NET VB.NET CAA","title":"DeleteHSObjectsArray"},{"location":"DS-CODE/Automation/DeleteHSObjectsArray/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/DeleteHSObjectsArray/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/DeleteHSObjectsArray/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/DeleteHSObjectsArray/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/DeleteNonSurfaceFromArray/","text":"Sub DeleteNonSurfaceFromArray(InputObj As Variant) On Error GoTo KBlast Dim KMeas Set KMeas = TheSPAWorkbench.GetMeasurable(InputObj) If KMeas.GeometryName <> CatMeasurableSurface Then MyHSFactory.DeleteObjectForDatum InputObj End If Exit Sub KBlast: If MySel.Count <> 0 Then MySel.Clear End If MySel.Add InputObj MySel.Delete End Sub Python C#.NET VB.NET CAA","title":"DeleteNonSurfaceFromArray"},{"location":"DS-CODE/Automation/DeleteNonSurfaceFromArray/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/DeleteNonSurfaceFromArray/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/DeleteNonSurfaceFromArray/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/DeleteNonSurfaceFromArray/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/DeleteNonSurfacesFromGeomSet/","text":"Sub DeleteNonSurfacesFromGeomSet(InputHS As Variant) Dim ObjArr() ReDim ObjArr(InputHS.HybridShapes.Count - 1) For X = 0 To InputHS.HybridShapes.Count - 1 Set ObjArr(X) = InputHS.HybridShapes.Item(X + 1) Next For Inputcounter = 1 To UBound(ObjArr) Dim KObj Set KObj = ObjArr(Inputcounter - 1) Dim KMeas Set KMeas = TheSPAWorkbench.GetMeasurable(KObj) If KMeas.GeometryName <> CatMeasurableSurface Then MyHSFactory.DeleteObjectForDatum KObj End If Next Exit Sub End Sub Python C#.NET VB.NET CAA","title":"DeleteNonSurfacesFromGeomSet"},{"location":"DS-CODE/Automation/DeleteNonSurfacesFromGeomSet/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/DeleteNonSurfacesFromGeomSet/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/DeleteNonSurfacesFromGeomSet/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/DeleteNonSurfacesFromGeomSet/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/DeleteObject/","text":"V5 VBA Python C#.NET VB.NET CAA void DeleteObject ( CATISpecObject_var ispiObject ) { CATISpecObject_var spiObj = ispiObject ; CATTry { CATIDescendants_var spiDescendants = spiObj -> GetFather (); if ( spiDescendants != NULL_var ) { spiDescendants -> RemoveChild ( spiObj ); } } CATCatch ( CATMfErrUpdate , error ) { Flush ( error ); } CATEndTry ; } V6 VBA Python C#.NET VB.NET CAA","title":"DeleteObject"},{"location":"DS-CODE/Automation/DeleteObject/#v5","text":"","title":"V5"},{"location":"DS-CODE/Automation/DeleteObject/#vba","text":"","title":"VBA"},{"location":"DS-CODE/Automation/DeleteObject/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/DeleteObject/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/DeleteObject/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/DeleteObject/#caa","text":"void DeleteObject ( CATISpecObject_var ispiObject ) { CATISpecObject_var spiObj = ispiObject ; CATTry { CATIDescendants_var spiDescendants = spiObj -> GetFather (); if ( spiDescendants != NULL_var ) { spiDescendants -> RemoveChild ( spiObj ); } } CATCatch ( CATMfErrUpdate , error ) { Flush ( error ); } CATEndTry ; }","title":"CAA"},{"location":"DS-CODE/Automation/DeleteObject/#v6","text":"","title":"V6"},{"location":"DS-CODE/Automation/DeleteObject/#vba_1","text":"","title":"VBA"},{"location":"DS-CODE/Automation/DeleteObject/#python_1","text":"","title":"Python"},{"location":"DS-CODE/Automation/DeleteObject/#cnet_1","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/DeleteObject/#vbnet_1","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/DeleteObject/#caa_1","text":"","title":"CAA"},{"location":"DS-CODE/Automation/DistanceFromEquationOfLine/","text":"Function DistanceFromEquationOfLine(LineSlope As Variant, Line_Y_Intersept As Variant, Pt_X_Coord As Double, Pt_Y_Coord As Double) As Double DistanceFromEquationOfLine = Abs(Pt_Y_Coord - (LineSlope * Pt_X_Coord) - Line_Y_Intersept) / Sqr((LineSlope * LineSlope) + 1) End Function Python C#.NET VB.NET CAA","title":"DistanceFromEquationOfLine"},{"location":"DS-CODE/Automation/DistanceFromEquationOfLine/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/DistanceFromEquationOfLine/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/DistanceFromEquationOfLine/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/DistanceFromEquationOfLine/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/DoArcWallsIntersect/","text":"Function DoArcWallsIntersect(Wall1 As ArcWall, Wall2 As ArcWall, constSet As HybridBody) As Boolean On Error GoTo Blast Dim W1OGS As OrderedGeometricalSet Set W1OGS = Wall1 Dim W2OGS As OrderedGeometricalSet Set W2OGS = Wall2 Dim W1Body As Body Set W1Body = W1OGS.Bodies.Item(\"Envelope Body\") Dim W2Body As Body Set W2Body = W2OGS.Bodies.Item(\"Envelope Body\") Dim W1Ext 'As HybridShapeExtract Set W1Ext = MyHSFactory.AddNewExtract(MyPart.CreateReferenceFromObject(W1Body)) constSet.AppendHybridShape W1Ext IsUpdatable W1Ext Dim W2Ext 'As HybridShapeExtract Set W2Ext = MyHSFactory.AddNewExtract(MyPart.CreateReferenceFromObject(W2Body)) constSet.AppendHybridShape W2Ext IsUpdatable W2Ext If CheckIntersection(W1Ext, W2Ext) Then DoArcWallsIntersect = True Else DoArcWallsIntersect = False End If MyHSFactory.DeleteObjectForDatum W1Ext MyHSFactory.DeleteObjectForDatum W2Ext Exit Function Blast: DoArcWallsIntersect = False End Function Python C#.NET VB.NET CAA","title":"DoArcWallsIntersect"},{"location":"DS-CODE/Automation/DoArcWallsIntersect/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/DoArcWallsIntersect/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/DoArcWallsIntersect/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/DoArcWallsIntersect/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/DotProduct/","text":"Function DotProduct(U, V) temp = U(0) * V(0) + U(1) * V(1) + U(2) * V(2) DotProduct = temp End Function Python C#.NET VB.NET CAA","title":"DotProduct"},{"location":"DS-CODE/Automation/DotProduct/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/DotProduct/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/DotProduct/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/DotProduct/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/EmailNotify/","text":"Sub EmailNotify(FromEmailAddress As String, ToEmailAddress As String, ServerName As String, SubjectStr As String, BodyStr As String) On Error GoTo blast Set objEmail = CreateObject(\"CDO.Message\") objEmail.From = FromEmailAddress objEmail.To = ToEmailAddress objEmail.Subject = SubjectStr objEmail.Textbody = BodyStr objEmail.Configuration.Fields.Item _ (\"http://schemas.microsoft.com/cdo/configuration/sendusing\") = 2 objEmail.Configuration.Fields.Item _ (\"http://schemas.microsoft.com/cdo/configuration/smtpserver\") = _ ServerName objEmail.Configuration.Fields.Item _ (\"http://schemas.microsoft.com/cdo/configuration/smtpserverport\") = 25 objEmail.Configuration.Fields.Update objEmail.Send Exit Sub blast: End Sub Python C#.NET VB.NET CAA","title":"EmailNotify"},{"location":"DS-CODE/Automation/EmailNotify/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/EmailNotify/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/EmailNotify/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/EmailNotify/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/ExistsInArray/","text":"Function ExistsInArray(CurName As String, NameArray As Variant) As Boolean If UBound(NameArray) = 0 Then ExistsInArray = False Exit Function End If For X = 0 To UBound(NameArray) If IsEmpty(NameArray(X)) = False Then If CurName = NameArray(X) Then ExistsInArray = True Exit Function End If End If Next X ExistsInArray = False End Function","title":"ExistsInArray"},{"location":"DS-CODE/Automation/ExportPtCoordToXLS/","text":"VBA Sub ExportPtCoordToXLS(CurPtObj As Variant) If IsUpdatable(CurPtObj) Then Dim CIMeas Set CIMeas = TheSPAWorkbench.GetMeasurable(CurPtObj) Dim CICoords() ReDim CICoords(2) CIMeas.GetPoint CICoords CurCells(CSVCounter, 1).Value = CurPtObj.Name CurCells(CSVCounter, 2).Value = CICoords(0) CurCells(CSVCounter, 3).Value = CICoords(1) CurCells(CSVCounter, 4).Value = CICoords(2) CSVCounter = CSVCounter + 1 End If End Sub VB.NET Public Shared Sub ExportPtCoordToXLS(CurPtObj As Object, ByVal CurCells As Object, ByVal CSVCounter As Integer, mypart As Part) If IsUpdatable(CurPtObj, mypart) Then Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CIMeas CIMeas = TheSPAWorkbench.GetMeasurable(CurPtObj) Dim CICoords() ReDim CICoords(2) CIMeas.GetPoint(CICoords) CurCells(CSVCounter, 1).Value = CurPtObj.Name CurCells(CSVCounter, 2).Value = CICoords(0) CurCells(CSVCounter, 3).Value = CICoords(1) CurCells(CSVCounter, 4).Value = CICoords(2) CSVCounter = CSVCounter + 1 End If End Sub","title":"ExportPtCoordToXLS"},{"location":"DS-CODE/Automation/ExportPtCoordToXLS/#vba","text":"Sub ExportPtCoordToXLS(CurPtObj As Variant) If IsUpdatable(CurPtObj) Then Dim CIMeas Set CIMeas = TheSPAWorkbench.GetMeasurable(CurPtObj) Dim CICoords() ReDim CICoords(2) CIMeas.GetPoint CICoords CurCells(CSVCounter, 1).Value = CurPtObj.Name CurCells(CSVCounter, 2).Value = CICoords(0) CurCells(CSVCounter, 3).Value = CICoords(1) CurCells(CSVCounter, 4).Value = CICoords(2) CSVCounter = CSVCounter + 1 End If End Sub","title":"VBA"},{"location":"DS-CODE/Automation/ExportPtCoordToXLS/#vbnet","text":"Public Shared Sub ExportPtCoordToXLS(CurPtObj As Object, ByVal CurCells As Object, ByVal CSVCounter As Integer, mypart As Part) If IsUpdatable(CurPtObj, mypart) Then Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CIMeas CIMeas = TheSPAWorkbench.GetMeasurable(CurPtObj) Dim CICoords() ReDim CICoords(2) CIMeas.GetPoint(CICoords) CurCells(CSVCounter, 1).Value = CurPtObj.Name CurCells(CSVCounter, 2).Value = CICoords(0) CurCells(CSVCounter, 3).Value = CICoords(1) CurCells(CSVCounter, 4).Value = CICoords(2) CSVCounter = CSVCounter + 1 End If End Sub","title":"VB.NET"},{"location":"DS-CODE/Automation/ExportToPDF/","text":"Sub PrintToPDF(SaveFolder As String) Dim oDrawing As DrawingDocument Set oDrawing = CATIA.ActiveDocument Dim SaveFile As String Set SaveFile = SaveFolder & oDrawing.Name & \".pdf\" oDrawing.ExportData SaveFile, \"pdf\" End Sub","title":"ExportToPDF"},{"location":"DS-CODE/Automation/FilletCheck/","text":"Function FilletCheck(FilletObj As Variant, Orientation1, Orientation2, TOri1, TOri2) As Boolean On Error GoTo Blast3 Dim MyPart As Part Set MyPart = CATIA.ActiveDocument.Part FilletObj.TangentOrientation1 = TOri1 FilletObj.TangentOrientation2 = TOri2 FilletObj.Orientation1 = Orientation1 FilletObj.Orientation2 = Orientation2 MyPart.UpdateObject FilletObj FilletCheck = True Exit Function Blast3: FilletCheck = False End Function","title":"FilletCheck"},{"location":"DS-CODE/Automation/FilletStabilizer/","text":"Function FilletStabilizer(CurveBefore As Variant, CurveAfter As Variant, InPlane As Variant, FilletRad As Double, GeomSet As HybridBody, SurfName As String) As Boolean FilletStabilizer = True Dim MyPart As Part Set MyPart = CATIA.ActiveDocument.Part Dim MyHSFactory As HybridShapeFactory Set MyHSFactory = MyPart.HybridShapeFactory Dim FilletObj As HybridShapeCircleBitangentRadius Set FilletObj = MyHSFactory.AddNewCircleBitangentRadius(CurveBefore, CurveAfter, Nothing, FilletRad, 1, 1) FilletObj.DiscriminationIndex = 1 'DestSet.AppendHybridShape FilletObj FilletObj.BeginOfCircle = 2 FilletObj.SetLimitation 2 FilletObj.TrimMode = 0 'FilletObj.EndAngle = 180 'FilletObj.StartAngle = 0 GeomSet.AppendHybridShape FilletObj FilletObj.Name = SurfName & \"Fillet_edge_line\" Dim FC As Boolean FC = False Dim SuperMatrix ReDim SuperMatrix(15) SuperMatrix(0) = Array(1, 1, 1, 1) SuperMatrix(1) = Array(-1, 1, 1, 1) SuperMatrix(2) = Array(1, -1, 1, 1) SuperMatrix(3) = Array(-1, -1, 1, 1) ' SuperMatrix(4) = Array(1, 1, -1, 1) SuperMatrix(5) = Array(-1, 1, -1, 1) SuperMatrix(6) = Array(1, -1, -1, 1) SuperMatrix(7) = Array(-1, -1, -1, 1) ' SuperMatrix(8) = Array(1, 1, 1, -1) SuperMatrix(9) = Array(-1, 1, 1, -1) SuperMatrix(10) = Array(1, -1, 1, -1) SuperMatrix(11) = Array(-1, -1, 1, 1) ' SuperMatrix(12) = Array(1, 1, -1, -1) SuperMatrix(13) = Array(-1, 1, -1, -1) SuperMatrix(14) = Array(1, -1, -1, -1) SuperMatrix(15) = Array(-1, -1, -1, -1) Dim FCCounter As Integer FCCounter = 0 While FC = False And FCCounter < 16 FC = FilletCheck(FilletObj, SuperMatrix(FCCounter)(0), SuperMatrix(FCCounter)(1),SuperMatrix(FCCounter)(2), SuperMatrix(FCCounter)(3)) FCCounter = FCCounter + 1 Wend If FC = False Then FilletStabilizer = False Exit Function End If 'FilletObj.Support = inplane MyPart.InWorkObject = FilletObj MyPart.UpdateObject FilletObj End Function","title":"FilletStabilizer"},{"location":"DS-CODE/Automation/FindClosestObjectInGeomSet/","text":"Function FindClosestObjectInGeomSet(GeomSet As HybridBody, CurrentPt As Variant) As Variant Dim WinningDist As Double WinningDist = 1000000000 Dim CMeas 'As Measurable Set CMeas = theSPAWorkbench.GetMeasurable(CurrentPt) For xxx = 1 To GeomSet.HybridShapes.Count Dim CurLine 'As HybridShape Set CurLine = GeomSet.HybridShapes.Item(xxx) Dim TempDist As Double TempDist = CMeas.GetMinimumDistance(CurLine) If TempDist < WinningDist Then WinningDist = TempDist Set winningObj = CurLine End If Next xxx Set FindClosestObjectInGeomSet = winningObj End Function","title":"FindClosestObjectInGeomSet"},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/","text":"V5 VBA Python C#.NET VB.NET Public Shared Function FindObjByStringInGeomSet(GeoSet As HybridBody, StrSeg As String) As HybridShape Dim numb_set As Integer numb_set = GeoSet.HybridShapes.Count Dim loop_x As Integer For loop_x = 1 To numb_set If InStr(GeoSet.HybridShapes.Item(loop_x).Name, StrSeg) <> 0 Then FindObjByStringInGeomSet = GeoSet.HybridShapes.Item(loop_x) loop_x = numb_set End If Next loop_x End Function V6 VBA Python C#.NET VB.NET C++ /** * \u5728\u51e0\u4f55\u56fe\u5f62\u96c6\u4e2d\u6839\u636e\u540d\u79f0\u67e5\u627e\u7269\u4f53 * @param iGeometricalSets * \u96c6\u5408\u56fe\u5f62\u96c6 * @param iString * \u7279\u5f81\u540d\u79f0 */ HRESULT CATObjectModelerClass::FindObjByStringInGeomSet ( CATIPartRequest * piPartRequest , CATUnicodeString iInputName , CATLISTV ( CATBaseUnknown_var ) & pResultSurfaceListV ) { HRESULT hr = S_FALSE ; CATLISTV ( CATBaseUnknown_var ) SurfacicSetList ; piPartRequest -> GetSurfBodies ( \"\" , SurfacicSetList ); cout << \"Hybridbody count is : \" << SurfacicSetList . Size () << \"!\" << endl ; int size = SurfacicSetList . Size (); for ( int i = 1 ; i <= size ; i ++ ) { CATBaseUnknown_var spCurrentSet = SurfacicSetList [ i ]; if ( spCurrentSet == NULL_var ){ cout << \"Set List \" << i << \" is NULL !\" << endl ; return E_FAIL ; } CATIAlias_var spiAlias = spCurrentSet ; CATUnicodeString stdName = spiAlias -> GetAlias (); if ( stdName == iInputName ) { CATIBodyRequest * piBodyRequestOnCurrentSet = NULL ; hr = spCurrentSet -> QueryInterface ( IID_CATIBodyRequest , ( void ** ) & piBodyRequestOnCurrentSet ); if ( SUCCEEDED ( hr ) ) { hr = piBodyRequestOnCurrentSet -> GetResults ( \"\" , pResultSurfaceListV ); if ( FAILED ( hr ) || pResultSurfaceListV . Size () <= 0 ) { cout << \"Geometrical set.1 Surface Element Number is 0 ! error !\" << endl ; hr = E_FAIL ; } piBodyRequestOnCurrentSet -> Release (); piBodyRequestOnCurrentSet = NULL ; } break ; } } return S_OK ; }","title":"FindObjByStringInGeomSet"},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#v5","text":"","title":"V5"},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#vba","text":"","title":"VBA"},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#vbnet","text":"Public Shared Function FindObjByStringInGeomSet(GeoSet As HybridBody, StrSeg As String) As HybridShape Dim numb_set As Integer numb_set = GeoSet.HybridShapes.Count Dim loop_x As Integer For loop_x = 1 To numb_set If InStr(GeoSet.HybridShapes.Item(loop_x).Name, StrSeg) <> 0 Then FindObjByStringInGeomSet = GeoSet.HybridShapes.Item(loop_x) loop_x = numb_set End If Next loop_x End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#v6","text":"","title":"V6"},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#vba_1","text":"","title":"VBA"},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#python_1","text":"","title":"Python"},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#cnet_1","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#vbnet_1","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#c","text":"/** * \u5728\u51e0\u4f55\u56fe\u5f62\u96c6\u4e2d\u6839\u636e\u540d\u79f0\u67e5\u627e\u7269\u4f53 * @param iGeometricalSets * \u96c6\u5408\u56fe\u5f62\u96c6 * @param iString * \u7279\u5f81\u540d\u79f0 */ HRESULT CATObjectModelerClass::FindObjByStringInGeomSet ( CATIPartRequest * piPartRequest , CATUnicodeString iInputName , CATLISTV ( CATBaseUnknown_var ) & pResultSurfaceListV ) { HRESULT hr = S_FALSE ; CATLISTV ( CATBaseUnknown_var ) SurfacicSetList ; piPartRequest -> GetSurfBodies ( \"\" , SurfacicSetList ); cout << \"Hybridbody count is : \" << SurfacicSetList . Size () << \"!\" << endl ; int size = SurfacicSetList . Size (); for ( int i = 1 ; i <= size ; i ++ ) { CATBaseUnknown_var spCurrentSet = SurfacicSetList [ i ]; if ( spCurrentSet == NULL_var ){ cout << \"Set List \" << i << \" is NULL !\" << endl ; return E_FAIL ; } CATIAlias_var spiAlias = spCurrentSet ; CATUnicodeString stdName = spiAlias -> GetAlias (); if ( stdName == iInputName ) { CATIBodyRequest * piBodyRequestOnCurrentSet = NULL ; hr = spCurrentSet -> QueryInterface ( IID_CATIBodyRequest , ( void ** ) & piBodyRequestOnCurrentSet ); if ( SUCCEEDED ( hr ) ) { hr = piBodyRequestOnCurrentSet -> GetResults ( \"\" , pResultSurfaceListV ); if ( FAILED ( hr ) || pResultSurfaceListV . Size () <= 0 ) { cout << \"Geometrical set.1 Surface Element Number is 0 ! error !\" << endl ; hr = E_FAIL ; } piBodyRequestOnCurrentSet -> Release (); piBodyRequestOnCurrentSet = NULL ; } break ; } } return S_OK ; }","title":"C++"},{"location":"DS-CODE/Automation/FixInstanceFactory/","text":"Sub FixInstanceFactory(NameOfReference As String, NameOfDocument As String) On Error GoTo blast InstFactory.BeginInstanceFactory NameOfReference, NameOfDocument Exit Sub blast: InstFactory.EndInstanceFactory InstFactory.BeginInstanceFactory NameOfReference, NameOfDocument End Sub","title":"FixInstanceFactory"},{"location":"DS-CODE/Automation/FolderVerify/","text":"Function FolderVerify(curFolderStr As String) As Boolean On Error GoTo blast HHH = FS.CreateFolder(curFolderStr) FolderVerify = True Exit Function blast: FolderVerify = False End Function","title":"FolderVerify"},{"location":"DS-CODE/Automation/ForceColorArray/","text":"Sub ForceColorArray(InputArray As Variant, R As Integer, G As Integer, B As Integer, LineTypeNo As Integer, PointTypeNo As Integer, ThicknessNo As Integer) Dim VizProp As VisPropertySet Set VizProp = MySel.VisProperties If MySel.Count <> 0 Then MySel.Clear End If For gg = 0 To UBound(InputArray) - 1 MySel.Add InputArray(gg) Next gg If R <> 1000 Or G <> 1000 Or B <> 1000 Then VizProp.SetVisibleColor R, G, B, 1 End If If LineTypeNo <> 1000 Then VizProp.SetVisibleLineType LineTypeNo, 1 End If If PointTypeNo <> 1000 Then VizProp.SetSymbolType PointTypeNo End If If ThicknessNo <> 1000 Then VizProp.SetVisibleWidth ThicknessNo, 1 End If MySel.Clear End Sub","title":"ForceColorArray"},{"location":"DS-CODE/Automation/ForceColorArrayUgly/","text":"Sub ForceColorArrayUgly(InputArray As Variant, R As Integer, G As Integer, B As Integer, LineTypeNo As Integer, PointTypeNo As Integer, ThicknessNo As Integer) Dim VizProp As VisPropertySet Set VizProp = MySel.VisProperties If MySel.Count <> 0 Then MySel.Clear End If For gg = 0 To UBound(InputArray) - 1 'StatusBarShort gg, UBound(InputArray) - 1, \"Coloring Elements... \" MySel.Add InputArray(gg) If R <> 1000 Or G <> 1000 Or B <> 1000 Then VizProp.SetVisibleColor R, G, B, 1 End If If LineTypeNo <> 1000 Then VizProp.SetVisibleLineType LineTypeNo, 1 End If If PointTypeNo <> 1000 Then VizProp.SetSymbolType PointTypeNo End If If ThicknessNo <> 1000 Then VizProp.SetVisibleWidth ThicknessNo, 1 End If MySel.Clear Next gg End Sub","title":"ForceColorArrayUgly"},{"location":"DS-CODE/Automation/ForceColorObjUgly/","text":"Sub ForceColorObjUgly(InputObj As Variant, R As Integer, G As Integer, B As Integer, LineTypeNo As Integer, PointTypeNo As Integer, ThicknessNo As Integer, TransparencyVal as Integer) Dim VizProp As VisPropertySet Set VizProp = MySel.VisProperties If MySel.Count <> 0 Then MySel.Clear End If MySel.Add InputObj If R <> 1000 Or G <> 1000 Or B <> 1000 Then VizProp.SetVisibleColor R, G, B, 1 End If If LineTypeNo <> 1000 Then VizProp.SetVisibleLineType LineTypeNo, 1 End If If PointTypeNo <> 1000 Then VizProp.SetSymbolType PointTypeNo End If If ThicknessNo <> 1000 Then VizProp.SetVisibleWidth ThicknessNo, 1 End If If TransparencyVal <> 1000 Then VizProp.SetVisibleOpacity TransparencyVal, 1 End If MySel.Clear End Sub","title":"ForceColorObjUgly"},{"location":"DS-CODE/Automation/FurthestPoints/","text":"Function FurthestPoints(Point1A As Variant, Point2A As Variant, Point1B As Variant) As Variant Dim SmallestDist As Double SmallestDist = 0 Dim WinHH, WinJJ As Integer WinHH = 0: WinJJ = 0 CATIA.ActiveDocument.Part.UpdateObject Point1A CATIA.ActiveDocument.Part.UpdateObject Point2A Dim MeasuredDist() As Double ReDim MeasuredDist(1) Dim CMeas1 Set CMeas1 = TheSPAWorkbench.GetMeasurable(Point1A) MeasuredDist(0) = CMeas1.GetMinimumDistance(Point1B) Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(Point2A) MeasuredDist(1) = CMeas2.GetMinimumDistance(Point1B) For cM = 0 To 1 If MeasuredDist(cM) > SmallestDist Then SmallestDist = MeasuredDist(cM) WinNum = cM End If Next cM If WinNum = 0 Then Set FurthestPoints = Point1A ElseIf WinNum = 1 Then Set FurthestPoints = Point2A End If End Function","title":"FurthestPoints"},{"location":"DS-CODE/Automation/GenerateCATPartFromProduct/","text":"Sub GenerateCATPartFromProduct() Dim ActDoc As ProductDocument Set ActDoc = CATIA.ActiveDocument Dim MySel As Selection Set MySel = CATIA.ActiveDocument.Selection MySel.Add ActDoc.Product '.Products.Item(1) CATIA.RefreshDisplay = True CATIA.StartCommand \"Generate CATPart from Product...\" CATIA.RefreshDisplay = True Dim PauseTime, Start, Finish, TotalTime PauseTime = 0.5 Start = Timer Do While Timer < Start + PauseTime DoEvents Loop Finish = Timer TotalTime = Finish - Start CATIA.RefreshDisplay = True SendKeys \"{Enter}\", True End Sub","title":"GenerateCATPartFromProduct"},{"location":"DS-CODE/Automation/GenerateLengthParametersFromDblArray/","text":"Function GenerateLengthParametersFromDblArray(ParmList As Parameters, DblArr As Variant) As Variant 'Default units are mm. Dim ParmArr() ReDim ParmArr(UBound(DblArr)) For X = 0 To UBound(DblArr) Set ParmArr(X) = ParmList.CreateDimension(\"STD_Rad\" & Format(X, \"00\"), \"LENGTH\", DblArr(X)) Next X GenerateLengthParametersFromDblArray = ParmArr End Function","title":"GenerateLengthParametersFromDblArray"},{"location":"DS-CODE/Automation/GeneratePublication/","text":"Function GeneratePublication(CurPart As Part, CurObj As Variant) As Publication Dim GBool As Boolean GBool = False Dim CurSel Set CurSel = CurObj Dim partDocument1 As PartDocument Set partDocument1 = AvailDocs.Item(CurPart.Name & \".CATPart\") Dim product1 As Product Set product1 = partDocument1.GetItem(CurPart.Name) Dim reference1 As Reference Set reference1 = product1.CreateReferenceFromName(CurPart.Name & \"/!\" & CurSel.Name) '\"T01_DRV/!Plane.1\") Dim Pubs As Publications Set Pubs = product1.Publications For Z = 1 To Pubs.Count If Pubs.Item(Z).Name = CurSel.Name Then GBool = True End If Next Z If GBool = False Then Dim publication1 As Publication Set publication1 = Pubs.Add(CurSel.Name) Pubs.SetDirect CurSel.Name, reference1 End If Set GeneratePublication = publication1 End Function","title":"GeneratePublication"},{"location":"DS-CODE/Automation/GenerateRealParametersFromDblArray/","text":"Function GenerateRealParametersFromDblArray(ParmList As Parameters, DblArr As Variant) As Variant Dim ParmArr() ReDim ParmArr(UBound(DblArr)) For X = 0 To UBound(DblArr) Set ParmArr(X) = ParmList.CreateReal(\"STD_Rad\" & Format(X, \"00\"), DblArr(X)) Next X GenerateRealParametersFromDblArray = ParmArr End Function","title":"GenerateRealParametersFromDblArray"},{"location":"DS-CODE/Automation/GetAcuteAngle/","text":"VBA Function GetAcuteAngle(Line1 As Variant, Line2 As Variant) As Double Dim AMeas Set AMeas = TheSPAWorkBench.GetMeasurable(Line1) Dim AAng As Double AAng = AMeas.GetAngleBetween(Line2) If AAng > 135 Then GetAcuteAngle = 180 - AAng Else GetAcuteAngle = AAng End If End Function VB.NET Public Shared Function GetAcuteAngle(objA As Object, objB As Object) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim AMeas As Measurable AMeas = TheSPAWorkbench.GetMeasurable(objA) ' On Error Resume Next Dim AAng As Double AAng = AMeas.GetAngleBetween(objB) If AAng > 135 Then GetAcuteAngle = 180 - AAng Else GetAcuteAngle = AAng End If End Function","title":"GetAcuteAngle"},{"location":"DS-CODE/Automation/GetAcuteAngle/#vba","text":"Function GetAcuteAngle(Line1 As Variant, Line2 As Variant) As Double Dim AMeas Set AMeas = TheSPAWorkBench.GetMeasurable(Line1) Dim AAng As Double AAng = AMeas.GetAngleBetween(Line2) If AAng > 135 Then GetAcuteAngle = 180 - AAng Else GetAcuteAngle = AAng End If End Function","title":"VBA"},{"location":"DS-CODE/Automation/GetAcuteAngle/#vbnet","text":"Public Shared Function GetAcuteAngle(objA As Object, objB As Object) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim AMeas As Measurable AMeas = TheSPAWorkbench.GetMeasurable(objA) ' On Error Resume Next Dim AAng As Double AAng = AMeas.GetAngleBetween(objB) If AAng > 135 Then GetAcuteAngle = 180 - AAng Else GetAcuteAngle = AAng End If End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/GetAllPlnFromAxis/","text":"C#.NET public void GetAllPlnFromAxis ( Part part , MECMOD . AxisSystem refaxis , out HybridShape xypln , out HybridShape yzpln , out HybridShape zxpln ) { HybridShapeFactory hsf = ( HybridShapeFactory ) part . HybridShapeFactory ; object [] vectorXCoord = new object [ 3 ]; object [] vectorYCoord = new object [ 3 ]; object [] vectorZCoord = new object [ 3 ]; object [] vectorOCoord = new object [ 3 ]; refaxis . GetOrigin ( vectorOCoord ); refaxis . GetXAxis ( vectorXCoord ); refaxis . GetYAxis ( vectorYCoord ); refaxis . GetZAxis ( vectorZCoord ); HybridShapePointCoord opt = hsf . AddNewPointCoord ( Convert . ToDouble ( vectorOCoord [ 0 ]), Convert . ToDouble ( vectorOCoord [ 1 ]), Convert . ToDouble ( vectorOCoord [ 2 ])); opt . Compute (); HybridShapeDirection xdirl = hsf . AddNewDirectionByCoord ( Convert . ToDouble ( vectorXCoord [ 0 ]), Convert . ToDouble ( vectorXCoord [ 1 ]), Convert . ToDouble ( vectorXCoord [ 2 ])); xdirl . Compute (); HybridShapeDirection ydirl = hsf . AddNewDirectionByCoord ( Convert . ToDouble ( vectorYCoord [ 0 ]), Convert . ToDouble ( vectorYCoord [ 1 ]), Convert . ToDouble ( vectorYCoord [ 2 ])); ydirl . Compute (); HybridShapeDirection zdirl = hsf . AddNewDirectionByCoord ( Convert . ToDouble ( vectorZCoord [ 0 ]), Convert . ToDouble ( vectorZCoord [ 1 ]), Convert . ToDouble ( vectorZCoord [ 2 ])); zdirl . Compute (); HybridShapeLinePtDir xln = hsf . AddNewLinePtDir (( Reference ) opt , xdirl , 10 , - 20 , false ); xln . Compute (); HybridShapeLinePtDir yln = hsf . AddNewLinePtDir (( Reference ) opt , ydirl , 10 , - 20 , false ); yln . Compute (); HybridShapeLinePtDir zln = hsf . AddNewLinePtDir (( Reference ) opt , zdirl , 10 , - 20 , false ); zln . Compute (); xypln = hsf . AddNewPlaneNormal (( Reference ) zln , ( Reference ) opt ); xypln . Compute (); yzpln = hsf . AddNewPlaneNormal (( Reference ) xln , ( Reference ) opt ); yzpln . Compute (); zxpln = hsf . AddNewPlaneNormal (( Reference ) yln , ( Reference ) opt ); zxpln . Compute (); //HybridShapePlaneNormal xypln = hsf.AddNewPlaneNormal((Reference)zln, (Reference)opt); xypln.Compute(); //HybridShapePlaneNormal yzpln = hsf.AddNewPlaneNormal((Reference)xln, (Reference)opt); yzpln.Compute(); //HybridShapePlaneNormal zxpln = hsf.AddNewPlaneNormal((Reference)yln, (Reference)opt); zxpln.Compute(); //--------------------------- }","title":"GetAllPlnFromAxis"},{"location":"DS-CODE/Automation/GetAllPlnFromAxis/#cnet","text":"public void GetAllPlnFromAxis ( Part part , MECMOD . AxisSystem refaxis , out HybridShape xypln , out HybridShape yzpln , out HybridShape zxpln ) { HybridShapeFactory hsf = ( HybridShapeFactory ) part . HybridShapeFactory ; object [] vectorXCoord = new object [ 3 ]; object [] vectorYCoord = new object [ 3 ]; object [] vectorZCoord = new object [ 3 ]; object [] vectorOCoord = new object [ 3 ]; refaxis . GetOrigin ( vectorOCoord ); refaxis . GetXAxis ( vectorXCoord ); refaxis . GetYAxis ( vectorYCoord ); refaxis . GetZAxis ( vectorZCoord ); HybridShapePointCoord opt = hsf . AddNewPointCoord ( Convert . ToDouble ( vectorOCoord [ 0 ]), Convert . ToDouble ( vectorOCoord [ 1 ]), Convert . ToDouble ( vectorOCoord [ 2 ])); opt . Compute (); HybridShapeDirection xdirl = hsf . AddNewDirectionByCoord ( Convert . ToDouble ( vectorXCoord [ 0 ]), Convert . ToDouble ( vectorXCoord [ 1 ]), Convert . ToDouble ( vectorXCoord [ 2 ])); xdirl . Compute (); HybridShapeDirection ydirl = hsf . AddNewDirectionByCoord ( Convert . ToDouble ( vectorYCoord [ 0 ]), Convert . ToDouble ( vectorYCoord [ 1 ]), Convert . ToDouble ( vectorYCoord [ 2 ])); ydirl . Compute (); HybridShapeDirection zdirl = hsf . AddNewDirectionByCoord ( Convert . ToDouble ( vectorZCoord [ 0 ]), Convert . ToDouble ( vectorZCoord [ 1 ]), Convert . ToDouble ( vectorZCoord [ 2 ])); zdirl . Compute (); HybridShapeLinePtDir xln = hsf . AddNewLinePtDir (( Reference ) opt , xdirl , 10 , - 20 , false ); xln . Compute (); HybridShapeLinePtDir yln = hsf . AddNewLinePtDir (( Reference ) opt , ydirl , 10 , - 20 , false ); yln . Compute (); HybridShapeLinePtDir zln = hsf . AddNewLinePtDir (( Reference ) opt , zdirl , 10 , - 20 , false ); zln . Compute (); xypln = hsf . AddNewPlaneNormal (( Reference ) zln , ( Reference ) opt ); xypln . Compute (); yzpln = hsf . AddNewPlaneNormal (( Reference ) xln , ( Reference ) opt ); yzpln . Compute (); zxpln = hsf . AddNewPlaneNormal (( Reference ) yln , ( Reference ) opt ); zxpln . Compute (); //HybridShapePlaneNormal xypln = hsf.AddNewPlaneNormal((Reference)zln, (Reference)opt); xypln.Compute(); //HybridShapePlaneNormal yzpln = hsf.AddNewPlaneNormal((Reference)xln, (Reference)opt); yzpln.Compute(); //HybridShapePlaneNormal zxpln = hsf.AddNewPlaneNormal((Reference)yln, (Reference)opt); zxpln.Compute(); //--------------------------- }","title":"C#.NET"},{"location":"DS-CODE/Automation/GetAngle/","text":"VB.NET Public Shared Function GetAngle(Line1 As Object, Line2 As Object) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim AMeas AMeas = TheSPAWorkbench.GetMeasurable(Line1) 'On Error Resume Next Dim AAng As Double AAng = AMeas.GetAngleBetween(Line2) If AAng < 180 Then GetAngle = 180 - AAng Else GetAngle = AAng End If End Function VB.NET public double GetAngle ( AnyObject obj1 , AnyObject obj2 ) { Object [] aaa1 = new Object [ 1 ]; Object [] aaa2 = new Object [ 1 ]; aaa1 [ 0 ] = obj1 ; aaa2 [ 0 ] = obj2 ; //Dim theMeasureService As MeasureService MeasureService theMeasureService = ( MeasureService ) catia . ActiveEditor . GetService ( \"MeasureService\" ); MeasureBetween theMeasureBetween = ( MeasureBetween ) theMeasureService . GetMeasureBetween ( aaa1 , aaa2 ); theMeasureBetween . Compute (); Double result = theMeasureBetween . GetAngle (); return result ; }","title":"GetAngle"},{"location":"DS-CODE/Automation/GetAngle/#vbnet","text":"Public Shared Function GetAngle(Line1 As Object, Line2 As Object) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim AMeas AMeas = TheSPAWorkbench.GetMeasurable(Line1) 'On Error Resume Next Dim AAng As Double AAng = AMeas.GetAngleBetween(Line2) If AAng < 180 Then GetAngle = 180 - AAng Else GetAngle = AAng End If End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/GetAngle/#vbnet_1","text":"public double GetAngle ( AnyObject obj1 , AnyObject obj2 ) { Object [] aaa1 = new Object [ 1 ]; Object [] aaa2 = new Object [ 1 ]; aaa1 [ 0 ] = obj1 ; aaa2 [ 0 ] = obj2 ; //Dim theMeasureService As MeasureService MeasureService theMeasureService = ( MeasureService ) catia . ActiveEditor . GetService ( \"MeasureService\" ); MeasureBetween theMeasureBetween = ( MeasureBetween ) theMeasureService . GetMeasureBetween ( aaa1 , aaa2 ); theMeasureBetween . Compute (); Double result = theMeasureBetween . GetAngle (); return result ; }","title":"VB.NET"},{"location":"DS-CODE/Automation/GetAngleBetween/","text":"VBA Function GetAngleBetween(PtAx As Variant, PtAy As Variant, PtAz As Variant, PtBx As Variant, PtBy As Variant, PtBz As Variant, PtCx As Variant, PtCy As Variant, PtCz As Variant) As Double Dim Vec1() ReDim Vec1(2) Dim Vec2() ReDim Vec2(2) Vec1(0) = PtAx - PtBx Vec1(1) = PtAy - PtBy Vec1(2) = PtAz - PtBz Vec2(0) = PtCx - PtBx Vec2(1) = PtCy - PtBy Vec2(2) = PtCz - PtBz Length1 = Sqr(Vec1(0) * Vec1(0) + Vec1(1) * Vec1(1) + Vec1(2) * Vec1(2)) Length2 = Sqr(Vec2(0) * Vec2(0) + Vec2(1) * Vec2(1) + Vec2(2) * Vec2(2)) DotP = (Vec1(0) * Vec2(0) + Vec1(1) * Vec2(1) + Vec1(2) * Vec2(2)) Calc = DotP / (Length1 * Length2) 'Arccos (77) GetAngleBetween = (Atn(-Calc / Sqr(-Calc * Calc + 1)) + 2 * Atn(1)) * (180 / PI) End Function Python C#.NET VB.NET Public Shared Function GetAngleBetween(PtAx As Object, PtAy As Object, PtAz As Object, PtBx As Object, PtBy As Object, PtBz As Object, PtCx As Object, PtCy As Object, PtCz As Object) As Double Dim Vec1() ReDim Vec1(2) Dim Vec2() ReDim Vec2(2) Vec1(0) = PtAx - PtBx Vec1(1) = PtAy - PtBy Vec1(2) = PtAz - PtBz Vec2(0) = PtCx - PtBx Vec2(1) = PtCy - PtBy Vec2(2) = PtCz - PtBz Length1 = System.Math.Sqrt(Vec1(0) * Vec1(0) + Vec1(1) * Vec1(1) + Vec1(2) * Vec1(2)) Length2 = System.Math.Sqrt(Vec2(0) * Vec2(0) + Vec2(1) * Vec2(1) + Vec2(2) * Vec2(2)) DotP = (Vec1(0) * Vec2(0) + Vec1(1) * Vec2(1) + Vec1(2) * Vec2(2)) Calc = DotP / (Length1 * Length2) 'Arccos (77) GetAngleBetween = (System.Math.Atan(-Calc / System.Math.Sqrt(-Calc * Calc + 1)) + 2 * System.Math.Atan(1)) * (180 / System.Math.PI) End Function CAA","title":"GetAngleBetween"},{"location":"DS-CODE/Automation/GetAngleBetween/#vba","text":"Function GetAngleBetween(PtAx As Variant, PtAy As Variant, PtAz As Variant, PtBx As Variant, PtBy As Variant, PtBz As Variant, PtCx As Variant, PtCy As Variant, PtCz As Variant) As Double Dim Vec1() ReDim Vec1(2) Dim Vec2() ReDim Vec2(2) Vec1(0) = PtAx - PtBx Vec1(1) = PtAy - PtBy Vec1(2) = PtAz - PtBz Vec2(0) = PtCx - PtBx Vec2(1) = PtCy - PtBy Vec2(2) = PtCz - PtBz Length1 = Sqr(Vec1(0) * Vec1(0) + Vec1(1) * Vec1(1) + Vec1(2) * Vec1(2)) Length2 = Sqr(Vec2(0) * Vec2(0) + Vec2(1) * Vec2(1) + Vec2(2) * Vec2(2)) DotP = (Vec1(0) * Vec2(0) + Vec1(1) * Vec2(1) + Vec1(2) * Vec2(2)) Calc = DotP / (Length1 * Length2) 'Arccos (77) GetAngleBetween = (Atn(-Calc / Sqr(-Calc * Calc + 1)) + 2 * Atn(1)) * (180 / PI) End Function","title":"VBA"},{"location":"DS-CODE/Automation/GetAngleBetween/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetAngleBetween/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetAngleBetween/#vbnet","text":"Public Shared Function GetAngleBetween(PtAx As Object, PtAy As Object, PtAz As Object, PtBx As Object, PtBy As Object, PtBz As Object, PtCx As Object, PtCy As Object, PtCz As Object) As Double Dim Vec1() ReDim Vec1(2) Dim Vec2() ReDim Vec2(2) Vec1(0) = PtAx - PtBx Vec1(1) = PtAy - PtBy Vec1(2) = PtAz - PtBz Vec2(0) = PtCx - PtBx Vec2(1) = PtCy - PtBy Vec2(2) = PtCz - PtBz Length1 = System.Math.Sqrt(Vec1(0) * Vec1(0) + Vec1(1) * Vec1(1) + Vec1(2) * Vec1(2)) Length2 = System.Math.Sqrt(Vec2(0) * Vec2(0) + Vec2(1) * Vec2(1) + Vec2(2) * Vec2(2)) DotP = (Vec1(0) * Vec2(0) + Vec1(1) * Vec2(1) + Vec1(2) * Vec2(2)) Calc = DotP / (Length1 * Length2) 'Arccos (77) GetAngleBetween = (System.Math.Atan(-Calc / System.Math.Sqrt(-Calc * Calc + 1)) + 2 * System.Math.Atan(1)) * (180 / System.Math.PI) End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/GetAngleBetween/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/GetAngleThreePt/","text":"VB.NET Public Shared Function GetAngleThreePt(p1, p2, p3, MyHSFactory) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim ln1, ln2 As HybridShape ln1 = MyHSFactory.AddNewLinePtPt(p2, p1) ln1.Compute() ln2 = MyHSFactory.AddNewLinePtPt(p2, p3) ln2.Compute() Dim AMeas AMeas = TheSPAWorkbench.GetMeasurable(ln1) On Error Resume Next Dim AAng As Double AAng = AMeas.GetAngleBetween(ln2) 'If 90 > AAng > 45 Then ' GetAngleThreePt = AAng 'Else ' GetAngleThreePt = 180 + AAng 'End If If AAng > 180 Then GetAngleThreePt = 360 - AAng Else GetAngleThreePt = AAng End If End Function","title":"GetAngleThreePt"},{"location":"DS-CODE/Automation/GetAngleThreePt/#vbnet","text":"Public Shared Function GetAngleThreePt(p1, p2, p3, MyHSFactory) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim ln1, ln2 As HybridShape ln1 = MyHSFactory.AddNewLinePtPt(p2, p1) ln1.Compute() ln2 = MyHSFactory.AddNewLinePtPt(p2, p3) ln2.Compute() Dim AMeas AMeas = TheSPAWorkbench.GetMeasurable(ln1) On Error Resume Next Dim AAng As Double AAng = AMeas.GetAngleBetween(ln2) 'If 90 > AAng > 45 Then ' GetAngleThreePt = AAng 'Else ' GetAngleThreePt = 180 + AAng 'End If If AAng > 180 Then GetAngleThreePt = 360 - AAng Else GetAngleThreePt = AAng End If End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/GetArc/","text":"V5 VB.NET Function GetArc(ByVal hb, ByVal line, ByVal MyHSFactory) Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim mmeasureln As Measurable mmeasureln = TheSPAWorkbench.GetMeasurable(line) Dim coordinates(8) mmeasureln.GetPointsOnCurve(coordinates) Dim pts, ptm, pte, arc pts = MyHSFactory.AddNewPointCoord(coordinates(0), coordinates(1), coordinates(2)) pts.compute() ptm = MyHSFactory.AddNewPointCoord(coordinates(3), coordinates(4), coordinates(5)) ptm.compute() pte = MyHSFactory.AddNewPointCoord(coordinates(6), coordinates(7), coordinates(8)) pte.compute() arc = MyHSFactory.AddNewCircle3Points(pts, ptm, pte) hb.appendhybridshape(arc) arc.compute() GetArc = arc End Function V6 VB.NET C#.NET CAA","title":"GetArc"},{"location":"DS-CODE/Automation/GetArc/#v5","text":"","title":"V5"},{"location":"DS-CODE/Automation/GetArc/#vbnet","text":"Function GetArc(ByVal hb, ByVal line, ByVal MyHSFactory) Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim mmeasureln As Measurable mmeasureln = TheSPAWorkbench.GetMeasurable(line) Dim coordinates(8) mmeasureln.GetPointsOnCurve(coordinates) Dim pts, ptm, pte, arc pts = MyHSFactory.AddNewPointCoord(coordinates(0), coordinates(1), coordinates(2)) pts.compute() ptm = MyHSFactory.AddNewPointCoord(coordinates(3), coordinates(4), coordinates(5)) ptm.compute() pte = MyHSFactory.AddNewPointCoord(coordinates(6), coordinates(7), coordinates(8)) pte.compute() arc = MyHSFactory.AddNewCircle3Points(pts, ptm, pte) hb.appendhybridshape(arc) arc.compute() GetArc = arc End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/GetArc/#v6","text":"","title":"V6"},{"location":"DS-CODE/Automation/GetArc/#vbnet_1","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/GetArc/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetArc/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/GetArea/","text":"V5 Public Shared Function GetArea(ByVal obj As Object) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim a As Measurable a = TheSPAWorkbench.GetMeasurable(obj) Dim b As Double b = Format(a.Area, \"0.000\") GetArea = b End Function V6 C#.NET public double GetArea ( AnyObject surface ) { MeasurableService theMeasureService = ( MeasurableService ) catia . ActiveEditor . GetService ( \"MeasurableService\" ); MeasurableSurface theMeasuresurface = ( MeasurableSurface ) theMeasureService . GetMeasurable ( surface , CATMeasurableType . CAAMeasurableSurface ); Double result = theMeasuresurface . GetArea (); return result ; }","title":"GetArea"},{"location":"DS-CODE/Automation/GetArea/#v5","text":"Public Shared Function GetArea(ByVal obj As Object) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim a As Measurable a = TheSPAWorkbench.GetMeasurable(obj) Dim b As Double b = Format(a.Area, \"0.000\") GetArea = b End Function","title":"V5"},{"location":"DS-CODE/Automation/GetArea/#v6","text":"","title":"V6"},{"location":"DS-CODE/Automation/GetArea/#cnet","text":"public double GetArea ( AnyObject surface ) { MeasurableService theMeasureService = ( MeasurableService ) catia . ActiveEditor . GetService ( \"MeasurableService\" ); MeasurableSurface theMeasuresurface = ( MeasurableSurface ) theMeasureService . GetMeasurable ( surface , CATMeasurableType . CAAMeasurableSurface ); Double result = theMeasuresurface . GetArea (); return result ; }","title":"C#.NET"},{"location":"DS-CODE/Automation/GetBisCrv/","text":"V5 VBA Python C#.NET VB.NET Public Shared Function GetBisCrv(ByVal l1 As HybridShape, ByVal l2 As HybridShape, ByVal pln As HybridShape, ByVal intPt As HybridShape, ByVal hsf As HybridShapeFactory) As HybridShape Dim ThisRadius As Double = 120 Dim sph As HybridShapeSphere = hsf.AddNewSphere(intPt, Nothing, ThisRadius, -90, 180, 0, 360) sph.Compute() Dim int1 As HybridShapeIntersection = hsf.AddNewIntersection(sph, l1) int1.Compute() Dim int2 As HybridShapeIntersection = hsf.AddNewIntersection(sph, l2) int2.Compute() Dim hybridShapeCircle2PointsRad1 As HybridShapeCircle2PointsRad hybridShapeCircle2PointsRad1 = hsf.AddNewCircle2PointsRad(int1, int2, pln, False, ThisRadius, 1) hybridShapeCircle2PointsRad1.SetLimitation(2) hybridShapeCircle2PointsRad1.Name = \"Arc\" Dim ctpt As HybridShapePointOnCurve = hsf.AddNewPointOnCurveFromPercent(hybridShapeCircle2PointsRad1, 0.5, True) ctpt.Compute() Dim lnn As HybridShapeLinePtPt = hsf.AddNewLinePtPtExtended(ctpt, intPt, 500, 200) lnn.Compute() lnn.Name = \"Bisecting\" 'hb.AppendHybridShape(lnn) Return lnn End Function V6 VBA Python C#.NET VB.NET","title":"GetBisCrv"},{"location":"DS-CODE/Automation/GetBisCrv/#v5","text":"","title":"V5"},{"location":"DS-CODE/Automation/GetBisCrv/#vba","text":"","title":"VBA"},{"location":"DS-CODE/Automation/GetBisCrv/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetBisCrv/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetBisCrv/#vbnet","text":"Public Shared Function GetBisCrv(ByVal l1 As HybridShape, ByVal l2 As HybridShape, ByVal pln As HybridShape, ByVal intPt As HybridShape, ByVal hsf As HybridShapeFactory) As HybridShape Dim ThisRadius As Double = 120 Dim sph As HybridShapeSphere = hsf.AddNewSphere(intPt, Nothing, ThisRadius, -90, 180, 0, 360) sph.Compute() Dim int1 As HybridShapeIntersection = hsf.AddNewIntersection(sph, l1) int1.Compute() Dim int2 As HybridShapeIntersection = hsf.AddNewIntersection(sph, l2) int2.Compute() Dim hybridShapeCircle2PointsRad1 As HybridShapeCircle2PointsRad hybridShapeCircle2PointsRad1 = hsf.AddNewCircle2PointsRad(int1, int2, pln, False, ThisRadius, 1) hybridShapeCircle2PointsRad1.SetLimitation(2) hybridShapeCircle2PointsRad1.Name = \"Arc\" Dim ctpt As HybridShapePointOnCurve = hsf.AddNewPointOnCurveFromPercent(hybridShapeCircle2PointsRad1, 0.5, True) ctpt.Compute() Dim lnn As HybridShapeLinePtPt = hsf.AddNewLinePtPtExtended(ctpt, intPt, 500, 200) lnn.Compute() lnn.Name = \"Bisecting\" 'hb.AppendHybridShape(lnn) Return lnn End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/GetBisCrv/#v6","text":"","title":"V6"},{"location":"DS-CODE/Automation/GetBisCrv/#vba_1","text":"","title":"VBA"},{"location":"DS-CODE/Automation/GetBisCrv/#python_1","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetBisCrv/#cnet_1","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetBisCrv/#vbnet_1","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/GetCOGFromArray/","text":"Function GetCOGFromArray(ObjArr As Variant) As Variant Dim TotArr(2) Dim TotCounter As Integer TotCounter = 0 For X = 0 To UBound(ObjArr) If IsEmpty(ObjArr(X)) = False Then Dim CurObj Set CurObj = ObjArr(X) Dim COMeas Set COMeas = TheSPAWorkbench.GetMeasurable(CurObj) Dim COGCoords(2) COMeas.GetCOG COGCoords TotCounter = TotCounter + 1 TotArr(0) = TotArr(0) + COGCoords(0) TotArr(1) = TotArr(1) + COGCoords(1) TotArr(2) = TotArr(2) + COGCoords(2) End If Next X TotArr(0) = TotArr(0) / TotCounter TotArr(1) = TotArr(1) / TotCounter TotArr(2) = TotArr(2) / TotCounter GetCOGFromArray = TotArr End Function Python C#.NET VB.NET CAA","title":"GetCOGFromArray"},{"location":"DS-CODE/Automation/GetCOGFromArray/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetCOGFromArray/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetCOGFromArray/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/GetCOGFromArray/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/GetCatia/","text":"Sub GetCatia() On Error Resume Next '\u5982\u679cCATIA\u542f\u52a8\uff0c\u7528GetObject\u8fde\u63a5\u5230CATIA Set CATIA = GetObject(, \"CATIA.Application\") '\u5982\u679cCATIA\u6ca1\u6709\u8fd0\u884c\uff0c\u5219\u5148\u7528Create Object\u542f\u52a8CATIA If Err.Number <> 0 Then Set CATIA = CreateObject(\"CATIA.Application\") CATIA.Visible = True End If On Error GoTo 0 End Sub","title":"GetCatia"},{"location":"DS-CODE/Automation/GetCenterPoint/","text":"V5 VB.NET Public Shared Function GetCenterPoint(ByVal objname As String, ByVal srf As HybridShape, MyHSFactory As HybridShapeFactory) Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim measure As Measurable measure = TheSPAWorkbench.GetMeasurable(srf) Dim thecoords(2) measure.GetCOG(thecoords) cntrpoint = MyHSFactory.AddNewPointCoord(thecoords(0), thecoords(1), thecoords(2)) cntrpoint.name = objname cntrpoint.compute() GetCenterPoint = cntrpoint End Function","title":"GetCenterPoint"},{"location":"DS-CODE/Automation/GetCenterPoint/#v5","text":"","title":"V5"},{"location":"DS-CODE/Automation/GetCenterPoint/#vbnet","text":"Public Shared Function GetCenterPoint(ByVal objname As String, ByVal srf As HybridShape, MyHSFactory As HybridShapeFactory) Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim measure As Measurable measure = TheSPAWorkbench.GetMeasurable(srf) Dim thecoords(2) measure.GetCOG(thecoords) cntrpoint = MyHSFactory.AddNewPointCoord(thecoords(0), thecoords(1), thecoords(2)) cntrpoint.name = objname cntrpoint.compute() GetCenterPoint = cntrpoint End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/GetColor/","text":"V5 VBA Python C#.NET VB.NET Public Shared Function GetColor(obj) Dim a() As Double ReDim a(2) a(0) = 0 a(1) = 0 a(2) = 0 CATIA.ActiveDocument.Selection.Clear() CATIA.ActiveDocument.Selection.Add(obj) CATIA.ActiveDocument.Selection.VisProperties.GetRealColor(a(0), a(1), a(2)) GetColor = a End Function V6 VBA Python C#.NET VB.NET","title":"GetColor"},{"location":"DS-CODE/Automation/GetColor/#v5","text":"","title":"V5"},{"location":"DS-CODE/Automation/GetColor/#vba","text":"","title":"VBA"},{"location":"DS-CODE/Automation/GetColor/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetColor/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetColor/#vbnet","text":"Public Shared Function GetColor(obj) Dim a() As Double ReDim a(2) a(0) = 0 a(1) = 0 a(2) = 0 CATIA.ActiveDocument.Selection.Clear() CATIA.ActiveDocument.Selection.Add(obj) CATIA.ActiveDocument.Selection.VisProperties.GetRealColor(a(0), a(1), a(2)) GetColor = a End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/GetColor/#v6","text":"","title":"V6"},{"location":"DS-CODE/Automation/GetColor/#vba_1","text":"","title":"VBA"},{"location":"DS-CODE/Automation/GetColor/#python_1","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetColor/#cnet_1","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetColor/#vbnet_1","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/GetContainingPart/","text":"Function GetContainingPart(oObj) Set Current = oObj found = False While found = False Set Current = Current.Parent If TypeName(Current) = \"Part\" Then found = True End If Wend Set GetContainingPart = Current End Function Python C#.NET public Part GetContainingPart ( AnyObject obj ) { try { INFITF . AnyObject current = ( INFITF . AnyObject ) obj ; ; bool found = false ; while ( found == false ) { current = ( INFITF . AnyObject ) current . Parent ; if ( Microsoft . VisualBasic . Information . TypeName ( current ) == \"Part\" ) { found = true ; } } return ( MECMOD . Part ) current ; } catch { INFITF . AnyObject OldObj = obj . Application . ActiveEditor . ActiveObject ; MECMOD . Part part = ( MECMOD . Part ) OldObj ; return part ; } } VB.NET Public Shared Function GetContainingPart(oObj) Current = oObj found = False While found = False Current = Current.Parent If TypeName(Current) = \"Part\" Then found = True End If End While GetContainingPart = Current End Function CAA","title":"GetContainingPart"},{"location":"DS-CODE/Automation/GetContainingPart/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetContainingPart/#cnet","text":"public Part GetContainingPart ( AnyObject obj ) { try { INFITF . AnyObject current = ( INFITF . AnyObject ) obj ; ; bool found = false ; while ( found == false ) { current = ( INFITF . AnyObject ) current . Parent ; if ( Microsoft . VisualBasic . Information . TypeName ( current ) == \"Part\" ) { found = true ; } } return ( MECMOD . Part ) current ; } catch { INFITF . AnyObject OldObj = obj . Application . ActiveEditor . ActiveObject ; MECMOD . Part part = ( MECMOD . Part ) OldObj ; return part ; } }","title":"C#.NET"},{"location":"DS-CODE/Automation/GetContainingPart/#vbnet","text":"Public Shared Function GetContainingPart(oObj) Current = oObj found = False While found = False Current = Current.Parent If TypeName(Current) = \"Part\" Then found = True End If End While GetContainingPart = Current End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/GetContainingPart/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/GetCurrentDoc_TopProduct/","text":"CAA //\u6279\u5904\u7406\u6a21\u5f0f\u83b7\u5f97\u6587\u4ef6\u7684rootProduct HRESULT GetCurrentDoc_TopProduct ( CATIProduct_var & spTopProd ) { //-------------------------------------------------------------------- // 1. Prologue //-------------------------------------------------------------------- cout << endl << flush ; cout << endl << flush ; cout << \"----------------------------------------------------------------\" << endl << flush ; cout << endl << flush ; // --- Creating the Session: A session must always be created in a batch char * sessionName = \"CAA_EhiFilter_Session\" ; CATSession * pSession = NULL ; HRESULT rc = :: Create_Session ( sessionName , pSession ); if (( SUCCEEDED ( rc )) && ( NULL != pSession )) { cout << \"> session created : \" << sessionName << endl << flush ; } else { cout << \"ERROR in creating session\" << sessionName << endl << flush ; return 1 ; } // --- Opening an existing document // The input parameter to this sample program must contain // the entire path and name of the document that is to be opened. CATDocument * pDoc = NULL ; // pDoc is a pointer to the document cout << \"> open document :\" << argv [ 1 ] << argv [ 2 ] << endl << flush ; rc = CATDocumentServices :: OpenDocument ( CATUnicodeString ( argv [ 1 ]) + CATUnicodeString ( argv [ 2 ]), pDoc ); CATLockDocument ( * pDoc ); if ( SUCCEEDED ( rc ) && ( NULL != pDoc )) { cout << \"> document opened \" << endl << flush ; } else { cout << \"ERROR in opening document\" << endl << flush ; return 2 ; } // --- Retrieving root product of the opened document CATIProduct * piRootProduct = NULL ; // piRootProduct is a handle to document root product // CATIDocRoots * piDocRoots = NULL ; rc = pDoc -> QueryInterface ( IID_CATIDocRoots ,( void ** ) & piDocRoots ); if ( FAILED ( rc ) || ( NULL == piDocRoots ) ) { cout << \"ERROR : Failed to query CATIDocRoots\" << endl ; return 3 ; } CATListValCATBaseUnknown_var * pListRootProduct = piDocRoots -> GiveDocRoots (); piDocRoots -> Release (); piDocRoots = NULL ; if ( pListRootProduct && pListRootProduct -> Size () ) { CATBaseUnknown_var hUnk = ( * pListRootProduct )[ 1 ]; if ( NULL_var != hUnk ) rc = hUnk -> QueryInterface ( IID_CATIProduct ,( void ** ) & piRootProduct ); if ( pListRootProduct ) delete pListRootProduct ; pListRootProduct = NULL ; // if ( SUCCEEDED ( rc ) && ( NULL != piRootProduct )) { cout << \"> root product found in document \" << endl << flush ; spTopProd = piProductOnRoot ; CATUnicodeString partNumber = piProductOnRoot -> GetPartNumber (); cout << \"Working with '\" << partNumber . ConvertToChar () << \"'\" << endl ; return S_OK ; } else { cout << \"ERROR : Root product not found in document \" << endl << flush ; return 3 ; } }","title":"GetCurrentDoc TopProduct"},{"location":"DS-CODE/Automation/GetCurrentDoc_TopProduct/#caa","text":"//\u6279\u5904\u7406\u6a21\u5f0f\u83b7\u5f97\u6587\u4ef6\u7684rootProduct HRESULT GetCurrentDoc_TopProduct ( CATIProduct_var & spTopProd ) { //-------------------------------------------------------------------- // 1. Prologue //-------------------------------------------------------------------- cout << endl << flush ; cout << endl << flush ; cout << \"----------------------------------------------------------------\" << endl << flush ; cout << endl << flush ; // --- Creating the Session: A session must always be created in a batch char * sessionName = \"CAA_EhiFilter_Session\" ; CATSession * pSession = NULL ; HRESULT rc = :: Create_Session ( sessionName , pSession ); if (( SUCCEEDED ( rc )) && ( NULL != pSession )) { cout << \"> session created : \" << sessionName << endl << flush ; } else { cout << \"ERROR in creating session\" << sessionName << endl << flush ; return 1 ; } // --- Opening an existing document // The input parameter to this sample program must contain // the entire path and name of the document that is to be opened. CATDocument * pDoc = NULL ; // pDoc is a pointer to the document cout << \"> open document :\" << argv [ 1 ] << argv [ 2 ] << endl << flush ; rc = CATDocumentServices :: OpenDocument ( CATUnicodeString ( argv [ 1 ]) + CATUnicodeString ( argv [ 2 ]), pDoc ); CATLockDocument ( * pDoc ); if ( SUCCEEDED ( rc ) && ( NULL != pDoc )) { cout << \"> document opened \" << endl << flush ; } else { cout << \"ERROR in opening document\" << endl << flush ; return 2 ; } // --- Retrieving root product of the opened document CATIProduct * piRootProduct = NULL ; // piRootProduct is a handle to document root product // CATIDocRoots * piDocRoots = NULL ; rc = pDoc -> QueryInterface ( IID_CATIDocRoots ,( void ** ) & piDocRoots ); if ( FAILED ( rc ) || ( NULL == piDocRoots ) ) { cout << \"ERROR : Failed to query CATIDocRoots\" << endl ; return 3 ; } CATListValCATBaseUnknown_var * pListRootProduct = piDocRoots -> GiveDocRoots (); piDocRoots -> Release (); piDocRoots = NULL ; if ( pListRootProduct && pListRootProduct -> Size () ) { CATBaseUnknown_var hUnk = ( * pListRootProduct )[ 1 ]; if ( NULL_var != hUnk ) rc = hUnk -> QueryInterface ( IID_CATIProduct ,( void ** ) & piRootProduct ); if ( pListRootProduct ) delete pListRootProduct ; pListRootProduct = NULL ; // if ( SUCCEEDED ( rc ) && ( NULL != piRootProduct )) { cout << \"> root product found in document \" << endl << flush ; spTopProd = piProductOnRoot ; CATUnicodeString partNumber = piProductOnRoot -> GetPartNumber (); cout << \"Working with '\" << partNumber . ConvertToChar () << \"'\" << endl ; return S_OK ; } else { cout << \"ERROR : Root product not found in document \" << endl << flush ; return 3 ; } }","title":"CAA"},{"location":"DS-CODE/Automation/GetDataFromExcel/","text":"c++ //=================================================================== // COPYRIGHT Dassault Systemes 2021/05/30 //=================================================================== // CATExcelDataClass.cpp // Header definition of class CATExcelDataClass //=================================================================== // // Usage notes: // //=================================================================== // 2021/05/30 Creation: Code generated by the 3DS wizard //=================================================================== #include \"CATExcelDataClass.h\" #include \"libxl.h\" using namespace libxl ; //#include \"CATObjectModelerClass.h\" // //CATObjectModelerClass aa; HRESULT CAAGetFileExtension ( CATUnicodeString & iosData ) { HRESULT rc = E_FAIL ; if ( ! ( iosData . IsNull ())) { int dIndex = iosData . SearchSubString ( \".\" , 1 , CATUnicodeString :: CATSearchModeBackward ); if ( dIndex != -1 ) { iosData = iosData . SubString ( dIndex + 1 , iosData . GetLengthInChar () - dIndex - 1 ); cout << \"Index : \" << dIndex << \",\" << iosData << endl ; if ( ! ( iosData . IsNull ())) { rc = S_OK ; } } } return rc ; } HRESULT GetDataFromExcel ( CATUnicodeString iExcelPath , int iStartRow , int iColumn , CATListOfCATUnicodeString & osDataListVec ) { Book * book ; CATUnicodeString xlsPath = iExcelPath ; CATUnicodeString ftype = xlsPath ; HRESULT rc = CAAGetFileExtension ( ftype ); cout << \"File extension is \" << ftype << endl ; if ( SUCCEEDED ( rc )) { if ( ftype == \"xlsx\" ) { book = xlCreateXMLBook (); } else if ( ftype == \"xls\" ) { book = xlCreateBook (); } else return E_FAIL ; } if ( book ) { const wchar_t * x = L \"Halil Kural\" ; const wchar_t * y = L \"windows-2723210a07c4e90162b26966a8jcdboe\" ; book -> setKey ( x , y ); wchar_t * wExcelPath = new wchar_t [ xlsPath . GetLengthInChar () + 1 ]; xlsPath . ConvertToWChar ( wExcelPath ); if ( book -> load ( wExcelPath )) { Sheet * sheet = book -> getSheet ( 0 ); if ( sheet ) { while ( true ) { //CATListOfDouble sDataList; const wchar_t * wStr1 = sheet -> readStr ( iStartRow , iColumn ); CATUnicodeString strText1 ; strText1 . BuildFromWChar ( wStr1 ); // cout << strText1 << \"\\t\" << \"\\n\"; if ( strText1 . IsNull ()) break ; osDataListVec . Append ( strText1 ); iStartRow ++ ; } } } book -> release (); } return rc ; }","title":"GetDataFromExcel"},{"location":"DS-CODE/Automation/GetDataFromExcel/#c","text":"//=================================================================== // COPYRIGHT Dassault Systemes 2021/05/30 //=================================================================== // CATExcelDataClass.cpp // Header definition of class CATExcelDataClass //=================================================================== // // Usage notes: // //=================================================================== // 2021/05/30 Creation: Code generated by the 3DS wizard //=================================================================== #include \"CATExcelDataClass.h\" #include \"libxl.h\" using namespace libxl ; //#include \"CATObjectModelerClass.h\" // //CATObjectModelerClass aa; HRESULT CAAGetFileExtension ( CATUnicodeString & iosData ) { HRESULT rc = E_FAIL ; if ( ! ( iosData . IsNull ())) { int dIndex = iosData . SearchSubString ( \".\" , 1 , CATUnicodeString :: CATSearchModeBackward ); if ( dIndex != -1 ) { iosData = iosData . SubString ( dIndex + 1 , iosData . GetLengthInChar () - dIndex - 1 ); cout << \"Index : \" << dIndex << \",\" << iosData << endl ; if ( ! ( iosData . IsNull ())) { rc = S_OK ; } } } return rc ; } HRESULT GetDataFromExcel ( CATUnicodeString iExcelPath , int iStartRow , int iColumn , CATListOfCATUnicodeString & osDataListVec ) { Book * book ; CATUnicodeString xlsPath = iExcelPath ; CATUnicodeString ftype = xlsPath ; HRESULT rc = CAAGetFileExtension ( ftype ); cout << \"File extension is \" << ftype << endl ; if ( SUCCEEDED ( rc )) { if ( ftype == \"xlsx\" ) { book = xlCreateXMLBook (); } else if ( ftype == \"xls\" ) { book = xlCreateBook (); } else return E_FAIL ; } if ( book ) { const wchar_t * x = L \"Halil Kural\" ; const wchar_t * y = L \"windows-2723210a07c4e90162b26966a8jcdboe\" ; book -> setKey ( x , y ); wchar_t * wExcelPath = new wchar_t [ xlsPath . GetLengthInChar () + 1 ]; xlsPath . ConvertToWChar ( wExcelPath ); if ( book -> load ( wExcelPath )) { Sheet * sheet = book -> getSheet ( 0 ); if ( sheet ) { while ( true ) { //CATListOfDouble sDataList; const wchar_t * wStr1 = sheet -> readStr ( iStartRow , iColumn ); CATUnicodeString strText1 ; strText1 . BuildFromWChar ( wStr1 ); // cout << strText1 << \"\\t\" << \"\\n\"; if ( strText1 . IsNull ()) break ; osDataListVec . Append ( strText1 ); iStartRow ++ ; } } } book -> release (); } return rc ; }","title":"c++"},{"location":"DS-CODE/Automation/GetDistance/","text":"V5 VB.NET Public Shared Function GetDistance(EdgeRef1, EdgeRef2) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CurrentMeasurable As Measurable Dim TempDistance CurrentMeasurable = TheSPAWorkbench.GetMeasurable(EdgeRef1) TempDistance = CurrentMeasurable.GetMinimumDistance(EdgeRef2) GetDistance = TempDistance End Function VBA Function GetDistance(EdgeRef1, EdgeRef2) As Double Dim TheSPAWorkbench As SPAWorkbench Set TheSPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CurrentMeasurable As Measurable Set CurrentMeasurable = TheSPAWorkbench.GetMeasurable(EdgeRef1) Dim TempDistance As Double TempDistance = CurrentMeasurable.GetMinimumDistance(EdgeRef2) GetDistance = TempDistance End Function V6 C#.NET public double GetDistance ( AnyObject obj1 , AnyObject obj2 ) { try { Object [] aaa1 = new Object [ 1 ]; Object [] aaa2 = new Object [ 1 ]; aaa1 [ 0 ] = obj1 ; aaa2 [ 0 ] = obj2 ; //Dim theMeasureService As MeasureService MeasureService theMeasureService = ( MeasureService ) catia . ActiveEditor . GetService ( \"MeasureService\" ); MeasureBetween theMeasureBetween = ( MeasureBetween ) theMeasureService . GetMeasureBetween ( aaa1 , aaa2 ); theMeasureBetween . Compute (); Double result = theMeasureBetween . GetDistance (); return result ; } catch { return 0 ; } } Function GetDistance(obj1, obj2) As Double Dim aaa1(0) As Object Dim aaa2(0) As Object aaa1(0) = obj1 aaa2(0) = obj2 'Dim theMeasureService As MeasureService Dim theMeasureService 'As MeasureService theMeasureService = CATIA.ActiveEditor.GetService(\"MeasureService\") Dim theMeasureBetween As MeasureBetween theMeasureBetween = theMeasureService.GetMeasureBetween(aaa1, aaa2) theMeasureBetween.Compute() Dim result As Double = theMeasureBetween.GetDistance() Return result End Function","title":"GetDistance"},{"location":"DS-CODE/Automation/GetDistance/#v5","text":"","title":"V5"},{"location":"DS-CODE/Automation/GetDistance/#vbnet","text":"Public Shared Function GetDistance(EdgeRef1, EdgeRef2) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CurrentMeasurable As Measurable Dim TempDistance CurrentMeasurable = TheSPAWorkbench.GetMeasurable(EdgeRef1) TempDistance = CurrentMeasurable.GetMinimumDistance(EdgeRef2) GetDistance = TempDistance End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/GetDistance/#vba","text":"Function GetDistance(EdgeRef1, EdgeRef2) As Double Dim TheSPAWorkbench As SPAWorkbench Set TheSPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CurrentMeasurable As Measurable Set CurrentMeasurable = TheSPAWorkbench.GetMeasurable(EdgeRef1) Dim TempDistance As Double TempDistance = CurrentMeasurable.GetMinimumDistance(EdgeRef2) GetDistance = TempDistance End Function","title":"VBA"},{"location":"DS-CODE/Automation/GetDistance/#v6","text":"","title":"V6"},{"location":"DS-CODE/Automation/GetDistance/#cnet","text":"public double GetDistance ( AnyObject obj1 , AnyObject obj2 ) { try { Object [] aaa1 = new Object [ 1 ]; Object [] aaa2 = new Object [ 1 ]; aaa1 [ 0 ] = obj1 ; aaa2 [ 0 ] = obj2 ; //Dim theMeasureService As MeasureService MeasureService theMeasureService = ( MeasureService ) catia . ActiveEditor . GetService ( \"MeasureService\" ); MeasureBetween theMeasureBetween = ( MeasureBetween ) theMeasureService . GetMeasureBetween ( aaa1 , aaa2 ); theMeasureBetween . Compute (); Double result = theMeasureBetween . GetDistance (); return result ; } catch { return 0 ; } } Function GetDistance(obj1, obj2) As Double Dim aaa1(0) As Object Dim aaa2(0) As Object aaa1(0) = obj1 aaa2(0) = obj2 'Dim theMeasureService As MeasureService Dim theMeasureService 'As MeasureService theMeasureService = CATIA.ActiveEditor.GetService(\"MeasureService\") Dim theMeasureBetween As MeasureBetween theMeasureBetween = theMeasureService.GetMeasureBetween(aaa1, aaa2) theMeasureBetween.Compute() Dim result As Double = theMeasureBetween.GetDistance() Return result End Function","title":"C#.NET"},{"location":"DS-CODE/Automation/GetFirstInstanceInExcel/","text":"Function GetFirstInstanceInExcel(InputVal As String, ColumnNo As Integer, EndRow As Integer) As Integer Dim LCounter As Integer LCounter = 2 While LCounter <= EndRow CurCellStr = CStr(CurCells(LCounter, ColumnNo).Value) If CurCellStr = InputVal Then GetFirstInstanceInExcel = LCounter Exit Function End If LCounter = LCounter + 1 Wend GetFirstInstanceInExcel = -1 End Function","title":"GetFirstInstanceInExcel"},{"location":"DS-CODE/Automation/GetLength/","text":"V5 VBA Python C#.NET VB.NET Public Shared Function GetLength(ByVal obj As Object) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim a As Measurable a = TheSPAWorkbench.GetMeasurable(obj) Dim b As Double b = Format(a.Length, \"0.000\") GetLength = b End Function CAA V6 VBA Python C#.NET public double GetLength ( AnyObject obj ) { MeasurableService theMeasureService = ( MeasurableService ) catia . ActiveEditor . GetService ( \"MeasurableService\" ); MeasurableCurve theMeasureItem = ( MeasurableCurve ) theMeasureService . GetMeasurable ( obj , CATMeasurableType . CAAMeasurableCurve ); Double result = theMeasureItem . GetLength (); return result ; } public double GetLineLength ( AnyObject obj ) { MeasurableService theMeasureService = ( MeasurableService ) catia . ActiveEditor . GetService ( \"MeasurableService\" ); MeasurableLine theMeasureItem = ( MeasurableLine ) theMeasureService . GetMeasurable ( obj , CATMeasurableType . CAAMeasurableLine ); Double result = theMeasureItem . GetLength (); return result ; } VB.NET Function GetLength(ByVal obj1 As AnyObject) As Double ' Dim a(0) ' Dim b(0) ' a(0) = obj1 ' b(0) = obj2 'On Error Resume Next Dim oMeasurableService As MeasurableService Set oMeasurableService = _ CATIA.ActiveEditor.GetService(\"MeasurableService\") Dim theMeasureLine As MeasurableLine Set theMeasureLine = oMeasurableService.GetMeasurable(obj1, CAAMeasurableLine) Dim aa As Double aa = theMeasureLine.GetLength GetLength = aa End Function CAA HRESULT GetLength ( CATBaseUnknown_var spObject , double & idLength ) { HRESULT rc = E_FAIL ; double dis = -1 ; CATIMeasurableInContext_var spiMeasurableContextObject = spObject ; if ( spiMeasurableContextObject != NULL_var ) { rc = spiMeasurableContextObject -> GetLength ( dis ); if ( FAILED ( rc )) { cout << \"Error : Get GetLength Failed \u00a3\u00a1\" << endl ; rc = E_FAIL ; } else { rc = S_OK ; } } else { cout << \"Error : CATIMeasurableInContext NULL ! \" << endl ; rc = E_FAIL ; } idLength = dis ; return rc ; }","title":"GetLength"},{"location":"DS-CODE/Automation/GetLength/#v5","text":"","title":"V5"},{"location":"DS-CODE/Automation/GetLength/#vba","text":"","title":"VBA"},{"location":"DS-CODE/Automation/GetLength/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetLength/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetLength/#vbnet","text":"Public Shared Function GetLength(ByVal obj As Object) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim a As Measurable a = TheSPAWorkbench.GetMeasurable(obj) Dim b As Double b = Format(a.Length, \"0.000\") GetLength = b End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/GetLength/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/GetLength/#v6","text":"","title":"V6"},{"location":"DS-CODE/Automation/GetLength/#vba_1","text":"","title":"VBA"},{"location":"DS-CODE/Automation/GetLength/#python_1","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetLength/#cnet_1","text":"public double GetLength ( AnyObject obj ) { MeasurableService theMeasureService = ( MeasurableService ) catia . ActiveEditor . GetService ( \"MeasurableService\" ); MeasurableCurve theMeasureItem = ( MeasurableCurve ) theMeasureService . GetMeasurable ( obj , CATMeasurableType . CAAMeasurableCurve ); Double result = theMeasureItem . GetLength (); return result ; } public double GetLineLength ( AnyObject obj ) { MeasurableService theMeasureService = ( MeasurableService ) catia . ActiveEditor . GetService ( \"MeasurableService\" ); MeasurableLine theMeasureItem = ( MeasurableLine ) theMeasureService . GetMeasurable ( obj , CATMeasurableType . CAAMeasurableLine ); Double result = theMeasureItem . GetLength (); return result ; }","title":"C#.NET"},{"location":"DS-CODE/Automation/GetLength/#vbnet_1","text":"Function GetLength(ByVal obj1 As AnyObject) As Double ' Dim a(0) ' Dim b(0) ' a(0) = obj1 ' b(0) = obj2 'On Error Resume Next Dim oMeasurableService As MeasurableService Set oMeasurableService = _ CATIA.ActiveEditor.GetService(\"MeasurableService\") Dim theMeasureLine As MeasurableLine Set theMeasureLine = oMeasurableService.GetMeasurable(obj1, CAAMeasurableLine) Dim aa As Double aa = theMeasureLine.GetLength GetLength = aa End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/GetLength/#caa_1","text":"HRESULT GetLength ( CATBaseUnknown_var spObject , double & idLength ) { HRESULT rc = E_FAIL ; double dis = -1 ; CATIMeasurableInContext_var spiMeasurableContextObject = spObject ; if ( spiMeasurableContextObject != NULL_var ) { rc = spiMeasurableContextObject -> GetLength ( dis ); if ( FAILED ( rc )) { cout << \"Error : Get GetLength Failed \u00a3\u00a1\" << endl ; rc = E_FAIL ; } else { rc = S_OK ; } } else { cout << \"Error : CATIMeasurableInContext NULL ! \" << endl ; rc = E_FAIL ; } idLength = dis ; return rc ; }","title":"CAA"},{"location":"DS-CODE/Automation/GetMaxProjDistance/","text":"Function GetMaxProjDistance(CrvObj1 As Variant, Obj2 As Variant, IntervalDist As Double, ConstSet As HybridBody) As Double Dim Floater As HybridShapePointOnCurve Set Floater = MyHSFactory.AddNewPointOnCurveFromDistance(CrvObj1, 0, True) ConstSet.AppendHybridShape Floater If IsUpdatable(Floater) = False Then GetMaxProjDistance = -1 MyHSFactory.DeleteObjectForDatum Floater Exit Function End If Dim LargestVal As Double LargestVal = 0 Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(CrvObj1) Dim CLength As Double CLength = CMeas.Length Dim LCounter As Double LCounter = 0 While LCounter < CLength Floater.Offset.Value = LCounter MyPart.UpdateObject Floater If CheckProjection(Floater, Obj2) Then Dim TempProj As HybridShapeProject Set TempProj = MyHSFactory.AddNewProject(Floater, Obj2) ConstSet.AppendHybridShape TempProj MyPart.UpdateObject TempProj Dim TempMeas Set TempMeas = TheSPAWorkbench.GetMeasurable(TempProj) Dim CurDist As Double CurDist = TempMeas.GetMinimumDistance(Floater) If CurDist > LargestVal Then LargestVal = CurDist End If MyHSFactory.DeleteObjectForDatum TempProj End If LCounter = LCounter + IntervalDist Wend MyHSFactory.DeleteObjectForDatum Floater GetMaxProjDistance = LargestVal End Function Python C#.NET VB.NET CAA","title":"GetMaxProjDistance"},{"location":"DS-CODE/Automation/GetMaxProjDistance/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetMaxProjDistance/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetMaxProjDistance/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/GetMaxProjDistance/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/GetMinimumDistanceApart/","text":"VB.NET Public Shared Function GetMinimumDistanceApart(Obj1 As Object, Obj2 As Object) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim L1Meas L1Meas = TheSPAWorkbench.GetMeasurable(Obj1) Dim Di As Double Di = L1Meas.GetMinimumDistance(Obj2) GetMinimumDistanceApart = Di End Function","title":"GetMinimumDistanceApart"},{"location":"DS-CODE/Automation/GetMinimumDistanceApart/#vbnet","text":"Public Shared Function GetMinimumDistanceApart(Obj1 As Object, Obj2 As Object) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim L1Meas L1Meas = TheSPAWorkbench.GetMeasurable(Obj1) Dim Di As Double Di = L1Meas.GetMinimumDistance(Obj2) GetMinimumDistanceApart = Di End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/GetMinimumDistanceAtLineEndPts/","text":"Function GetMinimumDistanceAtLineEndPts(Line1 As Variant, Line2 As Variant) As Double IsUpdatable Line1 IsUpdatable Line2 Dim L1Meas Set L1Meas = TheSPAWorkbench.GetMeasurable(Line1) Dim L1Coords() ReDim L1Coords(8) L1Meas.GetPointsOnCurve L1Coords Dim L2Meas Set L2Meas = TheSPAWorkbench.GetMeasurable(Line2) Dim L2Coords() ReDim L2Coords(8) L2Meas.GetPointsOnCurve L2Coords Dim Di As Double Di = find3DDistance(L1Coords(6), L1Coords(7), L1Coords(8), L2Coords(6), L2Coords(7), L2Coords(8)) GetMinimumDistanceAtLineEndPts = Di End Function Python C#.NET VB.NET CAA","title":"GetMinimumDistanceAtLineEndPts"},{"location":"DS-CODE/Automation/GetMinimumDistanceAtLineEndPts/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetMinimumDistanceAtLineEndPts/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetMinimumDistanceAtLineEndPts/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/GetMinimumDistanceAtLineEndPts/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/GetNormalAngle/","text":"VBA Function getnormalangle(ByVal hb, ByVal centerpoint, ByVal normal, ByVal arc, ByVal MyHSFactory) Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim cpt, oln cpt = MyHSFactory.AddNewPointCenter(arc) cpt.compute() oln = MyHSFactory.AddNewLinePtPt(centerpoint, cpt) oln.compute() Dim mlin As Measurable mlin = TheSPAWorkbench.GetMeasurable(oln) Dim angle As Double angle = mlin.GetAngleBetween(normal) getnormalangle = angle End Function Python C#.NET VB.NET","title":"GetNormalAngle"},{"location":"DS-CODE/Automation/GetNormalAngle/#vba","text":"Function getnormalangle(ByVal hb, ByVal centerpoint, ByVal normal, ByVal arc, ByVal MyHSFactory) Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim cpt, oln cpt = MyHSFactory.AddNewPointCenter(arc) cpt.compute() oln = MyHSFactory.AddNewLinePtPt(centerpoint, cpt) oln.compute() Dim mlin As Measurable mlin = TheSPAWorkbench.GetMeasurable(oln) Dim angle As Double angle = mlin.GetAngleBetween(normal) getnormalangle = angle End Function","title":"VBA"},{"location":"DS-CODE/Automation/GetNormalAngle/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetNormalAngle/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetNormalAngle/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/GetPartFromName/","text":"Function GetPartFromName(InputStr As String) As Part For X = 1 To CATIA.Documents.Count If TypeName(CATIA.Documents.Item(X)) = \"PartDocument\" Then If CATIA.Documents.Item(X).Part.Name = InputStr Then Set GetPartFromName = CATIA.Documents.Item(X).Part End If End If Next X End Function Python C#.NET VB.NET CAA","title":"GetPartFromName"},{"location":"DS-CODE/Automation/GetPartFromName/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetPartFromName/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetPartFromName/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/GetPartFromName/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/GetPointCoord/","text":"VB How to use it? Sub Main() CATIA = GetObject(, \"CATIA.Application\") ' getPrd() Dim sel As INFITF.Selection = CATIA.ActiveEditor.Selection Dim obj = sel.Item(1).Value Dim aa(2) As Double aa = GetPointCoordinate(obj) MsgBox(aa(0) & \",\" & aa(1) & \",\" & aa(2)) End Sub Function GetPointCoordinate(iPoint) As Double() Dim aaa1(0) As Object aaa1(0) = iPoint Dim theMeasureService As MeasurableService theMeasureService = CATIA.ActiveEditor.GetService(\"MeasurableService\") Dim theMeasurablePoint As MeasurablePoint theMeasurablePoint = theMeasureService.GetMeasurable(aaa1(0), CATMeasurableType.CAAMeasurablePoint) Dim theXPoint As Double Dim theYPoint As Double Dim theZPoint As Double theMeasurablePoint.GetPoint(theXPoint, theYPoint, theZPoint) Dim oCoord(2) As Double oCoord(0) = theXPoint oCoord(1) = theYPoint oCoord(2) = theZPoint Return oCoord End Function Dim parms As Parameters parms = part1.Parameters.SubList(hb1, True) 'MsgBox(\"PARMS:\" & CStr(parms.Count)) Dim listparm1 As ListParameter listparm1 = parms.Item(\"PTS\") If listparm1 Is Nothing Then MsgBox(\"CAN'T FIND LIST.\", Title:=\"F**K\") Exit Sub End If MsgBox(listparm1.ValueList.Count) Dim NoLabelPos11(2) listparm1.ValueList.Item(1).GetCoordinates(NoLabelPos11) Dim NoLabelPos22(2) listparm1.ValueList.Item(2).GetCoordinates(NoLabelPos22) Console.WriteLine(\"XYZ:\" & NoLabelPos11(0) & \",\" & NoLabelPos11(1) & \",\" & NoLabelPos11(2) & vbCrLf & \"XYZ:\" & NoLabelPos22(0) & \",\" & NoLabelPos22(1) & \",\" & NoLabelPos22(2)) '\u6d4b\u8bd5\u6d4b\u91cf\u51fd\u6570 Dim aaq As Double = GetDistance(pt1, pt2) Console.WriteLine(\"DISTANCE: \" & CStr(aaq))","title":"GetPointCoord"},{"location":"DS-CODE/Automation/GetPointCoord/#vb","text":"","title":"VB"},{"location":"DS-CODE/Automation/GetPointCoord/#how-to-use-it","text":"Sub Main() CATIA = GetObject(, \"CATIA.Application\") ' getPrd() Dim sel As INFITF.Selection = CATIA.ActiveEditor.Selection Dim obj = sel.Item(1).Value Dim aa(2) As Double aa = GetPointCoordinate(obj) MsgBox(aa(0) & \",\" & aa(1) & \",\" & aa(2)) End Sub Function GetPointCoordinate(iPoint) As Double() Dim aaa1(0) As Object aaa1(0) = iPoint Dim theMeasureService As MeasurableService theMeasureService = CATIA.ActiveEditor.GetService(\"MeasurableService\") Dim theMeasurablePoint As MeasurablePoint theMeasurablePoint = theMeasureService.GetMeasurable(aaa1(0), CATMeasurableType.CAAMeasurablePoint) Dim theXPoint As Double Dim theYPoint As Double Dim theZPoint As Double theMeasurablePoint.GetPoint(theXPoint, theYPoint, theZPoint) Dim oCoord(2) As Double oCoord(0) = theXPoint oCoord(1) = theYPoint oCoord(2) = theZPoint Return oCoord End Function Dim parms As Parameters parms = part1.Parameters.SubList(hb1, True) 'MsgBox(\"PARMS:\" & CStr(parms.Count)) Dim listparm1 As ListParameter listparm1 = parms.Item(\"PTS\") If listparm1 Is Nothing Then MsgBox(\"CAN'T FIND LIST.\", Title:=\"F**K\") Exit Sub End If MsgBox(listparm1.ValueList.Count) Dim NoLabelPos11(2) listparm1.ValueList.Item(1).GetCoordinates(NoLabelPos11) Dim NoLabelPos22(2) listparm1.ValueList.Item(2).GetCoordinates(NoLabelPos22) Console.WriteLine(\"XYZ:\" & NoLabelPos11(0) & \",\" & NoLabelPos11(1) & \",\" & NoLabelPos11(2) & vbCrLf & \"XYZ:\" & NoLabelPos22(0) & \",\" & NoLabelPos22(1) & \",\" & NoLabelPos22(2)) '\u6d4b\u8bd5\u6d4b\u91cf\u51fd\u6570 Dim aaq As Double = GetDistance(pt1, pt2) Console.WriteLine(\"DISTANCE: \" & CStr(aaq))","title":"How to use it?"},{"location":"DS-CODE/Automation/GetRadius/","text":"V5 VBA Python C#.NET VB.NET Public Shared Function GetRadius(ByVal obj As Object) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim a As Measurable a = TheSPAWorkbench.GetMeasurable(obj) Dim b As Double b = Format(a.Radius, \"0.000\") GetRadius = b End Function CAA V6 VBA Python C#.NET VB.NET CAA","title":"GetRadius"},{"location":"DS-CODE/Automation/GetRadius/#v5","text":"","title":"V5"},{"location":"DS-CODE/Automation/GetRadius/#vba","text":"","title":"VBA"},{"location":"DS-CODE/Automation/GetRadius/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetRadius/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetRadius/#vbnet","text":"Public Shared Function GetRadius(ByVal obj As Object) As Double Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim a As Measurable a = TheSPAWorkbench.GetMeasurable(obj) Dim b As Double b = Format(a.Radius, \"0.000\") GetRadius = b End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/GetRadius/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/GetRadius/#v6","text":"","title":"V6"},{"location":"DS-CODE/Automation/GetRadius/#vba_1","text":"","title":"VBA"},{"location":"DS-CODE/Automation/GetRadius/#python_1","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetRadius/#cnet_1","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetRadius/#vbnet_1","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/GetRadius/#caa_1","text":"","title":"CAA"},{"location":"DS-CODE/Automation/GetSlope/","text":"Function GetSlope(X1 As Variant, X2 As Variant, Y1 As Variant, Y2 As Variant) As Double GetSlope = (Y1 - Y2) / (X1 - X2) End Function Python C#.NET VB.NET CAA","title":"GetSlope"},{"location":"DS-CODE/Automation/GetSlope/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetSlope/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetSlope/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/GetSlope/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/GetSubGSListFromParentGS/","text":"GetSubGSListFromParentGS CSharp VB C++ HRESULT GetSubGSListFromParentGS ( CATIPrtPart_var iPart , CATUnicodeString iGSName , CATListValCATBaseUnknown_var & spOGeometrySet ) { HRESULT hr = E_FAIL ; CATIPartRequest * piPartRequest = NULL ; hr = iPart -> QueryInterface ( IID_CATIPartRequest , ( void ** ) & piPartRequest ); if ( FAILED ( hr ) || piPartRequest == NULL ) { cout << \"QI CATIPartRequest Failed !\" << endl ; return hr ; } CATLISTV ( CATBaseUnknown_var ) SurfacicSetList ; piPartRequest -> GetSurfBodies ( \"\" , SurfacicSetList ); int size = SurfacicSetList . Size (); for ( int i = 1 ; i <= size ; i ++ ) { CATBaseUnknown_var spCurrentSet = SurfacicSetList [ i ]; CATIAlias_var spiAlias = spCurrentSet ; if ( spiAlias -> GetAlias () == iGSName ) //PIER { CATINavigateObject_var spiNavObj1 = spCurrentSet ; CATListValCATBaseUnknown_var * pChildrenListV1 = spiNavObj1 -> GetChildren (); for ( int k = 1 ; k <= pChildrenListV1 -> Size (); k ++ ) { CATBaseUnknown_var spFeature = ( * pChildrenListV1 )[ k ]; spiAlias = spFeature ; spOGeometrySet . Append ( spFeature ); } } } return hr ; }","title":"GetSubGSListFromParentGS"},{"location":"DS-CODE/Automation/GetSubGSListFromParentGS/#getsubgslistfromparentgs","text":"","title":"GetSubGSListFromParentGS"},{"location":"DS-CODE/Automation/GetSubGSListFromParentGS/#csharp","text":"","title":"CSharp"},{"location":"DS-CODE/Automation/GetSubGSListFromParentGS/#vb","text":"","title":"VB"},{"location":"DS-CODE/Automation/GetSubGSListFromParentGS/#c","text":"HRESULT GetSubGSListFromParentGS ( CATIPrtPart_var iPart , CATUnicodeString iGSName , CATListValCATBaseUnknown_var & spOGeometrySet ) { HRESULT hr = E_FAIL ; CATIPartRequest * piPartRequest = NULL ; hr = iPart -> QueryInterface ( IID_CATIPartRequest , ( void ** ) & piPartRequest ); if ( FAILED ( hr ) || piPartRequest == NULL ) { cout << \"QI CATIPartRequest Failed !\" << endl ; return hr ; } CATLISTV ( CATBaseUnknown_var ) SurfacicSetList ; piPartRequest -> GetSurfBodies ( \"\" , SurfacicSetList ); int size = SurfacicSetList . Size (); for ( int i = 1 ; i <= size ; i ++ ) { CATBaseUnknown_var spCurrentSet = SurfacicSetList [ i ]; CATIAlias_var spiAlias = spCurrentSet ; if ( spiAlias -> GetAlias () == iGSName ) //PIER { CATINavigateObject_var spiNavObj1 = spCurrentSet ; CATListValCATBaseUnknown_var * pChildrenListV1 = spiNavObj1 -> GetChildren (); for ( int k = 1 ; k <= pChildrenListV1 -> Size (); k ++ ) { CATBaseUnknown_var spFeature = ( * pChildrenListV1 )[ k ]; spiAlias = spFeature ; spOGeometrySet . Append ( spFeature ); } } } return hr ; }","title":"C++"},{"location":"DS-CODE/Automation/GetTechnologicalObjectParameters/","text":"AnnotatedViews ArrangementProduct AssemblyFeatures CATAnnotationSets ClashResults Clashes DMUReviews Distances Groups HumanWorkbench Inertia Marker3Ds Mechanisms Mechanisms_provider Merges Offsets PresentationBrowser ResourceProgramManager SIMColorActions SIMExperiments SIMSequences SIMVisibilityActions Sampleds ScenesCollection Sections Silhouettes Simplifications SpatialQuery StructureFoundations StructureMembers StructureObjectFactory StructurePlates SweptVolumes TagGroupFactory Thicknesses ThreeDCuts Tracks VibrationVolumes Wrappings AssemblyFeatures libCATAssemblyFeature ArrangementProduct libCATArrangementAuto ArrangementArea libCATArrangementAuto ArrangementRectangle libCATArrangementAuto ArrangementItemReservation libCATArrangementAuto ArrangementRun libCATArrangementAuto ArrangementPathway libCATArrangementAuto ArrangementBoundary libCATArrangementAuto PspWorkbench libCATPspIDLImpl - PspAttribute libCATPspIDLImpl - PspLogicalLine libCATPspIDLImpl SchematicRoot libCATSchIDLBasicImpl CATAnnotationSets libCATTPSMODEL HumanWorkbench libSWKHumanModelingBase Manikin libSWKHumanModelingBase Tag libDNBIgpSetupModel TagGroup libDNBIgpSetupModel TagFactory libDNBIgpSetupModel TagGroupFactory libDNBIgpSetupModel MountManager libDNBIgpSetupModel RobotTaskFactory libDNBIgpSetupModel Operation libDNBIgpSetupModel RobotMotion libDNBIgpSetupModel RobotTask libDNBIgpSetupModel ActiveTask libDNBResourceProgramModel ResourceProgramManager libDNBResourceProgramModel DNBIARobGenericController libDNBRobotBase RobControllerFactory libDNBRobotBase Tracks libCATFittingSimulation Sampleds libCATFittingSimulation Mechanisms_provider libCATMechanisms Mechanisms libCATMechanisms Dressups_provider libCATMechanisms Groups libCATDMUBase AnnotatedViews libCATDMUBase Marker3Ds libCATDMUBase DMUReviews libCATDMUReviewModel Presentations libCATDMUPres PresentationBrowser libCATDMUPres ScenesCollection libCATNewScenesObject SIMExperiments libCATSIMExperimentModel SIMSequences libCATSIMSequenceModel SIMColorActions libCATSIMColorActionModel SIMVisibilityActions libCATSIMVisibilityActionModel Sections libCATSpaCAA Distances libCATSpaCAA Clashes libCATSpaCAA Inertia libCATSpaCAA ClashResults libCATSpaCAA Silhouettes libCATSMTCAA Wrappings libCATSMTCAA Thicknesses libCATSMTCAA Offsets libCATSMTCAA SweptVolumes libCATSMTCAA VibrationVolumes libCATSMTCAA ThreeDCuts libCATSMTCAA SpatialQuery libCATSMTCAA Simplifications libCATSMTCAA Merges libCATSMTCAA StructureMembers libCATStructure StructurePlates libCATStructure StructureObjectFactory libCATStructure StructureFoundations libCATStructure","title":"GetTechnologicalObjectParameters"},{"location":"DS-CODE/Automation/GetXYZFromArray/","text":"Function GetXYZFromArray(PtArr As Variant, XVal As Double, YVal As Double, ZVal As Double, Closest1Farthest0 As Integer) As Integer Dim WinningVal As Double If Closest1Farthest0 = 1 Then WinningVal = 1000000023 Else WinningVal = -1000000023 End If Dim WinningInt As Integer WinningInt = 0 For X = 0 To UBound(PtArr) Dim CurDistVal As Double CurDistVal = find3DDistance(XVal, YVal, ZVal, PtArr(X)(0), PtArr(X)(1), PtArr(X)(2)) If Closest1Farthest0 = 1 Then If WinningVal > CurDistVal Then WinningVal = CurDistVal WinningInt = X End If Else If WinningVal < CurDistVal Then WinningVal = CurDistVal WinningInt = X End If End If Next X GetXYZFromArray = WinningInt End Function Python C#.NET VB.NET CAA","title":"GetXYZFromArray"},{"location":"DS-CODE/Automation/GetXYZFromArray/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetXYZFromArray/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetXYZFromArray/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/GetXYZFromArray/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/GetXYZFromPoint/","text":"Function GetXYZFromPoint(InputPt As Variant) As Variant Dim SArr() ReDim SArr(2) If IsUpdatable(InputPt) Then Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(InputPt) CMeas.GetPoint SArr GetXYZFromPoint = SArr Exit Function End If SArr(0) = 0 SArr(1) = 0 SArr(2) = 0 GetXYZFromPoint = SArr End Function Python C#.NET VB.NET Public Shared Function GetXYZFromPoint(InputPt As Object, mypart As Part) As Object Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim SArr() ReDim SArr(2) If IsUpdatable(InputPt, mypart) Then Dim CMeas CMeas = TheSPAWorkbench.GetMeasurable(InputPt) CMeas.GetPoint(SArr) GetXYZFromPoint = SArr Exit Function End If SArr(0) = 0 SArr(1) = 0 SArr(2) = 0 GetXYZFromPoint = SArr End Function CAA","title":"GetXYZFromPoint"},{"location":"DS-CODE/Automation/GetXYZFromPoint/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetXYZFromPoint/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetXYZFromPoint/#vbnet","text":"Public Shared Function GetXYZFromPoint(InputPt As Object, mypart As Part) As Object Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim SArr() ReDim SArr(2) If IsUpdatable(InputPt, mypart) Then Dim CMeas CMeas = TheSPAWorkbench.GetMeasurable(InputPt) CMeas.GetPoint(SArr) GetXYZFromPoint = SArr Exit Function End If SArr(0) = 0 SArr(1) = 0 SArr(2) = 0 GetXYZFromPoint = SArr End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/GetXYZFromPoint/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/GetYIntercept/","text":"Function GetYIntercept(X1 As Variant, X2 As Variant, Y1 As Variant, Y2 As Variant) As Double GetYIntercept = Y1 - (X1 * (Y1 - Y2) / (X1 - X2)) End Function Python C#.NET VB.NET CAA","title":"GetYIntercept"},{"location":"DS-CODE/Automation/GetYIntercept/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/GetYIntercept/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/GetYIntercept/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/GetYIntercept/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/HasAngleBetween/","text":"Function HasAngleBetween(Obj1 As Variant, Obj2 As Variant) As Double On Error GoTo Blast Set C2 = TheSPAWorkbench.GetMeasurable(Obj1) AngleVal = C2.GetAngleBetween(Obj2) HasAngleBetween = AngleVal Exit Function Blast: HasAngleBetween = 1000 End Function Python C#.NET VB.NET Public Shared Function HasAngleBetween(Obj1 As Object, Obj2 As Object) As Double On Error GoTo Blast Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") C2 = TheSPAWorkbench.GetMeasurable(Obj1) AngleVal = C2.GetAngleBetween(Obj2) HasAngleBetween = AngleVal Exit Function Blast: HasAngleBetween = 1000 End Function CAA","title":"HasAngleBetween"},{"location":"DS-CODE/Automation/HasAngleBetween/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/HasAngleBetween/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/HasAngleBetween/#vbnet","text":"Public Shared Function HasAngleBetween(Obj1 As Object, Obj2 As Object) As Double On Error GoTo Blast Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") C2 = TheSPAWorkbench.GetMeasurable(Obj1) AngleVal = C2.GetAngleBetween(Obj2) HasAngleBetween = AngleVal Exit Function Blast: HasAngleBetween = 1000 End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/HasAngleBetween/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/HasArea/","text":"Function HasArea(InputSurf As Variant) As Boolean On Error GoTo Blast2 Dim CMEAS Set CMEAS = TheSPAWorkbench.GetMeasurable(InputSurf) Dim AreaCalc As Double AreaCalc = CMEAS.Area HasArea = True Exit Function Blast2: HasArea = False End Function Python C#.NET VB.NET Public Shared Function HasArea(InputSurf As Object) As Boolean On Error GoTo Blast2 Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CMEAS CMEAS = TheSPAWorkbench.GetMeasurable(InputSurf) Dim AreaCalc As Double AreaCalc = CMEAS.Area HasArea = True Exit Function Blast2: HasArea = False End Function CAA","title":"HasArea"},{"location":"DS-CODE/Automation/HasArea/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/HasArea/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/HasArea/#vbnet","text":"Public Shared Function HasArea(InputSurf As Object) As Boolean On Error GoTo Blast2 Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CMEAS CMEAS = TheSPAWorkbench.GetMeasurable(InputSurf) Dim AreaCalc As Double AreaCalc = CMEAS.Area HasArea = True Exit Function Blast2: HasArea = False End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/HasArea/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/HasCOG/","text":"Function HasCOG(PointObj As Variant) As Boolean On Error GoTo Blast Dim MMeas Set MMeas = TheSPAWorkbench.GetMeasurable(PointObj) Dim MM(2) MMeas.GetCOG MM HasCOG = True Exit Function Blast: HasCOG = False End Function Python C#.NET VB.NET CAA","title":"HasCOG"},{"location":"DS-CODE/Automation/HasCOG/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/HasCOG/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/HasCOG/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/HasCOG/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/HasHOffset/","text":"Function HasHOffset(BeamBeam As Variant) As Boolean On Error GoTo Blast Dim HS HS = BeamBeam.HOffset.Value HasHOffset = True Exit Function Blast: HasHOffset = False End Function Python C#.NET VB.NET CAA","title":"HasHOffset"},{"location":"DS-CODE/Automation/HasHOffset/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/HasHOffset/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/HasHOffset/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/HasHOffset/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/HasPackage/","text":"'Dim PkgManager 'Set PkgManager = MyPart.GetItem(\"GTCAttPkgManagerVBExt\") Function HasPackage(InputObj As Variant) As Boolean On Error GoTo Blast Dim pkgs As AttPackages Set pkgs = attManager.GetAttachedPackages(InputObj) If pkgs.Count = 0 Then hasPackage = False Exit Function End If HasPackage = True Exit Function Blast: HasPackage = False End Function","title":"HasPackage"},{"location":"DS-CODE/Automation/HasParent/","text":"Function HasParent(CurObj As Variant) As Boolean On Error GoTo Blast Dim NAParent Set NAParent = CurObj.Parent HasParent = True Exit Function Blast: HasParent = False End Function","title":"HasParent"},{"location":"DS-CODE/Automation/HasRadius/","text":"VBA Function HasRadius(InputCrv As Variant) As Double On Error GoTo blast Dim PtMeas Dim RadiusVal As Double Set PtMeas = TheSPAWorkbench.GetMeasurable(InputCrv) RadiusVal = PtMeas.Radius HasRadius = RadiusVal Exit Function blast: HasRadius = 0 End Function VB.NET Public Shared Function HasRadius(InputCrv As Object) As Double On Error GoTo blast Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim PtMeas Dim RadiusVal As Double PtMeas = TheSPAWorkbench.GetMeasurable(InputCrv) RadiusVal = PtMeas.Radius HasRadius = RadiusVal Exit Function blast: HasRadius = 0 End Function","title":"HasRadius"},{"location":"DS-CODE/Automation/HasRadius/#vba","text":"Function HasRadius(InputCrv As Variant) As Double On Error GoTo blast Dim PtMeas Dim RadiusVal As Double Set PtMeas = TheSPAWorkbench.GetMeasurable(InputCrv) RadiusVal = PtMeas.Radius HasRadius = RadiusVal Exit Function blast: HasRadius = 0 End Function","title":"VBA"},{"location":"DS-CODE/Automation/HasRadius/#vbnet","text":"Public Shared Function HasRadius(InputCrv As Object) As Double On Error GoTo blast Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim PtMeas Dim RadiusVal As Double PtMeas = TheSPAWorkbench.GetMeasurable(InputCrv) RadiusVal = PtMeas.Radius HasRadius = RadiusVal Exit Function blast: HasRadius = 0 End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/HasVolume/","text":"VBA Function HasVolume(InputBody As Variant, CurPart As Part) As Boolean On Error GoTo Blast2 Dim CMEAS Set CMEAS = theSPAWorkbench.GetMeasurable(CurPart.CreateReferenceFromObject(InputBody)) Dim VolCalc As Double VolCalc = CMEAS.Volume HasVolume = True Exit Function Blast2: HasVolume = False End Function VB.NET Public Shared Function HasVolume(InputBody As Object, CurPart As Part) As Boolean On Error GoTo Blast2 Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CMEAS CMEAS = TheSPAWorkbench.GetMeasurable(CurPart.CreateReferenceFromObject(InputBody)) Dim VolCalc As Double VolCalc = CMEAS.Volume HasVolume = True Exit Function Blast2: HasVolume = False End Function","title":"HasVolume"},{"location":"DS-CODE/Automation/HasVolume/#vba","text":"Function HasVolume(InputBody As Variant, CurPart As Part) As Boolean On Error GoTo Blast2 Dim CMEAS Set CMEAS = theSPAWorkbench.GetMeasurable(CurPart.CreateReferenceFromObject(InputBody)) Dim VolCalc As Double VolCalc = CMEAS.Volume HasVolume = True Exit Function Blast2: HasVolume = False End Function","title":"VBA"},{"location":"DS-CODE/Automation/HasVolume/#vbnet","text":"Public Shared Function HasVolume(InputBody As Object, CurPart As Part) As Boolean On Error GoTo Blast2 Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CMEAS CMEAS = TheSPAWorkbench.GetMeasurable(CurPart.CreateReferenceFromObject(InputBody)) Dim VolCalc As Double VolCalc = CMEAS.Volume HasVolume = True Exit Function Blast2: HasVolume = False End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/HybridShapeExists/","text":"Function HybridShapeExists(InputStr As String) As Boolean On Error GoTo blast Set HHH = CurSet.HybridShapes.Item(InputStr) HybridShapeExists = True Exit Function blast: HybridShapeExists = False End Function","title":"HybridShapeExists"},{"location":"DS-CODE/Automation/HybridShapeExistsInHybridBody/","text":"Function HybridShapeExistsInHybridBody(InputStr As String, CurSet as HybridBody) As Boolean On Error GoTo blast Set HHH = CurSet.HybridShapes.Item(InputStr) HybridShapeExists = True Exit Function blast: HybridShapeExists = False End Function","title":"HybridShapeExistsInHybridBody"},{"location":"DS-CODE/Automation/ImmediateAnnotation/","text":"Sub ImmediateAnnotation(PointObj As HybridShape, TextStr As String) Dim PtMeas Dim Ccoords() ReDim Ccoords(2) Set PtMeas = theSPAWorkbench.GetMeasurable(PointObj) PtMeas.GetPoint (Ccoords) Dim AnnFact As AnnotationFactory Set AnnFact = CurAnnSet.AnnotationFactory Dim UserSurf As UserSurface Set UserSurf = UserSurfS.Generate(PointObj) Dim GGG As Annotation Set GGG = AnnFact.CreateEvoluateText(UserSurf, (Ccoords(0) * 1), (Ccoords(1) * 1), (Ccoords(2) * 1), False) Set GText = GGG.Text GText.Text = TextStr End Sub","title":"ImmediateAnnotation"},{"location":"DS-CODE/Automation/Is64Bit/","text":"Function Is64Bit() As Boolean If InStr(CATIA.SystemConfiguration.OperatingSystem, \"64\") <> 0 Then Is64Bit = True Else Is64Bit = False End If End Function","title":"Is64Bit"},{"location":"DS-CODE/Automation/IsAppOpen/","text":"Function IsAppOpen(AppName As String) As Boolean On Error GoTo Blast Set MyApp = GetObject(, AppName & \".Application\") IsAppOpen = True Exit Function Blast: IsAppOpen = False End Function","title":"IsAppOpen"},{"location":"DS-CODE/Automation/IsConvertibleToNumber/","text":"Function IsConvertibleToNumber(InputStr As Variant) As Boolean On Error GoTo Blast HHH = CDbl(InputStr) If InputStr = \"\" Then IsConvertibleToNumber = False Exit Function End If IsConvertibleToNumber = True Exit Function Blast: IsConvertibleToNumber = False End Function","title":"IsConvertibleToNumber"},{"location":"DS-CODE/Automation/IsCurveAbove/","text":"```vb Function IsCurveAbove(BottomObj As Variant, TopObj As Variant) As Boolean If IsUpdatable(BottomObj) = False Or IsUpdatable(TopObj) = False Then IsCurveAbove = False Exit Function End If Dim BMeas Set BMeas = TheSPAWorkbench.GetMeasurable(BottomObj) Dim TMeas Set TMeas = TheSPAWorkbench.GetMeasurable(TopObj) Dim BCoord(8) Dim TCoord(8) BMeas.GetPointsOnCurve BCoord TMeas.GetPointsOnCurve TCoord If BCoord(2) < TCoord(2) Then IsCurveAbove = True Else IsCurveAbove = False End If End Function ```","title":"IsCurveAbove"},{"location":"DS-CODE/Automation/IsIntersectionResultCurve/","text":"Function IsIntersectionResultCurve(Obj1 As Variant, Obj2 As Variant, ConstSet As HybridBody) As Boolean On Error GoTo Blast If CheckIntersection(Obj1, Obj2, MyPart, MyHSFactory) Then Dim SamInt As HybridShapeIntersection Set SamInt = MyHSFactory.AddNewIntersection(Obj1, Obj2) ConstSet.AppendHybridShape SamInt If CrvCheck(SamInt) Then MyHSFactory.DeleteObjectForDatum SamInt IsIntersectionResultCurve = True Exit Function End If MyHSFactory.DeleteObjectForDatum SamInt End If Blast: IsIntersectionResultCurve = False End Function","title":"IsIntersectionResultCurve"},{"location":"DS-CODE/Automation/IsMidPtCoordToFarFromCurve/","text":"Function IsMidPtCoordToFarFromCurve(Pt1 As Variant, Pt2 As Variant, CCurve As Variant, MaxDist As Double, ConstSet As HybridBody) As Boolean Dim MidPt As HybridShapePointBetween Set MidPt = MyHSFactory.AddNewPointBetween(Pt1, Pt2, 0.5, True) ConstSet.AppendHybridShape MidPt IsUpdatable MidPt Dim MMeas Set MMeas = TheSPAWorkbench.GetMeasurable(MidPt) Dim MDist As Double MDist = MMeas.GetMinimumDistance(CCurve) If MDist < MaxDist Then IsMidPtCoordToFarFromCurve = False Else IsMidPtCoordToFarFromCurve = True End If MyHSFactory.DeleteObjectForDatum MidPt End Function","title":"IsMidPtCoordToFarFromCurve"},{"location":"DS-CODE/Automation/IsNumber/","text":"Function IsNumber(ValueObj As String) As Boolean On Error GoTo Blast Dim HHH As Double HHH = CDbl(ValueObj) IsNumber = True Exit Function Blast: IsNumber = False End Function","title":"IsNumber"},{"location":"DS-CODE/Automation/IsObjInSetWithinDist/","text":"Function IsObjInSetWithinDist(STRUCTSet As HybridBody, CompareObj As Variant, DistVal As Double) As Boolean Dim MEMCounter As Integer MEMCounter = 1 Dim TMeas Set TMeas = TheSPAWorkbench.GetMeasurable(CompareObj) While MEMCounter <= STRUCTSet.HybridShapes.Count Dim TDist As Double TDist = TMeas.GetMinimumDistance(STRUCTSet.HybridShapes.Item(MEMCounter)) If DistVal > TDist Then IsObjInSetWithinDist = True Exit Function End If MEMCounter = MEMCounter + 1 Wend IsObjInSetWithinDist = False End Function","title":"IsObjInSetWithinDist"},{"location":"DS-CODE/Automation/IsPartDocument/","text":"Function IsPartDocument(CurObj As Variant) As Boolean On Error GoTo Blast Dim CurPD As PartDocument Set CurPD = CurObj IsPartDocument = True Exit Function Blast: IsPartDocument = False End Function","title":"IsPartDocument"},{"location":"DS-CODE/Automation/IsPlanar/","text":"\u68c0\u67e5\u66f2\u9762\u662f\u5426\u662f\u5e73\u9762\u7684 VBA Function IsPlanar(InputObj As Variant) As Boolean Dim CM Set CM = TheSPAWorkbench.GetMeasurable(InputObj) If CM.GeometryName = 7 Then IsPlanar = True Else IsPlanar = False End If End Function VB.NET Public Shared Function IsPlanar(InputObj As Object) As Boolean Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CM CM = TheSPAWorkbench.GetMeasurable(InputObj) If CM.GeometryName = 7 Then IsPlanar = True Else IsPlanar = False End If End Function","title":"IsPlanar"},{"location":"DS-CODE/Automation/IsPlanar/#_1","text":"","title":"\u68c0\u67e5\u66f2\u9762\u662f\u5426\u662f\u5e73\u9762\u7684"},{"location":"DS-CODE/Automation/IsPlanar/#vba","text":"Function IsPlanar(InputObj As Variant) As Boolean Dim CM Set CM = TheSPAWorkbench.GetMeasurable(InputObj) If CM.GeometryName = 7 Then IsPlanar = True Else IsPlanar = False End If End Function","title":"VBA"},{"location":"DS-CODE/Automation/IsPlanar/#vbnet","text":"Public Shared Function IsPlanar(InputObj As Object) As Boolean Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CM CM = TheSPAWorkbench.GetMeasurable(InputObj) If CM.GeometryName = 7 Then IsPlanar = True Else IsPlanar = False End If End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/IsProductActive/","text":"Function IsProductActive() As Boolean OPArr = StrangeComponent(\"Part\", \"TESTCASE1\", CATIA.ActiveDocument.Product.Products, CATIA.ActiveDocument.Product) Set OutputProd = OPArr(0) Set OutputPart = OPArr(1) Set ScrExtRef = OutputPart.HybridBodies.Add SafeHide ScrExtRef If CATIA.ActiveDocument.Selection.Count <> 0 Then CATIA.ActiveDocument.Selection.Clear End If CATIA.ActiveDocument.Selection.Add OutputPart Dim JVal As CatVisPropertyShow CATIA.ActiveDocument.Selection.VisProperties.GetShow JVal If JVal = catVisPropertyNoShowAttr Then CATIA.StartCommand \"undo\" IsProductActive = True Exit Function End If CATIA.StartCommand \"undo\" IsProductActive = False End Function","title":"IsProductActive"},{"location":"DS-CODE/Automation/IsProductDocument/","text":"Function IsProductDocument(CurObj As Variant) As Boolean On Error GoTo Blast Dim CurPD As ProductDocument Set CurPD = CurObj IsProductDocument = True Exit Function Blast: IsProductDocument = False End Function","title":"IsProductDocument"},{"location":"DS-CODE/Automation/IsSmartUpdatable/","text":"Function IsSmartUpdatable(InputObj As Variant) As Boolean On Error GoTo blast Set CurPart = GetContainingPart(InputObj) CurPart.UpdateObject InputObj IsSmartUpdatable = True Exit Function blast: IsSmartUpdatable = False End Function","title":"IsSmartUpdatable"},{"location":"DS-CODE/Automation/IsSpace/","text":"Function IsSpace(Obj1 As Variant) As Boolean On Error GoTo Blast Dim HHH As ArcSpace Set HHH = Obj1 IsSpace = True Exit Function Blast: IsSpace = False End Function","title":"IsSpace"},{"location":"DS-CODE/Automation/IsSurfaceAbove/","text":"Function IsSurfaceAbove(BottomObj As Variant, TopObj As Variant) As Boolean If IsUpdatable(BottomObj) = False Or IsUpdatable(TopObj) = False Then IsSurfaceAbove = False Exit Function End If Dim BMeas Set BMeas = TheSPAWorkbench.GetMeasurable(BottomObj) Dim TMeas Set TMeas = TheSPAWorkbench.GetMeasurable(TopObj) Dim BCoord(2) Dim TCoord(2) BMeas.GetCOG BCoord TMeas.GetCOG TCoord If BCoord(2) < TCoord(2) Then IsSurfaceAbove = True Else IsSurfaceAbove = False End If End Function","title":"IsSurfaceAbove"},{"location":"DS-CODE/Automation/IsUpdatable/","text":"VBA Function IsUpdatable(InputObj As Variant) As Boolean On Error GoTo Blast2 MyPart.UpdateObject InputObj IsUpdatable = True Exit Function Blast2: IsUpdatable = False End Function VB.NET Public Shared Function IsUpdatable(InputObj As Object, MyPart As Part) As Boolean On Error GoTo Blast2 MyPart.UpdateObject(InputObj) IsUpdatable = True Exit Function Blast2: IsUpdatable = False End Function","title":"IsUpdatable"},{"location":"DS-CODE/Automation/IsUpdatable/#vba","text":"Function IsUpdatable(InputObj As Variant) As Boolean On Error GoTo Blast2 MyPart.UpdateObject InputObj IsUpdatable = True Exit Function Blast2: IsUpdatable = False End Function","title":"VBA"},{"location":"DS-CODE/Automation/IsUpdatable/#vbnet","text":"Public Shared Function IsUpdatable(InputObj As Object, MyPart As Part) As Boolean On Error GoTo Blast2 MyPart.UpdateObject(InputObj) IsUpdatable = True Exit Function Blast2: IsUpdatable = False End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/IsUpdatableInPart/","text":"Function IsUpdatableInPart(InputObj As Variant, CurPart As Part) As Boolean On Error GoTo blast CurPart.UpdateObject InputObj IsUpdatableInPart= True Exit Function blast: IsUpdatableInPart= False End Function","title":"IsUpdatableInPart"},{"location":"DS-CODE/Automation/KeepBiggestSplit/","text":"Sub KeepBiggestSplit(SplitSurface As Variant) Dim Pt1Meas 'As Measurable Set Pt1Meas = TheSPAWorkbench.GetMeasurable(SplitSurface) Dim AArea As Double AArea = Pt1Meas.Area SplitSurface.Orientation = 1 MyPart.UpdateObject SplitSurface Dim Pt2Meas 'As Measurable Set Pt2Meas = TheSPAWorkbench.GetMeasurable(SplitSurface) Dim BArea As Double BArea = Pt2Meas.Area If AArea > BArea Then SplitSurface.Orientation = -1 End If End Sub","title":"KeepBiggestSplit"},{"location":"DS-CODE/Automation/KeepCurveSplitByLength/","text":"Sub KeepLongestSplit(InputSpl As HybridShapeSplit, ForSmaller0ForBigger1 As Integer) MyPart.UpdateObject InputSpl Dim HMeas Set HMeas = theSPAWorkbench.GetMeasurable(InputSpl) Dim FirstDim As Double FirstDim = HMeas.Length InputSpl.InvertOrientation MyPart.UpdateObject InputSpl Dim SecondDim As Double SecondDim = HMeas.Length If ForSmaller0ForBigger1 = 1 Then If FirstDim > SecondDim Then InputSpl.InvertOrientation MyPart.UpdateObject InputSpl End If else If FirstDim < SecondDim Then InputSpl.InvertOrientation MyPart.UpdateObject InputSpl End If End Sub","title":"KeepCurveSplitByLength"},{"location":"DS-CODE/Automation/KeepHighestLevel/","text":"Sub KeepHighestLevel(LevelPlane As HybridShapePlaneOffset, TestPtObj As Variant) If IsUpdatable(LevelPlane) And IsUpdatable(TestPtObj) Then Dim OrigOri As Integer OrigOri = LevelPlane.Orientation Dim OppOri As Integer OppOri = (-1) * OrigOri Dim TMeas Set TMeas = TheSPAWorkbench.GetMeasurable(TestPtObj) Dim OrigPt Coords(2) TMeas.GetPoint OrigPtCoords LevelPlane.Orientation = OppOri IsUpdatable TestPtObj Dim TMeas2 Set TMeas2 = TheSPAWorkbench.GetMeasurable(TestPtObj) Dim OppPtCoords(2) TMeas2.GetPoint OppPtCoords If OppPtCoords(2) < OrigPtCoords(2) Then LevelPlane.Orientation = OrigOri IsUpdatable TestPtObj End If End If End Sub","title":"KeepHighestLevel"},{"location":"DS-CODE/Automation/KeepSmallerCurvePar/","text":"Sub KeepSmallerCurvePar(CurvePar As HybridShapeCurvePar) If IsUpdatable(CurvePar) Then Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(CurvePar) Dim FirstDist As Double FirstDist = CMeas.Length CurvePar.InvertDirection = False Dim SecondDist As Double If IsUpdatable(CurvePar) Then Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePar) SecondDist = CMeas2.Length End If If SecondDist > FirstDist Then CurvePar.InvertDirection = True IsUpdatable CurvePar End If Else CurvePar.InvertDirection = False IsUpdatable CurvePar End If End Sub","title":"KeepSmallerCurvePar"},{"location":"DS-CODE/Automation/KeepSmallestSplit/","text":"Sub KeepSmallestSplit(SplitSurface As Variant) Dim Pt1Meas 'As Measurable Set Pt1Meas = thespaworkbench.GetMeasurable(SplitSurface) Dim AArea As Double AArea = Pt1Meas.Area SplitSurface.Orientation = 1 MyPart.UpdateObject SplitSurface Dim Pt2Meas 'As Measurable Set Pt2Meas = thespaworkbench.GetMeasurable(SplitSurface) Dim BArea As Double BArea = Pt2Meas.Area If AArea < BArea Then SplitSurface.Orientation = -1 End If End Sub","title":"KeepSmallestSplit"},{"location":"DS-CODE/Automation/KeepSolidSplitByIntersection/","text":"Sub KeepSolidSplitByIntersection(SplitSolid As Split, CompareObj As Variant) Dim Ori Ori = SplitSolid.SplittingSide Dim OppOri OppOri = Not SplitSolid.SplittingSide If IsUpdatable(SplitSolid) Then Dim TempInt As HybridShapeIntersection Set TempInt = MyHSFactory.AddNewIntersection(MyPart.CreateReferenceFromObject(SplitSolid), CompareObj) If IsUpdatable(TempInt) = False Then SplitSolid.SplittingSide = OppOri IsUpdatable SplitSolid End If End If End Sub","title":"KeepSolidSplitByIntersection"},{"location":"DS-CODE/Automation/KeepSolidSplitByVolume/","text":"Sub KeepSolidSplitByVolume(SplitSolid As Split, ForSmaller0ForBigger1 As Integer) If IsUpdatable(SplitSolid) Then Dim Pt1Meas Set Pt1Meas = TheSPAWorkbench.GetMeasurable(MyPart.CreateReferenceFromObject(SplitSolid)) Dim AVol As Double AVol = Pt1Meas.Volume SplitSolid.SplittingSide = catNegativeSide If IsUpdatable(SplitSolid) = False Then SplitSolid.SplittingSide = catPositiveSide Exit Sub End If Dim Pt2Meas Set Pt2Meas = TheSPAWorkbench.GetMeasurable(MyPart.CreateReferenceFromObject(SplitSolid)) Dim BVol As Double BVol = Pt2Meas.Volume If ForSmaller0ForBigger1 = 0 Then If AVol < BVol Then SplitSolid.SplittingSide = catNegativeSide End If Else If AVol > BVol Then SplitSolid.SplittingSide = catPositiveSide End If End If End If End Sub","title":"KeepSolidSplitByVolume"},{"location":"DS-CODE/Automation/KeepSolidSplitByVolumeInPart/","text":"Sub KeepSolidSplitByVolumeInPart(SplitSolid As Split, ForSmaller0ForBigger1 As Integer, CurPart As Part) Dim Ori Ori = SplitSolid.SplittingSide Dim OppOri OppOri = Not SplitSolid.SplittingSide If IsUpdatableInPart(SplitSolid, CurPart) Then Dim Pt1Meas Set Pt1Meas = theSPAWorkbench.GetMeasurable(CurPart.CreateReferenceFromObject(SplitSolid)) If HasVolume(SplitSolid, CurPart) Then Dim AVol As Double AVol = Pt1Meas.Volume Else SplitSolid.SplittingSide = OppOri IsUpdatableInPart SplitSolid, CurPart Exit Sub End If SplitSolid.SplittingSide = OppOri If IsUpdatableInPart(SplitSolid, CurPart) = False Then SplitSolid.SplittingSide = Ori Exit Sub End If Dim Pt2Meas Set Pt2Meas = theSPAWorkbench.GetMeasurable(CurPart.CreateReferenceFromObject(SplitSolid)) If HasVolume(SplitSolid, CurPart) Then Dim BVol As Double BVol = Pt2Meas.Volume Else SplitSolid.SplittingSide = Ori IsUpdatableInPart SplitSolid, CurPart Exit Sub End If If ForSmaller0ForBigger1 = 0 Then If AVol < BVol Then SplitSolid.SplittingSide = Ori End If Else If AVol > BVol Then SplitSolid.SplittingSide = Ori End If End If End If End Sub","title":"KeepSolidSplitByVolumeInPart"},{"location":"DS-CODE/Automation/KeepSplitByArea/","text":"Sub KeepSplitByArea(SplitSurface As Variant, ForSmaller0ForBigger1 as Integer) Dim Pt1Meas 'As Measurable Set Pt1Meas = thespaworkbench.GetMeasurable(SplitSurface) Dim AArea As Double AArea = Pt1Meas.Area SplitSurface.Orientation = 1 MyPart.UpdateObject SplitSurface Dim Pt2Meas 'As Measurable Set Pt2Meas = thespaworkbench.GetMeasurable(SplitSurface) Dim BArea As Double BArea = Pt2Meas.Area If ForSmaller0ForBigger1 = 0 Then If AArea < BArea Then SplitSurface.Orientation = -1 End If Else If AArea > BArea Then SplitSurface.Orientation = -1 End If End If End Sub","title":"KeepSplitByArea"},{"location":"DS-CODE/Automation/KeepTrimOrientation/","text":"Function KeepTrimOrientation(TrimObj As HybridShapeTrim, nthSmallest As Integer) As Boolean Dim UVal As Integer Dim VVal As Integer UVal = -1 Dim WinningArr(3) Dim WinningOri(3) Dim TempArr(1) Dim WinArrNum As Integer WinArrNum = 0 Dim CMeas Dim CLen As Double ForceColorObjUgly TrimObj, 120, 120, 220, 1, 1000, 3, 1000 While UVal <= 1 VVal = -1 While VVal <= 1 TrimObj.FirstOrientation = UVal TrimObj.SecondOrientation = VVal IsUpdatable TrimObj Set CMeas = TheSPAWorkbench.GetMeasurable(TrimObj) CLen = CMeas.Length WinningArr(WinArrNum) = CLen TempArr(0) = UVal TempArr(1) = VVal WinningOri(WinArrNum) = TempArr WinArrNum = WinArrNum + 1 VVal = VVal + 2 Wend UVal = UVal + 2 Wend Sort2Arrays WinningArr, WinningOri TrimObj.FirstOrientation = WinningOri(nthSmallest)(0) TrimObj.SecondOrientation = WinningOri(nthSmallest)(1) IsUpdatable TrimObj End Function","title":"KeepTrimOrientation"},{"location":"DS-CODE/Automation/LineFromArcEndPts/","text":"Function LineFromArcEndPts(ArcCrv As Variant, ConstSet As HybridBody, DestSet As HybridBody) As HybridShapeLinePtPt If CrvCheck(ArcCrv) Then Dim BPt As HybridShapePointOnCurve Set BPt = MyHSFactory.AddNewPointOnCurveFromPercent(ArcCrv, 0, True) ConstSet.AppendHybridShape BPt BPt.Name = ArcCrv.Name & \"_BPT\" MyHSFactory.GSMVisibility BPt, 0 Dim EPt As HybridShapePointOnCurve Set EPt = MyHSFactory.AddNewPointOnCurveFromPercent(ArcCrv, 1, True) ConstSet.AppendHybridShape EPt EPt.Name = ArcCrv.Name & \"_EPT\" MyHSFactory.GSMVisibility EPt, 0 Dim LineObj As HybridShapeLinePtPt Set LineObj = MyHSFactory.AddNewLinePtPt(BPt, EPt) DestSet.AppendHybridShape LineObj LineObj.Name = ArcCrv.Name & \"_FINLINE\" IsUpdatable LineObj Set LineFromArcEndPts = LineObj End If End Function","title":"LineFromArcEndPts"},{"location":"DS-CODE/Automation/LoadExtRef/","text":"VBA Function LoadExtRef(OldObj As Variant, ExtRefSet As HybridBody) As Variant If MySel.Count <> 0 Then MySel.Clear End If MySel.Add OldObj MySel.Copy If MySel.Count <> 0 Then MySel.Clear End If MySel.Add ExtRefSet 'DRVExtRefSet MySel.PasteSpecial \"CATPrtResult\" If MySel.Count <> 0 Then MySel.Clear End If Dim ExtRefMainSurf Set ExtRefMainSurf = ExtRefSet.HybridShapes.Item(ExtRefSet.HybridShapes.Count) Set LoadExtRef = ExtRefMainSurf End Function VB.NET Public Shared Function LoadExtRef(OldObj As Object, ExtRefSet As HybridBody\uff0c MySel As Selection) As Object If MySel.Count <> 0 Then MySel.Clear() End If MySel.Add(OldObj) MySel.Copy() If MySel.Count <> 0 Then MySel.Clear() End If MySel.Add(ExtRefSet) 'DRVExtRefSet MySel.PasteSpecial(\"CATPrtResult\") If MySel.Count <> 0 Then MySel.Clear() End If Dim ExtRefMainSurf ExtRefMainSurf = ExtRefSet.HybridShapes.Item(ExtRefSet.HybridShapes.Count) LoadExtRef = ExtRefMainSurf End Function C public INFITF . AnyObject LoadExtRef ( INFITF . Selection sel , INFITF . AnyObject OldObj , MECMOD . HybridBody ExtRefSet ) { sel . Clear (); sel . Add ( OldObj ); sel . Copy (); sel . Clear (); sel . Add ( ExtRefSet ); //DRVExtRefSet sel . PasteSpecial ( \"CATPrtResult\" ); sel . Clear (); INFITF . AnyObject Obj = ExtRefSet . HybridShapes . Item ( ExtRefSet . HybridShapes . Count ); return Obj ; }","title":"LoadExtRef"},{"location":"DS-CODE/Automation/LoadExtRef/#vba","text":"Function LoadExtRef(OldObj As Variant, ExtRefSet As HybridBody) As Variant If MySel.Count <> 0 Then MySel.Clear End If MySel.Add OldObj MySel.Copy If MySel.Count <> 0 Then MySel.Clear End If MySel.Add ExtRefSet 'DRVExtRefSet MySel.PasteSpecial \"CATPrtResult\" If MySel.Count <> 0 Then MySel.Clear End If Dim ExtRefMainSurf Set ExtRefMainSurf = ExtRefSet.HybridShapes.Item(ExtRefSet.HybridShapes.Count) Set LoadExtRef = ExtRefMainSurf End Function","title":"VBA"},{"location":"DS-CODE/Automation/LoadExtRef/#vbnet","text":"Public Shared Function LoadExtRef(OldObj As Object, ExtRefSet As HybridBody\uff0c MySel As Selection) As Object If MySel.Count <> 0 Then MySel.Clear() End If MySel.Add(OldObj) MySel.Copy() If MySel.Count <> 0 Then MySel.Clear() End If MySel.Add(ExtRefSet) 'DRVExtRefSet MySel.PasteSpecial(\"CATPrtResult\") If MySel.Count <> 0 Then MySel.Clear() End If Dim ExtRefMainSurf ExtRefMainSurf = ExtRefSet.HybridShapes.Item(ExtRefSet.HybridShapes.Count) LoadExtRef = ExtRefMainSurf End Function","title":"VB.NET"},{"location":"DS-CODE/Automation/LoadExtRef/#c","text":"public INFITF . AnyObject LoadExtRef ( INFITF . Selection sel , INFITF . AnyObject OldObj , MECMOD . HybridBody ExtRefSet ) { sel . Clear (); sel . Add ( OldObj ); sel . Copy (); sel . Clear (); sel . Add ( ExtRefSet ); //DRVExtRefSet sel . PasteSpecial ( \"CATPrtResult\" ); sel . Clear (); INFITF . AnyObject Obj = ExtRefSet . HybridShapes . Item ( ExtRefSet . HybridShapes . Count ); return Obj ; }","title":"C"},{"location":"DS-CODE/Automation/MakeArrayFromExcelColumn/","text":"Function MakeArrayFromExcelColumn(ColumnNo As Integer, TotalRows As Integer) As Variant Dim CurArr() ReDim CurArr(1) CurArr(0) = \"\" For MK = 2 To TotalRows Dim CurStr As String CurStr = CStr(CurCells(MK, ColumnNo).Value) Dim WCounter As Integer WCounter = 0 While WCounter < UBound(CurArr) And CurStr <> CurArr(WCounter) WCounter = WCounter + 1 Wend If WCounter >= UBound(CurArr) Then CurArr(UBound(CurArr)) = CurStr ReDim Preserve CurArr(UBound(CurArr) + 1) End If Next MK MakeArrayFromExcelColumn = CurArr End Function","title":"MakeArrayFromExcelColumn"},{"location":"DS-CODE/Automation/MakeArrayFromSearch/","text":"Function MakeArrayFromSearch(SearchStr As String) As Variant MySel.Search SearchStr Dim TempArr() If MySel.Count = 0 Then ReDim TempArr(0) MakeArrayFromSearch = TempArr Exit Function End If ReDim TempArr(MySel.Count - 1) For X = 0 To MySel.Count - 1 Set TempArr(X) = MySel.Item(X + 1).Value Next X MakeArrayFromSearch = TempArr End Function","title":"MakeArrayFromSearch"},{"location":"DS-CODE/Automation/MakeArrayMidDoubles/","text":"Function MakeArrayMidDoubles(InputArr As Variant) As Variant Dim MidArr() ReDim MidArr(UBound(InputArr) - 1) For X = 0 To UBound(InputArr) - 1 Dim FVal FVal = InputArr(X) Dim SVal SVal = InputArr(X + 1) MidArr(X) = (CDbl(FVal) + CDbl(SVal)) / 2 Next X MakeArrayMidDoubles = MidArr End Function","title":"MakeArrayMidDoubles"},{"location":"DS-CODE/Automation/MakeTangentLineAtPt/","text":"Sub MakeTangentLineAtPt(InputCrv As Variant, EndPt As Variant, DestSet As HybridBody) Dim TangLine As HybridShapeLineTangency Set TangLine = MyHSFactory.AddNewLineTangency(InputCrv, EndPt, 0, 100, True) DestSet.AppendHybridShape TangLine TangLine.Name = InputCrv.Name & \"_TANGLINE\" IsUpdatable TangLine Dim Tmeas Set Tmeas = TheSPAWorkbench.GetMeasurable(InputCrv) Dim PtCoords(8) Tmeas.GetPointsOnCurve PtCoords MoveLineTangencyCloserToCoord TangLine, CDbl(PtCoords(3)), CDbl(PtCoords(4)), CDbl(PtCoords(5)) IsUpdatable TangLine ForceColorObjUgly TangLine, 30, 230, 100, 6, 1000, 1, 1000 End Sub","title":"MakeTangentLineAtPt"},{"location":"DS-CODE/Automation/MatchBlendOrientationsWithEndPts/","text":"Sub MatchBlendOrientations(InputBlend As HybridShapeBlend) Dim Curve1 Set Curve1 = MyHSFactory.GSMGetObjectFromReference(InputBlend.GetCurve(1)) Dim Curve2 Set Curve2 = MyHSFactory.GSMGetObjectFromReference(InputBlend.GetCurve(2)) IsUpdatable Curve1 Dim C1Meas Set C1Meas = TheSPAWorkbench.GetMeasurable(Curve1) Dim C1Coords() ReDim C1Coords(8) C1Meas.GetPointsOnCurve C1Coords IsUpdatable Curve2 Dim C2Meas Set C2Meas = TheSPAWorkbench.GetMeasurable(Curve2) Dim C2Coords() ReDim C2Coords(8) C2Meas.GetPointsOnCurve C2Coords Dim FirstDist As Double FirstDist = find3DDistance(C1Coords(0), C1Coords(1), C1Coords(2), C2Coords(0), C2Coords(1), C2Coords(2)) Dim SecondDist As Double SecondDist = find3DDistance(C1Coords(0), C1Coords(1), C1Coords(2), C2Coords(6), C2Coords(7), C2Coords(8)) If FirstDist > SecondDist Then InputBlend.SetOrientation 1, 1 InputBlend.SetOrientation 2, -1 End If End Sub","title":"MatchBlendOrientationsWithEndPts"},{"location":"DS-CODE/Automation/ModifyFeatureParameters/","text":"Option Explicit Off Imports INFITF Imports KnowledgewareTypeLib Imports MECMOD Module ModifyFeatureParameters dim CATIA As INFITF.Application = GetObject(, \"CATIA.Application\") dim sel As INFITF.Selection = CATIA.ActiveDocument.Selection Sub ModFeaParm() Console.WriteLine(\"\u9996\u5148\u6279\u91cf\u9009\u62e9\u7269\u4f53,\u7136\u540e\u6309\u56de\u8f66\u952e\u3002\") console.ReadKey() Console.WriteLine(\"\u5df2\u7ecf\u9009\u62e9\u7269\u4f53\u6570\u91cf\uff1a\" & sel.Count) 'Dim coll As ArrayList = New ArrayList() 'coll.Clear() console.WriteLine(\"\u8bf7\u8f93\u5165\u8981\u4fee\u6539\u53c2\u6570\u7684\u540d\u79f0\uff1a\") dim parastr as string =console.readline() console.WriteLine(\"\u8bf7\u8f93\u5165\u8981\u4fee\u6539\u53c2\u6570\u7684\u503c\uff1a\") dim paraValue as string = console.readline() For i = 1 To sel.Count dim obj as object = sel.Item(i).VALUE DIM PART AS PART =GetContainingPart(obj) call ModifyAttribute(obj,part,parastr,paraValue) Next Console.ReadKey() End Sub Sub ModifyAttribute(obj As Object, part As Part, parmName As String, parmValue As String) Dim pams As Parameters = part.Parameters.SubList(obj, True) On Error GoTo blast pams.Item(parmName).ValuateFromString(parmValue) part.UpdateObject(obj) blast: On Error Resume Next part.UpdateObject(obj) End Sub Public Function GetContainingPart(oObj) Current = oObj found = False While found = False Current = Current.Parent If TypeName(Current) = \"Part\" Then found = True End If End While GetContainingPart = Current End Function End Module","title":"ModifyFeatureParameters"},{"location":"DS-CODE/Automation/MoveArcSlabCloserToObjByInverse/","text":"Sub MoveArcSlabCloserToObjByInverse(ASlab As ArcSlab, TInverse As HybridShapeInverse, CompareObj As Variant, ConstSet As HybridBody) If IsUpdatable(ASlab) = False Or IsUpdatable(TInverse) = False Then Exit Sub End If Dim CompMeas Set CompMeas = TheSPAWorkbench.GetMeasurable(CompareObj) Dim A1Meas Set A1Meas = TheSPAWorkbench.GetMeasurable(MyPart.CreateReferenceFromObject(ASlab)) Dim FCoord(2) A1Meas.GetCOG FCoord Dim MyPt As HybridShapePointCoord Set MyPt = MyHSFactory.AddNewPointCoord(FCoord(0), FCoord(1), FCoord(2)) ConstSet.AppendHybridShape MyPt IsUpdatable MyPt Dim FDist 'As Double FDist = CompMeas.GetMinimumDistance(MyPt) Dim OrigBool As Integer OrigBool = TInverse.Orientation Dim OppBool As Integer OppBool = (-1) * OrigBool TInverse.Orientation = OppBool IsUpdatable AWall Set A1Meas = TheSPAWorkbench.GetMeasurable(MyPart.CreateReferenceFromObject(ASlab)) Dim SCoord(2) A1Meas.GetCOG SCoord MyPt.X.Value = SCoord(0) MyPt.Y.Value = SCoord(1) MyPt.Z.Value = SCoord(2) IsUpdatable MyPt Dim SDist 'As Double SDist = CompMeas.GetMinimumDistance(MyPt) If SDist > FDist Then TInverse.Orientation = OrigBool IsUpdatable ASlab End If MyHSFactory.DeleteObjectForDatum MyPt End Sub","title":"MoveArcSlabCloserToObjByInverse"},{"location":"DS-CODE/Automation/MoveArcWallCloserToCoordByInverse/","text":"Sub MoveArcWallCloserToCoordByInverse(AWall As ArcWall, TInverse As HybridShapeInverse, XVal As Double, YVal As Double, ZVal As Double) If IsUpdatable(AWall) = False Or IsUpdatable(TInverse) = False Then Exit Sub End If Dim A1Meas Set A1Meas = TheSPAWorkbench.GetMeasurable(MyPart.CreateReferenceFromObject(AWall)) Dim FCoord(2) A1Meas.GetCOG FCoord Dim FDist As Double FDist = find3DDistance(FCoord(0), FCoord(1), FCoord(2), XVal, YVal, ZVal) Dim OrigBool As Integer OrigBool = TInverse.Orientation Dim OppBool As Integer OppBool = (-1) * OrigBool TInverse.Orientation = OppBool IsUpdatable AWall Set A1Meas = TheSPAWorkbench.GetMeasurable(MyPart.CreateReferenceFromObject(AWall)) Dim SCoord(2) A1Meas.GetCOG SCoord Dim SDist As Double SDist = find3DDistance(SCoord(0), SCoord(1), SCoord(2), XVal, YVal, ZVal) If SDist > FDist Then TInverse.Orientation = OrigBool IsUpdatable AWall End If End Sub","title":"MoveArcWallCloserToCoordByInverse"},{"location":"DS-CODE/Automation/MoveAxisSystemXDirFartherFromCoord/","text":"Sub MoveAxisSystemXDirFartherFromCoord(CurvePar As AxisSystem, ResultObj As Variant, XVal As Double, YVal As Double, ZVal As Double) If IsUpdatable(CurvePar) And IsUpdatable(ResultObj) Then Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(ResultObj) Dim CCoords() ReDim CCoords(2) CMeas.GetCOG CCoords Dim FirstDist As Double FirstDist = find3DDistance(CCoords(0), CCoords(1), CCoords(2), XVal, YVal, ZVal) CurvePar.XAxisType = catAxisSystemAxisSameDirection If IsUpdatable(ResultObj) = False Then Exit Sub End If Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(ResultObj) Dim CCoords2() ReDim CCoords2(2) CMeas2.GetCOG CCoords2 Dim SecondDist As Double SecondDist = find3DDistance(CCoords2(0), CCoords2(1), CCoords2(2), XVal, YVal, ZVal) If SecondDist < FirstDist Then CurvePar.XAxisType = catAxisSystemAxisOppositeDirection If IsUpdatable(ResultObj) = False Then Exit Sub End If End If End If End Sub","title":"MoveAxisSystemXDirFartherFromCoord"},{"location":"DS-CODE/Automation/MoveCircle2PointsRadCloserToObj/","text":"Sub MoveCircle2PointsRadCloserToObj(CurveCirc As HybridShapeCircle2PointsRad, CompareObj As Variant) MyPart.UpdateObject CurveCirc MyPart.UpdateObject CompareObj Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(CurveCirc) Dim FirstDist As Double FirstDist = CMeas.GetMinimumDistance(CompareObj) CurveCirc.SetLimitation 3 CurveCirc.Orientation = -1 MyPart.UpdateObject CurveCirc Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(CurveCirc) Dim SecondDist As Double SecondDist = CMeas.GetMinimumDistance(CompareObj) If SecondDist > FirstDist Then CurveCirc.SetLimitation 2 CurveCirc.Orientation = 1 MyPart.UpdateObject CurveCirc End If End Sub","title":"MoveCircle2PointsRadCloserToObj"},{"location":"DS-CODE/Automation/MoveCurveParCloserToCoord/","text":"Sub MoveCurveParCloserToCoord(CurvePar As HybridShapeCurvePar, XVal As Double, YVal As Double, ZVal As Double) MyPart.UpdateObject CurvePar Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(CurvePar) Dim CCoords() ReDim CCoords(8) CMeas.GetPointsOnCurve CCoords Dim FirstDist As Double FirstDist = find3DDistance(CCoords(0), CCoords(1), CCoords(2), XVal, YVal, ZVal) CurvePar.InvertDirection = False MyPart.UpdateObject CurvePar Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePar) Dim CCoords2() ReDim CCoords2(8) CMeas2.GetPointsOnCurve CCoords2 Dim SecondDist As Double SecondDist = find3DDistance(CCoords2(0), CCoords2(1), CCoords2(2), XVal, YVal, ZVal) If SecondDist > FirstDist Then CurvePar.InvertDirection = True MyPart.UpdateObject CurvePar End If End Sub","title":"MoveCurveParCloserToCoord"},{"location":"DS-CODE/Automation/MoveCurveParCloserToObj/","text":"Sub MoveCurveParCloserToObj(CurvePar As HybridShapeCurvePar, CompareObj As Variant) Dim CurOri As Boolean CurOri = CurvePar.InvertDirection Dim OppOri As Boolean OppOri = Not CurOri IsUpdatable CurvePar IsUpdatable CompareObj Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(CurvePar) Dim FirstDist As Double FirstDist = CMeas.GetMinimumDistance(CompareObj) CurvePar.InvertDirection = OppOri IsUpdatable CurvePar Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePar) Dim SecondDist As Double SecondDist = CMeas.GetMinimumDistance(CompareObj) If SecondDist > FirstDist Then CurvePar.InvertDirection = CurOri IsUpdatable CurvePar End If End Sub","title":"MoveCurveParCloserToObj"},{"location":"DS-CODE/Automation/MoveExtremumCloserToObj/","text":"Sub MoveExtremumCloserToObj(CurExtremum As HybridShapeExtremum, CompareObj As Variant) MyPart.UpdateObject CurExtremum MyPart.UpdateObject CompareObj Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(CurExtremum) Dim FirstDist As Double FirstDist = CMeas.GetMinimumDistance(CompareObj) CurExtremum.ExtremumType = 0 MyPart.UpdateObject CurExtremum Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(CurExtremum) Dim SecondDist As Double SecondDist = CMeas.GetMinimumDistance(CompareObj) If SecondDist > FirstDist Then CurExtremum.ExtremumType = 1 MyPart.UpdateObject CurExtremum End If End Sub","title":"MoveExtremumCloserToObj"},{"location":"DS-CODE/Automation/MoveExtrudeCloserToCoord/","text":"Sub MoveExtrudeCloserToCoord(CurvePar As HybridShapeExtrude, XVal As Double, YVal As Double, ZVal As Double) MyPart.UpdateObject CurvePar Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(CurvePar) Dim CCoords() ReDim CCoords(2) CMeas.GetCOG CCoords Dim FirstDist As Double FirstDist = find3DDistance(CCoords(0), CCoords(1), CCoords(2), XVal, YVal, ZVal) CurvePar.EndOffset.Value = (-1) * CurvePar.EndOffset.Value MyPart.UpdateObject CurvePar Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePar) Dim CCoords2() ReDim CCoords2(2) CMeas2.GetCOG CCoords2 Dim SecondDist As Double SecondDist = find3DDistance(CCoords2(0), CCoords2(1), CCoords2(2), XVal, YVal, ZVal) If SecondDist > FirstDist Then CurvePar.EndOffset.Value = (-1) * CurvePar.EndOffset.Value MyPart.UpdateObject CurvePar End If End Sub","title":"MoveExtrudeCloserToCoord"},{"location":"DS-CODE/Automation/MoveLineAngleCloserToCoord/","text":"Sub MoveLineAngleCloserToCoord(CurvePar As HybridShapeLineAngle, XVal As Double, YVal As Double, ZVal As Double) MyPart.UpdateObject CurvePar Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(CurvePar) Dim CCoords() ReDim CCoords(8) CMeas.GetPointsOnCurve CCoords ' PointsOnCurve CCoords Dim FirstDist As Double FirstDist = find3DDistance(CCoords(6), CCoords(7), CCoords(8), XVal, YVal, ZVal) CurvePar.Orientation = False MyPart.UpdateObject CurvePar Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePar) Dim CCoords2() ReDim CCoords2(8) CMeas2.GetPointsOnCurve CCoords2 ' PointsOnCurve CCoords2 Dim secondDist As Double secondDist = find3DDistance(CCoords2(6), CCoords2(7), CCoords2(8), XVal, YVal, ZVal) If secondDist > FirstDist Then CurvePar.Orientation = True MyPart.UpdateObject CurvePar End If End Sub","title":"MoveLineAngleCloserToCoord"},{"location":"DS-CODE/Automation/MoveLineAngleCloserToObj/","text":"Sub MoveLineAngleCloserToObj(CurvePt As HybridShapeLineAngle, CompareObj As Variant) Dim CurOri As Boolean CurOri = CurvePt.Orientation Dim OppOri As Boolean OppOri = Not CurOri IsUpdatable CurvePt IsUpdatable CompareObj Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(CurvePt) Dim FirstDist As Double FirstDist = CMeas.GetMinimumDistance(CompareObj) CurvePt.Orientation = OppOri IsUpdatable CurvePt Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePt) Dim secondDist As Double secondDist = CMeas.GetMinimumDistance(CompareObj) If secondDist > FirstDist Then CurvePt.Orientation = CurOri IsUpdatable CurvePt End If End Sub","title":"MoveLineAngleCloserToObj"},{"location":"DS-CODE/Automation/MoveLineAngleCloserToObjByNegAngle/","text":"Sub MoveLineAngleCloserToObjByNegAngle(CurvePt As HybridShapeLineAngle, CompareObj As Variant) Dim CurOri As Double CurOri = CurvePt.Angle.Value Dim OppOri As Double OppOri = CurvePt.Angle.Value * (-1) IsUpdatable CurvePt IsUpdatable CompareObj Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(CurvePt) Dim FirstDist As Double FirstDist = CMeas.GetMinimumDistance(CompareObj) CurvePt.Angle.Value = OppOri IsUpdatable CurvePt Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePt) Dim secondDist As Double secondDist = CMeas.GetMinimumDistance(CompareObj) If secondDist > FirstDist Then CurvePt.Angle.Value = CurOri IsUpdatable CurvePt End If End Sub","title":"MoveLineAngleCloserToObjByNegAngle"},{"location":"DS-CODE/Automation/MoveLinePtDirCloserToObj/","text":"Sub MoveLinePtDirCloserToObj(CurvePt As HybridShapeLinePtDir, CompareObj As Variant) Dim CurOri As Boolean CurOri = CurvePt.Orientation Dim OppOri As Boolean OppOri = Not CurOri IsUpdatable CurvePt IsUpdatable CompareObj Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(CurvePt) Dim FirstDist As Double FirstDist = CMeas.GetMinimumDistance(CompareObj) CurvePt.Orientation = OppOri IsUpdatable CurvePt Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePt) Dim secondDist As Double secondDist = CMeas.GetMinimumDistance(CompareObj) If secondDist > FirstDist Then CurvePt.Orientation = CurOri IsUpdatable CurvePt End If End Sub","title":"MoveLinePtDirCloserToObj"},{"location":"DS-CODE/Automation/MoveLineTangencyCloserToCoord/","text":"Sub MoveLineTangencyCloserToCoord(CurvePar As HybridShapeLineTangency, XVal As Double, YVal As Double, ZVal As Double) Dim CurOri Dim OppOri CurOri = CurvePar.Orientation If CurOri = False Then OppOri = True Else OppOri = False End If MyPart.UpdateObject CurvePar Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(CurvePar) Dim CCoords() ReDim CCoords(8) CMeas.GetPointsOnCurve CCoords Dim FirstDist As Double FirstDist = find3DDistance(CCoords(3), CCoords(4), CCoords(5), XVal, YVal, ZVal) CurvePar.Orientation = OppOri IsUpdatable CurvePar Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePar) Dim CCoords2() ReDim CCoords2(8) CMeas2.GetPointsOnCurve CCoords2 Dim SecondDist As Double SecondDist = find3DDistance(CCoords2(3), CCoords2(4), CCoords2(5), XVal, YVal, ZVal) If SecondDist > FirstDist Then CurvePar.Orientation = CurOri IsUpdatable CurvePar End If End Sub","title":"MoveLineTangencyCloserToCoord"},{"location":"DS-CODE/Automation/MoveOffsetCloserToCoord/","text":"Sub MoveOffsetCloserToCoord(CurvePar As HybridShapeOffset, XVal As Double, YVal As Double, ZVal As Double) MyPart.UpdateObject CurvePar Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(CurvePar) Dim CCoords() ReDim CCoords(2) CMeas.GetCOG CCoords Dim FirstDist As Double FirstDist = find3DDistance(CCoords(0), CCoords(1), CCoords(2), XVal, YVal, ZVal) CurvePar.OffsetDirection = False MyPart.UpdateObject CurvePar Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePar) Dim CCoords2() ReDim CCoords2(2) CMeas2.GetCOG CCoords2 Dim SecondDist As Double SecondDist = find3DDistance(CCoords2(0), CCoords2(1), CCoords2(2), XVal, YVal, ZVal) If SecondDist > FirstDist Then CurvePar.OffsetDirection = True MyPart.UpdateObject CurvePar End If End Sub","title":"MoveOffsetCloserToCoord"},{"location":"DS-CODE/Automation/MoveOffsetCloserToObj/","text":"Sub MoveOffsetCloserToObj(OffsetSurf As HybridShapeOffset, CompareObj As Variant) Dim CurOri As Boolean CurOri = OffsetSurf.OffsetDirection '.InvertDirection Dim OppOri As Boolean OppOri = Not CurOri IsUpdatable OffsetSurf IsUpdatable CompareObj Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(OffsetSurf) Dim FirstDist As Double FirstDist = CMeas.GetMinimumDistance(CompareObj) OffsetSurf.OffsetDirection = OppOri IsUpdatable OffsetSurf Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(OffsetSurf) Dim SecondDist As Double SecondDist = CMeas.GetMinimumDistance(CompareObj) If SecondDist > FirstDist Then OffsetSurf.OffsetDirection = CurOri IsUpdatable OffsetSurf End If End Sub","title":"MoveOffsetCloserToObj"},{"location":"DS-CODE/Automation/MovePlaneOffsetCloserToObj/","text":"Sub MovePlaneOffsetCloserToObj(CurvePL As HybridShapePlaneOffset, CompareObj As Variant) Dim CurOri As Boolean CurOri = CurvePL.Orientation Dim OppOri As Boolean OppOri = Not CurOri IsUpdatable CurvePL IsUpdatable CompareObj Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(CurvePL) Dim FirstDist As Double FirstDist = CMeas.GetMinimumDistance(CompareObj) CurvePL.Orientation = OppOri IsUpdatable CurvePL Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePL) Dim secondDist As Double secondDist = CMeas.GetMinimumDistance(CompareObj) If secondDist > FirstDist Then CurvePL.Orientation = CurOri IsUpdatable CurvePL End If End Sub","title":"MovePlaneOffsetCloserToObj"},{"location":"DS-CODE/Automation/MovePointOnCurveCloserToObj/","text":"Sub MovePointOnCurveCloserToObj(CurvePt As HybridShapePointOnCurve, CompareObj As Variant) Dim CurOri As Boolean CurOri = CurvePt.Orientation Dim OppOri As Boolean OppOri = Not CurOri IsUpdatable CurvePt IsUpdatable CompareObj Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(CurvePt) Dim FirstDist As Double FirstDist = CMeas.GetMinimumDistance(CompareObj) CurvePt.Orientation = OppOri IsUpdatable CurvePt Dim CMeas2 Set CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePt) Dim secondDist As Double secondDist = CMeas.GetMinimumDistance(CompareObj) If secondDist > FirstDist Then CurvePt.Orientation = CurOri IsUpdatable CurvePt End If End Sub","title":"MovePointOnCurveCloserToObj"},{"location":"DS-CODE/Automation/MultiRotate/","text":"Function MultiRotate(Obj1 As Variant, RotCount As Integer, RotAngle As Double, CurSet As HybridBody, NameStr As String) As Variant Dim RotArr() ReDim RotArr(RotCount - 1) Dim RotSet As HybridBody Set RotSet = CurSet.HybridBodies.Add RotSet.Name = NameStr & \"_SET\" For X = 1 To RotCount StatusBarShort X, RotCount - 1, \"MultiRotation... \" Set RotArr(X - 1) = MyHSFactory.AddNewRotate(Obj1, AxisLine, RotAngle * X) RotSet.AppendHybridShape RotArr(X - 1) RotArr(X - 1).Name = NameStr & Format(X + 1, \"00\") & \"_WRF\" IsUpdatable RotArr(X - 1) ForceColorObjUgly RotArr(X - 1), 40, 40, 39, 6, 1000, 1, 1000 'MyHSFactory.GSMVisibility RotArr(X - 1), 0 Next X MultiRotate = RotArr End Function","title":"MultiRotate"},{"location":"DS-CODE/Automation/ObjectVisibility/","text":"\u5143\u7d20\u9690\u85cf\u4e0e\u663e\u793a CAA /** * \u9690\u85cf\u5143\u7d20 * @param ipListElemObj * \u5143\u7d20\u5217\u8868 */ void HideElements ( CATLISTV ( CATISpecObject_var ) ipListElemObj ) { for ( int i = 1 ; i < ipListElemobj . Size (); i ++ ;) { CATIVisProperties * pPropONElem = NULL ; HRESULT rc = ipListElemobj [ i ] -> QueryInterface ( IID_CATIVisProperties ,( void ** ) & pPropONElem ); if ( NULL != pPropONElem ) { CATIVisPropertiesValues PropValue ; CATIVisPropertyType PropTypeOnPtObj = CATVPShow ; CATVisGeomType GeomTypeOnPtObj = CATVPGlobalType ; PropValue . SetShowAttr ( CATNOShowAttr ); rc = pPropONElem -> SetPropertiesAttr ( PropValue , PropTypeOnPtObj , GeomTypeOnPtObj ); pPropONElem -> Release (); pPropONElem = NULL ; } } } /** * \u68c0\u6d4b\u5143\u7d20\u663e\u793a\u72b6\u6001 */ bool CheckIsShow ( CATIVisProperties_var spPropOnTreeNode ) { // 5/18 add bool IsShow = false ; CATShowAttribut oShow ; if ( NULL_var != spPropOnTreeNode ) { if ( SUCCEEDED ( GetShow ( spPropOnTreeNode , oShow , 2 ))) { // model show flag if ( oShow == CATShowAttr ) { IsShow = true ; } } } //--- 5/18 add return IsShow ; } /** * \u53d6\u5f97\u5143\u7d20\u663e\u793a\u6807\u8bc6 Show Flag */ HRESULT GetShow ( CATIVisProperties_var spProp , CATShowAttribut & oShow , int Mode ) { if ( spProp == NULL_var ) return E_FAIL ; CATVisPropertiesValues MyPropertyOnFace ; CATVisPropertyType PropTypeOnFace = CATVPShow ; CATVisGeomType GeomTypeOnFace ; if ( Mode == 1 ) GeomTypeOnFace = CATVPMesh ; else GeomTypeOnFace = CATVPGlobalType ; HRESULT rc = spProp -> GetPropertiesAtt ( MyPropertyOnFace , PropTypeOnFace , GeomTypeOnFace ); if ( SUCCEEDED ( rc ) ) { HRESULT HR = MyPropertyOnFace . GetShowAttr ( oShow ); if ( FAILED ( HR )) return E_FAIL ; } return S_OK ; } //\u5143\u7d20\u9690\u85cf\u4e0e\u663e\u793a /** * \u9ad8\u4eae\u7279\u5f81 * @param spSpec * \u9ad8\u4eae\u7279\u5f81 */ HRESULT HighLightSpecObject ( CATISpecObject_var spSpec , CATBoolean boolClearHistory ) { HRESULT rc = E_FAIL ; CATFrmEditor * pEditor = CATFrmEditor :: GetCurrentEditor (); if ( NULL == pEditor ) return rc ; CATHSO * pHSO = pEditor -> GetHSO (); if ( NULL == pHSO ) return rc ; //\u4e3a1\u65f6\uff0c\u6e05\u695a\u6240\u6709\u5df2\u6709\u7684\u9ad8\u4eae if ( boolClearHistory ) pHSO -> Empty (); CATPathElement pContext = pEditor -> GetUIActiveObject (); CATIBuildPath * piBuildPath = NULL ; rc = spSpec -> QueryInterface ( IID_CATIBuildPath , ( void ** ) & piBuildPath ); if ( SUCCEEDED ( rc ) && piBuildPath != NULL ) { CATPathElement * pPathElement = NULL ; rc = piBuildPath -> ExtractPathElement ( & pContext , & pPathElement ); if ( pPathElement != NULL ) { pHSO -> AddElement ( pPathElement ); pPathElement -> Release (); pPathElement = NULL ; } piBuildPath -> Release (); piBuildPath = NULL ; } return S_OK ; } VB Python","title":"ObjectVisibility"},{"location":"DS-CODE/Automation/ObjectVisibility/#_1","text":"","title":"\u5143\u7d20\u9690\u85cf\u4e0e\u663e\u793a"},{"location":"DS-CODE/Automation/ObjectVisibility/#caa","text":"/** * \u9690\u85cf\u5143\u7d20 * @param ipListElemObj * \u5143\u7d20\u5217\u8868 */ void HideElements ( CATLISTV ( CATISpecObject_var ) ipListElemObj ) { for ( int i = 1 ; i < ipListElemobj . Size (); i ++ ;) { CATIVisProperties * pPropONElem = NULL ; HRESULT rc = ipListElemobj [ i ] -> QueryInterface ( IID_CATIVisProperties ,( void ** ) & pPropONElem ); if ( NULL != pPropONElem ) { CATIVisPropertiesValues PropValue ; CATIVisPropertyType PropTypeOnPtObj = CATVPShow ; CATVisGeomType GeomTypeOnPtObj = CATVPGlobalType ; PropValue . SetShowAttr ( CATNOShowAttr ); rc = pPropONElem -> SetPropertiesAttr ( PropValue , PropTypeOnPtObj , GeomTypeOnPtObj ); pPropONElem -> Release (); pPropONElem = NULL ; } } } /** * \u68c0\u6d4b\u5143\u7d20\u663e\u793a\u72b6\u6001 */ bool CheckIsShow ( CATIVisProperties_var spPropOnTreeNode ) { // 5/18 add bool IsShow = false ; CATShowAttribut oShow ; if ( NULL_var != spPropOnTreeNode ) { if ( SUCCEEDED ( GetShow ( spPropOnTreeNode , oShow , 2 ))) { // model show flag if ( oShow == CATShowAttr ) { IsShow = true ; } } } //--- 5/18 add return IsShow ; } /** * \u53d6\u5f97\u5143\u7d20\u663e\u793a\u6807\u8bc6 Show Flag */ HRESULT GetShow ( CATIVisProperties_var spProp , CATShowAttribut & oShow , int Mode ) { if ( spProp == NULL_var ) return E_FAIL ; CATVisPropertiesValues MyPropertyOnFace ; CATVisPropertyType PropTypeOnFace = CATVPShow ; CATVisGeomType GeomTypeOnFace ; if ( Mode == 1 ) GeomTypeOnFace = CATVPMesh ; else GeomTypeOnFace = CATVPGlobalType ; HRESULT rc = spProp -> GetPropertiesAtt ( MyPropertyOnFace , PropTypeOnFace , GeomTypeOnFace ); if ( SUCCEEDED ( rc ) ) { HRESULT HR = MyPropertyOnFace . GetShowAttr ( oShow ); if ( FAILED ( HR )) return E_FAIL ; } return S_OK ; } //\u5143\u7d20\u9690\u85cf\u4e0e\u663e\u793a /** * \u9ad8\u4eae\u7279\u5f81 * @param spSpec * \u9ad8\u4eae\u7279\u5f81 */ HRESULT HighLightSpecObject ( CATISpecObject_var spSpec , CATBoolean boolClearHistory ) { HRESULT rc = E_FAIL ; CATFrmEditor * pEditor = CATFrmEditor :: GetCurrentEditor (); if ( NULL == pEditor ) return rc ; CATHSO * pHSO = pEditor -> GetHSO (); if ( NULL == pHSO ) return rc ; //\u4e3a1\u65f6\uff0c\u6e05\u695a\u6240\u6709\u5df2\u6709\u7684\u9ad8\u4eae if ( boolClearHistory ) pHSO -> Empty (); CATPathElement pContext = pEditor -> GetUIActiveObject (); CATIBuildPath * piBuildPath = NULL ; rc = spSpec -> QueryInterface ( IID_CATIBuildPath , ( void ** ) & piBuildPath ); if ( SUCCEEDED ( rc ) && piBuildPath != NULL ) { CATPathElement * pPathElement = NULL ; rc = piBuildPath -> ExtractPathElement ( & pContext , & pPathElement ); if ( pPathElement != NULL ) { pHSO -> AddElement ( pPathElement ); pPathElement -> Release (); pPathElement = NULL ; } piBuildPath -> Release (); piBuildPath = NULL ; } return S_OK ; }","title":"CAA"},{"location":"DS-CODE/Automation/ObjectVisibility/#vb","text":"","title":"VB"},{"location":"DS-CODE/Automation/ObjectVisibility/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/ParameterFromSubName/","text":"Function ParameterFromSubName(NameStr As String, ParmsList As Parameters) As Parameter For X = 1 To ParmsList.Count If InStr(ParmsList.Item(X).Name, NameStr) <> 0 Then Set ParameterFromSubName = ParmsList.Item(X) Exit Function End If Next X End Function","title":"ParameterFromSubName"},{"location":"DS-CODE/Automation/PlacePointOnCurve/","text":"Function PlacePointOnCurve(CurLine As Variant, StartPt As Variant, CurDist As String, CurSet As HybridBody, CurName As String) As HybridShapePointOnCurve Dim CC As HybridShapePointOnCurve Set CC = MyHSFactory.AddNewPointOnCurveWithReferenceFromDistance(CurLine, StartPt, 1, True) CurSet.AppendHybridShape CC CC.Offset.ValuateFromString CurDist CC.Name = CurName IsUpdatable CC ForceColorObjUgly CC, 254, 254, 254, 1000, 5, 1000, 1000 MovePointOnCurveCloserToObj CC, AxisLine Set PlacePointOnCurve = CC End Function","title":"PlacePointOnCurve"},{"location":"DS-CODE/Automation/QuickAnnotationAtEndLine/","text":"V5 VB.NET Public Shared Sub QuickAnnotationAtEndLine(GenObj As Object, TextStr As String, mypart As Part) Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim PTMeas PTMeas = TheSPAWorkbench.GetMeasurable(GenObj) Dim PTCOG() ReDim PTCOG(8) PTMeas.GetPointsOnCurve(PTCOG) Dim UserSurf As UserSurface UserSurf = mypart.UserSurfaces.Generate(GenObj) Dim annotationSets1 As AnnotationSets = mypart.AnnotationSets Dim annotationSet1 As AnnotationSet = annotationSets1.Add(\"UDS\") Dim userSurfaces1 As UserSurfaces = mypart.UserSurfaces Dim annotationFactory1 As AnnotationFactory = annotationSet1.AnnotationFactory Dim GGG 'As Annotation GGG = annotationFactory1.CreateEvoluateText(UserSurf, (PTCOG(6) * 1), (PTCOG(7) * 1), (PTCOG(8) * 1), False) Dim GText As Text GText = GGG.Text GText.Text = TextStr If CATIA.ActiveDocument.Selection.Count <> 0 Then CATIA.ActiveDocument.Selection.Clear() End If CATIA.ActiveDocument.Selection.Add(GText) CATIA.ActiveDocument.Selection.VisProperties.SetVisibleColor(255, 255, 255, 0) End Sub","title":"QuickAnnotationAtEndLine"},{"location":"DS-CODE/Automation/QuickAnnotationAtEndLine/#v5","text":"","title":"V5"},{"location":"DS-CODE/Automation/QuickAnnotationAtEndLine/#vbnet","text":"Public Shared Sub QuickAnnotationAtEndLine(GenObj As Object, TextStr As String, mypart As Part) Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim PTMeas PTMeas = TheSPAWorkbench.GetMeasurable(GenObj) Dim PTCOG() ReDim PTCOG(8) PTMeas.GetPointsOnCurve(PTCOG) Dim UserSurf As UserSurface UserSurf = mypart.UserSurfaces.Generate(GenObj) Dim annotationSets1 As AnnotationSets = mypart.AnnotationSets Dim annotationSet1 As AnnotationSet = annotationSets1.Add(\"UDS\") Dim userSurfaces1 As UserSurfaces = mypart.UserSurfaces Dim annotationFactory1 As AnnotationFactory = annotationSet1.AnnotationFactory Dim GGG 'As Annotation GGG = annotationFactory1.CreateEvoluateText(UserSurf, (PTCOG(6) * 1), (PTCOG(7) * 1), (PTCOG(8) * 1), False) Dim GText As Text GText = GGG.Text GText.Text = TextStr If CATIA.ActiveDocument.Selection.Count <> 0 Then CATIA.ActiveDocument.Selection.Clear() End If CATIA.ActiveDocument.Selection.Add(GText) CATIA.ActiveDocument.Selection.VisProperties.SetVisibleColor(255, 255, 255, 0) End Sub","title":"VB.NET"},{"location":"DS-CODE/Automation/QuickAnnotationAtPoint/","text":"V5 VB.NET Public Shared Sub QuickAnnotationAtPoint(GenObj As Object, TextStr As String, mypart As Part) Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim PTMeas PTMeas = TheSPAWorkbench.GetMeasurable(GenObj) Dim PTCOG() ReDim PTCOG(2) PTMeas.GetPoint(PTCOG) Dim annotationSets1 As AnnotationSets = mypart.AnnotationSets Dim annotationSet1 As AnnotationSet = annotationSets1.Add(\"UDS\") Dim userSurfaces1 As UserSurfaces = mypart.UserSurfaces Dim UserSurf As UserSurface = userSurfaces1.Generate(GenObj) Dim annotationFactory1 As AnnotationFactory = annotationSet1.AnnotationFactory Dim GGG As Annotation GGG = annotationFactory1.CreateEvoluateText(UserSurf, (PTCOG(0) * 1), (PTCOG(1) * 1), (PTCOG(2) * 1), False) GGG.Text.Text = TextStr 'If MySel.Count <> 0 Then ' MySel.Clear() 'End If 'MySel.Add(GText) 'MySel.VisProperties.SetVisibleColor(255, 255, 255, 0) End Sub","title":"QuickAnnotationAtPoint"},{"location":"DS-CODE/Automation/QuickAnnotationAtPoint/#v5","text":"","title":"V5"},{"location":"DS-CODE/Automation/QuickAnnotationAtPoint/#vbnet","text":"Public Shared Sub QuickAnnotationAtPoint(GenObj As Object, TextStr As String, mypart As Part) Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim PTMeas PTMeas = TheSPAWorkbench.GetMeasurable(GenObj) Dim PTCOG() ReDim PTCOG(2) PTMeas.GetPoint(PTCOG) Dim annotationSets1 As AnnotationSets = mypart.AnnotationSets Dim annotationSet1 As AnnotationSet = annotationSets1.Add(\"UDS\") Dim userSurfaces1 As UserSurfaces = mypart.UserSurfaces Dim UserSurf As UserSurface = userSurfaces1.Generate(GenObj) Dim annotationFactory1 As AnnotationFactory = annotationSet1.AnnotationFactory Dim GGG As Annotation GGG = annotationFactory1.CreateEvoluateText(UserSurf, (PTCOG(0) * 1), (PTCOG(1) * 1), (PTCOG(2) * 1), False) GGG.Text.Text = TextStr 'If MySel.Count <> 0 Then ' MySel.Clear() 'End If 'MySel.Add(GText) 'MySel.VisProperties.SetVisibleColor(255, 255, 255, 0) End Sub","title":"VB.NET"},{"location":"DS-CODE/Automation/RemoveChars/","text":"Function RemoveChars(InputStr As String, ArrayOfChars As Variant) As String Dim tempStr As String tempStr = InputStr For X = 0 To UBound(ArrayOfChars) tempStr = Replace(tempStr, ArrayOfChars(X), \"\") Next X RemoveChars = tempStr End Function","title":"RemoveChars"},{"location":"DS-CODE/Automation/ReturnAllObjectsWithinDist/","text":"Function ReturnAllObjectsWithinDist(CurObj As Variant, ObjSet As HybridBody, WithinDist As Double) As Variant Dim tempArr() ReDim tempArr(0) If IsUpdatable(CurObj) = False Then Exit Function End If Dim JMeas Set JMeas = TheSPAWorkbench.GetMeasurable(CurObj) Dim JDist As Double For X = 1 To ObjSet.HybridShapes.Count Dim Obj1 As HybridShape Set Obj1 = ObjSet.HybridShapes.Item(X) If IsUpdatable(Obj1) = True Then JDist = JMeas.GetMinimumDistance(Obj1) If JDist < WithinDist Then Set tempArr(UBound(tempArr)) = Obj1 ReDim Preserve tempArr(UBound(tempArr) + 1) End If End If Next X If UBound(tempArr) <> 0 Then ReDim Preserve tempArr(UBound(tempArr) - 1) End If ReturnAllObjectsWithinDist = tempArr End Function","title":"ReturnAllObjectsWithinDist"},{"location":"DS-CODE/Automation/ReturnMidCurveDist/","text":"Function ReturnMidCurveDist(CurveObj As Variant) As Double If IsUpdatable(CurveObj) Then Dim TMeas Set TMeas = TheSPAWorkbench.GetMeasurable(CurveObj) Dim TC(8) TMeas.GetPointsOnCurve TC midPtCoord = ReturnMidPtCoord(CDbl(TC(0)), CDbl(TC(1)), CDbl(TC(2)), CDbl(TC(6)), CDbl(TC(7)), CDbl(TC(8))) Dim FindDist As Double FindDist = find3DDistance(midPtCoord(0), midPtCoord(1), midPtCoord(2), TC(3), TC(4), TC(5)) ReturnMidCurveDist = FindDist End If End Function","title":"ReturnMidCurveDist"},{"location":"DS-CODE/Automation/ReturnMidPtCoord/","text":"ReturnMidPtCoord VBA Function ReturnMidPtCoord(X1 As Double, Y1 As Double, Z1 As Double, X2 As Double, Y2 As Double, Z2 As Double) As Variant Dim FinalPt(2) FinalPt(0) = (X1 + X2) / 2 FinalPt(1) = (Y1 + Y2) / 2 FinalPt(2) = (Z1 + Z2) / 2 ReturnMidPtCoord = FinalPt End Function","title":"ReturnMidPtCoord"},{"location":"DS-CODE/Automation/ReturnMidPtCoord/#returnmidptcoord","text":"","title":"ReturnMidPtCoord"},{"location":"DS-CODE/Automation/ReturnMidPtCoord/#vba","text":"Function ReturnMidPtCoord(X1 As Double, Y1 As Double, Z1 As Double, X2 As Double, Y2 As Double, Z2 As Double) As Variant Dim FinalPt(2) FinalPt(0) = (X1 + X2) / 2 FinalPt(1) = (Y1 + Y2) / 2 FinalPt(2) = (Z1 + Z2) / 2 ReturnMidPtCoord = FinalPt End Function","title":"VBA"},{"location":"DS-CODE/Automation/SelSurfDup/","text":"Sub SelSurfDup(SurfArr As Variant) Dim SecArr() ReDim SecArr(0) For X = 0 To UBound(SurfArr) If HasArea(SurfArr(X)) Then Dim CMeas Set CMeas = TheSPAWorkbench.GetMeasurable(SurfArr(X)) Dim CPerimeter As Double CPerimeter = CMeas.Perimeter Dim CArea As Double CArea = CMeas.Area Dim CCOG(2) CMeas.GetCOG CCOG For Y = X + 1 To UBound(SurfArr) If HasArea(SurfArr(Y)) Then Dim NMeas Set NMeas = TheSPAWorkbench.GetMeasurable(SurfArr(Y)) Dim NPerimeter As Double NPerimeter = NMeas.Perimeter Dim NArea As Double NArea = NMeas.Area Dim NCOG(2) NMeas.GetCOG NCOG If NPerimeter = CPerimeter And CArea = NArea And NCOG(0) = CCOG(0) And NCOG(1) = CCOG(1) And NCOG(2) = CCOG(2) Then Set SecArr(UBound(SecArr)) = SurfArr(Y) ReDim Preserve SecArr(UBound(SecArr) + 1) End If End If Next Y End If Next X For Z = 0 To UBound(SecArr) - 1 MyHSFactory.DeleteObjectForDatum SecArr(Z) Next Z End Sub","title":"SelSurfDup"},{"location":"DS-CODE/Automation/UDF/","text":"Imports MECMOD Imports INFITF Imports KnowledgewareTypeLib Partial Public Class Main Private Function BEAM_UDF(ByRef partUDF As Part, ByRef HBBodyBEAM As HybridBody, ByRef TLName As String, ByRef beam As BEAM) Dim pt1 As Object = partUDF.FindObjectByName(TLName + \"_BEAM_Point\" + beam.getPtx1_id) Dim pt2 As Object = partUDF.FindObjectByName(TLName + \"_BEAM_Point\" + beam.getPtx2_id) Dim plane As Object = partUDF.FindObjectByName(TLName + \"_BEAM_Level_\" + beam.getLevel.ToString) Dim h As String = beam.getH Dim l As String = beam.getL Dim d As String = beam.getD Dim b As String = beam.getB If (Not System.IO.File.Exists(Beam_Udf_Path)) Then MsgBox(\"UDF\u4e0d\u5b58\u5728\") Return -1 End If '************************************************************************** Dim UDFName As String = \"BEAM_H\" Dim instFactoryPts As InstanceFactory Try instFactoryPts = partUDF.GetCustomerFactory(\"InstanceFactory\") instFactoryPts.BeginInstanceFactory(UDFName, Beam_Udf_Path) partUDF.InWorkObject = HBBodyBEAM instFactoryPts.BeginInstantiate() Catch Return 1 End Try '***************************************************************** Try instFactoryPts.PutInputData(\"INPUT1\", plane) instFactoryPts.PutInputData(\"INPUT2\", pt1) instFactoryPts.PutInputData(\"INPUT3\", pt2) Catch Return 2 End Try '***************************************************************** Try Dim parameters1 As Parameters parameters1 = partUDF.Parameters Dim length1 As Parameter length1 = instFactoryPts.GetParameter(\"H\") length1.Value = h Dim parameters2 As Parameters parameters2 = partUDF.Parameters Dim length2 As Parameter length2 = instFactoryPts.GetParameter(\"L\") length2.Value = l Dim parameters3 As Parameters parameters3 = partUDF.Parameters Dim length3 As Parameter length3 = instFactoryPts.GetParameter(\"D\") length3.Value = d Dim parameters4 As Parameters parameters4 = partUDF.Parameters Dim length4 As Parameter length4 = instFactoryPts.GetParameter(\"B\") length4.Value = b Dim parameters5 As Parameters parameters5 = partUDF.Parameters Dim strParam1 As Parameter strParam1 = instFactoryPts.GetParameter(\"Section\") strParam1.Value = h.ToString + \"X\" + l.ToString + \"X\" + d.ToString + \"X\" + b.ToString partUDF.Update() Catch End Try '***************************************************************** Try partUDF.InWorkObject = HBBodyBEAM Dim instance As ShapeInstance = instFactoryPts.Instantiate Catch End Try '***************************************************************** Try instFactoryPts.EndInstantiate() instFactoryPts.EndInstanceFactory() partUDF.Update() Catch Return 4 End Try Return 0 End Function End Class","title":"UDF"},{"location":"DS-CODE/Automation/UsefulCatiaVBAFunctions/","text":"VB.NET Option Explicit Off Public Class Class1 '1. Create a Module in your project And paste the code below Public Shared Structure iPct Dim X As Double Dim Y As Double Dim Z As Double End Structure Public Shared Structure iPlan Dim Ax As Double Dim By As Double Dim Cz As Double Dim Dt As Double End Structure Public Enum iIntVal Intersectie = 0 'Intersection Paralele = 1 Oblice = 2 'Skew End Enum Public Shared Structure iIntersect Dim Result As iIntVal Dim Val As iPct End Structure Sub CATMain() Dim Q As New clsGVI Dim A As iPct Dim B As iPct Dim C As iPct Dim D As iPct 'intersectie A.X = 1 : A.Y = 1 : A.Z = 1 B.X = 3 : B.Y = 3 : B.Z = 1 C.X = 0 : C.Y = 1 : C.Z = 4 D.X = 0 : D.Y = 3 : D.Z = 3 Dim X1 As Double X1 = Q.LLDistance(A, B, C, D) 'Unfold.Show End Sub '2. Create a Class Module in the same project And rename it to clsGVI And paste the code below Const PI As Double = 3.14159265358979 'How to get point coordinates Public Function GetPointXYZ(MyPoint As Object) As iPct Dim Coord(2) GetPointXYZ = New iPct MyPoint.GetCoordinates\uff08Coord\uff09 GetPointXYZ.X = Coord(0) : GetPointXYZ.Y = Coord(1) : GetPointXYZ.Z = Coord(2) Erase Coord End Function 'How to get point coordinates relative to an specified axis system Public Function LCS(AxisSys As Object, Point2Measure As iPct) As iPct Dim AOrig(2) : Dim Vx(2) : Dim Vy(2) : Dim Vz(2) Dim iOrig As iPct : Dim iVx As iPct : Dim iVy As iPct : Dim iVz As iPct : Dim Diff As iPct LCS = New iPct AxisSys.GetOrigin(AOrig) : iOrig.X = AOrig(0) : iOrig.Y = AOrig(1) : iOrig.Z = AOrig(2) AxisSys.GetXAxis(Vx) : iVx.X = Vx(0) : iVx.Y = Vx(1) : iVx.Z = Vx(2) AxisSys.GetYAxis(Vy) : iVy.X = Vy(0) : iVy.Y = Vy(1) : iVy.Z = Vy(2) AxisSys.GetZAxis(Vz) : iVz.X = Vz(0) : iVz.Y = Vz(1) : iVz.Z = Vz(2) NormalizeVector(iVx, iVx) NormalizeVector(iVy, iVy) NormalizeVector(iVz, iVz) Diff.X = Point2Measure.X - iOrig.X : Diff.Y = Point2Measure.Y - iOrig.Y : Diff.Z = Point2Measure.Z - iOrig.Z LCS.X = DotProduct(Diff, iVx) : LCS.Y = DotProduct(Diff, iVy) : LCS.Z = DotProduct(Diff, iVz) iOrig = Nothing iVx = Nothing iVy = Nothing iVz = Nothing Diff = Nothing Erase AOrig : Erase Vx : Erase Vy : Erase Vz End Function 'How to Normalize of a vector Public Sub NormalizeVector(IVect As iPct, ByRef NVect As iPct) Dim Mag As Double Mag = Sqr(IVect.X ^ 2 + IVect.Y ^ 2 + IVect.Z ^ 2) If Mag < 0.0000001 Then Call Err.Raise(1001, , \"Zero length vector cannot be normalized\") NVect.X = IVect.X / Mag NVect.Y = IVect.Y / Mag NVect.Z = IVect.Z / Mag End Sub 'How to get Plane Equation Public Function PlaneEquation(PartOrigin As iPct, PlaneOrigin As iPct, FirstVector As iPct, SecondVector As iPct) As iPlan PlaneEquation = New iPlan PlaneEquation.Ax = PartOrigin.Y * (FirstVector.Z - SecondVector.Z) + FirstVector.Y * (SecondVector.Z - PartOrigin.Z) + SecondVector.Y * (PartOrigin.Z - FirstVector.Z) PlaneEquation.By = PartOrigin.Z * (FirstVector.X - SecondVector.X) + FirstVector.Z * (SecondVector.X - PartOrigin.X) + SecondVector.Z * (PartOrigin.X - FirstVector.X) PlaneEquation.Cz = PartOrigin.X * (FirstVector.Y - SecondVector.Y) + FirstVector.X * (SecondVector.Y - PartOrigin.Y) + SecondVector.X * (PartOrigin.Y - FirstVector.Y) PlaneEquation.Dt = PlaneOrigin.X * (FirstVector.Y * SecondVector.Z - SecondVector.Y * FirstVector.Z) + FirstVector.X * (SecondVector.Y * PlaneOrigin.Z - PlaneOrigin.Y * SecondVector.Z) + SecondVector.X * (PlaneOrigin.Y * FirstVector.Z - FirstVector.Y * PlaneOrigin.Z) End Function 'How to get plane vectors Public Function GetPlaneVectors(MyPlane As Object) As iPct() Dim ArrRet() As iPct : ReDim ArrRet(1) Dim V1(2) : Dim V2(2) MyPlane.GetFirstAxis(V1) : ArrRet(0).X = V1(0) : ArrRet(0).Y = V1(1) : ArrRet(0).Z = V1(2) MyPlane.GetSecondAxis(V2) : ArrRet(1).X = V2(0) : ArrRet(1).Y = V2(1) : ArrRet(1).Z = V2(2) GetPlaneVectors = ArrRet Erase ArrRet : Erase V1 : Erase V2 End Function 'How to get angle between two planes - Dihedral Angle Public Function DihedralAngle(FirstPlane As iPlan, SecondPlane As iPlan) As Double DihedralAngle = ArcCos(FirstPlane.Ax * SecondPlane.Ax + FirstPlane.By * SecondPlane.By + FirstPlane.Cz * SecondPlane.Cz / Sqr((FirstPlane.Ax ^ 2 + FirstPlane.By ^ 2 + FirstPlane.Cz ^ 2) * (SecondPlane.Ax ^ 2 + SecondPlane.By ^ 2 + SecondPlane.Cz ^ 2))) End Function 'Nothing to comment Public Function ArcCos(Radians As Double) As Double If Round(Radians, 8) = 1 Then ArcCos = 0 : Exit Function If Round(Radians, 8) = -1 Then ArcCos = PI : Exit Function ArcCos = Atn(-Radians / Sqr(1 - Radians ^ 2)) + 2 * Atn(1) End Function 'Nothing to comment Public Function ArcSin(Radians As Double) As Double If (Sqr(1 - Radians ^ 2) <= 0.000000000001) And (Sqr(1 - Radians ^ 2) >= -0.000000000001) Then ArcSin = PI / 2 Else ArcSin = Atn(Radians / Sqr(1 - Radians ^ 2)) End If End Function 'How to get distance between two points Public Function P2PDist(FirstPoint As iPct, SecondPoint As iPct) As Double Distance = Sqr((SecondPoint.X - FirstPoint.X) ^ 2 + (SecondPoint.Y - FirstPoint.Y) ^ 2 + (SecondPoint.Z - FirstPoint.Z) ^ 2) End Function 'Are two points On the same side Of the plane? Public Function WhichSideOfPlane(Plane As iPlan, FirstPoint As iPct, SecondPoint As iPct) As Integer() Dim ArrReturn() As Integer : ReDim ArrReturn(1) ArrReturn(0) = Plane.Ax * FirstPoint.X + Plane.By * FirstPoint.Y + Plane.Cz * FirstPoint.Z - Plane.Dt ArrReturn(1) = Plane.Ax * SecondPoint.X + Plane.By * SecondPoint.Y + Plane.Cz * SecondPoint.Z - Plane.Dt WhichSideOfPlane = ArrReturn Erase ArrReturn End Function 'How to get the vector of line Public Function GetLineVector(FirstPoint As iPct, SecondPoint As iPct) As iPct Dim Dist As Double GetLineVector = New iPct Dist = P2PDist(FirstPoint, Seconpoint) GetLineVector.X = (SecondPoint.X - FirstPoint.X) / Dist GetLineVector.Y = (SecondPoint.Y - FirstPoint.Y) / Dist GetLineVector.Z = (SecondPoint.Z - FirstPoint.Z) / Dist End Function 'How to Get BrepName from Catia Selection Public Function GetBrep(MyBRepName As String) As String MyBRepName = Replace(MyBRepName, \"Selection_\", \"\") MyBRepName = Left(MyBRepName, InStrRev(MyBRepName, \"));\")) MyBRepName = MyBRepName + \");WithPermanentBody;WithoutBuildError;WithSelectingFeatureSupport;MFBRepVersion_CXR15)\" '\");WithTemporaryBody;WithoutBuildError;WithInitialFeatureSupport;MonoFond;MFBRepVersion _CXR14)\" GetBrep = MyBRepName End Function 'How to determine if two lines are skew, intersecting Or parallel Public Function LLIntersect(A As iPct, B As iPct, C As iPct, D As iPct) As iIntersect Dim M(3, 3) As Double M(0, 0) = A.X : M(0, 1) = A.Y : M(0, 2) = A.Z : M(0, 3) = 1 M(1, 0) = B.X : M(1, 1) = B.Y : M(1, 2) = B.Z : M(1, 3) = 1 M(2, 0) = C.X : M(2, 1) = C.Y : M(2, 2) = C.Z : M(2, 3) = 1 M(3, 0) = D.X : M(3, 1) = D.Y : M(3, 2) = D.Z : M(3, 3) = 1 If GetDet(M) <> 0 Then Erase M : LLIntersect.Result = Oblice : Exit Function 'skew lines Dim CxB() As Double : Dim AxB() As Double : ReDim CxB(2) : ReDim AxB(2) Dim Av(2) As Double : Dim Bv(2) As Double : Dim Cv(2) As Double Av(0) = B.X - A.X : Av(1) = B.Y - A.Y : Av(2) = B.Z - A.Z Bv(0) = D.X - C.X : Bv(1) = D.Y - C.Y : Bv(2) = D.Z - C.Z Cv(0) = C.X - A.X : Cv(1) = C.Y - A.Y : Cv(2) = C.Z - A.Z CxB = CrossProd(Cv, Bv) : AxB = CrossProd(Av, Bv) Dim s As Double On Error GoTo paralelele s = DotProd(CxB, AxB) / Abs(DotProd(AxB, AxB)) Dim iInter As iPct iInter.X = A.X + Av(0) * s 'X coordinate of intersection iInter.Y = A.Y + Av(1) * s 'Y coordinate of intersection iInter.Z = A.Z + Av(2) * s 'Z coordinate of intersection LLIntersect.Result = Intersectie 'intersecting lines LLIntersect.Val = iInter paralelele: Erase CxB : Erase AxB : Erase Cv : Erase Bv : Erase Av If Err.Number <> 0 Then LLIntersect.Result = PParalele : Err.Clear 'parallel lines End Function 'How to get the distance between two skew lines Public Function SkewLDist(A As iPct, B As iPct, C As iPct, D As iPct) As Double Dim Av(2) As Double : Dim Bv(2) As Double : Dim Cv(2) As Double Dim Det(2, 2) As Double Av(0) = A.X - B.X : Av(1) = A.Y - B.Y : Av(2) = A.Z - B.Z Bv(0) = C.X - A.X : Bv(1) = C.Y - A.Y : Bv(2) = C.Z - A.Z Cv(0) = D.X - C.X : Cv(1) = D.Y - C.Y : Cv(2) = D.Z - C.Z Det(0, 0) = DotProd(Cv, Cv) : Det(0, 1) = DotProd(Cv, Av) : Det(0, 2) = DotProd(Cv, Bv) Det(1, 0) = DotProd(Cv, Av) : Det(1, 1) = DotProd(Av, Av) : Det(1, 2) = DotProd(Av, Bv) Det(2, 0) = DotProd(Cv, Bv) : Det(2, 1) = DotProd(Av, Bv) : Det(2, 2) = DotProd(Bv, Bv) Dim v As Double v = GetDet(Det) SkewLDist = Sqr(v / (Det(0, 0) * Det(1, 1) - Det(1, 0) ^ 2)) End Function 'How to get DOT product of two vectors - lenght must be 3 Public Function DotProd(V1() As Double, V2() As Double) As Double DotProd = V1(0) * V2(0) + V1(1) * V2(1) + V1(2) * V2(2) End Function 'How to get CROSS product of two vectors - lenght must be 3 Public Function CrossProd(V1() As Double, V2() As Double) As Double() Dim Res() As Double ReDim Res(2) Res(0) = V1(1) * V2(2) - V1(2) * V2(1) Res(1) = V1(2) * V2(0) - V1(0) * V2(2) Res(2) = V1(0) * V2(1) - V1(1) * V2(0) CrossProd = Res Erase Res End Function 'How to get inverse of an NxN matrix Public Function GetInverse(M() As Double) As Double() Dim RetVal() As Double : Dim Size As Integer Dim Det As Double : Dim Adj() As Double Dim i As Integer : Dim j As Integer Size = UBound(M) : Det = GetDet(M) If Det <> 0 Then ReDim RetVal(Size, Size) Adj = GetAdjoint(M) For i = 0 To Size For j = 0 To Size RetVal(i, j) = Adj(i, j) / Det Next Next Erase Adj GetInverse = RetVal Erase RetVal End If End Function 'How to get Determinant of an NxN matrix Public Function GetDet(M() As Double) As Double Dim i As Integer : Dim j As Integer Dim Size As Integer : Size = UBound(M) : Dim RetVal As Double If Size = 1 Then RetVal = RetVal + M(0, 0) * M(1, 1) - M(0, 1) * M(1, 0) 'daca e deteminant 2x2 Else For i = 0 To Size RetVal = RetVal + ((-1) ^ i) * M(0, i) * GetDet(GetMinor(M, 0, i)) 'daca e determinant NxN Next End If GetDet = RetVal End Function 'How to get Adjoint matrix - it Is used to calculate the inverse of an NxN matrix Public Function GetAdjoint(M() As Double) As Double() Dim i As Integer : Dim j As Integer Dim Size As Integer : Size = UBound(M) Dim RetVal() As Double : ReDim RV(Size, Size) For i = 0 To Size For j = 0 To Size RetVal(j, i) = ((-1) ^ (i + j)) * GetDet(GetMinor(M, i, j)) 'RetVal(i, j)=matricea cofactor; RetVal(j, i)= transpusa matricii cofactor Next Next GetAdjoint = RetVal Erase RetVal End Function 'How to get Minor matrix - it Is used to calculate the determinant of an NxN matrix Public Function GetMinor(Min() As Double, RemRow As Integer, RemCol As Integer) As Double() Dim RetVal() As Double : Dim i As Integer : Dim j As Integer Dim IdxC As Integer : Dim IdxR As Integer Dim Size As Integer : IdxR = 0 : Size = UBound(Min) - 1 ReDim RetVal(Size, Size) 'As Double For i = 0 To Size + 1 If i <> RemRow Then IdxC = 0 For j = 0 To Size + 1 If j <> RemCol Then RetVal(IdxR, IdxC) = Min(i, j) IdxC = IdxC + 1 End If Next IdxR = IdxR + 1 End If Next GetMinor = RetVal Erase RetVal End Function 'How to aproximate an curve using Cubic Bezier curves Public Function BSpline3(CollectionOfiPcts As Collection, Increment As Double) As Collection Dim i As Double : Dim t As Double Dim A As iPlan : Dim B As iPlan : Dim C As iPlan : Dim Point2Add As iPct BSpline3 = New Collection For i = 1 To CollectionOfiPcts.Count - 3 A = New iPlan B = New iPlan C = New iPlan A.Ax = (-CollectionOfiPcts(i).X + 3 * CollectionOfiPcts(i + 1).X - 3 * CollectionOfiPcts(i + 2).X + CollectionOfiPcts(i + 3).X) / 6 A.By = (3 * CollectionOfiPcts(i).X - 6 * CollectionOfiPcts(i + 1).X + 3 * CollectionOfiPcts(i + 2).X) / 6 A.Cz = (-3 * CollectionOfiPcts(i).X + 3 * CollectionOfiPcts(i + 2).X) / 6 A.Dt = (CollectionOfiPcts(i).X + 4 * CollectionOfiPcts(i + 1).X + CollectionOfiPcts(i + 2).X) / 6 B.Ax = (-CollectionOfiPcts(i).Y + 3 * CollectionOfiPcts(i + 1).Y - 3 * CollectionOfiPcts(i + 2).Y + CollectionOfiPcts(i + 3).Y) / 6 B.By = (3 * CollectionOfiPcts(i).Y - 6 * CollectionOfiPcts(i + 1).Y + 3 * CollectionOfiPcts(i + 2).Y) / 6 B.Cz = (-3 * CollectionOfiPcts(i).Y + 3 * CollectionOfiPcts(i + 2).Y) / 6 B.Dt = (CollectionOfiPcts(i).Y + 4 * CollectionOfiPcts(i + 1).Y + CollectionOfiPcts(i + 2).Y) / 6 C.Ax = (-CollectionOfiPcts(i).Z + 3 * CollectionOfiPcts(i + 1).Z - 3 * CollectionOfiPcts(i + 2).Z + CollectionOfiPcts(i + 3).Z) / 6 C.By = (3 * CollectionOfiPcts(i).Z - 6 * CollectionOfiPcts(i + 1).Z + 3 * CollectionOfiPcts(i + 2).Z) / 6 C.Cz = (-3 * CollectionOfiPcts(i).Z + 3 * CollectionOfiPcts(i + 2).Z) / 6 C.Dt = (CollectionOfiPcts(i).Z + 4 * CollectionOfiPcts(i + 1).Z + CollectionOfiPcts(i + 2).Z) / 6 For t = 0 To 1 Step Increment Point2Add = New iPct Point2Add.X = A.Dt + A.Cz * t + A.By * t ^ 2 + A.Ax * t ^ 3 Point2Add.Y = B.Dt + B.Cz * t + B.By * t ^ 2 + B.Ax * t ^ 3 Point2Add.Z = C.Dt + C.Cz * t + C.By * t ^ 2 + C.Ax * t ^ 3 BSpline3.Add(Point2Add) Point2Add = Nothing Next A = Nothing B = Nothing C = Nothing Next End Function 'How to aproximate an curve using Quadratic Bezier curves Public Function BSplineC(CollectionOfiPcts As Collection, Increment As Double) As Collection Dim j As Double Dim t As Double Dim A As iPct : Dim B As iPct : Dim C As iPct : Dim Point2Add As iPct BSplineC = New Collection For j = 2 To CollectionOfiPcts.Count - 1 A = New iPct B = New iPct C = New iPct A.X = (CollectionOfiPcts(j - 1).X - 2 * CollectionOfiPcts(j).X + CollectionOfiPcts(j + 1).X) / 2 A.Y = (-2 * CollectionOfiPcts(j - 1).X + 2 * CollectionOfiPcts(j).X) / 2 A.Z = (CollectionOfiPcts(j - 1).X + CollectionOfiPcts(j).X) / 2 B.X = (CollectionOfiPcts(j - 1).Y - 2 * CollectionOfiPcts(j).Y + CollectionOfiPcts(j + 1).Y) / 2 B.Y = (-2 * CollectionOfiPcts(j - 1).Y + 2 * CollectionOfiPcts(j).Y) / 2 B.Z = (CollectionOfiPcts(j - 1).Y + CollectionOfiPcts(j).Y) / 2 C.X = (CollectionOfiPcts(j - 1).Z - 2 * CollectionOfiPcts(j).Z + CollectionOfiPcts(j + 1).Z) / 2 C.Y = (-2 * CollectionOfiPcts(j - 1).Z + 2 * CollectionOfiPcts(j).Z) / 2 C.Z = (CollectionOfiPcts(j - 1).Z + CollectionOfiPcts(j).Z) / 2 For t = 0 To 1 Step Increment Point2Add = New iPct Point2Add.X = A.Z + A.Y * t + A.X * t ^ 2 Point2Add.Y = B.Z + B.Y * t + B.X * t ^ 2 Point2Add.Z = C.Z + C.Y * t + C.X * t ^ 2 BSplineC.Add(Point2Add) Point2Add = Nothing Next A = Nothing B = Nothing C = Nothing Next End Function 'How to sort verctors Public Sub SortVector(Array2Sort, Order As String) Dim X As Integer Dim Temp Select Case Order Case \"A\" Sorted = False Do While Not Sorted Sorted = True For X = 0 To UBound(Array2Sort) - 1 If Array2Sort(X) > Array2Sort(X + 1) Then Temp = Array2Sort(X + 1) Array2Sort(X + 1) = Array2Sort(X) Array2Sort(X) = Temp Sorted = False End If Next X Loop Case \"D\" Sorted = False Do While Not Sorted Sorted = True For X = 0 To UBound(Array2Sort) - 1 If Array2Sort(X) < Array2Sort(X + 1) Then Temp = Array2Sort(X + 1) Array2Sort(X + 1) = Array2Sort(X) Array2Sort(X) = Temp Sorted = False End If Next X Loop Case Else MsgBox(\"Invalid parameter Value Order=A or D\") End Select End Sub End Class Python C#.NET CAA","title":"UsefulCatiaVBAFunctions"},{"location":"DS-CODE/Automation/UsefulCatiaVBAFunctions/#vbnet","text":"Option Explicit Off Public Class Class1 '1. Create a Module in your project And paste the code below Public Shared Structure iPct Dim X As Double Dim Y As Double Dim Z As Double End Structure Public Shared Structure iPlan Dim Ax As Double Dim By As Double Dim Cz As Double Dim Dt As Double End Structure Public Enum iIntVal Intersectie = 0 'Intersection Paralele = 1 Oblice = 2 'Skew End Enum Public Shared Structure iIntersect Dim Result As iIntVal Dim Val As iPct End Structure Sub CATMain() Dim Q As New clsGVI Dim A As iPct Dim B As iPct Dim C As iPct Dim D As iPct 'intersectie A.X = 1 : A.Y = 1 : A.Z = 1 B.X = 3 : B.Y = 3 : B.Z = 1 C.X = 0 : C.Y = 1 : C.Z = 4 D.X = 0 : D.Y = 3 : D.Z = 3 Dim X1 As Double X1 = Q.LLDistance(A, B, C, D) 'Unfold.Show End Sub '2. Create a Class Module in the same project And rename it to clsGVI And paste the code below Const PI As Double = 3.14159265358979 'How to get point coordinates Public Function GetPointXYZ(MyPoint As Object) As iPct Dim Coord(2) GetPointXYZ = New iPct MyPoint.GetCoordinates\uff08Coord\uff09 GetPointXYZ.X = Coord(0) : GetPointXYZ.Y = Coord(1) : GetPointXYZ.Z = Coord(2) Erase Coord End Function 'How to get point coordinates relative to an specified axis system Public Function LCS(AxisSys As Object, Point2Measure As iPct) As iPct Dim AOrig(2) : Dim Vx(2) : Dim Vy(2) : Dim Vz(2) Dim iOrig As iPct : Dim iVx As iPct : Dim iVy As iPct : Dim iVz As iPct : Dim Diff As iPct LCS = New iPct AxisSys.GetOrigin(AOrig) : iOrig.X = AOrig(0) : iOrig.Y = AOrig(1) : iOrig.Z = AOrig(2) AxisSys.GetXAxis(Vx) : iVx.X = Vx(0) : iVx.Y = Vx(1) : iVx.Z = Vx(2) AxisSys.GetYAxis(Vy) : iVy.X = Vy(0) : iVy.Y = Vy(1) : iVy.Z = Vy(2) AxisSys.GetZAxis(Vz) : iVz.X = Vz(0) : iVz.Y = Vz(1) : iVz.Z = Vz(2) NormalizeVector(iVx, iVx) NormalizeVector(iVy, iVy) NormalizeVector(iVz, iVz) Diff.X = Point2Measure.X - iOrig.X : Diff.Y = Point2Measure.Y - iOrig.Y : Diff.Z = Point2Measure.Z - iOrig.Z LCS.X = DotProduct(Diff, iVx) : LCS.Y = DotProduct(Diff, iVy) : LCS.Z = DotProduct(Diff, iVz) iOrig = Nothing iVx = Nothing iVy = Nothing iVz = Nothing Diff = Nothing Erase AOrig : Erase Vx : Erase Vy : Erase Vz End Function 'How to Normalize of a vector Public Sub NormalizeVector(IVect As iPct, ByRef NVect As iPct) Dim Mag As Double Mag = Sqr(IVect.X ^ 2 + IVect.Y ^ 2 + IVect.Z ^ 2) If Mag < 0.0000001 Then Call Err.Raise(1001, , \"Zero length vector cannot be normalized\") NVect.X = IVect.X / Mag NVect.Y = IVect.Y / Mag NVect.Z = IVect.Z / Mag End Sub 'How to get Plane Equation Public Function PlaneEquation(PartOrigin As iPct, PlaneOrigin As iPct, FirstVector As iPct, SecondVector As iPct) As iPlan PlaneEquation = New iPlan PlaneEquation.Ax = PartOrigin.Y * (FirstVector.Z - SecondVector.Z) + FirstVector.Y * (SecondVector.Z - PartOrigin.Z) + SecondVector.Y * (PartOrigin.Z - FirstVector.Z) PlaneEquation.By = PartOrigin.Z * (FirstVector.X - SecondVector.X) + FirstVector.Z * (SecondVector.X - PartOrigin.X) + SecondVector.Z * (PartOrigin.X - FirstVector.X) PlaneEquation.Cz = PartOrigin.X * (FirstVector.Y - SecondVector.Y) + FirstVector.X * (SecondVector.Y - PartOrigin.Y) + SecondVector.X * (PartOrigin.Y - FirstVector.Y) PlaneEquation.Dt = PlaneOrigin.X * (FirstVector.Y * SecondVector.Z - SecondVector.Y * FirstVector.Z) + FirstVector.X * (SecondVector.Y * PlaneOrigin.Z - PlaneOrigin.Y * SecondVector.Z) + SecondVector.X * (PlaneOrigin.Y * FirstVector.Z - FirstVector.Y * PlaneOrigin.Z) End Function 'How to get plane vectors Public Function GetPlaneVectors(MyPlane As Object) As iPct() Dim ArrRet() As iPct : ReDim ArrRet(1) Dim V1(2) : Dim V2(2) MyPlane.GetFirstAxis(V1) : ArrRet(0).X = V1(0) : ArrRet(0).Y = V1(1) : ArrRet(0).Z = V1(2) MyPlane.GetSecondAxis(V2) : ArrRet(1).X = V2(0) : ArrRet(1).Y = V2(1) : ArrRet(1).Z = V2(2) GetPlaneVectors = ArrRet Erase ArrRet : Erase V1 : Erase V2 End Function 'How to get angle between two planes - Dihedral Angle Public Function DihedralAngle(FirstPlane As iPlan, SecondPlane As iPlan) As Double DihedralAngle = ArcCos(FirstPlane.Ax * SecondPlane.Ax + FirstPlane.By * SecondPlane.By + FirstPlane.Cz * SecondPlane.Cz / Sqr((FirstPlane.Ax ^ 2 + FirstPlane.By ^ 2 + FirstPlane.Cz ^ 2) * (SecondPlane.Ax ^ 2 + SecondPlane.By ^ 2 + SecondPlane.Cz ^ 2))) End Function 'Nothing to comment Public Function ArcCos(Radians As Double) As Double If Round(Radians, 8) = 1 Then ArcCos = 0 : Exit Function If Round(Radians, 8) = -1 Then ArcCos = PI : Exit Function ArcCos = Atn(-Radians / Sqr(1 - Radians ^ 2)) + 2 * Atn(1) End Function 'Nothing to comment Public Function ArcSin(Radians As Double) As Double If (Sqr(1 - Radians ^ 2) <= 0.000000000001) And (Sqr(1 - Radians ^ 2) >= -0.000000000001) Then ArcSin = PI / 2 Else ArcSin = Atn(Radians / Sqr(1 - Radians ^ 2)) End If End Function 'How to get distance between two points Public Function P2PDist(FirstPoint As iPct, SecondPoint As iPct) As Double Distance = Sqr((SecondPoint.X - FirstPoint.X) ^ 2 + (SecondPoint.Y - FirstPoint.Y) ^ 2 + (SecondPoint.Z - FirstPoint.Z) ^ 2) End Function 'Are two points On the same side Of the plane? Public Function WhichSideOfPlane(Plane As iPlan, FirstPoint As iPct, SecondPoint As iPct) As Integer() Dim ArrReturn() As Integer : ReDim ArrReturn(1) ArrReturn(0) = Plane.Ax * FirstPoint.X + Plane.By * FirstPoint.Y + Plane.Cz * FirstPoint.Z - Plane.Dt ArrReturn(1) = Plane.Ax * SecondPoint.X + Plane.By * SecondPoint.Y + Plane.Cz * SecondPoint.Z - Plane.Dt WhichSideOfPlane = ArrReturn Erase ArrReturn End Function 'How to get the vector of line Public Function GetLineVector(FirstPoint As iPct, SecondPoint As iPct) As iPct Dim Dist As Double GetLineVector = New iPct Dist = P2PDist(FirstPoint, Seconpoint) GetLineVector.X = (SecondPoint.X - FirstPoint.X) / Dist GetLineVector.Y = (SecondPoint.Y - FirstPoint.Y) / Dist GetLineVector.Z = (SecondPoint.Z - FirstPoint.Z) / Dist End Function 'How to Get BrepName from Catia Selection Public Function GetBrep(MyBRepName As String) As String MyBRepName = Replace(MyBRepName, \"Selection_\", \"\") MyBRepName = Left(MyBRepName, InStrRev(MyBRepName, \"));\")) MyBRepName = MyBRepName + \");WithPermanentBody;WithoutBuildError;WithSelectingFeatureSupport;MFBRepVersion_CXR15)\" '\");WithTemporaryBody;WithoutBuildError;WithInitialFeatureSupport;MonoFond;MFBRepVersion _CXR14)\" GetBrep = MyBRepName End Function 'How to determine if two lines are skew, intersecting Or parallel Public Function LLIntersect(A As iPct, B As iPct, C As iPct, D As iPct) As iIntersect Dim M(3, 3) As Double M(0, 0) = A.X : M(0, 1) = A.Y : M(0, 2) = A.Z : M(0, 3) = 1 M(1, 0) = B.X : M(1, 1) = B.Y : M(1, 2) = B.Z : M(1, 3) = 1 M(2, 0) = C.X : M(2, 1) = C.Y : M(2, 2) = C.Z : M(2, 3) = 1 M(3, 0) = D.X : M(3, 1) = D.Y : M(3, 2) = D.Z : M(3, 3) = 1 If GetDet(M) <> 0 Then Erase M : LLIntersect.Result = Oblice : Exit Function 'skew lines Dim CxB() As Double : Dim AxB() As Double : ReDim CxB(2) : ReDim AxB(2) Dim Av(2) As Double : Dim Bv(2) As Double : Dim Cv(2) As Double Av(0) = B.X - A.X : Av(1) = B.Y - A.Y : Av(2) = B.Z - A.Z Bv(0) = D.X - C.X : Bv(1) = D.Y - C.Y : Bv(2) = D.Z - C.Z Cv(0) = C.X - A.X : Cv(1) = C.Y - A.Y : Cv(2) = C.Z - A.Z CxB = CrossProd(Cv, Bv) : AxB = CrossProd(Av, Bv) Dim s As Double On Error GoTo paralelele s = DotProd(CxB, AxB) / Abs(DotProd(AxB, AxB)) Dim iInter As iPct iInter.X = A.X + Av(0) * s 'X coordinate of intersection iInter.Y = A.Y + Av(1) * s 'Y coordinate of intersection iInter.Z = A.Z + Av(2) * s 'Z coordinate of intersection LLIntersect.Result = Intersectie 'intersecting lines LLIntersect.Val = iInter paralelele: Erase CxB : Erase AxB : Erase Cv : Erase Bv : Erase Av If Err.Number <> 0 Then LLIntersect.Result = PParalele : Err.Clear 'parallel lines End Function 'How to get the distance between two skew lines Public Function SkewLDist(A As iPct, B As iPct, C As iPct, D As iPct) As Double Dim Av(2) As Double : Dim Bv(2) As Double : Dim Cv(2) As Double Dim Det(2, 2) As Double Av(0) = A.X - B.X : Av(1) = A.Y - B.Y : Av(2) = A.Z - B.Z Bv(0) = C.X - A.X : Bv(1) = C.Y - A.Y : Bv(2) = C.Z - A.Z Cv(0) = D.X - C.X : Cv(1) = D.Y - C.Y : Cv(2) = D.Z - C.Z Det(0, 0) = DotProd(Cv, Cv) : Det(0, 1) = DotProd(Cv, Av) : Det(0, 2) = DotProd(Cv, Bv) Det(1, 0) = DotProd(Cv, Av) : Det(1, 1) = DotProd(Av, Av) : Det(1, 2) = DotProd(Av, Bv) Det(2, 0) = DotProd(Cv, Bv) : Det(2, 1) = DotProd(Av, Bv) : Det(2, 2) = DotProd(Bv, Bv) Dim v As Double v = GetDet(Det) SkewLDist = Sqr(v / (Det(0, 0) * Det(1, 1) - Det(1, 0) ^ 2)) End Function 'How to get DOT product of two vectors - lenght must be 3 Public Function DotProd(V1() As Double, V2() As Double) As Double DotProd = V1(0) * V2(0) + V1(1) * V2(1) + V1(2) * V2(2) End Function 'How to get CROSS product of two vectors - lenght must be 3 Public Function CrossProd(V1() As Double, V2() As Double) As Double() Dim Res() As Double ReDim Res(2) Res(0) = V1(1) * V2(2) - V1(2) * V2(1) Res(1) = V1(2) * V2(0) - V1(0) * V2(2) Res(2) = V1(0) * V2(1) - V1(1) * V2(0) CrossProd = Res Erase Res End Function 'How to get inverse of an NxN matrix Public Function GetInverse(M() As Double) As Double() Dim RetVal() As Double : Dim Size As Integer Dim Det As Double : Dim Adj() As Double Dim i As Integer : Dim j As Integer Size = UBound(M) : Det = GetDet(M) If Det <> 0 Then ReDim RetVal(Size, Size) Adj = GetAdjoint(M) For i = 0 To Size For j = 0 To Size RetVal(i, j) = Adj(i, j) / Det Next Next Erase Adj GetInverse = RetVal Erase RetVal End If End Function 'How to get Determinant of an NxN matrix Public Function GetDet(M() As Double) As Double Dim i As Integer : Dim j As Integer Dim Size As Integer : Size = UBound(M) : Dim RetVal As Double If Size = 1 Then RetVal = RetVal + M(0, 0) * M(1, 1) - M(0, 1) * M(1, 0) 'daca e deteminant 2x2 Else For i = 0 To Size RetVal = RetVal + ((-1) ^ i) * M(0, i) * GetDet(GetMinor(M, 0, i)) 'daca e determinant NxN Next End If GetDet = RetVal End Function 'How to get Adjoint matrix - it Is used to calculate the inverse of an NxN matrix Public Function GetAdjoint(M() As Double) As Double() Dim i As Integer : Dim j As Integer Dim Size As Integer : Size = UBound(M) Dim RetVal() As Double : ReDim RV(Size, Size) For i = 0 To Size For j = 0 To Size RetVal(j, i) = ((-1) ^ (i + j)) * GetDet(GetMinor(M, i, j)) 'RetVal(i, j)=matricea cofactor; RetVal(j, i)= transpusa matricii cofactor Next Next GetAdjoint = RetVal Erase RetVal End Function 'How to get Minor matrix - it Is used to calculate the determinant of an NxN matrix Public Function GetMinor(Min() As Double, RemRow As Integer, RemCol As Integer) As Double() Dim RetVal() As Double : Dim i As Integer : Dim j As Integer Dim IdxC As Integer : Dim IdxR As Integer Dim Size As Integer : IdxR = 0 : Size = UBound(Min) - 1 ReDim RetVal(Size, Size) 'As Double For i = 0 To Size + 1 If i <> RemRow Then IdxC = 0 For j = 0 To Size + 1 If j <> RemCol Then RetVal(IdxR, IdxC) = Min(i, j) IdxC = IdxC + 1 End If Next IdxR = IdxR + 1 End If Next GetMinor = RetVal Erase RetVal End Function 'How to aproximate an curve using Cubic Bezier curves Public Function BSpline3(CollectionOfiPcts As Collection, Increment As Double) As Collection Dim i As Double : Dim t As Double Dim A As iPlan : Dim B As iPlan : Dim C As iPlan : Dim Point2Add As iPct BSpline3 = New Collection For i = 1 To CollectionOfiPcts.Count - 3 A = New iPlan B = New iPlan C = New iPlan A.Ax = (-CollectionOfiPcts(i).X + 3 * CollectionOfiPcts(i + 1).X - 3 * CollectionOfiPcts(i + 2).X + CollectionOfiPcts(i + 3).X) / 6 A.By = (3 * CollectionOfiPcts(i).X - 6 * CollectionOfiPcts(i + 1).X + 3 * CollectionOfiPcts(i + 2).X) / 6 A.Cz = (-3 * CollectionOfiPcts(i).X + 3 * CollectionOfiPcts(i + 2).X) / 6 A.Dt = (CollectionOfiPcts(i).X + 4 * CollectionOfiPcts(i + 1).X + CollectionOfiPcts(i + 2).X) / 6 B.Ax = (-CollectionOfiPcts(i).Y + 3 * CollectionOfiPcts(i + 1).Y - 3 * CollectionOfiPcts(i + 2).Y + CollectionOfiPcts(i + 3).Y) / 6 B.By = (3 * CollectionOfiPcts(i).Y - 6 * CollectionOfiPcts(i + 1).Y + 3 * CollectionOfiPcts(i + 2).Y) / 6 B.Cz = (-3 * CollectionOfiPcts(i).Y + 3 * CollectionOfiPcts(i + 2).Y) / 6 B.Dt = (CollectionOfiPcts(i).Y + 4 * CollectionOfiPcts(i + 1).Y + CollectionOfiPcts(i + 2).Y) / 6 C.Ax = (-CollectionOfiPcts(i).Z + 3 * CollectionOfiPcts(i + 1).Z - 3 * CollectionOfiPcts(i + 2).Z + CollectionOfiPcts(i + 3).Z) / 6 C.By = (3 * CollectionOfiPcts(i).Z - 6 * CollectionOfiPcts(i + 1).Z + 3 * CollectionOfiPcts(i + 2).Z) / 6 C.Cz = (-3 * CollectionOfiPcts(i).Z + 3 * CollectionOfiPcts(i + 2).Z) / 6 C.Dt = (CollectionOfiPcts(i).Z + 4 * CollectionOfiPcts(i + 1).Z + CollectionOfiPcts(i + 2).Z) / 6 For t = 0 To 1 Step Increment Point2Add = New iPct Point2Add.X = A.Dt + A.Cz * t + A.By * t ^ 2 + A.Ax * t ^ 3 Point2Add.Y = B.Dt + B.Cz * t + B.By * t ^ 2 + B.Ax * t ^ 3 Point2Add.Z = C.Dt + C.Cz * t + C.By * t ^ 2 + C.Ax * t ^ 3 BSpline3.Add(Point2Add) Point2Add = Nothing Next A = Nothing B = Nothing C = Nothing Next End Function 'How to aproximate an curve using Quadratic Bezier curves Public Function BSplineC(CollectionOfiPcts As Collection, Increment As Double) As Collection Dim j As Double Dim t As Double Dim A As iPct : Dim B As iPct : Dim C As iPct : Dim Point2Add As iPct BSplineC = New Collection For j = 2 To CollectionOfiPcts.Count - 1 A = New iPct B = New iPct C = New iPct A.X = (CollectionOfiPcts(j - 1).X - 2 * CollectionOfiPcts(j).X + CollectionOfiPcts(j + 1).X) / 2 A.Y = (-2 * CollectionOfiPcts(j - 1).X + 2 * CollectionOfiPcts(j).X) / 2 A.Z = (CollectionOfiPcts(j - 1).X + CollectionOfiPcts(j).X) / 2 B.X = (CollectionOfiPcts(j - 1).Y - 2 * CollectionOfiPcts(j).Y + CollectionOfiPcts(j + 1).Y) / 2 B.Y = (-2 * CollectionOfiPcts(j - 1).Y + 2 * CollectionOfiPcts(j).Y) / 2 B.Z = (CollectionOfiPcts(j - 1).Y + CollectionOfiPcts(j).Y) / 2 C.X = (CollectionOfiPcts(j - 1).Z - 2 * CollectionOfiPcts(j).Z + CollectionOfiPcts(j + 1).Z) / 2 C.Y = (-2 * CollectionOfiPcts(j - 1).Z + 2 * CollectionOfiPcts(j).Z) / 2 C.Z = (CollectionOfiPcts(j - 1).Z + CollectionOfiPcts(j).Z) / 2 For t = 0 To 1 Step Increment Point2Add = New iPct Point2Add.X = A.Z + A.Y * t + A.X * t ^ 2 Point2Add.Y = B.Z + B.Y * t + B.X * t ^ 2 Point2Add.Z = C.Z + C.Y * t + C.X * t ^ 2 BSplineC.Add(Point2Add) Point2Add = Nothing Next A = Nothing B = Nothing C = Nothing Next End Function 'How to sort verctors Public Sub SortVector(Array2Sort, Order As String) Dim X As Integer Dim Temp Select Case Order Case \"A\" Sorted = False Do While Not Sorted Sorted = True For X = 0 To UBound(Array2Sort) - 1 If Array2Sort(X) > Array2Sort(X + 1) Then Temp = Array2Sort(X + 1) Array2Sort(X + 1) = Array2Sort(X) Array2Sort(X) = Temp Sorted = False End If Next X Loop Case \"D\" Sorted = False Do While Not Sorted Sorted = True For X = 0 To UBound(Array2Sort) - 1 If Array2Sort(X) < Array2Sort(X + 1) Then Temp = Array2Sort(X + 1) Array2Sort(X + 1) = Array2Sort(X) Array2Sort(X) = Temp Sorted = False End If Next X Loop Case Else MsgBox(\"Invalid parameter Value Order=A or D\") End Select End Sub End Class","title":"VB.NET"},{"location":"DS-CODE/Automation/UsefulCatiaVBAFunctions/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/UsefulCatiaVBAFunctions/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/UsefulCatiaVBAFunctions/#caa","text":"","title":"CAA"},{"location":"DS-CODE/Automation/checkerror/","text":"VB.NET Public Shared Function checkerror(ByVal obj As Object, MyPart As Part) As Boolean On Error GoTo blast MyPart.UpdateObject(obj) checkerror = True Exit Function blast: MyPart.Inactivate(obj) checkerror = False End Function","title":"Checkerror"},{"location":"DS-CODE/Automation/deg_to_rad/","text":"Function deg_to_rad(InputDegrees As Double) As Double deg_to_rad = InputDegrees * 3.14159265 / 180 End Function Python C#.NET VB.NET CAA","title":"Deg to rad"},{"location":"DS-CODE/Automation/deg_to_rad/#python","text":"","title":"Python"},{"location":"DS-CODE/Automation/deg_to_rad/#cnet","text":"","title":"C#.NET"},{"location":"DS-CODE/Automation/deg_to_rad/#vbnet","text":"","title":"VB.NET"},{"location":"DS-CODE/Automation/deg_to_rad/#caa","text":"","title":"CAA"},{"location":"DS-CODE/CAA/Angle%20and%20radian%20conventer/","text":"\u5f27\u5ea6 = \u89d2\u5ea6 * (CATPI/180); \u89d2\u5ea6 = \u5f27\u5ea6 * (180/CATPI);","title":"Angle and radian conventer"},{"location":"DS-CODE/CAA/C%2B%2B%20GUID/","text":"GUID #include \"ObjBase.h\" #include <fstream> #include <iostream> CATUnicodeString CopyAndGenerateGuid ( CATUnicodeString isTexturePath , CATUnicodeString isCopyTexturePath ) { GUID guid ; CoCreateGuid ( & guid ); char cBuffer [ 64 ] = { 0 }; sprintf_s ( cBuffer , sizeof ( cBuffer ), \"{%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}\" , guid . Data1 , guid . Data2 , guid . Data3 , guid . Data4 [ 0 ], guid . Data4 [ 1 ], guid . Data4 [ 2 ], guid . Data4 [ 3 ], guid . Data4 [ 4 ], guid . Data4 [ 5 ], guid . Data4 [ 6 ], guid . Data4 [ 7 ]); int dIndex = isTexturePath . SearchSubString ( \".\" , 1 , CATUnicodeString :: CATSearchModeBackward ); int dLength = isTexturePath . GetLengthInChar () - isTexturePath . SearchSubString ( \".\" , 1 ); CATUnicodeString sSuffix = isTexturePath . SubString ( dIndex , dLength ); CATUnicodeString sNewGuid ( cBuffer ); isCopyTexturePath += sNewGuid ; isCopyTexturePath += sSuffix ; const char * sChar = isTexturePath . ConvertToChar (); WCHAR buf [ 256 ]; memset ( buf , 0 , sizeof ( buf )); MultiByteToWideChar ( CP_ACP , 0 , sChar , strlen ( sChar ) + 1 , buf , sizeof ( buf ) / sizeof ( buf [ 0 ])); const char * sNewChar = isCopyTexturePath . ConvertToChar (); WCHAR Newbuf [ 256 ]; memset ( Newbuf , 0 , sizeof ( Newbuf )); MultiByteToWideChar ( CP_ACP , 0 , sNewChar , strlen ( sNewChar ) + 1 , Newbuf , sizeof ( Newbuf ) / sizeof ( Newbuf [ 0 ])); CopyFile ( buf , Newbuf , FALSE ); return isCopyTexturePath ; }","title":"C++ GUID"},{"location":"DS-CODE/CAA/C%2B%2B%20GUID/#guid","text":"#include \"ObjBase.h\" #include <fstream> #include <iostream> CATUnicodeString CopyAndGenerateGuid ( CATUnicodeString isTexturePath , CATUnicodeString isCopyTexturePath ) { GUID guid ; CoCreateGuid ( & guid ); char cBuffer [ 64 ] = { 0 }; sprintf_s ( cBuffer , sizeof ( cBuffer ), \"{%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}\" , guid . Data1 , guid . Data2 , guid . Data3 , guid . Data4 [ 0 ], guid . Data4 [ 1 ], guid . Data4 [ 2 ], guid . Data4 [ 3 ], guid . Data4 [ 4 ], guid . Data4 [ 5 ], guid . Data4 [ 6 ], guid . Data4 [ 7 ]); int dIndex = isTexturePath . SearchSubString ( \".\" , 1 , CATUnicodeString :: CATSearchModeBackward ); int dLength = isTexturePath . GetLengthInChar () - isTexturePath . SearchSubString ( \".\" , 1 ); CATUnicodeString sSuffix = isTexturePath . SubString ( dIndex , dLength ); CATUnicodeString sNewGuid ( cBuffer ); isCopyTexturePath += sNewGuid ; isCopyTexturePath += sSuffix ; const char * sChar = isTexturePath . ConvertToChar (); WCHAR buf [ 256 ]; memset ( buf , 0 , sizeof ( buf )); MultiByteToWideChar ( CP_ACP , 0 , sChar , strlen ( sChar ) + 1 , buf , sizeof ( buf ) / sizeof ( buf [ 0 ])); const char * sNewChar = isCopyTexturePath . ConvertToChar (); WCHAR Newbuf [ 256 ]; memset ( Newbuf , 0 , sizeof ( Newbuf )); MultiByteToWideChar ( CP_ACP , 0 , sNewChar , strlen ( sNewChar ) + 1 , Newbuf , sizeof ( Newbuf ) / sizeof ( Newbuf [ 0 ])); CopyFile ( buf , Newbuf , FALSE ); return isCopyTexturePath ; }","title":"GUID"},{"location":"DS-CODE/CAA/C%2B%2B%E8%AE%A1%E6%97%B6%E5%99%A8/","text":"{ if ( i != 1 ) { COleDateTime start_time = COleDateTime :: GetCurrentTime (); COleDateTimeSpan end_time = COleDateTime :: GetCurrentTime () - start_time ; while ( end_time . GetTotalSeconds () < 10 ) { MSG msg ; GetMessage ( & msg , NULL , 0 , 0 ); TranslateMessage ( & msg ); DispatchMessage ( & msg ); end_time = COleDateTime :: GetCurrentTime () - start_time ; } } #include <stdio.h> #include <stdlib.h> #include <windows.h> #include \"mmsystem.h\" #pragma comment(lib,\"Winmm.lib\") //\u6700\u5927\u95f4\u9694\u5341\u79d2 UINT wTimerRes_1ms ; //\u5b9a\u4e49\u65f6\u95f4\u95f4\u9694 UINT wAccuracy = 1 ; //\u5b9a\u4e49\u5206\u8fa8\u7387 UINT TimerID_1ms ; //\u5b9a\u4e49\u5b9a\u65f6\u5668\u53e5\u67c4 wTimerRes_1ms = 5000 ; if (( TimerID_1ms = timeSetEvent ( wTimerRes_1ms , wAccuracy , ( LPTIMECALLBACK ) OneMilliSecondProc , ( DWORD )( 1 ), TIME_PERIODIC )) == 0 ) //\u5468\u671f\u8c03\u7528\u5b9a\u65f6\u5904\u7406\u51fd\u6570 { printf ( \"start!!!!!!!!!!! \\n \" ); } else { printf ( \"end!!!!!!!!!!! \\n \" ); } void PASCAL OneMilliSecondProc ( UINT wTimerID , UINT msg , DWORD dwUser , DWORD dwl , DWORD dw2 ) { printf ( \"11111111111 \\n \" ); } //\u95f4\u9694\u65f6\u95f4\u66f4\u957f HANDLE m_hTimerQueue = NULL ; HANDLE m_hTimerQueueTimer = NULL ; VOID CALLBACK TimerRoutine ( PVOID lpParam , BOOLEAN TimerOrWaitFired ) { } if ( m_hTimerQueue == NULL && m_hTimerQueueTimer == NULL ) { m_hTimerQueue = CreateTimerQueue (); if ( m_hTimerQueue != NULL ) { if ( ! CreateTimerQueueTimer ( & m_hTimerQueueTimer , m_hTimerQueue , TimerRoutine , this , 5000 , 10000 , WT_EXECUTEDEFAULT )) //\u4e94\u79d2\u540e\u5f00\u59cb\u8ba1\u65f6 \u95f4\u9694\u5341\u79d2 { m_hTimerQueue = NULL ; m_hTimerQueueTimer = NULL ; } } else { m_hTimerQueue = NULL ; m_hTimerQueueTimer = NULL ; } } }","title":"C++\u8ba1\u65f6\u5668"},{"location":"DS-CODE/CAA/CAA%20Copy/","text":"copy CATLISTV ( CATBaseUnknown_var ) pInputListV ; pInputListV . Append ( spiParm ); CATLISTV ( CATBaseUnknown_var ) pPrintListV ; rc = DataCommonProtocolCCPServices :: CopyAndPasteTo ( pInputListV , spiParmPublisher , pPrintListV ); if ( SUCCEEDED ( rc )) { cout << \"CopyAndPasteSpecialTo success !\" << pPrintListV . Size () << endl ; } else { cout << \"CopyAndPasteSpecialTo failed !\" << endl ; }","title":"CAA Copy"},{"location":"DS-CODE/CAA/CAA%20Copy/#copy","text":"CATLISTV ( CATBaseUnknown_var ) pInputListV ; pInputListV . Append ( spiParm ); CATLISTV ( CATBaseUnknown_var ) pPrintListV ; rc = DataCommonProtocolCCPServices :: CopyAndPasteTo ( pInputListV , spiParmPublisher , pPrintListV ); if ( SUCCEEDED ( rc )) { cout << \"CopyAndPasteSpecialTo success !\" << pPrintListV . Size () << endl ; } else { cout << \"CopyAndPasteSpecialTo failed !\" << endl ; }","title":"copy"},{"location":"DS-CODE/CAA/CAA%20call%20VB%20Extract/","text":"VB\u63d0\u53d6 HRESULT CATExtractBoundaryCmd::ExtractVBFeature ( CATIGSMUseFactory_var ispiGSMUseFactory , int idDimension , CATListValCATIMmiMechanicalFeature_var & ospAllExtractFeatureListV ) { HRESULT rc = E_FAIL ; CATLISTP ( CATCell ) pAllCellListP ; CATBody_var spBody = NULL_var ; CATIMmiUseBRepDecodeServices_var spiMmiUseBRepDecodeServices = NULL_var ; if ( SUCCEEDED ( CATMmiUseServicesFactory :: CreateBRepDecodeServices ( spiMmiUseBRepDecodeServices )) && SUCCEEDED ( CAAGetBody ( _spFeature , spBody )) && spBody != NULL_var ) { CATIMmiMechanicalFeature_var spiPart = NULL_var ; (( CATIMmiMechanicalFeature_var ) _spFeature ) -> GetMechanicalPart ( spiPart ); CATIAPart_var spiAPart = spiPart ; if ( spiAPart != NULL_var ) { spBody -> GetAllCells ( pAllCellListP , idDimension ); cout << \"Cells : \" << pAllCellListP . Size () << endl ; CATLISTP ( CATCell ) pAllCellListP2 ; spBody -> GetAllCells ( pAllCellListP2 , 3 ); cout << \"Cells 2 : \" << pAllCellListP2 . Size () << endl ; CATIAlias_var spiAlias = _spFeature ; CATUnicodeString sFeatureName = spiAlias -> GetAlias (); /* int dVolumn = pAllCellListP2.Size(); if (dVolumn >= 2) { for (int j = 1; j <= dVolumn; j++) { CATLISTP(CATCell) pAllCellListP; pAllCellListP2[j]->GetAllCells(pAllCellListP, idDimension); if (pAllCellListP.Size() >= 1) { for (int i = 1; i <= pAllCellListP.Size(); i++) { // } } } } else {*/ if ( pAllCellListP . Size () >= 1 ) { for ( int i = 1 ; i <= pAllCellListP . Size (); i ++ ) { CATLISTP ( CATCell ) pAllCellListP3 ; pAllCellListP [ i ] -> GetAllCells ( pAllCellListP3 , idDimension ); cout << \"Cells 3 : \" << pAllCellListP3 . Size () << endl ; CATUnicodeString sNum ; sNum . BuildFromNum ( i ); if ( idDimension == 2 ) { CATUnicodeString sStr = \"RSur:(Face:(Brp:(\" + sFeatureName + \";%\" + sNum + \");None:();Cf11:());WithPermanentBody;WithoutBuildError;WithSelectingFeatureSupport;MFBRepVersion_CXR29)\" ; CATBSTR sBSTR ; sStr . ConvertToBSTR ( & sBSTR ); CATIABase * piBase = NULL ; _spFeature -> QueryInterface ( IID_CATIABase , ( void ** ) & piBase ); CATIAReference * piARef = NULL ; spiAPart -> CreateReferenceFromBRepName ( sBSTR , piBase , piARef ); CATBaseUnknown_var spFeature = piARef ; CATIGSMUseExtractSolide_var spiExtractSolide = ispiGSMUseFactory -> CreateExtractSolide ( spFeature ); if ( spiExtractSolide != NULL_var ) // && SUCCEEDED(CAAUpdateFeature(spiExtractSolide))) { spiExtractSolide -> SetIsFederated ( FALSE ); spiExtractSolide -> SetExtractPropagType ( ExtractSolide_NoPropag ); spiExtractSolide -> SetComplementaryExtract ( FALSE ); spiExtractSolide -> SetSupport ( _spFeature ); // CAAUpdateFeature(spiExtractSolide); ospAllExtractFeatureListV . Append ( spiExtractSolide ); } } } } // } } } if ( ospAllExtractFeatureListV . Size () > 0 ) //== pAllCellListP.Size()) { rc = S_OK ; } if ( ospAllExtractFeatureListV . Size () != pAllCellListP . Size ()) { cout << \"Error : \u67d0\u4e9b\u5143\u7d20\u672a\u63d0\u53d6\u6210\u529f \uff01\" << endl ; // rc = E_FAIL; } // } return rc ; }","title":"CAA call VB Extract"},{"location":"DS-CODE/CAA/CAA%20call%20VB%20Extract/#vb","text":"HRESULT CATExtractBoundaryCmd::ExtractVBFeature ( CATIGSMUseFactory_var ispiGSMUseFactory , int idDimension , CATListValCATIMmiMechanicalFeature_var & ospAllExtractFeatureListV ) { HRESULT rc = E_FAIL ; CATLISTP ( CATCell ) pAllCellListP ; CATBody_var spBody = NULL_var ; CATIMmiUseBRepDecodeServices_var spiMmiUseBRepDecodeServices = NULL_var ; if ( SUCCEEDED ( CATMmiUseServicesFactory :: CreateBRepDecodeServices ( spiMmiUseBRepDecodeServices )) && SUCCEEDED ( CAAGetBody ( _spFeature , spBody )) && spBody != NULL_var ) { CATIMmiMechanicalFeature_var spiPart = NULL_var ; (( CATIMmiMechanicalFeature_var ) _spFeature ) -> GetMechanicalPart ( spiPart ); CATIAPart_var spiAPart = spiPart ; if ( spiAPart != NULL_var ) { spBody -> GetAllCells ( pAllCellListP , idDimension ); cout << \"Cells : \" << pAllCellListP . Size () << endl ; CATLISTP ( CATCell ) pAllCellListP2 ; spBody -> GetAllCells ( pAllCellListP2 , 3 ); cout << \"Cells 2 : \" << pAllCellListP2 . Size () << endl ; CATIAlias_var spiAlias = _spFeature ; CATUnicodeString sFeatureName = spiAlias -> GetAlias (); /* int dVolumn = pAllCellListP2.Size(); if (dVolumn >= 2) { for (int j = 1; j <= dVolumn; j++) { CATLISTP(CATCell) pAllCellListP; pAllCellListP2[j]->GetAllCells(pAllCellListP, idDimension); if (pAllCellListP.Size() >= 1) { for (int i = 1; i <= pAllCellListP.Size(); i++) { // } } } } else {*/ if ( pAllCellListP . Size () >= 1 ) { for ( int i = 1 ; i <= pAllCellListP . Size (); i ++ ) { CATLISTP ( CATCell ) pAllCellListP3 ; pAllCellListP [ i ] -> GetAllCells ( pAllCellListP3 , idDimension ); cout << \"Cells 3 : \" << pAllCellListP3 . Size () << endl ; CATUnicodeString sNum ; sNum . BuildFromNum ( i ); if ( idDimension == 2 ) { CATUnicodeString sStr = \"RSur:(Face:(Brp:(\" + sFeatureName + \";%\" + sNum + \");None:();Cf11:());WithPermanentBody;WithoutBuildError;WithSelectingFeatureSupport;MFBRepVersion_CXR29)\" ; CATBSTR sBSTR ; sStr . ConvertToBSTR ( & sBSTR ); CATIABase * piBase = NULL ; _spFeature -> QueryInterface ( IID_CATIABase , ( void ** ) & piBase ); CATIAReference * piARef = NULL ; spiAPart -> CreateReferenceFromBRepName ( sBSTR , piBase , piARef ); CATBaseUnknown_var spFeature = piARef ; CATIGSMUseExtractSolide_var spiExtractSolide = ispiGSMUseFactory -> CreateExtractSolide ( spFeature ); if ( spiExtractSolide != NULL_var ) // && SUCCEEDED(CAAUpdateFeature(spiExtractSolide))) { spiExtractSolide -> SetIsFederated ( FALSE ); spiExtractSolide -> SetExtractPropagType ( ExtractSolide_NoPropag ); spiExtractSolide -> SetComplementaryExtract ( FALSE ); spiExtractSolide -> SetSupport ( _spFeature ); // CAAUpdateFeature(spiExtractSolide); ospAllExtractFeatureListV . Append ( spiExtractSolide ); } } } } // } } } if ( ospAllExtractFeatureListV . Size () > 0 ) //== pAllCellListP.Size()) { rc = S_OK ; } if ( ospAllExtractFeatureListV . Size () != pAllCellListP . Size ()) { cout << \"Error : \u67d0\u4e9b\u5143\u7d20\u672a\u63d0\u53d6\u6210\u529f \uff01\" << endl ; // rc = E_FAIL; } // } return rc ; }","title":"VB\u63d0\u53d6"},{"location":"DS-CODE/CAA/CAA%E4%B8%AD%E8%A7%86%E5%9B%BE%E7%9A%84%E5%A4%84%E7%90%86/","text":"CAA\u4e2d\u89c6\u56fe\u7684\u5904\u7406 CAA\u4e2d\u89c6\u56fe\u7684\u5904\u7406\u5206\u4e24\u79cd\u65b9\u5f0f\uff1a 1\u3001CATI3DCamera \u4fd7\u79f0\u7167\u76f8\u673a\uff0c\u6b64\u65b9\u6cd5\u8fdb\u884c\u89c6\u56fe\u8f6c\u6362\u65f6\uff0c\u9644\u5e26\u65cb\u8f6c\u52a8\u4f5c\uff1b 2\u3001CAT3DViewpoint 3D\u89c6\u89d2\uff0c\u6b64\u65b9\u6cd5\u8fdb\u884c\u89c6\u56fe\u8f6c\u6362\u65f6\uff0c\u65e0\u8f6c\u65cb\u8f6c\u52a8\u4f5c\u3002 \u5176\u4e2d\u9700\u6ce8\u610f\uff1a vp3d . SetTarget ( fOriginalTarget ); vp3d . SetOrigin ( fOriginalOrigin ); vp3d . SetSightDirection ( fOriginalSightDirection ); vp3d . SetUpDirection ( fOriginalUpDirection ); \u5176\u4e2dSetTarget\u4e0eSetOrigin\u987a\u5e8f\u7684\u6539\u53d8\u4f1a\u5bfc\u81f4\u8f6c\u6362\u540e\u89c6\u89d2\u7684\u4f4d\u7f6e\u6709\u6240\u504f\u5dee \u3002 \u5168\u90e8\u9002\u5e94\u529f\u80fd \uff1a //\u83b7\u5f97 main 3D viewpoint: CAT3DViewpoint & vp3d = pViewer -> GetMain3DViewpoint (); //To reframe the view, we also need the representation bounding volume. CAT3DBagRep * rootBag = ( CAT3DBagRep * )( vp3d . GetBag ()); if ( NULL == rootBag ) { return TRUE ; } //If the bounding element is invalid, let's force its calculation: if ( rootBag -> IsInvalid ()) rootBag -> ComputeBoundingElement ( 1 ); //Retrieving of the bounding element: const CAT3DBoundingSphere & bs3d = rootBag -> GetBoundingElement (); //Retrieving of the bounding element radius: float radius = bs3d . GetRadius (); if ( radius == 0.f ) radius = bs3d . GetRadiusMM (); double dbAngle = vp3d . GetAngle (); double dbRAngle = CATDegreeToRadian * dbAngle ; double focus = 1.05f * ( radius / tan ( dbRAngle )); float fzoom = vp3d . GetZoom (); CATMathPointf TargetPosition ; if ( 1 == _found ) { TargetPosition = Origin ; } else if ( 0 == _found ) { TargetPosition = bs3d . GetCenter (); } CATMathPointf OriginPosition = TargetPosition - SightDir * ( float ) focus ; vp3d . SetOrigin ( OriginPosition ); vp3d . SetSightDirection ( SightDir ); vp3d . SetTarget ( TargetPosition ); vp3d . SetUpDirection ( upDir ); \u6b64\u529f\u80fd\u662f\u83b7\u53d6\u89c6\u56fe\u4e2d\u6240\u6709\u7279\u5f81\u7684Rep\uff0c\u627e\u53d6\u4e2d\u5fc3\uff0c\u6839\u636eRep\u7684\u663e\u793a\u5927\u5c0f\uff0c\u786e\u5b9a\u89c6\u89d2\u53c2\u6570\uff0c\u8f6c\u6362\u89c6\u89d2\u3002","title":"CAA\u4e2d\u89c6\u56fe\u7684\u5904\u7406"},{"location":"DS-CODE/CAA/CAA%E4%B8%AD%E8%A7%86%E5%9B%BE%E7%9A%84%E5%A4%84%E7%90%86/#caa","text":"CAA\u4e2d\u89c6\u56fe\u7684\u5904\u7406\u5206\u4e24\u79cd\u65b9\u5f0f\uff1a 1\u3001CATI3DCamera \u4fd7\u79f0\u7167\u76f8\u673a\uff0c\u6b64\u65b9\u6cd5\u8fdb\u884c\u89c6\u56fe\u8f6c\u6362\u65f6\uff0c\u9644\u5e26\u65cb\u8f6c\u52a8\u4f5c\uff1b 2\u3001CAT3DViewpoint 3D\u89c6\u89d2\uff0c\u6b64\u65b9\u6cd5\u8fdb\u884c\u89c6\u56fe\u8f6c\u6362\u65f6\uff0c\u65e0\u8f6c\u65cb\u8f6c\u52a8\u4f5c\u3002 \u5176\u4e2d\u9700\u6ce8\u610f\uff1a vp3d . SetTarget ( fOriginalTarget ); vp3d . SetOrigin ( fOriginalOrigin ); vp3d . SetSightDirection ( fOriginalSightDirection ); vp3d . SetUpDirection ( fOriginalUpDirection ); \u5176\u4e2dSetTarget\u4e0eSetOrigin\u987a\u5e8f\u7684\u6539\u53d8\u4f1a\u5bfc\u81f4\u8f6c\u6362\u540e\u89c6\u89d2\u7684\u4f4d\u7f6e\u6709\u6240\u504f\u5dee \u3002 \u5168\u90e8\u9002\u5e94\u529f\u80fd \uff1a //\u83b7\u5f97 main 3D viewpoint: CAT3DViewpoint & vp3d = pViewer -> GetMain3DViewpoint (); //To reframe the view, we also need the representation bounding volume. CAT3DBagRep * rootBag = ( CAT3DBagRep * )( vp3d . GetBag ()); if ( NULL == rootBag ) { return TRUE ; } //If the bounding element is invalid, let's force its calculation: if ( rootBag -> IsInvalid ()) rootBag -> ComputeBoundingElement ( 1 ); //Retrieving of the bounding element: const CAT3DBoundingSphere & bs3d = rootBag -> GetBoundingElement (); //Retrieving of the bounding element radius: float radius = bs3d . GetRadius (); if ( radius == 0.f ) radius = bs3d . GetRadiusMM (); double dbAngle = vp3d . GetAngle (); double dbRAngle = CATDegreeToRadian * dbAngle ; double focus = 1.05f * ( radius / tan ( dbRAngle )); float fzoom = vp3d . GetZoom (); CATMathPointf TargetPosition ; if ( 1 == _found ) { TargetPosition = Origin ; } else if ( 0 == _found ) { TargetPosition = bs3d . GetCenter (); } CATMathPointf OriginPosition = TargetPosition - SightDir * ( float ) focus ; vp3d . SetOrigin ( OriginPosition ); vp3d . SetSightDirection ( SightDir ); vp3d . SetTarget ( TargetPosition ); vp3d . SetUpDirection ( upDir ); \u6b64\u529f\u80fd\u662f\u83b7\u53d6\u89c6\u56fe\u4e2d\u6240\u6709\u7279\u5f81\u7684Rep\uff0c\u627e\u53d6\u4e2d\u5fc3\uff0c\u6839\u636eRep\u7684\u663e\u793a\u5927\u5c0f\uff0c\u786e\u5b9a\u89c6\u89d2\u53c2\u6570\uff0c\u8f6c\u6362\u89c6\u89d2\u3002","title":"CAA\u4e2d\u89c6\u56fe\u7684\u5904\u7406"},{"location":"DS-CODE/CAA/CAA%E8%BF%9B%E5%BA%A6%E6%9D%A1%20%E8%AE%A1%E6%97%B6%E5%99%A8%20%E5%9C%A8CAA%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E5%A4%B9%E9%87%8C/","text":"","title":"CAA\u8fdb\u5ea6\u6761 \u8ba1\u65f6\u5668 \u5728CAA\u7b14\u8bb0\u6587\u4ef6\u5939\u91cc"},{"location":"DS-CODE/CAA/CATAcquisitionFilter%E4%BB%A3%E7%90%86%E7%AD%9B%E9%80%89/","text":"CATAcquisitionFilter * pFilter = Filter (( FilterMethod ) & CATDRWLinearDimensionCmd :: FilterCheckInterface ,( void * ) NULL ); _pUDFAgent -> SetFilter ( pFilter ); CATBoolean CATDRWLinearDimensionCmd::FilterCheckInterface ( CATDialogAgent * iAgent , void * iUsefulData ) { cout << \"FilterCheckInterface()\" << endl ; CATBoolean bBool = FALSE ; if ( NULL != iAgent ) { CATSO * pObjSO = (( CATPathElementAgent * ) iAgent ) -> GetListOfValues (); CATPathElement * pElemPath = NULL ; if ( NULL != pObjSO ) { pObjSO -> InitElementList (); while ( NULL != ( pElemPath = ( CATPathElement * ) pObjSO -> NextElement ()) ) { CATIUdfFeatureInstance * piElementRef = ( CATIUdfFeatureInstance * ) pElemPath -> FindElement ( IID_CATIUdfFeatureInstance ); if ( NULL != piElementRef ) { CATIGSMTool_var spiGSMTool = piElementRef ; CATIMmiUseMechanicalTool_var spiTool = piElementRef ; CATIMmiGeometricalSet_var spiSet = piElementRef ; CATPoint_var spPoint = piElementRef ; CATSurface_var spSurface = piElementRef ; CATCurve_var spCurve = piElementRef ; CATIMf3DAxisSystem_var spiAxis = piElementRef ; if ( spiSet != NULL_var || spiTool != NULL_var || spiGSMTool != NULL_var \\ || spPoint != NULL_var || spSurface != NULL_var || spCurve != NULL_var || spiAxis != NULL_var ) { cout << \"FilterCheckInterface() FALSE\" << endl ; } else { cout << \"FilterCheckInterface() TRUE\" << endl ; bBool = TRUE ; } piElementRef -> Release (); piElementRef = NULL ; } else cout << \"pSelectedElt NULL \" << endl ; } } } else cout << \"iAgent NULL \" << endl ; return bBool ; }","title":"CATAcquisitionFilter\u4ee3\u7406\u7b5b\u9009"},{"location":"DS-CODE/CAA/Call%20exe/","text":"if ( WinExec ( \"C: \\\\ Users \\\\ TL \\\\ Desktop \\\\ KPRun_ch.exe\" , SW_HIDE /*SW_SHOWMINIMIZED*/ ) > 31 ) //\u8c03\u7528\u6279\u5904\u7406\u7a0b\u5e8f { cout << \"WinExec \u8c03\u7528\u6210\u529f\" << endl ; } else { CAAPromptMsgBox ( \"Error : WinExec is failed !\" ); }","title":"Call exe"},{"location":"DS-CODE/CAA/Create%20knowledge%20engineering%20inspection%20specifications%20and%20parameter%20sets%20under%20products/","text":"\u5728\u4ea7\u54c1\u4e0b\u521b\u5efa\u77e5\u8bc6\u5de5\u7a0b\u68c0\u67e5\u89c4\u8303\u548c\u53c2\u6570\u96c6 CATBaseUnknown * pr = NULL ; CAAGetRootProduct ( & pr ); CATIParmPublisher_var spiPartParm = pr ; CATIParmPublisher_var spiParameterSet = NULL_var ; CATIParmPublisher_var spiRelationSet = NULL_var ; CATOmbLifeCycleRootsBag mBag ; mBag . InsertRoot ( pr ); CATIKweModelServices_var spiKweModelServices = CATCkeGlobalFunctions :: GetModelServices (); spiParameterSet = spiKweModelServices -> GetCurrentSetWithRepRef ( CATIKweModelServices :: Parameter , spiPartParm , 1 , ( void * ) & mBag ); spiRelationSet = spiKweModelServices -> GetCurrentSetWithRepRef ( CATIKweModelServices :: Relation , spiPartParm , 1 , ( void * ) & mBag );","title":"Create knowledge engineering inspection specifications and parameter sets under products"},{"location":"DS-CODE/CAA/Create%20knowledge%20engineering%20inspection%20specifications%20and%20parameter%20sets%20under%20products/#_1","text":"CATBaseUnknown * pr = NULL ; CAAGetRootProduct ( & pr ); CATIParmPublisher_var spiPartParm = pr ; CATIParmPublisher_var spiParameterSet = NULL_var ; CATIParmPublisher_var spiRelationSet = NULL_var ; CATOmbLifeCycleRootsBag mBag ; mBag . InsertRoot ( pr ); CATIKweModelServices_var spiKweModelServices = CATCkeGlobalFunctions :: GetModelServices (); spiParameterSet = spiKweModelServices -> GetCurrentSetWithRepRef ( CATIKweModelServices :: Parameter , spiPartParm , 1 , ( void * ) & mBag ); spiRelationSet = spiKweModelServices -> GetCurrentSetWithRepRef ( CATIKweModelServices :: Relation , spiPartParm , 1 , ( void * ) & mBag );","title":"\u5728\u4ea7\u54c1\u4e0b\u521b\u5efa\u77e5\u8bc6\u5de5\u7a0b\u68c0\u67e5\u89c4\u8303\u548c\u53c2\u6570\u96c6"},{"location":"DS-CODE/CAA/Create%20law/","text":"\u521b\u5efa\u6cd5\u5219 CATIGSMUseLawDistProj_var spiLaw = spiGSMUseFactory -> CreateLawDistProj ( spiSketchH , spiSketch ); if ( spiLaw != NULL_var ) { CAAUpdateFeature ( spiLaw ); CATBoolean bBool = TRUE ; if ( SUCCEEDED ( spiLaw -> SetAppliedUnitSymbol ( \"%_angle\" )) && SUCCEEDED ( spiLaw -> SetMeasureUnitSymbol ( \"m\" )) && SUCCEEDED ( spiLaw -> SetScalingValue ( 1 )) && SUCCEEDED ( spiLaw -> SetPositiveDirectionOrientation ( 1 )) && SUCCEEDED ( spiLaw -> SetPlaneNormal ( CATMathVector :: CATMathVector ( 0 , 1 , 0 ))) && SUCCEEDED ( CAAUpdateFeature ( spiLaw ))) { //SetPlaneNormal \u6307\u7684\u662f\u8349\u56fe\u6240\u5728\u5e73\u9762\u7684\u6cd5\u7ebf\u65b9\u5411 \u5373 \u8349\u56fe\u652f\u6301\u9762\u4e3aXZ\u5e73\u9762\u65f6 \u6cd5\u7ebf\u65b9\u5411\u4e3a0 1 0 } }","title":"Create law"},{"location":"DS-CODE/CAA/Create%20law/#_1","text":"CATIGSMUseLawDistProj_var spiLaw = spiGSMUseFactory -> CreateLawDistProj ( spiSketchH , spiSketch ); if ( spiLaw != NULL_var ) { CAAUpdateFeature ( spiLaw ); CATBoolean bBool = TRUE ; if ( SUCCEEDED ( spiLaw -> SetAppliedUnitSymbol ( \"%_angle\" )) && SUCCEEDED ( spiLaw -> SetMeasureUnitSymbol ( \"m\" )) && SUCCEEDED ( spiLaw -> SetScalingValue ( 1 )) && SUCCEEDED ( spiLaw -> SetPositiveDirectionOrientation ( 1 )) && SUCCEEDED ( spiLaw -> SetPlaneNormal ( CATMathVector :: CATMathVector ( 0 , 1 , 0 ))) && SUCCEEDED ( CAAUpdateFeature ( spiLaw ))) { //SetPlaneNormal \u6307\u7684\u662f\u8349\u56fe\u6240\u5728\u5e73\u9762\u7684\u6cd5\u7ebf\u65b9\u5411 \u5373 \u8349\u56fe\u652f\u6301\u9762\u4e3aXZ\u5e73\u9762\u65f6 \u6cd5\u7ebf\u65b9\u5411\u4e3a0 1 0 } }","title":"\u521b\u5efa\u6cd5\u5219"},{"location":"DS-CODE/CAA/Create%20sketch/","text":"\u521b\u5efa\u8349\u56fe //\u521b\u5efa\u8349\u56fe CATInit * piInitOnDoc = NULL ; rc = pDoc -> QueryInterface ( IID_CATInit ,( void ** ) & piInitOnDoc ); if ( SUCCEEDED ( rc ) && NULL != piInitOnDoc ) { //\u83b7\u53d6Container const CATIdent idCATIContainer = \"CATIPrtContainer\" ; CATIPrtContainer * piRootContainer = NULL ; piRootContainer = ( CATIPrtContainer * ) piInitOnDoc -> GetRootContainer ( idCATIContainer ); if ( NULL != piRootContainer ) { CATIPrtPart_var spPart = piRootContainer -> GetPart (); CATIBasicTool_var spTool = spPart -> GetCurrentTool (); CATIDescendants_var spDesTool = spPart ; CATListValCATISpecObject_var oLst ; spDesTool -> GetAllChildren ( \"CATIMechanicalTool\" , oLst ); CATISpecObject_var spMainBody = oLst [ 1 ]; CATIAlias_var spAlias = spMainBody ; cout << spAlias -> GetAlias () << endl << flush ; CATISketchFactory_var spSketchFactory ( piRootContainer ); if ( NULL_var != spSketchFactory ) { CATISpecObject_var spSketchSpec = spSketchFactory -> CreateSketch (); CATISketch_var spSketch = spSketchSpec ; if ( NULL_var != spSketch ) { spSketch -> OpenEdition (); CATI2DWFFactory_var sketch2DFactory ( spSketch ); if ( NULL_var != sketch2DFactory ) { double Origin [ 2 ] = { 0. , 0. }; double Radius = 10 ; CATISpecObject_var spSpecCircle = sketch2DFactory -> CreateCircle ( Origin , Radius ); if ( NULL_var != spSpecCircle ) { cout << \"\u8349\u56fe\u4e2d\u521b\u5efa\u5706\u6210\u529f\uff01\" << endl ; } spSketch -> CloseEdition (); spPart -> SetCurrentFeature ( spMainBody ); //\u521b\u5efa\u51f8\u53f0 CATIPrtFactory * piPrtFact = NULL ; rc = piRootContainer -> QueryInterface ( IID_CATIPrtFactory , ( void ** ) & piPrtFact ); if ( SUCCEEDED ( rc ) && NULL != piPrtFact ) { CATISpecObject_var spPad = piPrtFact -> CreatePad ( spSketch ); if ( NULL_var != spPad ) { CATIPad_var spPadPad = spPad ; if ( NULL_var != spPadPad ) { spPadPad -> ModifyEndType ( catOffsetLimit ); spPadPad -> ModifyEndOffset ( 20. ); } spPad -> Update (); cout << \"\u521b\u5efa\u51f8\u53f0\u6210\u529f\uff01\" << endl ; } piPrtFact -> Release (); piPrtFact = NULL ; CATISpecObject_var spPart = piRootContainer -> GetPart (); spPart -> Update (); } } } } CATISpecObject_var spParentForTool = spMainBody ; CATIMechanicalRootFactory_var spMechRoot = piRootContainer ; CATISpecObject_var spSpecGS1 = NULL_var ; rc = spMechRoot -> CreateGeometricalSet ( \"\u65b0\u589e\u51e0\u4f55\u56fe\u5f62\u96c61\" , spParentForTool , spSpecGS1 ); } piInitOnDoc -> Release (); piInitOnDoc = NULL ; }","title":"Create sketch"},{"location":"DS-CODE/CAA/Create%20sketch/#_1","text":"//\u521b\u5efa\u8349\u56fe CATInit * piInitOnDoc = NULL ; rc = pDoc -> QueryInterface ( IID_CATInit ,( void ** ) & piInitOnDoc ); if ( SUCCEEDED ( rc ) && NULL != piInitOnDoc ) { //\u83b7\u53d6Container const CATIdent idCATIContainer = \"CATIPrtContainer\" ; CATIPrtContainer * piRootContainer = NULL ; piRootContainer = ( CATIPrtContainer * ) piInitOnDoc -> GetRootContainer ( idCATIContainer ); if ( NULL != piRootContainer ) { CATIPrtPart_var spPart = piRootContainer -> GetPart (); CATIBasicTool_var spTool = spPart -> GetCurrentTool (); CATIDescendants_var spDesTool = spPart ; CATListValCATISpecObject_var oLst ; spDesTool -> GetAllChildren ( \"CATIMechanicalTool\" , oLst ); CATISpecObject_var spMainBody = oLst [ 1 ]; CATIAlias_var spAlias = spMainBody ; cout << spAlias -> GetAlias () << endl << flush ; CATISketchFactory_var spSketchFactory ( piRootContainer ); if ( NULL_var != spSketchFactory ) { CATISpecObject_var spSketchSpec = spSketchFactory -> CreateSketch (); CATISketch_var spSketch = spSketchSpec ; if ( NULL_var != spSketch ) { spSketch -> OpenEdition (); CATI2DWFFactory_var sketch2DFactory ( spSketch ); if ( NULL_var != sketch2DFactory ) { double Origin [ 2 ] = { 0. , 0. }; double Radius = 10 ; CATISpecObject_var spSpecCircle = sketch2DFactory -> CreateCircle ( Origin , Radius ); if ( NULL_var != spSpecCircle ) { cout << \"\u8349\u56fe\u4e2d\u521b\u5efa\u5706\u6210\u529f\uff01\" << endl ; } spSketch -> CloseEdition (); spPart -> SetCurrentFeature ( spMainBody ); //\u521b\u5efa\u51f8\u53f0 CATIPrtFactory * piPrtFact = NULL ; rc = piRootContainer -> QueryInterface ( IID_CATIPrtFactory , ( void ** ) & piPrtFact ); if ( SUCCEEDED ( rc ) && NULL != piPrtFact ) { CATISpecObject_var spPad = piPrtFact -> CreatePad ( spSketch ); if ( NULL_var != spPad ) { CATIPad_var spPadPad = spPad ; if ( NULL_var != spPadPad ) { spPadPad -> ModifyEndType ( catOffsetLimit ); spPadPad -> ModifyEndOffset ( 20. ); } spPad -> Update (); cout << \"\u521b\u5efa\u51f8\u53f0\u6210\u529f\uff01\" << endl ; } piPrtFact -> Release (); piPrtFact = NULL ; CATISpecObject_var spPart = piRootContainer -> GetPart (); spPart -> Update (); } } } } CATISpecObject_var spParentForTool = spMainBody ; CATIMechanicalRootFactory_var spMechRoot = piRootContainer ; CATISpecObject_var spSpecGS1 = NULL_var ; rc = spMechRoot -> CreateGeometricalSet ( \"\u65b0\u589e\u51e0\u4f55\u56fe\u5f62\u96c61\" , spParentForTool , spSpecGS1 ); } piInitOnDoc -> Release (); piInitOnDoc = NULL ; }","title":"\u521b\u5efa\u8349\u56fe"},{"location":"DS-CODE/CAA/CreateBridgeSkeleton/","text":"Create Bridge Skeleton","title":"Create Bridge Skeleton"},{"location":"DS-CODE/CAA/CreateBridgeSkeleton/#create-bridge-skeleton","text":"","title":"Create Bridge Skeleton"},{"location":"DS-CODE/CAA/Custom%20part%20ID/","text":"\u81ea\u5b9a\u4e49\u96f6\u4ef6ID int main ( int iArgc , char * iArgv []) { int RefPos = 0 , RepRefPos = 0 ; HRESULT rc = E_FAIL ; //--------------------- // CAAPstCreate3DPart PLM1 //https://r2021x.mydomain.com:443/3dspace M0QzOTFENDczRTlFNEI4REJGMUE2QjlBQUQyNUIwQjV8YWRtaW5fcGxhdGZvcm18YWRtaW5fcGxhdGZvcm18fHwwfA== VPMReference //--------------------- CATUnicodeString Repository = \"PLM1\" ; // CATUnicodeString ServerName = \"3dexpv6r2019x.3ds.com\"; CATUnicodeString ServerName = \"r2021x.mydomain.com\" ; CATUnicodeString ServerPort = \"443\" ; CATUnicodeString ServerRootURI = \"3dspace\" ; CATUnicodeString LoginTicket = \"M0QzOTFENDczRTlFNEI4REJGMUE2QjlBQUQyNUIwQjV8YWRtaW5fcGxhdGZvcm18YWRtaW5fcGxhdGZvcm18fHwwfA==\" ; // \"NUEzOEEzRjNEMjI0NDVBMUI4MjE4QkExNjREQTA2QUR8YWRtaW5fcGxhdGZvcm18YWRtaW5fcGxhdGZvcm18fHwwfA==\"; //------------------------------------------------------------------ //2 - Sets the Connection Parameters //------------------------------------------------------------------ rc = Init3DEXPERIENCESession ( Repository , ServerName , ServerPort , ServerRootURI , LoginTicket ); if ( SUCCEEDED ( rc )) { CATString ConnectedUser , OrganisationId , ProjectId , RoleId ; rc = CATAdpPublicSecurityServices :: GetSecurityParameters ( Repository , ConnectedUser , OrganisationId , ProjectId , RoleId ); if ( SUCCEEDED ( rc )) { cout << endl << \"Connection succeeded\" << endl ; cout << \"Tips:\" << ConnectedUser << \" (\" << RoleId << \" \" << OrganisationId << \" \" << ProjectId << \") is connected\" << endl << endl ; } } else cout << endl << \"Connection failed\" << endl << endl ; //--------------------------------------------------------------------- // 3- Retrieves the interface pointer on the 3DPart Factory //--------------------------------------------------------------------- CATIPrd3DPartReferenceFactory * pIPLM3DPartFactory = NULL ; rc = CATPrdFactory :: CreatePrdFactory ( IID_CATIPrd3DPartReferenceFactory , ( void ** ) & pIPLM3DPartFactory ); if ( FAILED ( rc ) || ( NULL == pIPLM3DPartFactory )) return 1 ; cout << \" A Pointer to the 3D Part factory has been found\" << endl ; //--------------------------------------------------------------------- // 4- Creates the 3D Part //--------------------------------------------------------------------- // Retrieve the 3DPart Type CATUnicodeString s3DPartRefType = \"VPMReference\" ; CATIType_var spRefType ; rc = CATCkePLMNavPublicServices :: RetrieveKnowledgeType ( s3DPartRefType , spRefType ); // Maybe it's a customer type if ( FAILED ( rc ) || ! spRefType ) rc = CATCkePLMNavSpecializationAccessPublicServices :: RetrieveSpecializationType ( s3DPartRefType , spRefType ); if ( FAILED ( rc ) || ! spRefType ) { cout << \" The type \" << s3DPartRefType . ConvertToChar () << \" doesn't exist\" << endl ; return 1 ; } CATIPLMProducts * pCreated3DPart = NULL ; CATLISTV ( CATICkeParm_var ) EmptyAttrListForRef ; CATLISTV ( CATICkeParm_var ) EmptyAttrListForRepRef ; rc = pIPLM3DPartFactory -> Create3DPart ( NULL , spRefType , EmptyAttrListForRef , EmptyAttrListForRepRef , pCreated3DPart ); if ( FAILED ( rc ) || ( NULL == pCreated3DPart )) return 1 ; cout << \" The PLM 3D Part has been created \" << endl ; //---------------------------------------------------------- // 5- Manages 3DPart Lifecycle //--------------------------------------------------------- CATOmbLifeCycleRootsBag Bag ; rc = Bag . InsertRoot ( pCreated3DPart ); if ( FAILED ( rc )) return 1 ; cout << \" Success in setting the created 3DPart in the bag\" << endl << endl ; CATICkeObject_var spInstanciated = pCreated3DPart ; if ( !! spInstanciated ) { rc = CATCkeObjectAttrWriteServices :: SetValueWithString ( spInstanciated , \"PLM_ExternalID\" , \"ABC-123456\" ); //Moify Name if ( FAILED ( rc )) { cout << \"Error : Moify Name FAILED\" << endl ; return rc ; } rc = CATCkeObjectAttrWriteServices :: SetValueWithString ( spInstanciated , \"V_Name\" , \"\u54c8\u54c8\u54c8\" ); //Moify Name if ( FAILED ( rc )) { cout << \"Error : Moify Name FAILED\" << endl ; return rc ; } } pIPLM3DPartFactory -> Release (); pIPLM3DPartFactory = NULL ; //------------------------------------------------------------------ // 8- Saves the session //------------------------------------------------------------------ CATAdpSaver saver ; rc = saver . Save (); if ( FAILED ( rc ) ) return 1 ; cout << \" Session saved successfully \" << endl ; rc = Bag . RemoveAll (); if ( FAILED ( rc )) return 1 ; //------------------------------------------------------------------ // 9- Closes the session //------------------------------------------------------------------ if ( SUCCEEDED ( CATPLMSessionServices :: ClosePLMSession ())) cout << \"-> PLM session closed\" << endl << endl << endl ; else { cout << \"-> ERROR in closing PLM session\" << endl << endl ; if ( SUCCEEDED ( rc )) rc = E_FAIL ; } cout << \" Session closed successfully \" << endl ; cout << endl << \"The CAAPstCreate3DPart main program ends ....\" << endl << endl ; return 0 ; }","title":"Custom part ID"},{"location":"DS-CODE/CAA/Custom%20part%20ID/#id","text":"int main ( int iArgc , char * iArgv []) { int RefPos = 0 , RepRefPos = 0 ; HRESULT rc = E_FAIL ; //--------------------- // CAAPstCreate3DPart PLM1 //https://r2021x.mydomain.com:443/3dspace M0QzOTFENDczRTlFNEI4REJGMUE2QjlBQUQyNUIwQjV8YWRtaW5fcGxhdGZvcm18YWRtaW5fcGxhdGZvcm18fHwwfA== VPMReference //--------------------- CATUnicodeString Repository = \"PLM1\" ; // CATUnicodeString ServerName = \"3dexpv6r2019x.3ds.com\"; CATUnicodeString ServerName = \"r2021x.mydomain.com\" ; CATUnicodeString ServerPort = \"443\" ; CATUnicodeString ServerRootURI = \"3dspace\" ; CATUnicodeString LoginTicket = \"M0QzOTFENDczRTlFNEI4REJGMUE2QjlBQUQyNUIwQjV8YWRtaW5fcGxhdGZvcm18YWRtaW5fcGxhdGZvcm18fHwwfA==\" ; // \"NUEzOEEzRjNEMjI0NDVBMUI4MjE4QkExNjREQTA2QUR8YWRtaW5fcGxhdGZvcm18YWRtaW5fcGxhdGZvcm18fHwwfA==\"; //------------------------------------------------------------------ //2 - Sets the Connection Parameters //------------------------------------------------------------------ rc = Init3DEXPERIENCESession ( Repository , ServerName , ServerPort , ServerRootURI , LoginTicket ); if ( SUCCEEDED ( rc )) { CATString ConnectedUser , OrganisationId , ProjectId , RoleId ; rc = CATAdpPublicSecurityServices :: GetSecurityParameters ( Repository , ConnectedUser , OrganisationId , ProjectId , RoleId ); if ( SUCCEEDED ( rc )) { cout << endl << \"Connection succeeded\" << endl ; cout << \"Tips:\" << ConnectedUser << \" (\" << RoleId << \" \" << OrganisationId << \" \" << ProjectId << \") is connected\" << endl << endl ; } } else cout << endl << \"Connection failed\" << endl << endl ; //--------------------------------------------------------------------- // 3- Retrieves the interface pointer on the 3DPart Factory //--------------------------------------------------------------------- CATIPrd3DPartReferenceFactory * pIPLM3DPartFactory = NULL ; rc = CATPrdFactory :: CreatePrdFactory ( IID_CATIPrd3DPartReferenceFactory , ( void ** ) & pIPLM3DPartFactory ); if ( FAILED ( rc ) || ( NULL == pIPLM3DPartFactory )) return 1 ; cout << \" A Pointer to the 3D Part factory has been found\" << endl ; //--------------------------------------------------------------------- // 4- Creates the 3D Part //--------------------------------------------------------------------- // Retrieve the 3DPart Type CATUnicodeString s3DPartRefType = \"VPMReference\" ; CATIType_var spRefType ; rc = CATCkePLMNavPublicServices :: RetrieveKnowledgeType ( s3DPartRefType , spRefType ); // Maybe it's a customer type if ( FAILED ( rc ) || ! spRefType ) rc = CATCkePLMNavSpecializationAccessPublicServices :: RetrieveSpecializationType ( s3DPartRefType , spRefType ); if ( FAILED ( rc ) || ! spRefType ) { cout << \" The type \" << s3DPartRefType . ConvertToChar () << \" doesn't exist\" << endl ; return 1 ; } CATIPLMProducts * pCreated3DPart = NULL ; CATLISTV ( CATICkeParm_var ) EmptyAttrListForRef ; CATLISTV ( CATICkeParm_var ) EmptyAttrListForRepRef ; rc = pIPLM3DPartFactory -> Create3DPart ( NULL , spRefType , EmptyAttrListForRef , EmptyAttrListForRepRef , pCreated3DPart ); if ( FAILED ( rc ) || ( NULL == pCreated3DPart )) return 1 ; cout << \" The PLM 3D Part has been created \" << endl ; //---------------------------------------------------------- // 5- Manages 3DPart Lifecycle //--------------------------------------------------------- CATOmbLifeCycleRootsBag Bag ; rc = Bag . InsertRoot ( pCreated3DPart ); if ( FAILED ( rc )) return 1 ; cout << \" Success in setting the created 3DPart in the bag\" << endl << endl ; CATICkeObject_var spInstanciated = pCreated3DPart ; if ( !! spInstanciated ) { rc = CATCkeObjectAttrWriteServices :: SetValueWithString ( spInstanciated , \"PLM_ExternalID\" , \"ABC-123456\" ); //Moify Name if ( FAILED ( rc )) { cout << \"Error : Moify Name FAILED\" << endl ; return rc ; } rc = CATCkeObjectAttrWriteServices :: SetValueWithString ( spInstanciated , \"V_Name\" , \"\u54c8\u54c8\u54c8\" ); //Moify Name if ( FAILED ( rc )) { cout << \"Error : Moify Name FAILED\" << endl ; return rc ; } } pIPLM3DPartFactory -> Release (); pIPLM3DPartFactory = NULL ; //------------------------------------------------------------------ // 8- Saves the session //------------------------------------------------------------------ CATAdpSaver saver ; rc = saver . Save (); if ( FAILED ( rc ) ) return 1 ; cout << \" Session saved successfully \" << endl ; rc = Bag . RemoveAll (); if ( FAILED ( rc )) return 1 ; //------------------------------------------------------------------ // 9- Closes the session //------------------------------------------------------------------ if ( SUCCEEDED ( CATPLMSessionServices :: ClosePLMSession ())) cout << \"-> PLM session closed\" << endl << endl << endl ; else { cout << \"-> ERROR in closing PLM session\" << endl << endl ; if ( SUCCEEDED ( rc )) rc = E_FAIL ; } cout << \" Session closed successfully \" << endl ; cout << endl << \"The CAAPstCreate3DPart main program ends ....\" << endl << endl ; return 0 ; }","title":"\u81ea\u5b9a\u4e49\u96f6\u4ef6ID"},{"location":"DS-CODE/CAA/Dlgmultilist%20set%20header%20resource/","text":"CATString sCatalog = \"CATCivilPrdRenameCmd\" ; CATUnicodeString sMessageNoSelection = CATMsgCatalog :: BuildMessage ( sCatalog , \"MessageNoSelection.Title\" , NULL , 0 , \"No Selection\" );","title":"Dlgmultilist set header resource"},{"location":"DS-CODE/CAA/Extract%20BRep/","text":"{ //CATMmrRelimited \u8003\u8651BRep\u7684\u9650\u5236\uff0c\u9650\u5236\u8303\u56f4 //CATMmrFunctional \u521d\u59cb\u5f62\u72b6\uff0c\u6bd4\u5982\u5982\u679c\u8f93\u5165\u7684BRep\u662f\u4e00\u4e2a\u5206\u5272\uff0c\u5219\u7279\u5f81\u5316\u540e\u5f97\u5230\u7684\u662f\u5206\u9694\u7684\u7236\u7ea7\uff0c\u800c\u4e0d\u662f\u5206\u5272\u4e4b\u540e\u7684\u7ed3\u679c CATBody_var spCurveBody = NULL_var ; rc = CAAGetBody ( _spCurve , spCurveBody ); if ( SUCCEEDED ( rc )) { CATLISTP ( CATCell ) pAllCellListP ; spCurveBody -> GetAllCells ( pAllCellListP , 1 ); cout << \"Cells : \" << pAllCellListP . Size () << endl ; if ( pAllCellListP . Size () >= 1 ) { for ( int i = 1 ; i <= pAllCellListP . Size (); i ++ ) { CATBaseUnknown_var spppp = NULL_var ; CATIMmiUseBRepAccess_var spiMmiUseBRepAccess1 = NULL_var ; CATIMmiUseBRepDecodeServices_var spiMmiUseBRepDecodeServices = NULL_var ; CATMmiUseServicesFactory :: CreateBRepDecodeServices ( spiMmiUseBRepDecodeServices ); // spiMmiUseBRepDecodeServices->DecodeCellInBody(spiMmiUseBRepAccess1, pAllCellListP[i], spCurveBody); spiMmiUseBRepDecodeServices -> DecodeExtremity ( spiMmiUseBRepAccess1 , pAllCellListP [ i ], ( CATIMmiUseGeometricalElement_var ) _spCurve ); //, CATMfBRepDecodeType::MfDecodeWire); CATIMmiUseFeaturize_var spiFeaturize = spiMmiUseBRepAccess1 ; CATIMmiUseMfBRep_var spiBRep = NULL_var ; if ( SUCCEEDED ( spiFeaturize -> Featurize ( spiBRep , MfPermanentBody | MfLastFeatureSupport | MfRelimitedFeaturization , CATMmrFunctional ))) { spppp = spiBRep ; CATIAlias_var sA = spppp ; cout << \"ppppppppppppppppppppppp =========== \" << sA -> GetAlias () << endl << endl ; CATIGSMUseExtractSolide_var spiExtractSolide = spiGSMUseFactory -> CreateExtractSolide ( spppp ); if ( spiExtractSolide != NULL_var ) //&& SUCCEEDED(CAAUpdateFeature(spiExtractSolide))) { CAASetInsert ( spiExtractSolide , spiBasicTool ); } else cout << \"Error : CreateExtractSolide is Failed !\" << endl << endl ; } } } } }","title":"Extract BRep"},{"location":"DS-CODE/CAA/Find%20the%20extreme%20point%20of%20the%20curve/","text":"\u6c42\u53d6\u66f2\u7ebf\u6781\u503c\u70b9 CATIMmiPrtContainer_var spiPrtContainer = NULL_var ; if ( SUCCEEDED ( CAAGetPrtContainerFromFeature ( spFeature , spiPrtContainer ))) { CATBody_var spBody = NULL_var ; CAAGetBody ( spFeature , spBody ); CATGeoFactory_var spGeoFactory = spBody -> GetContainer (); if ( spGeoFactory != NULL_var ) { CATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration (); CATTopData topdata ( pConfig , NULL ); CATICGMTopBodyExtremum * piCGMTopBodyExtremum = :: CATCGMCreateDirNewBodyExtremum ( spGeoFactory , & topdata , spBody , CATMinMax :: CATMaximum , CATMathVector :: CATMathVector ( 1 , 0 , 1 ), CATMathPoint :: CATMathPoint ( 0 , 0 , 0 )); if ( piCGMTopBodyExtremum ) { piCGMTopBodyExtremum -> Run (); CATBody_var spBody = piCGMTopBodyExtremum -> GetResult (); if ( spBody != NULL_var ) { CATIMmiUseDatumFactory_var spDatumFac = spiPrtContainer ; CATIMmiMechanicalFeature * pM = NULL ; spDatumFac -> InstanciateDatum ( spBody , pM ); CATIMmiMechanicalFeature_var spF = spFeature ; spF -> GetMechanicalFather ( spF ); CAASetInsert ( pM , spF ); } } /* CATICGMTopBodyExtremum * CATCGMCreateDirNewBodyExtremum( CATGeoFactory* iFactory, CATTopData* iTopData, CATBody* iBody, CATMinMax iTypeOfExtremum, const CATMathVector& iDirection, const CATMathPoint& iPtOrig) */ } //CATGeoFactory_var spGeoFactory = CATCreateCGMContainer(); //CATCloseCGMContainer (_piGeomFactory); }","title":"Find the extreme point of the curve"},{"location":"DS-CODE/CAA/Find%20the%20extreme%20point%20of%20the%20curve/#_1","text":"CATIMmiPrtContainer_var spiPrtContainer = NULL_var ; if ( SUCCEEDED ( CAAGetPrtContainerFromFeature ( spFeature , spiPrtContainer ))) { CATBody_var spBody = NULL_var ; CAAGetBody ( spFeature , spBody ); CATGeoFactory_var spGeoFactory = spBody -> GetContainer (); if ( spGeoFactory != NULL_var ) { CATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration (); CATTopData topdata ( pConfig , NULL ); CATICGMTopBodyExtremum * piCGMTopBodyExtremum = :: CATCGMCreateDirNewBodyExtremum ( spGeoFactory , & topdata , spBody , CATMinMax :: CATMaximum , CATMathVector :: CATMathVector ( 1 , 0 , 1 ), CATMathPoint :: CATMathPoint ( 0 , 0 , 0 )); if ( piCGMTopBodyExtremum ) { piCGMTopBodyExtremum -> Run (); CATBody_var spBody = piCGMTopBodyExtremum -> GetResult (); if ( spBody != NULL_var ) { CATIMmiUseDatumFactory_var spDatumFac = spiPrtContainer ; CATIMmiMechanicalFeature * pM = NULL ; spDatumFac -> InstanciateDatum ( spBody , pM ); CATIMmiMechanicalFeature_var spF = spFeature ; spF -> GetMechanicalFather ( spF ); CAASetInsert ( pM , spF ); } } /* CATICGMTopBodyExtremum * CATCGMCreateDirNewBodyExtremum( CATGeoFactory* iFactory, CATTopData* iTopData, CATBody* iBody, CATMinMax iTypeOfExtremum, const CATMathVector& iDirection, const CATMathPoint& iPtOrig) */ } //CATGeoFactory_var spGeoFactory = CATCreateCGMContainer(); //CATCloseCGMContainer (_piGeomFactory); }","title":"\u6c42\u53d6\u66f2\u7ebf\u6781\u503c\u70b9"},{"location":"DS-CODE/CAA/GSMFactory/","text":"CreateLoft\uff1b//\u591a\u622a\u9762\u66f2\u9762 CreateAssemble //\u63a5\u5408","title":"GSMFactory"},{"location":"DS-CODE/CAA/Get%20Material/","text":"{ CATAdpOpenParameters params_Nav ( CATAdpExpandParameters :: Navigation ); params_Nav . SetMaterialLoadingMode ( TRUE ); //\u6253\u5f00\u96f6\u4ef6\u65f6\u52a0\u8f7d\u6750\u8d28 CATIPLMNavReference * piNavRefOnComp = NULL ; CATOmbLifeCycleRootsBag LifeCycleRootsBag ; HRESULT hr = CAAOpenPLMComponent ( PLMType . ConvertToChar (), PartName , PartVersion , IID_CATIPLMNavReference ,( void ** ) & piNavRefOnComp , LifeCycleRootsBag , TRUE ); if ( SUCCEEDED ( hr )) { CATBaseUnknown * ppRef = NULL ; CATIPrdObject * piRootPrdObject = NULL ; if ( SUCCEEDED ( piNavRefOnComp -> QueryInterface ( IID_CATIPrdObject , ( void ** ) & piRootPrdObject ))) { piRootPrdObject -> GetReferenceObject ( ppRef , IID_CATBaseUnknown ); piRootPrdObject -> Release (); piRootPrdObject = NULL ; } CATLISTP ( CATIPLMComponent ) pathOfInstances ; CATIPLMComponent * piRepInstance = NULL ; CATBaseUnknown * pTarget = ppRef ; CATOmbObjectInContext * pObjectInContext = NULL ; HRESULT hr = CATOmbObjectInContext :: CreateObjectInContext ( pathOfInstances , piRepInstance , pTarget , pObjectInContext ); if ( SUCCEEDED ( hr )) { CATBaseUnknown * pRef1 = NULL ; CATMatAppliedAccess :: GetMaterialCore ( pObjectInContext , pRef1 , CATIMaterialReference :: ClassName ()); if ( pRef1 != NULL ) { CATIAlias_var spiAlias = pRef1 ; cout << \"------------>\" << spiAlias -> GetAlias () << endl ; } else cout << \"Error : GetMaterialCore is Failed \" << endl ; CATListPtrCATBaseUnknown p1 ; CATMatAppliedAccess :: GetAllMaterialCovering ( pObjectInContext , p1 , CATIMaterialReference :: ClassName ()); if ( p1 . Size () > 0 ) { CATIAlias_var spiAlias = p1 [ 1 ]; cout << \"---GetAllMaterialCovering--------->\" << spiAlias -> GetAlias () << endl ; } else cout << \"Error : GetAllMaterialCovering is Failed \" << endl ; } else cout << \"Error : CreateObjectInContext is Failed \" << endl ; } }","title":"Get Material"},{"location":"DS-CODE/CAA/Get%20radius%20of%20curvature/","text":"\u83b7\u53d6\u66f2\u7387\u534a\u5f84 //----------------------------------------------------------------------------- //\u83b7\u53d6\u66f2\u7387\u534a\u5f84 //----------------------------------------------------------------------------- HRESULT NIOEStampingMRCheckMaxSurfaceCurvature3DGeovVisu::GetSurfaceCurvature(CATSurface * ipSurface, CATMathPoint iMathCenterPt, double &odCurt) { if (!ipSurface) { return E_FAIL; } HRESULT hr = S_OK; CATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration(); CATICGMDistanceMinPtSur * pMinDisPtSur = ::CATCGMCreateDistanceMin(ipSurface->GetContainer(), pConfig, iMathCenterPt, ipSurface); if (!pMinDisPtSur); CATSurParam surParam; CATICGMLocalAnalysis2D * p2DAns = ::CATCGMCreateLocalAnalysis(pConfig, ipSurface, surParam); if (!!p2DAns) { /*double dMin, dMax; CATMathVector2D mathMin2D, mathMax2D; CATMathVector mathMin, mathMax; p2DAns->GetMinMaxCurvaturesAndDirections(dMin, dMax, mathMin2D, mathMax2D, mathMin, mathMax); odCurt = max(fabs(dMin), fabs(dMax)); omathVec = fabs(dMin) < fabs(dMax) ? mathMax : mathMin;*/ odCurt = 1./p2DAns->GetMeanCurvature(); } return hr; } //PS :\u66f2\u7387\u534a\u5f84 = \u66f2\u7387\u7684\u5012\u6570\u3002","title":"Get radius of curvature"},{"location":"DS-CODE/CAA/Get%20radius%20of%20curvature/#_1","text":"//----------------------------------------------------------------------------- //\u83b7\u53d6\u66f2\u7387\u534a\u5f84 //----------------------------------------------------------------------------- HRESULT NIOEStampingMRCheckMaxSurfaceCurvature3DGeovVisu::GetSurfaceCurvature(CATSurface * ipSurface, CATMathPoint iMathCenterPt, double &odCurt) { if (!ipSurface) { return E_FAIL; } HRESULT hr = S_OK; CATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration(); CATICGMDistanceMinPtSur * pMinDisPtSur = ::CATCGMCreateDistanceMin(ipSurface->GetContainer(), pConfig, iMathCenterPt, ipSurface); if (!pMinDisPtSur); CATSurParam surParam; CATICGMLocalAnalysis2D * p2DAns = ::CATCGMCreateLocalAnalysis(pConfig, ipSurface, surParam); if (!!p2DAns) { /*double dMin, dMax; CATMathVector2D mathMin2D, mathMax2D; CATMathVector mathMin, mathMax; p2DAns->GetMinMaxCurvaturesAndDirections(dMin, dMax, mathMin2D, mathMax2D, mathMin, mathMax); odCurt = max(fabs(dMin), fabs(dMax)); omathVec = fabs(dMin) < fabs(dMax) ? mathMax : mathMin;*/ odCurt = 1./p2DAns->GetMeanCurvature(); } return hr; } //PS :\u66f2\u7387\u534a\u5f84 = \u66f2\u7387\u7684\u5012\u6570\u3002","title":"\u83b7\u53d6\u66f2\u7387\u534a\u5f84"},{"location":"DS-CODE/CAA/Get%20the%20edge%20line%2C%20construct%20the%20curve%20and%20combine%20it/","text":"Get the edge line, construct the curve and combine it CATListPtrCATCell pCellListP ; spFillOldBody -> GetAllCells ( pCellListP , 2 ); if ( pCellListP . Size () == 1 ) { CATCell_var spCell = pCellListP [ 1 ]; pCellListP . RemoveAll (); spCell -> GetAllCells ( pCellListP , 1 ); int dSize = pCellListP . Size (); CATCurve ** pCurves = new CATCurve * [ dSize ]; CATCrvLimits * pCrvLimits = new CATCrvLimits [ dSize ]; short * dShort = new short [ dSize ]; for ( int i = 1 ; i <= dSize ; i ++ ) { CATEdge_var spEdge = pCellListP [ i ]; if ( spEdge != NULL_var ) { CATEdgeCurve_var spEdgeCurve = spEdge -> GetCurve (); if ( spEdgeCurve != NULL_var ) { CATCurve * pCurve = spEdgeCurve -> GetRefCurve (); if ( pCurve != NULL ) { CATIMeasurableCurve_var spiMeCurve = pCurve ; if ( !! spiMeCurve ) { double dLength = 0 ; spiMeCurve -> GetLength ( dLength ); cout << \"636 : \" << dLength << endl ; } pCurves [ i - 1 ] = pCurve ; pCrvLimits [ i - 1 ] = pCurve -> GetLimits (); dShort [ i - 1 ] = 1 ; } } } } CATListPtrCATBody pWireLsitP ; for ( int i = 0 ; i < dSize ; i ++ ) { CATICGMTopWire * pWire = :: CATCGMCreateTopWire ( piGeomFactory , & TopData , 1 , & ( pCurves [ i ]), & ( pCrvLimits [ i ]), & ( dShort [ i ])); if ( pWire != NULL ) { pWire -> Run (); pWireLsitP . Append ( pWire -> GetResult ()); } } CATICGMHybAssemble * piAssemble = :: CATCGMCreateNewTopAssemble ( piGeomFactory , & TopData , & pWireLsitP ); if ( piAssemble ) { piAssemble -> Run (); spFillOldBody = piAssemble -> GetResult (); } }","title":"Get the edge line, construct the curve and combine it"},{"location":"DS-CODE/CAA/Get%20the%20edge%20line%2C%20construct%20the%20curve%20and%20combine%20it/#get-the-edge-line-construct-the-curve-and-combine-it","text":"CATListPtrCATCell pCellListP ; spFillOldBody -> GetAllCells ( pCellListP , 2 ); if ( pCellListP . Size () == 1 ) { CATCell_var spCell = pCellListP [ 1 ]; pCellListP . RemoveAll (); spCell -> GetAllCells ( pCellListP , 1 ); int dSize = pCellListP . Size (); CATCurve ** pCurves = new CATCurve * [ dSize ]; CATCrvLimits * pCrvLimits = new CATCrvLimits [ dSize ]; short * dShort = new short [ dSize ]; for ( int i = 1 ; i <= dSize ; i ++ ) { CATEdge_var spEdge = pCellListP [ i ]; if ( spEdge != NULL_var ) { CATEdgeCurve_var spEdgeCurve = spEdge -> GetCurve (); if ( spEdgeCurve != NULL_var ) { CATCurve * pCurve = spEdgeCurve -> GetRefCurve (); if ( pCurve != NULL ) { CATIMeasurableCurve_var spiMeCurve = pCurve ; if ( !! spiMeCurve ) { double dLength = 0 ; spiMeCurve -> GetLength ( dLength ); cout << \"636 : \" << dLength << endl ; } pCurves [ i - 1 ] = pCurve ; pCrvLimits [ i - 1 ] = pCurve -> GetLimits (); dShort [ i - 1 ] = 1 ; } } } } CATListPtrCATBody pWireLsitP ; for ( int i = 0 ; i < dSize ; i ++ ) { CATICGMTopWire * pWire = :: CATCGMCreateTopWire ( piGeomFactory , & TopData , 1 , & ( pCurves [ i ]), & ( pCrvLimits [ i ]), & ( dShort [ i ])); if ( pWire != NULL ) { pWire -> Run (); pWireLsitP . Append ( pWire -> GetResult ()); } } CATICGMHybAssemble * piAssemble = :: CATCGMCreateNewTopAssemble ( piGeomFactory , & TopData , & pWireLsitP ); if ( piAssemble ) { piAssemble -> Run (); spFillOldBody = piAssemble -> GetResult (); } }","title":"Get the edge line, construct the curve and combine it"},{"location":"DS-CODE/CAA/Get%20the%20names%20of%20all%20files%20in%20the%20folder/","text":"C++ void Manage::GetAllFiles ( string path , vector < string >& files ) //\u83b7\u53d6\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u6587\u4ef6 { long hFile = 0 ; //\u6587\u4ef6\u4fe1\u606f struct _finddata_t fileinfo ; string p ; if (( hFile = _findfirst ( p . assign ( path ). append ( \" \\\\ *\" ). c_str (), & fileinfo )) != -1 ) { do { if (( fileinfo . attrib & _A_SUBDIR )) { if ( strcmp ( fileinfo . name , \".\" ) != 0 && strcmp ( fileinfo . name , \"..\" ) != 0 ) { files . push_back ( p . assign ( path ). append ( \" \\\\ \" ). append ( fileinfo . name ) ); GetAllFiles ( p . assign ( path ). append ( \" \\\\ \" ). append ( fileinfo . name ), files ); } } else { files . push_back ( p . assign ( path ). append ( \" \\\\ \" ). append ( fileinfo . name ) ); } } while ( _findnext ( hFile , & fileinfo ) == 0 ); _findclose ( hFile ); } } CAA int CATAECAddActionsComboDlg::GetAllFiles ( CATUnicodeString sPath , CATListOfCATUnicodeString & osFilePathList ) { int dStatus = 0 ; CATDirectory pDir ; CATLibStatus status = CATOpenDirectory ( sPath . ConvertToChar (), & pDir ); if ( CATLibSuccess == status ) { int EndOfDir = 0 ; CATDirectoryEntry Entry ; while (( EndOfDir != 1 ) && ( CATLibSuccess == status )) { status = :: CATReadDirectory ( & pDir , & Entry , & EndOfDir ); if (( CATLibSuccess == status ) && ( EndOfDir != 1 )) { CATUnicodeString sTextName ( Entry . name ); if ( ! ( sTextName . IsNull ()) && sTextName != \".\" && sTextName != \"..\" ) { osFilePathList . Append ( sTextName ); } } } status = :: CATCloseDirectory ( & pDir ); if ( CATLibError == status ) dStatus = 0 ; else if ( osFilePathList . Size () > 0 ) dStatus = 1 ; } else { cout << \"Error : CATOpenDirectory is Failed !\" << endl ; dStatus = 0 ; } return dStatus ; }","title":"Get the names of all files in the folder"},{"location":"DS-CODE/CAA/Get%20the%20names%20of%20all%20files%20in%20the%20folder/#c","text":"void Manage::GetAllFiles ( string path , vector < string >& files ) //\u83b7\u53d6\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u6587\u4ef6 { long hFile = 0 ; //\u6587\u4ef6\u4fe1\u606f struct _finddata_t fileinfo ; string p ; if (( hFile = _findfirst ( p . assign ( path ). append ( \" \\\\ *\" ). c_str (), & fileinfo )) != -1 ) { do { if (( fileinfo . attrib & _A_SUBDIR )) { if ( strcmp ( fileinfo . name , \".\" ) != 0 && strcmp ( fileinfo . name , \"..\" ) != 0 ) { files . push_back ( p . assign ( path ). append ( \" \\\\ \" ). append ( fileinfo . name ) ); GetAllFiles ( p . assign ( path ). append ( \" \\\\ \" ). append ( fileinfo . name ), files ); } } else { files . push_back ( p . assign ( path ). append ( \" \\\\ \" ). append ( fileinfo . name ) ); } } while ( _findnext ( hFile , & fileinfo ) == 0 ); _findclose ( hFile ); } }","title":"C++"},{"location":"DS-CODE/CAA/Get%20the%20names%20of%20all%20files%20in%20the%20folder/#caa","text":"int CATAECAddActionsComboDlg::GetAllFiles ( CATUnicodeString sPath , CATListOfCATUnicodeString & osFilePathList ) { int dStatus = 0 ; CATDirectory pDir ; CATLibStatus status = CATOpenDirectory ( sPath . ConvertToChar (), & pDir ); if ( CATLibSuccess == status ) { int EndOfDir = 0 ; CATDirectoryEntry Entry ; while (( EndOfDir != 1 ) && ( CATLibSuccess == status )) { status = :: CATReadDirectory ( & pDir , & Entry , & EndOfDir ); if (( CATLibSuccess == status ) && ( EndOfDir != 1 )) { CATUnicodeString sTextName ( Entry . name ); if ( ! ( sTextName . IsNull ()) && sTextName != \".\" && sTextName != \"..\" ) { osFilePathList . Append ( sTextName ); } } } status = :: CATCloseDirectory ( & pDir ); if ( CATLibError == status ) dStatus = 0 ; else if ( osFilePathList . Size () > 0 ) dStatus = 1 ; } else { cout << \"Error : CATOpenDirectory is Failed !\" << endl ; dStatus = 0 ; } return dStatus ; }","title":"CAA"},{"location":"DS-CODE/CAA/Get%20time/","text":"CATTime pTime ; int dYear = pTime . GetYear (); int dMonth = pTime . GetMonth (); int dDay = pTime . GetDay (); CATUnicodeString sYear , sMonth , sDay ; sYear . BuildFromNum ( dYear ); sMonth . BuildFromNum ( dMonth ); sDay . BuildFromNum ( dDay ); CATTime pTime ; CATUnicodeString sFormat ( \"%Y/%m/%d %I:%M:%S\" ); CATUnicodeString sTime = pTime . ConvertToString ( sFormat ); //2012/12/02 12:12:13","title":"Get time"},{"location":"DS-CODE/CAA/GetcmdStatus/","text":"caa copy CATCommandHeader * pCommandHeader = NULL ; CATAfrGetCommandHeader ( \"Test1\" , pCommandHeader ); if ( pCommandHeader != NULL_var ) { if ( pCommandHeader -> GetCmdState () == 0 ) { } } vb copy HRESULT CATAECSetParmsCmd::CutAndPasteParm(CATBaseUnknown_var ispObj,CATBaseUnknown_var ispTarget)///??? { HRESULT rc = E_FAIL; CATFrmEditor* pEdit = CATFrmEditor::GetCurrentEditor(); if (pEdit != NULL) { CATIAEditor_var spiAEditor = pEdit; if (spiAEditor != NULL_var) { CATIASelection* piASelection1 = NULL; rc = spiAEditor->get_Selection(piASelection1); if (SUCCEEDED(rc)) { rc = piASelection1->Clear(); if (SUCCEEDED(rc)) { CATIABase_var spiABase1 = ispObj; if (spiABase1 != NULL_var) { rc = piASelection1->Add(spiABase1); if (FAILED(rc)) { cout<<\"Error : Add 1 Failed !\"<<endl; return rc; } else cout << \"Error : Add is NULL !\" << endl; } else cout << \"Error : CATIABase is NULL !\" << endl; } piASelection1->Cut(); } CATIASelection* piASelection2 = NULL; rc = spiAEditor->get_Selection(piASelection2); if (SUCCEEDED(rc)) { rc = piASelection2->Clear(); if (SUCCEEDED(rc)) { CATIABase_var spiABase1 = ispTarget; if (spiABase1 != NULL_var) { rc = piASelection2->Add(spiABase1); if (FAILED(rc)) { cout<<\"Error : Add 2 Failed !\"<<endl; return rc; } else cout << \"Error : Add is NULL !\" << endl; } else cout << \"Error : CATIABase is NULL !\" << endl; } rc = piASelection2->Paste(); if (FAILED(rc)) { cout << \"Error : Paste is Failed !\" << endl; } } } }else cout<<\"Error : Editor is NULL !\"<<endl; return rc; }","title":"GetcmdStatus"},{"location":"DS-CODE/CAA/GetcmdStatus/#caa-copy","text":"CATCommandHeader * pCommandHeader = NULL ; CATAfrGetCommandHeader ( \"Test1\" , pCommandHeader ); if ( pCommandHeader != NULL_var ) { if ( pCommandHeader -> GetCmdState () == 0 ) { } }","title":"caa copy"},{"location":"DS-CODE/CAA/GetcmdStatus/#vb-copy","text":"HRESULT CATAECSetParmsCmd::CutAndPasteParm(CATBaseUnknown_var ispObj,CATBaseUnknown_var ispTarget)///??? { HRESULT rc = E_FAIL; CATFrmEditor* pEdit = CATFrmEditor::GetCurrentEditor(); if (pEdit != NULL) { CATIAEditor_var spiAEditor = pEdit; if (spiAEditor != NULL_var) { CATIASelection* piASelection1 = NULL; rc = spiAEditor->get_Selection(piASelection1); if (SUCCEEDED(rc)) { rc = piASelection1->Clear(); if (SUCCEEDED(rc)) { CATIABase_var spiABase1 = ispObj; if (spiABase1 != NULL_var) { rc = piASelection1->Add(spiABase1); if (FAILED(rc)) { cout<<\"Error : Add 1 Failed !\"<<endl; return rc; } else cout << \"Error : Add is NULL !\" << endl; } else cout << \"Error : CATIABase is NULL !\" << endl; } piASelection1->Cut(); } CATIASelection* piASelection2 = NULL; rc = spiAEditor->get_Selection(piASelection2); if (SUCCEEDED(rc)) { rc = piASelection2->Clear(); if (SUCCEEDED(rc)) { CATIABase_var spiABase1 = ispTarget; if (spiABase1 != NULL_var) { rc = piASelection2->Add(spiABase1); if (FAILED(rc)) { cout<<\"Error : Add 2 Failed !\"<<endl; return rc; } else cout << \"Error : Add is NULL !\" << endl; } else cout << \"Error : CATIABase is NULL !\" << endl; } rc = piASelection2->Paste(); if (FAILED(rc)) { cout << \"Error : Paste is Failed !\" << endl; } } } }else cout<<\"Error : Editor is NULL !\"<<endl; return rc; }","title":"vb copy"},{"location":"DS-CODE/CAA/HRESULT/","text":"HRESULT HRESULT\u5373\u51fd\u6570\u8fd4\u56de\u503c\uff0c \u662f\u4e00\u79cd\u7b80\u5355\u7684\u6570\u636e\u7c7b\u578b\uff0c\u901a\u5e38\u88ab\u5c5e\u6027\u548c ATL \u7528\u4f5c\u8fd4\u56de\u503c\u3002 \u5916\u6587\u540d HRESULT \u6027\u8d28 \u79d1\u5b66 \u7c7b\u522b \u8ba1\u7b97\u673a\u5b66 A value returned from a function call to an interface, consisting of a severity code, context information, a facility code, and a status code that describes the result. For 16-bit Windows systems, the HRESULT is an opaque result handle defined to be zero for a successful return from a function, and nonzero if error or status information is to be returned. To convert an HRESULT into a more detailed SCODE (or return value), applications call GetSCode(). See SCODE. \u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u662f\u6267\u884c\u5b8c\u8fd4\u56de\u7684\u8bdd\u5c06\u5305\u542b\u5177\u6709\u5b9e\u9645\u610f\u4e49\u7684\u6570\u636e\uff0c\u5982\u679c\u7acb\u5373\u8fd4\u56de\u5219\u5305\u542b\u72b6\u6001\u4fe1\u606f--\u53d1\u9001\u6210\u529f\u4e0e\u5426\uff0c\u5e76\u4e0d\u80fd\u8bf4\u660e\u6267\u884c\u7684\u5982\u4f55\u3002\u4e0b\u8868\u8bf4\u660e\u5404\u79cd\u4e0d\u540c\u7684\u503c\u3002\u5934\u6587\u4ef6 winerror.h \u4e2d\u5305\u542b\u66f4\u591a\u7684\u503c\u3002 \u540d\u79f0 \u8bf4\u660e \u503c S_OK \u64cd\u4f5c\u6210\u529f 0x00000000 E_UNEXPECTED \u610f\u5916\u7684\u5931\u8d25 0x8000FFFF E_NOTIMPL \u672a\u5b9e\u73b0 0x80004001 E_OUTOFMEMORY \u672a\u80fd\u5206\u914d\u6240\u9700\u7684\u5185\u5b58 0x8007000E E_INVALIDARG \u4e00\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\u65e0\u6548 0x80070057 E_NOINTERFACE \u4e0d\u652f\u6301\u6b64\u63a5\u53e3 0x80004002 E_POINTER \u65e0\u6548\u6307\u9488 0x80004003 E_HANDLE \u65e0\u6548\u53e5\u67c4 0x80070006 E_ABORT \u64cd\u4f5c\u5df2\u4e2d\u6b62 0x80004004 E_FAIL \u672a\u6307\u5b9a\u7684\u5931\u8d25 0x80004005 E_ACCESSDENIED \u4e00\u822c\u7684\u8bbf\u95ee\u88ab\u62d2\u7edd\u9519\u8bef 0x80070005 \u4e0d\u80fd\u7b80\u5355\u5730\u628a\u8fd4\u56de\u503c\u4e0e S_OK \u548c E_FAIL \u6bd4\u8f83\uff0c\u800c\u8981\u7528 SUCCEEDED \u548c FAILED \u5b8f\u8fdb\u884c\u5224\u65ad\u3002 HRESULT \u5176\u5b9e\u662f\u4e00\u4e2a32\u4f4d\u7684\u503c\uff0c\u5176\u6700\u9ad8\u4f4d(bit)\u5982\u679c\u662f0\u8868\u793a\u6210\u529f\uff0c1\u8868\u793a\u9519\u8bef\u3002\u5177\u4f53\u53c2\u89c1 MSDN \u4e4b\"Structure of COM Error Codes\"\u8bf4\u660e\u3002\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u5982\u679c\u9700\u8981\u5224\u65ad\u8fd4\u56de\u503c\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u6bd4\u8f83\u8fd0\u7b97\u7b26\u53f7\uff1bswitch\u5f00\u5173\u8bed\u53e5\uff1b\u4e5f\u53ef\u4ee5\u4f7f\u7528VC\u63d0\u4f9b\u7684\u5b8f\uff1a HRESULT hr = \u8c03\u7528\u7ec4\u4ef6\u51fd\u6570; if ( SUCCEEDED ( hr ) ){...} // \u5982\u679c\u6210\u529f ...... if ( FAILED ( hr ) ){...} // \u5982\u679c\u5931\u8d25 ......","title":"HRESULT"},{"location":"DS-CODE/CAA/HRESULT/#hresult","text":"HRESULT\u5373\u51fd\u6570\u8fd4\u56de\u503c\uff0c \u662f\u4e00\u79cd\u7b80\u5355\u7684\u6570\u636e\u7c7b\u578b\uff0c\u901a\u5e38\u88ab\u5c5e\u6027\u548c ATL \u7528\u4f5c\u8fd4\u56de\u503c\u3002 \u5916\u6587\u540d HRESULT \u6027\u8d28 \u79d1\u5b66 \u7c7b\u522b \u8ba1\u7b97\u673a\u5b66 A value returned from a function call to an interface, consisting of a severity code, context information, a facility code, and a status code that describes the result. For 16-bit Windows systems, the HRESULT is an opaque result handle defined to be zero for a successful return from a function, and nonzero if error or status information is to be returned. To convert an HRESULT into a more detailed SCODE (or return value), applications call GetSCode(). See SCODE. \u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u662f\u6267\u884c\u5b8c\u8fd4\u56de\u7684\u8bdd\u5c06\u5305\u542b\u5177\u6709\u5b9e\u9645\u610f\u4e49\u7684\u6570\u636e\uff0c\u5982\u679c\u7acb\u5373\u8fd4\u56de\u5219\u5305\u542b\u72b6\u6001\u4fe1\u606f--\u53d1\u9001\u6210\u529f\u4e0e\u5426\uff0c\u5e76\u4e0d\u80fd\u8bf4\u660e\u6267\u884c\u7684\u5982\u4f55\u3002\u4e0b\u8868\u8bf4\u660e\u5404\u79cd\u4e0d\u540c\u7684\u503c\u3002\u5934\u6587\u4ef6 winerror.h \u4e2d\u5305\u542b\u66f4\u591a\u7684\u503c\u3002 \u540d\u79f0 \u8bf4\u660e \u503c S_OK \u64cd\u4f5c\u6210\u529f 0x00000000 E_UNEXPECTED \u610f\u5916\u7684\u5931\u8d25 0x8000FFFF E_NOTIMPL \u672a\u5b9e\u73b0 0x80004001 E_OUTOFMEMORY \u672a\u80fd\u5206\u914d\u6240\u9700\u7684\u5185\u5b58 0x8007000E E_INVALIDARG \u4e00\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\u65e0\u6548 0x80070057 E_NOINTERFACE \u4e0d\u652f\u6301\u6b64\u63a5\u53e3 0x80004002 E_POINTER \u65e0\u6548\u6307\u9488 0x80004003 E_HANDLE \u65e0\u6548\u53e5\u67c4 0x80070006 E_ABORT \u64cd\u4f5c\u5df2\u4e2d\u6b62 0x80004004 E_FAIL \u672a\u6307\u5b9a\u7684\u5931\u8d25 0x80004005 E_ACCESSDENIED \u4e00\u822c\u7684\u8bbf\u95ee\u88ab\u62d2\u7edd\u9519\u8bef 0x80070005 \u4e0d\u80fd\u7b80\u5355\u5730\u628a\u8fd4\u56de\u503c\u4e0e S_OK \u548c E_FAIL \u6bd4\u8f83\uff0c\u800c\u8981\u7528 SUCCEEDED \u548c FAILED \u5b8f\u8fdb\u884c\u5224\u65ad\u3002 HRESULT \u5176\u5b9e\u662f\u4e00\u4e2a32\u4f4d\u7684\u503c\uff0c\u5176\u6700\u9ad8\u4f4d(bit)\u5982\u679c\u662f0\u8868\u793a\u6210\u529f\uff0c1\u8868\u793a\u9519\u8bef\u3002\u5177\u4f53\u53c2\u89c1 MSDN \u4e4b\"Structure of COM Error Codes\"\u8bf4\u660e\u3002\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u5982\u679c\u9700\u8981\u5224\u65ad\u8fd4\u56de\u503c\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u6bd4\u8f83\u8fd0\u7b97\u7b26\u53f7\uff1bswitch\u5f00\u5173\u8bed\u53e5\uff1b\u4e5f\u53ef\u4ee5\u4f7f\u7528VC\u63d0\u4f9b\u7684\u5b8f\uff1a HRESULT hr = \u8c03\u7528\u7ec4\u4ef6\u51fd\u6570; if ( SUCCEEDED ( hr ) ){...} // \u5982\u679c\u6210\u529f ...... if ( FAILED ( hr ) ){...} // \u5982\u679c\u5931\u8d25 ......","title":"HRESULT"},{"location":"DS-CODE/CAA/Material%20acquisition%20at%20different%20locations/","text":"How to create CATOmbObjectInContext depending on the various application usage for Core material application : Apply on Product Reference //\u4ea7\u54c1\u4e0b\u8f93\u5165\u4ea7\u54c1\u7684\u53c2\u8003\u8282\u70b9 CATLISTP ( CATIPLMComponent ) pathOfInstances ; // ALWAYS Empty CATIPLMComponent * piRepInstance = NULL ; CATIPLMComponent * pTarget = input Product Reference ; Apply on Product Representation instance ( Ex : 3 D shape ) //3D shape\u4e0b\u8f93\u5165\u5bf9\u5e94\u7684\u5b9e\u4f8b CATLISTP ( CATIPLMComponent ) pathOfInstances ; // ALWAYS Empty CATIPLMComponent * piRepInstance = input Product Representation instance CATIPLMComponent * pTarget = NULL ; Apply on Features in a 3 D Shape ( body , 1 D , 2 D and 3 D elements ) or in a FEMRep ( SIMULIA properties ) CATLISTP ( CATIPLMComponent ) pathOfInstances ; // ALWAYS Empty //\u5185\u90e8\u7279\u5f81\u4e0b\u8f93\u5165\u5bf9\u5e94\u7684\u7279\u5f81\u4ee5\u53ca\u5bf9\u5e94\u76843D Shape\u5b9e\u4f8b CATIPLMComponent * piRepInstance = Product Representation instance containing the feature CATIPLMComponent * pTarget = input feature in representation ; Apply on Simulation connection property of an engineering connection . CATLISTP ( CATIPLMComponent ) pathOfInstances ; // ALWAYS Empty CATIPLMComponent * piRepInstance = NULL ; CATIPLMComponent * pTarget = input feature managed by the Engineering connection","title":"Material acquisition at different locations"},{"location":"DS-CODE/CAA/Progress%20bar/","text":"//\u8fdb\u5ea6\u6761 int mCount = mProdInstances . size (); double d1 = ( i + 1 ) * 90 / mCount ; double d2 = mCount * 90 / mCount ; double m1 = d1 / d2 * 90 ; //\u8fdb\u5ea6\u6761\u663e\u793a\u767e\u5206\u6bd4\u7684Label\u5e94\u8be5\u653e\u5728\u4e00\u4e2a\u5355\u72ec\u7684Frame\u4e2d\u4ee5\u4fbf\u4e8e\u5237\u65b0\u767e\u5206\u6bd4 //Label\u7684Title\u5927\u6982\u53ea\u80fd\u8bbe\u7f6e\u4e00\u6b21\uff0c\u591a\u6b21\u8bbe\u7f6e\u4f1a\u9020\u6210\u4e0d\u53ef\u89c1 _pDlgProgress = new CATDlgProgress ( this , \"DlgProgress\" ); _pDlgProgress -> SetGridConstraints ( 4 , 1 , 1 , 1 , CATGRID_4SIDES ); _pDlgProgress -> SetRange ( 0 , 100 ); // progress _pDlgProgress -> SetStep ( 1 ); // with 1% steps _pDlgProgress -> SetPos ( 0 ); _pDlgFrame = new CATDlgFrame ( this , ( const char * ) \"Frame4\" , 0 | CATDlgFraNoTitle | CATDlgFraNoFrame | CATDlgGridLayout ); _pDlgFrame -> SetGridConstraints ( 4 , 3 , 1 , 1 , 0 | CATGRID_LEFT | CATGRID_RIGHT | CATGRID_TOP ); _pDlgLabel = new CATDlgLabel ( _pDlgFrame , \"pDlgLabel\" ); _pDlgLabel -> SetGridConstraints ( 4 , 3 , 1 , 1 , CATGRID_4SIDES ); void UploadModeDlg::SetProgressPosition ( int iPos ) { _pDlgProgress -> SetPos ( iPos ); CATUnicodeString strPos ; strPos . BuildFromNum ( iPos ); if ( iPos == 0 ) strPos = \"Step : \" + strPos + \" % \" ; //\u591a\u51fa\u4e24\u4e2a\u5b57\u7b26\uff0c\u9632\u6b62\u767e\u5206\u6bd4\u5b57\u7b26\u53d8\u591a\u65f6\u663e\u793a\u6548\u679c\u4e0d\u597d else strPos = \"Step : \" + strPos + \" %\" ; _pDlgFrame -> ResetLetterObject (); _pDlgLabel -> SetTitle ( strPos ); _pDlgLabel -> Refresh (); _pDlgProgress -> Refresh (); }","title":"Progress bar"},{"location":"DS-CODE/CAA/Sets%20the%20geometry%20set%20to%20ordered%20or%20unordered/","text":"\u8bbe\u7f6e\u51e0\u4f55\u56fe\u5f62\u96c6\u4e3a\u6709\u5e8f\u6216\u65e0\u5e8f CATIGSMTool_var spiGsmTool = spiArcGridElevation ; if ( spiGsmTool != NULL_var ) { spiGsmTool -> SetPrivate ( 0 ); cout << \"SetPrivate OK \" << endl ; }","title":"Sets the geometry set to ordered or unordered"},{"location":"DS-CODE/CAA/Sets%20the%20geometry%20set%20to%20ordered%20or%20unordered/#_1","text":"CATIGSMTool_var spiGsmTool = spiArcGridElevation ; if ( spiGsmTool != NULL_var ) { spiGsmTool -> SetPrivate ( 0 ); cout << \"SetPrivate OK \" << endl ; }","title":"\u8bbe\u7f6e\u51e0\u4f55\u56fe\u5f62\u96c6\u4e3a\u6709\u5e8f\u6216\u65e0\u5e8f"},{"location":"DS-CODE/CAA/Setting%20error/","text":"MyError { HRESULT CATAECAddActionsCmd::MyError () { HRESULT rc = E_FAIL ; CATIMmiUpdateError * piUpdateErrorOnThis = NULL ; CATTry { rc = _spRelationSet -> QueryInterface ( IID_CATIMmiUpdateError , ( void ** ) & piUpdateErrorOnThis ); if ( SUCCEEDED ( rc )) piUpdateErrorOnThis -> UnsetMmiUpdateError (); RaiseAnError ( CATUnicodeString :: CATUnicodeString ( \"AAA\" )); } CATCatch ( CATError , pError ) { CATError * pErrorToThrow = NULL ; // Create access to Update Error CATIMmiErrUpdate * piErrorAccess = NULL ; rc = CATMmiExtendServicesFactory :: CreateUpdateErrorAccess ( piErrorAccess ); if ( NULL != piErrorAccess ) { // Check if the error is already an update error or not if ( S_OK == piErrorAccess -> IsAnUpdateError ( pError )) { // Associates the error with the MultiMeasure if ( NULL != piUpdateErrorOnThis ) { piUpdateErrorOnThis -> SetMmiUpdateError ( pError ); piUpdateErrorOnThis -> Release (); piUpdateErrorOnThis = NULL ; } } else { // Builds a new update error. piErrorAccess -> CreateNewError ( pErrorToThrow ); piErrorAccess -> SetMmiDiagnostic ( pErrorToThrow , pError -> GetNLSMessage ()); // Clean-up :: Flush ( pError ); // Associates the error with the MultiMeasure if ( NULL != piUpdateErrorOnThis ) { piUpdateErrorOnThis -> SetMmiUpdateError ( pErrorToThrow ); piUpdateErrorOnThis -> Release (); piUpdateErrorOnThis = NULL ; } } } if ( piUpdateErrorOnThis ) { piUpdateErrorOnThis -> Release (); piUpdateErrorOnThis = NULL ; } } // end CATCatch CATEndTry return rc ; } void CATAECAddActionsCmd::RaiseAnError ( CATUnicodeString & iErrorLabel ) { CATIMmiErrUpdate * piErrorAccess = NULL ; HRESULT rc = CATMmiExtendServicesFactory :: CreateUpdateErrorAccess ( piErrorAccess ); if ( NULL != piErrorAccess ) { CATError * pError = NULL ; piErrorAccess -> CreateNewError ( pError ); CATUnicodeString Diagnostic ( iErrorLabel ); piErrorAccess -> SetMmiDiagnostic ( pError , Diagnostic ); piErrorAccess -> Release (); piErrorAccess = NULL ; CATThrow ( pError ); } } }","title":"Setting error"},{"location":"DS-CODE/CAA/Setting%20error/#myerror","text":"{ HRESULT CATAECAddActionsCmd::MyError () { HRESULT rc = E_FAIL ; CATIMmiUpdateError * piUpdateErrorOnThis = NULL ; CATTry { rc = _spRelationSet -> QueryInterface ( IID_CATIMmiUpdateError , ( void ** ) & piUpdateErrorOnThis ); if ( SUCCEEDED ( rc )) piUpdateErrorOnThis -> UnsetMmiUpdateError (); RaiseAnError ( CATUnicodeString :: CATUnicodeString ( \"AAA\" )); } CATCatch ( CATError , pError ) { CATError * pErrorToThrow = NULL ; // Create access to Update Error CATIMmiErrUpdate * piErrorAccess = NULL ; rc = CATMmiExtendServicesFactory :: CreateUpdateErrorAccess ( piErrorAccess ); if ( NULL != piErrorAccess ) { // Check if the error is already an update error or not if ( S_OK == piErrorAccess -> IsAnUpdateError ( pError )) { // Associates the error with the MultiMeasure if ( NULL != piUpdateErrorOnThis ) { piUpdateErrorOnThis -> SetMmiUpdateError ( pError ); piUpdateErrorOnThis -> Release (); piUpdateErrorOnThis = NULL ; } } else { // Builds a new update error. piErrorAccess -> CreateNewError ( pErrorToThrow ); piErrorAccess -> SetMmiDiagnostic ( pErrorToThrow , pError -> GetNLSMessage ()); // Clean-up :: Flush ( pError ); // Associates the error with the MultiMeasure if ( NULL != piUpdateErrorOnThis ) { piUpdateErrorOnThis -> SetMmiUpdateError ( pErrorToThrow ); piUpdateErrorOnThis -> Release (); piUpdateErrorOnThis = NULL ; } } } if ( piUpdateErrorOnThis ) { piUpdateErrorOnThis -> Release (); piUpdateErrorOnThis = NULL ; } } // end CATCatch CATEndTry return rc ; } void CATAECAddActionsCmd::RaiseAnError ( CATUnicodeString & iErrorLabel ) { CATIMmiErrUpdate * piErrorAccess = NULL ; HRESULT rc = CATMmiExtendServicesFactory :: CreateUpdateErrorAccess ( piErrorAccess ); if ( NULL != piErrorAccess ) { CATError * pError = NULL ; piErrorAccess -> CreateNewError ( pError ); CATUnicodeString Diagnostic ( iErrorLabel ); piErrorAccess -> SetMmiDiagnostic ( pError , Diagnostic ); piErrorAccess -> Release (); piErrorAccess = NULL ; CATThrow ( pError ); } } }","title":"MyError"},{"location":"DS-CODE/CAA/ShowOrHide/","text":"\u663e\u793a\u6216\u8005\u9690\u85cf\u7269\u4f53 //..... CATIVisProperties * pPropOnPoint = NULL ; HRESULT rc = spObjpt -> QueryInterface ( IID_CATIVisProperties , ( void ** ) & pPropOnPoint ); if ( NULL != pPropOnPoint ) { CATVisPropertiesValues PropValue ; CATVisPropertyType PropTypeOnOnPtObj = CATVPShow ; CATVisGeomType GeomTypeOnPtObj = CATVPGlobalType ; PropValue . SetShowAttr ( CATNoShowAttr ); rc = pPropOnPoint -> SetPropertiesAtt ( PropValue , PropTypeOnOnPtObj , GeomTypeOnPtObj ); pPropOnPoint -> Release (); pPropOnPoint = NULL ; }","title":"ShowOrHide"},{"location":"DS-CODE/CAA/ShowOrHide/#_1","text":"//..... CATIVisProperties * pPropOnPoint = NULL ; HRESULT rc = spObjpt -> QueryInterface ( IID_CATIVisProperties , ( void ** ) & pPropOnPoint ); if ( NULL != pPropOnPoint ) { CATVisPropertiesValues PropValue ; CATVisPropertyType PropTypeOnOnPtObj = CATVPShow ; CATVisGeomType GeomTypeOnPtObj = CATVPGlobalType ; PropValue . SetShowAttr ( CATNoShowAttr ); rc = pPropOnPoint -> SetPropertiesAtt ( PropValue , PropTypeOnOnPtObj , GeomTypeOnPtObj ); pPropOnPoint -> Release (); pPropOnPoint = NULL ; }","title":"\u663e\u793a\u6216\u8005\u9690\u85cf\u7269\u4f53"},{"location":"DS-CODE/CAA/SimpleDIalog/","text":"case CATBoolean CATPRDUDFdataImportAndExportCmd::aaa ( void * ) { CATApplicationFrame * pApplication = CATApplicationFrame :: GetFrame (); if ( NULL != pApplication ) { CATDlgWindow * pMainWindow = pApplication -> GetMainWindow (); CATDlgNotify * pNotifyDlg = new CATDlgNotify ( pMainWindow , \"Warnning MessageBox\" , CATDlgNfyOKCancel ); if ( NULL != pNotifyDlg ) { pNotifyDlg -> SetText ( \"Parameter has repeated ! \\n Whether to recreate ?\" ); pNotifyDlg -> SetVisibility ( CATDlgShow ); AddAnalyseNotificationCB ( pNotifyDlg , pNotifyDlg -> GetNfyCancelNotification (), ( CATCommandMethod ) & CATPRDUDFdataImportAndExportCmd :: bbb , NULL ); //pNotifyDlg->RequestDelayedDestruction(); } } return TRUE ; } void CATPRDUDFdataImportAndExportCmd::bbb ( CATCommand * iCmd , CATNotification * iNotif , CATCommandClientData iUsefulData ) { cout << \"------------------------------------------------------------------------Hello World!\" << endl ; } }","title":"SimpleDIalog"},{"location":"DS-CODE/CAA/SimpleDIalog/#case","text":"CATBoolean CATPRDUDFdataImportAndExportCmd::aaa ( void * ) { CATApplicationFrame * pApplication = CATApplicationFrame :: GetFrame (); if ( NULL != pApplication ) { CATDlgWindow * pMainWindow = pApplication -> GetMainWindow (); CATDlgNotify * pNotifyDlg = new CATDlgNotify ( pMainWindow , \"Warnning MessageBox\" , CATDlgNfyOKCancel ); if ( NULL != pNotifyDlg ) { pNotifyDlg -> SetText ( \"Parameter has repeated ! \\n Whether to recreate ?\" ); pNotifyDlg -> SetVisibility ( CATDlgShow ); AddAnalyseNotificationCB ( pNotifyDlg , pNotifyDlg -> GetNfyCancelNotification (), ( CATCommandMethod ) & CATPRDUDFdataImportAndExportCmd :: bbb , NULL ); //pNotifyDlg->RequestDelayedDestruction(); } } return TRUE ; } void CATPRDUDFdataImportAndExportCmd::bbb ( CATCommand * iCmd , CATNotification * iNotif , CATCommandClientData iUsefulData ) { cout << \"------------------------------------------------------------------------Hello World!\" << endl ; } }","title":"case"},{"location":"DS-CODE/CAA/Sketch%20construction%20elements/","text":"\u8349\u56fe\u6784\u9020\u5143\u7d20 CATIAGeometry2D_var spiAGeometry2D = spiPoint ; if ( spiAGeometry2D != NULL_var ) { spiAGeometry2D -> put_Construction ( TRUE ); }","title":"Sketch construction elements"},{"location":"DS-CODE/CAA/Sketch%20construction%20elements/#_1","text":"CATIAGeometry2D_var spiAGeometry2D = spiPoint ; if ( spiAGeometry2D != NULL_var ) { spiAGeometry2D -> put_Construction ( TRUE ); }","title":"\u8349\u56fe\u6784\u9020\u5143\u7d20"},{"location":"DS-CODE/CAA/Sketches%20create%20point%20lines%20and%20create%20constraints%20to%20edit%20formulas/","text":"\u8349\u56fe\u521b\u5efa\u70b9\u7ebf\u5e76\u521b\u5efa\u7ea6\u675f\u8fdb\u884c\u7f16\u8f91\u516c\u5f0f HRESULT CATCIVRoadLawCmd::StartCreate () { cout << \"CATCIVRoadLawCmd::StartCreate()\" << endl ; HRESULT rc = E_FAIL ; CATIMmiPrtContainer_var spiPrtContainer = NULL_var ; rc = CAAGetPrtContainer ( spiPrtContainer ); if ( FAILED ( rc )) { cout << \"Error : CAAGetPrtContainer is Failed !\" << endl ; return rc ; } CATIGSMUseFactory_var spiGSMFactory = spiPrtContainer ; CATICkeParmFactory_var spiCkeParmFactory = spiPrtContainer ; CATIMmiUseSetFactory_var spiMmiUseSetFactory = spiPrtContainer ; CATICkeRelationFactory_var spiCkeRelationFactory = spiPrtContainer ; if ( spiGSMFactory != NULL_var && spiCkeParmFactory != NULL_var && spiMmiUseSetFactory != NULL_var && spiCkeRelationFactory != NULL_var ) { CATIMmiMechanicalFeature_var spiPart = NULL_var ; rc = spiPrtContainer -> GetMechanicalPart ( spiPart ); if ( spiMmiUseSetFactory != NULL_var && SUCCEEDED ( rc )) { CATIMmiUsePrtPart_var spiPrtPart = spiPart ; if ( spiPrtPart == NULL_var ) { cout << \"Error : CATIMmiUsePrtPart is NULL !\" << endl ; return E_FAIL ; } CATIMmiMechanicalFeature_var spiRootSet = NULL_var ; rc = spiMmiUseSetFactory -> CreateGeometricalSet ( \"\u9053\u8def\u6cd5\u5219\" , spiPart , spiRootSet ); if ( FAILED ( rc ) || spiRootSet == NULL_var ) { cout << \"Error : Create \u9053\u8def\u6cd5\u5219 Set FAILED !\" << endl ; return E_FAIL ; } CATIParmPublisher_var spiPartParm = spiRootSet ; CATIKweModelServices_var spiKweModelServices = CATCkeGlobalFunctions :: GetModelServices (); CATIParmPublisher_var spiParameterSet = spiKweModelServices -> GetCurrentSet ( CATIKweModelServices :: Parameter , spiPartParm , 1 ); CATIParmPublisher_var spiHSet = spiKweModelServices -> GetCurrentSet ( CATIKweModelServices :: Parameter , spiParameterSet , 1 ); CATIParmPublisher_var spiVSet = spiKweModelServices -> GetCurrentSet ( CATIKweModelServices :: Parameter , spiParameterSet , 1 ); CATIParmPublisher_var spiRelationSet = spiKweModelServices -> GetCurrentSet ( CATIKweModelServices :: Relation , spiPartParm , 1 ); CATIMmiMechanicalFeature_var spiResultSet = NULL_var ; rc = spiMmiUseSetFactory -> CreateGeometricalSet ( \"RESULT\" , spiRootSet , spiResultSet , 0 ); if ( FAILED ( rc ) || spiResultSet == NULL_var || spiParameterSet == NULL_var || spiHSet == NULL_var || spiVSet == NULL_var || spiRelationSet == NULL_var ) { cout << \"Error : Create RESULT Set or ParamSet is FAILED !\" << endl ; return E_FAIL ; } CATIAlias_var spiAlias = spiParameterSet ; if ( spiAlias != NULL_var ) { spiAlias -> SetAlias ( \"PARAMETRES\" ); } spiAlias = spiHSet ; if ( spiAlias != NULL_var ) { spiAlias -> SetAlias ( \"\u6c34\u5e73\" ); } spiAlias = spiVSet ; if ( spiAlias != NULL_var ) { spiAlias -> SetAlias ( \"\u5782\u76f4\" ); } spiAlias = spiRelationSet ; if ( spiAlias != NULL_var ) { spiAlias -> SetAlias ( \"RELATIONS\" ); } spiPrtPart -> SetInWorkObject ( spiResultSet ); CATBaseUnknown_var spYZ = NULL_var ; CATBaseUnknown_var spOrigin = NULL_var ; rc = _spAxis -> RetrievePlaneBRepAccess ( CATAxisSystemXNumber , spYZ ); rc = _spAxis -> RetrieveOriginPointBRepAccess ( spOrigin ); if ( SUCCEEDED ( rc )) { CATISktUseSketchFactory_var spiSketchFactory = spiPrtContainer ; if ( spiSketchFactory != NULL_var ) { CATIMmiMechanicalFeature_var spSpecSketch = spiSketchFactory -> CreateSketch (); if ( NULL_var != spSpecSketch ) { CATISktUseSketchPositioning * piSktUseSketchPositioning = NULL ; if ( SUCCEEDED ( spSpecSketch -> QueryInterface ( IID_CATISktUseSketchPositioning , ( void ** ) & piSktUseSketchPositioning ))) { piSktUseSketchPositioning -> SetSupportMode ( CATSktSupOnePlane ); piSktUseSketchPositioning -> SetOriginMode ( CATSktOriProjectionOfAPoint ); CATLISTV ( CATBaseUnknown_var ) spSupportListV ; CATLISTV ( CATBaseUnknown_var ) spOrigintationListV ; spSupportListV . Append ( spYZ ); spOrigintationListV . Append ( spOrigin ); piSktUseSketchPositioning -> SetSupportReferences ( spSupportListV ); piSktUseSketchPositioning -> SetOriginReferences ( spOrigintationListV ); piSktUseSketchPositioning -> Release (); piSktUseSketchPositioning = NULL ; } CATISktUseSketch_var spiSketch = spSpecSketch ; if ( spiSketch != NULL_var && SUCCEEDED ( spiSketch -> OpenEdition ())) { CATISktUse2DAxis_var spiSketchAxis = NULL_var ; rc = spiSketch -> GetAbsolute2DAxis ( spiSketchAxis ); CATISktUse2DWFFactory_var spi2DGeomFactory = spiSketch ; CATISktUse2DConstraintFactory_var spi2DConstraintFactory = spiSketch ; if ( spi2DGeomFactory != NULL_var && spi2DConstraintFactory != NULL_var && SUCCEEDED ( rc )) { spiAlias = spiSketch ; spiAlias -> SetAlias ( \"\u6cd5\u5219\u8349\u56fe\" ); CATIMmiMechanicalFeature_var spiSketchH = spiSketchAxis -> GetHDirection (); CATIMmiMechanicalFeature_var spiSketchV = spiSketchAxis -> GetVDirection (); CAAUpdateFeature ( spiSketchH ); CAAUpdateFeature ( spiSketchV ); CATListValCATISktUse2DPoint_var spPointListV ; vector < CATListOfCATUnicodeString > iopDataVec ; rc = CAAGetDataFromText ( _pCATCIVRoadLawDlg -> GetSelectPath (), iopDataVec ); if ( SUCCEEDED ( rc )) { for ( int i = 1 ; i < iopDataVec . size (); i ++ ) { CATListOfCATUnicodeString sStringList = iopDataVec [ i ]; for ( int j = 1 ; j <= sStringList . Size (); j ++ ) { cout << sStringList [ j ] << \" \\t \" ; } cout << endl ; CATUnicodeString sID = sStringList [ 1 ]; CATUnicodeString sH = sStringList [ 2 ]; CATUnicodeString sV = sStringList [ 3 ]; if ( sH . IsNull () || sV . IsNull () || sID . IsNull ()) return E_FAIL ; double dH = 0 , dV = 0 ; if ( sH . ConvertToNum ( & dH ) == 0 || sV . ConvertToNum ( & dV ) == 0 || sID . IsNull ()) return E_FAIL ; CATUnicodeString sIndex ; sIndex . BuildFromNum ( i ); CATICkeParm_var spiH = spiCkeParmFactory -> CreateLength ( \"H\" + sIndex , dH / 1000 ); CATICkeParm_var spiV = spiCkeParmFactory -> CreateLength ( \"V\" + sIndex , dV / 1000 ); spiHSet -> AppendElement ( spiH ); spiVSet -> AppendElement ( spiV ); double dPoint [ 2 ] = { dH , dV }; CATIMmiMechanicalFeature_var spiPoint = spi2DGeomFactory -> CreatePoint ( dPoint ); spiAlias = spiPoint ; spiAlias -> SetAlias ( sID ); CATIAGeometry2D_var spiAGeometry2D = spiPoint ; if ( spiAGeometry2D != NULL_var ) { spiAGeometry2D -> put_Construction ( TRUE ); } CATIPartConstraint_var spiPartConstraint1 = spi2DConstraintFactory -> CreateConstraint ( spiPoint , NULL , spiSketchH , NULL , NULL , NULL , NULL , Cst2DType_Distance , 0 , 0 ); CATIPartConstraint_var spiPartConstraint2 = spi2DConstraintFactory -> CreateConstraint ( spiPoint , NULL , spiSketchV , NULL , NULL , NULL , NULL , Cst2DType_Distance , 0 , 0 ); if ( spiPartConstraint1 != NULL_var && spiPartConstraint2 != NULL_var ) { CATICkeParm_var spiOffset1 = ( spiPartConstraint1 -> GetValues ())[ 1 ]; CATICkeParm_var spiOffset2 = ( spiPartConstraint2 -> GetValues ())[ 1 ]; // spiPartConstraint1->SetRealValue(1,dV); // spiPartConstraint2->SetRealValue(1, dH); CATCkeListOfParm pParamList1 = new CATListValCATBaseUnknown_var [ 2 ]; pParamList1 -> Append ( spiV ); pParamList1 -> Append ( spiOffset1 ); CATICkeRelation_var spFormula1 = spiCkeRelationFactory -> CreateFormula ( \"\u516c\u5f0fV\" + sID , \"\" , \"\" , spiOffset1 , pParamList1 , \"a1\" , NULL_var , CATCke :: False ); //\u5f53\u524d\u4e0d\u6839\u636e\u53c2\u6570\u540d\u79f0\u5339\u914d CATCkeListOfParm pParamList2 = new CATListValCATBaseUnknown_var [ 2 ]; pParamList2 -> Append ( spiH ); pParamList2 -> Append ( spiOffset2 ); CATICkeRelation_var spFormula2 = spiCkeRelationFactory -> CreateFormula ( \"\u516c\u5f0fH\" + sID , \"\" , \"\" , spiOffset2 , pParamList2 , \"a1\" , NULL_var , CATCke :: False ); //\u5f53\u524d\u4e0d\u6839\u636e\u53c2\u6570\u540d\u79f0\u5339\u914d if ( spFormula1 == NULL_var || spFormula2 == NULL_var ) { cout << \"Error : CreateFormula is Failed !\" << endl ; spiSketch -> CloseEdition (); return rc ; } spiRelationSet -> AppendElement ( spFormula1 ); spiRelationSet -> AppendElement ( spFormula2 ); spPointListV . Append ( spiPoint ); } else cout << \"Error : CATIPartConstraint is NULL \" << endl ; } if ( spPointListV . Size () == iopDataVec . size () -1 ) { for ( int i = 1 ; i <= spPointListV . Size () -1 ; i ++ ) { double dCoor1 [ 2 ] = {}; double dCoor2 [ 2 ] = { 1 , 1 }; CATISktUse2DCurve_var spi2DCurve = spi2DGeomFactory -> CreateLine ( dCoor1 , dCoor2 ); if ( spi2DCurve != NULL_var ) { spi2DCurve -> SetStartPoint ( spPointListV [ i ]); spi2DCurve -> SetEndPoint ( spPointListV [ i + 1 ]); } } } } else cout << \"Error : CAAGetDataFromText is Falied !\" << endl ; if ( SUCCEEDED ( spiSketch -> CloseEdition ())) { if ( SUCCEEDED ( CAAUpdateFeature ( spiSketch ))) { // CATIGSMUseLawDistProj_var spiLaw = spiGSMFactory -> CreateLawDistProj ( spiSketchH , spiSketch ); if ( spiLaw != NULL_var && SUCCEEDED ( CAAUpdateFeature ( spiLaw ))) { spiAlias = spiLaw ; spiAlias -> SetAlias ( \"\u6cd5\u5219\u66f2\u7ebf\" ); CAASetInsert ( spiSketch , spiResultSet ); CAASetInsert ( spiLaw , spiResultSet ); } } } } } } } } } } return rc ; }","title":"Sketches create point lines and create constraints to edit formulas"},{"location":"DS-CODE/CAA/Sketches%20create%20point%20lines%20and%20create%20constraints%20to%20edit%20formulas/#_1","text":"HRESULT CATCIVRoadLawCmd::StartCreate () { cout << \"CATCIVRoadLawCmd::StartCreate()\" << endl ; HRESULT rc = E_FAIL ; CATIMmiPrtContainer_var spiPrtContainer = NULL_var ; rc = CAAGetPrtContainer ( spiPrtContainer ); if ( FAILED ( rc )) { cout << \"Error : CAAGetPrtContainer is Failed !\" << endl ; return rc ; } CATIGSMUseFactory_var spiGSMFactory = spiPrtContainer ; CATICkeParmFactory_var spiCkeParmFactory = spiPrtContainer ; CATIMmiUseSetFactory_var spiMmiUseSetFactory = spiPrtContainer ; CATICkeRelationFactory_var spiCkeRelationFactory = spiPrtContainer ; if ( spiGSMFactory != NULL_var && spiCkeParmFactory != NULL_var && spiMmiUseSetFactory != NULL_var && spiCkeRelationFactory != NULL_var ) { CATIMmiMechanicalFeature_var spiPart = NULL_var ; rc = spiPrtContainer -> GetMechanicalPart ( spiPart ); if ( spiMmiUseSetFactory != NULL_var && SUCCEEDED ( rc )) { CATIMmiUsePrtPart_var spiPrtPart = spiPart ; if ( spiPrtPart == NULL_var ) { cout << \"Error : CATIMmiUsePrtPart is NULL !\" << endl ; return E_FAIL ; } CATIMmiMechanicalFeature_var spiRootSet = NULL_var ; rc = spiMmiUseSetFactory -> CreateGeometricalSet ( \"\u9053\u8def\u6cd5\u5219\" , spiPart , spiRootSet ); if ( FAILED ( rc ) || spiRootSet == NULL_var ) { cout << \"Error : Create \u9053\u8def\u6cd5\u5219 Set FAILED !\" << endl ; return E_FAIL ; } CATIParmPublisher_var spiPartParm = spiRootSet ; CATIKweModelServices_var spiKweModelServices = CATCkeGlobalFunctions :: GetModelServices (); CATIParmPublisher_var spiParameterSet = spiKweModelServices -> GetCurrentSet ( CATIKweModelServices :: Parameter , spiPartParm , 1 ); CATIParmPublisher_var spiHSet = spiKweModelServices -> GetCurrentSet ( CATIKweModelServices :: Parameter , spiParameterSet , 1 ); CATIParmPublisher_var spiVSet = spiKweModelServices -> GetCurrentSet ( CATIKweModelServices :: Parameter , spiParameterSet , 1 ); CATIParmPublisher_var spiRelationSet = spiKweModelServices -> GetCurrentSet ( CATIKweModelServices :: Relation , spiPartParm , 1 ); CATIMmiMechanicalFeature_var spiResultSet = NULL_var ; rc = spiMmiUseSetFactory -> CreateGeometricalSet ( \"RESULT\" , spiRootSet , spiResultSet , 0 ); if ( FAILED ( rc ) || spiResultSet == NULL_var || spiParameterSet == NULL_var || spiHSet == NULL_var || spiVSet == NULL_var || spiRelationSet == NULL_var ) { cout << \"Error : Create RESULT Set or ParamSet is FAILED !\" << endl ; return E_FAIL ; } CATIAlias_var spiAlias = spiParameterSet ; if ( spiAlias != NULL_var ) { spiAlias -> SetAlias ( \"PARAMETRES\" ); } spiAlias = spiHSet ; if ( spiAlias != NULL_var ) { spiAlias -> SetAlias ( \"\u6c34\u5e73\" ); } spiAlias = spiVSet ; if ( spiAlias != NULL_var ) { spiAlias -> SetAlias ( \"\u5782\u76f4\" ); } spiAlias = spiRelationSet ; if ( spiAlias != NULL_var ) { spiAlias -> SetAlias ( \"RELATIONS\" ); } spiPrtPart -> SetInWorkObject ( spiResultSet ); CATBaseUnknown_var spYZ = NULL_var ; CATBaseUnknown_var spOrigin = NULL_var ; rc = _spAxis -> RetrievePlaneBRepAccess ( CATAxisSystemXNumber , spYZ ); rc = _spAxis -> RetrieveOriginPointBRepAccess ( spOrigin ); if ( SUCCEEDED ( rc )) { CATISktUseSketchFactory_var spiSketchFactory = spiPrtContainer ; if ( spiSketchFactory != NULL_var ) { CATIMmiMechanicalFeature_var spSpecSketch = spiSketchFactory -> CreateSketch (); if ( NULL_var != spSpecSketch ) { CATISktUseSketchPositioning * piSktUseSketchPositioning = NULL ; if ( SUCCEEDED ( spSpecSketch -> QueryInterface ( IID_CATISktUseSketchPositioning , ( void ** ) & piSktUseSketchPositioning ))) { piSktUseSketchPositioning -> SetSupportMode ( CATSktSupOnePlane ); piSktUseSketchPositioning -> SetOriginMode ( CATSktOriProjectionOfAPoint ); CATLISTV ( CATBaseUnknown_var ) spSupportListV ; CATLISTV ( CATBaseUnknown_var ) spOrigintationListV ; spSupportListV . Append ( spYZ ); spOrigintationListV . Append ( spOrigin ); piSktUseSketchPositioning -> SetSupportReferences ( spSupportListV ); piSktUseSketchPositioning -> SetOriginReferences ( spOrigintationListV ); piSktUseSketchPositioning -> Release (); piSktUseSketchPositioning = NULL ; } CATISktUseSketch_var spiSketch = spSpecSketch ; if ( spiSketch != NULL_var && SUCCEEDED ( spiSketch -> OpenEdition ())) { CATISktUse2DAxis_var spiSketchAxis = NULL_var ; rc = spiSketch -> GetAbsolute2DAxis ( spiSketchAxis ); CATISktUse2DWFFactory_var spi2DGeomFactory = spiSketch ; CATISktUse2DConstraintFactory_var spi2DConstraintFactory = spiSketch ; if ( spi2DGeomFactory != NULL_var && spi2DConstraintFactory != NULL_var && SUCCEEDED ( rc )) { spiAlias = spiSketch ; spiAlias -> SetAlias ( \"\u6cd5\u5219\u8349\u56fe\" ); CATIMmiMechanicalFeature_var spiSketchH = spiSketchAxis -> GetHDirection (); CATIMmiMechanicalFeature_var spiSketchV = spiSketchAxis -> GetVDirection (); CAAUpdateFeature ( spiSketchH ); CAAUpdateFeature ( spiSketchV ); CATListValCATISktUse2DPoint_var spPointListV ; vector < CATListOfCATUnicodeString > iopDataVec ; rc = CAAGetDataFromText ( _pCATCIVRoadLawDlg -> GetSelectPath (), iopDataVec ); if ( SUCCEEDED ( rc )) { for ( int i = 1 ; i < iopDataVec . size (); i ++ ) { CATListOfCATUnicodeString sStringList = iopDataVec [ i ]; for ( int j = 1 ; j <= sStringList . Size (); j ++ ) { cout << sStringList [ j ] << \" \\t \" ; } cout << endl ; CATUnicodeString sID = sStringList [ 1 ]; CATUnicodeString sH = sStringList [ 2 ]; CATUnicodeString sV = sStringList [ 3 ]; if ( sH . IsNull () || sV . IsNull () || sID . IsNull ()) return E_FAIL ; double dH = 0 , dV = 0 ; if ( sH . ConvertToNum ( & dH ) == 0 || sV . ConvertToNum ( & dV ) == 0 || sID . IsNull ()) return E_FAIL ; CATUnicodeString sIndex ; sIndex . BuildFromNum ( i ); CATICkeParm_var spiH = spiCkeParmFactory -> CreateLength ( \"H\" + sIndex , dH / 1000 ); CATICkeParm_var spiV = spiCkeParmFactory -> CreateLength ( \"V\" + sIndex , dV / 1000 ); spiHSet -> AppendElement ( spiH ); spiVSet -> AppendElement ( spiV ); double dPoint [ 2 ] = { dH , dV }; CATIMmiMechanicalFeature_var spiPoint = spi2DGeomFactory -> CreatePoint ( dPoint ); spiAlias = spiPoint ; spiAlias -> SetAlias ( sID ); CATIAGeometry2D_var spiAGeometry2D = spiPoint ; if ( spiAGeometry2D != NULL_var ) { spiAGeometry2D -> put_Construction ( TRUE ); } CATIPartConstraint_var spiPartConstraint1 = spi2DConstraintFactory -> CreateConstraint ( spiPoint , NULL , spiSketchH , NULL , NULL , NULL , NULL , Cst2DType_Distance , 0 , 0 ); CATIPartConstraint_var spiPartConstraint2 = spi2DConstraintFactory -> CreateConstraint ( spiPoint , NULL , spiSketchV , NULL , NULL , NULL , NULL , Cst2DType_Distance , 0 , 0 ); if ( spiPartConstraint1 != NULL_var && spiPartConstraint2 != NULL_var ) { CATICkeParm_var spiOffset1 = ( spiPartConstraint1 -> GetValues ())[ 1 ]; CATICkeParm_var spiOffset2 = ( spiPartConstraint2 -> GetValues ())[ 1 ]; // spiPartConstraint1->SetRealValue(1,dV); // spiPartConstraint2->SetRealValue(1, dH); CATCkeListOfParm pParamList1 = new CATListValCATBaseUnknown_var [ 2 ]; pParamList1 -> Append ( spiV ); pParamList1 -> Append ( spiOffset1 ); CATICkeRelation_var spFormula1 = spiCkeRelationFactory -> CreateFormula ( \"\u516c\u5f0fV\" + sID , \"\" , \"\" , spiOffset1 , pParamList1 , \"a1\" , NULL_var , CATCke :: False ); //\u5f53\u524d\u4e0d\u6839\u636e\u53c2\u6570\u540d\u79f0\u5339\u914d CATCkeListOfParm pParamList2 = new CATListValCATBaseUnknown_var [ 2 ]; pParamList2 -> Append ( spiH ); pParamList2 -> Append ( spiOffset2 ); CATICkeRelation_var spFormula2 = spiCkeRelationFactory -> CreateFormula ( \"\u516c\u5f0fH\" + sID , \"\" , \"\" , spiOffset2 , pParamList2 , \"a1\" , NULL_var , CATCke :: False ); //\u5f53\u524d\u4e0d\u6839\u636e\u53c2\u6570\u540d\u79f0\u5339\u914d if ( spFormula1 == NULL_var || spFormula2 == NULL_var ) { cout << \"Error : CreateFormula is Failed !\" << endl ; spiSketch -> CloseEdition (); return rc ; } spiRelationSet -> AppendElement ( spFormula1 ); spiRelationSet -> AppendElement ( spFormula2 ); spPointListV . Append ( spiPoint ); } else cout << \"Error : CATIPartConstraint is NULL \" << endl ; } if ( spPointListV . Size () == iopDataVec . size () -1 ) { for ( int i = 1 ; i <= spPointListV . Size () -1 ; i ++ ) { double dCoor1 [ 2 ] = {}; double dCoor2 [ 2 ] = { 1 , 1 }; CATISktUse2DCurve_var spi2DCurve = spi2DGeomFactory -> CreateLine ( dCoor1 , dCoor2 ); if ( spi2DCurve != NULL_var ) { spi2DCurve -> SetStartPoint ( spPointListV [ i ]); spi2DCurve -> SetEndPoint ( spPointListV [ i + 1 ]); } } } } else cout << \"Error : CAAGetDataFromText is Falied !\" << endl ; if ( SUCCEEDED ( spiSketch -> CloseEdition ())) { if ( SUCCEEDED ( CAAUpdateFeature ( spiSketch ))) { // CATIGSMUseLawDistProj_var spiLaw = spiGSMFactory -> CreateLawDistProj ( spiSketchH , spiSketch ); if ( spiLaw != NULL_var && SUCCEEDED ( CAAUpdateFeature ( spiLaw ))) { spiAlias = spiLaw ; spiAlias -> SetAlias ( \"\u6cd5\u5219\u66f2\u7ebf\" ); CAASetInsert ( spiSketch , spiResultSet ); CAASetInsert ( spiLaw , spiResultSet ); } } } } } } } } } } return rc ; }","title":"\u8349\u56fe\u521b\u5efa\u70b9\u7ebf\u5e76\u521b\u5efa\u7ea6\u675f\u8fdb\u884c\u7f16\u8f91\u516c\u5f0f"},{"location":"DS-CODE/CAA/Tese%20feature%20type/","text":"CATICGMUnknown -> IsATypeOf;","title":"Tese feature type"},{"location":"DS-CODE/CAA/Update%20structure%20tree/","text":"\u66f4\u65b0\u7ed3\u6784\u6811 CATISpecObject_var spSpecOnProduct = spRootProductOfProduct ; //ObjectUpdate(spSpecOnProduct);//->Update(); spiRootObj = spRootProductOfProduct ; cout << \"Redrawing the 3D view\" << endl ; CATIModelEvents_var spModelEventOnProduct ( spRootProductOfProduct ); //\u4f7f\u7ec4\u4ef6\u4e0e\u5176\u53ef\u89c6\u5316\u901a\u4fe1\u7684\u63a5\u53e3\uff0c\u5373\u5b83\u4eec\u7684\u56fe\u5f62\u8868\u793a\u3002 CATModify event (( CATBaseUnknown * ) spRootProductOfProduct ); //\u8868\u793a\u5173\u4e8e\u4e00\u4e2a\u5bf9\u8c61\u7684\u4efb\u4f55\u7c7b\u578b\u7684\u4fee\u6539\u7684\u57fa\u672c\u7c7b\u578b\u7684\u53ef\u89c6\u5316\u4e8b\u4ef6\u7684\u7c7b\u3002 spModelEventOnProduct -> Dispatch ( event ); //\u53d1\u9001\u53ef\u89c6\u5316\u4e8b\u4ef6\u3002 CATIRedrawEvent_var spRedrawEventOnProduct ( spRootProductOfProduct ); //\u63a5\u53e3\uff0c\u4ee5\u5141\u8bb8\u5728\u9700\u8981\u65f6\u7684\u66f2\u7ebf\u56fe\u91cd\u7ed8\u3002 spRedrawEventOnProduct -> Redraw (); //\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u53ca\u5176\u5b50\u8282\u70b9\u3002","title":"Update structure tree"},{"location":"DS-CODE/CAA/Update%20structure%20tree/#_1","text":"CATISpecObject_var spSpecOnProduct = spRootProductOfProduct ; //ObjectUpdate(spSpecOnProduct);//->Update(); spiRootObj = spRootProductOfProduct ; cout << \"Redrawing the 3D view\" << endl ; CATIModelEvents_var spModelEventOnProduct ( spRootProductOfProduct ); //\u4f7f\u7ec4\u4ef6\u4e0e\u5176\u53ef\u89c6\u5316\u901a\u4fe1\u7684\u63a5\u53e3\uff0c\u5373\u5b83\u4eec\u7684\u56fe\u5f62\u8868\u793a\u3002 CATModify event (( CATBaseUnknown * ) spRootProductOfProduct ); //\u8868\u793a\u5173\u4e8e\u4e00\u4e2a\u5bf9\u8c61\u7684\u4efb\u4f55\u7c7b\u578b\u7684\u4fee\u6539\u7684\u57fa\u672c\u7c7b\u578b\u7684\u53ef\u89c6\u5316\u4e8b\u4ef6\u7684\u7c7b\u3002 spModelEventOnProduct -> Dispatch ( event ); //\u53d1\u9001\u53ef\u89c6\u5316\u4e8b\u4ef6\u3002 CATIRedrawEvent_var spRedrawEventOnProduct ( spRootProductOfProduct ); //\u63a5\u53e3\uff0c\u4ee5\u5141\u8bb8\u5728\u9700\u8981\u65f6\u7684\u66f2\u7ebf\u56fe\u91cd\u7ed8\u3002 spRedrawEventOnProduct -> Redraw (); //\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u53ca\u5176\u5b50\u8282\u70b9\u3002","title":"\u66f4\u65b0\u7ed3\u6784\u6811"},{"location":"DS-CODE/CAA/V5%20obtains%20the%20sketch%20outline%20or%20the%20corresponding%20body%20and%20determines%20whether%20it%20is%20closed/","text":"V5 \u83b7\u53d6\u8349\u56fe\u8f6e\u5ed3\u6216\u5bf9\u5e94\u7684Body\u4ee5\u53ca\u5224\u65ad\u662f\u5426\u4e3a\u5c01\u95ed CATIPrtProfile_var spiPrtProfile = spiSketch ; if ( SUCCEEDED ( rc ) && spiPrtProfile != NULL_var ) { int nbContour = spiPrtProfile -> GetContourCount (); if ( nbContour == 1 ) { CATBody_var spLocalBody = NULL_var ; spiPrtProfile -> GetBody ( 0 , spLocalBody ); if ( spLocalBody != NULL_var ) { CATDomain * pDomain = spLocalBody -> GetDomain ( 1 ); CATWire_var spWireOnDomain ( pDomain ); if ( spWireOnDomain != NULL_var ) { CATBoolean isClosed = spWireOnDomain -> IsClosed (); if ( TRUE != isClosed ) { cout << \"\u975e\u5c01\u95ed\u8f6e\u5ed3\" << endl ; } else { spiPrtProfile -> GetBody ( 1 , spSketchBody ); } } } } int dElements = spiPrtProfile -> GetElementCount (); CATISpecObject_var spiElement = NULL_var ; if ( dElements > 0 ) spiPrtProfile -> GetElement ( 1 , spiElement ); }","title":"V5 obtains the sketch outline or the corresponding body and determines whether it is closed"},{"location":"DS-CODE/CAA/V5%20obtains%20the%20sketch%20outline%20or%20the%20corresponding%20body%20and%20determines%20whether%20it%20is%20closed/#v5-body","text":"CATIPrtProfile_var spiPrtProfile = spiSketch ; if ( SUCCEEDED ( rc ) && spiPrtProfile != NULL_var ) { int nbContour = spiPrtProfile -> GetContourCount (); if ( nbContour == 1 ) { CATBody_var spLocalBody = NULL_var ; spiPrtProfile -> GetBody ( 0 , spLocalBody ); if ( spLocalBody != NULL_var ) { CATDomain * pDomain = spLocalBody -> GetDomain ( 1 ); CATWire_var spWireOnDomain ( pDomain ); if ( spWireOnDomain != NULL_var ) { CATBoolean isClosed = spWireOnDomain -> IsClosed (); if ( TRUE != isClosed ) { cout << \"\u975e\u5c01\u95ed\u8f6e\u5ed3\" << endl ; } else { spiPrtProfile -> GetBody ( 1 , spSketchBody ); } } } } int dElements = spiPrtProfile -> GetElementCount (); CATISpecObject_var spiElement = NULL_var ; if ( dElements > 0 ) spiPrtProfile -> GetElement ( 1 , spiElement ); }","title":"V5 \u83b7\u53d6\u8349\u56fe\u8f6e\u5ed3\u6216\u5bf9\u5e94\u7684Body\u4ee5\u53ca\u5224\u65ad\u662f\u5426\u4e3a\u5c01\u95ed"},{"location":"DS-CODE/CAA/V5%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AERep%2C%E4%BA%8C%E7%BB%B4%E5%90%8C%E7%90%86/","text":"CAT3DRep * EnterDlg::GetRepFromDoc ( CATUnicodeString iFilePath ) { cout << \"=====> GetRepFromDoc... \" << endl ; HRESULT hr = S_OK ; const char * OldPath = iFilePath . ConvertToChar (); const char * NewPath = \"C: \\\\ Templates \\\\ Admin \\\\ Old.CATPart\" ; WCHAR wstr [ MAX_PATH ] = { 0 }; MultiByteToWideChar ( CP_ACP , 0 , OldPath , -1 , wstr , sizeof ( wstr )); WCHAR wstr1 [ MAX_PATH ] = { 0 }; MultiByteToWideChar ( CP_ACP , 0 , NewPath , -1 , wstr1 , sizeof ( wstr1 )); bool a = CopyFile ( wstr , wstr1 , FALSE ); //\u590d\u5236 if ( a == true ) { cout << \"Part\u6587\u4ef6\u590d\u5236\u6210\u529f\" << endl ; } else { cout << \"Part\u6587\u4ef6\u590d\u5236\u5931\u8d25\" << endl ; } _pStrPath = NewPath ; CATUnicodeString OpenFilePath ( NewPath ); CATDocument * pRefDoc = NULL ; hr = CATDocumentServices :: OpenDocument ( OpenFilePath , pRefDoc ); if ( ! pRefDoc ) { cout << \"open doc fail\" << endl ; return NULL ; } CATInit_var spiInit = pRefDoc ; if ( spiInit == NULL_var ) { cout << \"fail to init\" << endl ; return NULL ; } CATIPrtContainer_var spiPrtContainer = spiInit -> GetRootContainer ( \"CATIPrtContainer\" ); if ( spiPrtContainer == NULL_var ) { cout << \"fail to get spiPrtContainer\" << endl ; return NULL ; } CATISpecObject_var spiSpecOnPart = spiPrtContainer -> GetPart (); if ( spiSpecOnPart == NULL_var ) { cout << \"fail to get SpecPrt\" << endl ; return NULL ; } /// CATPathElement * pRootPath = new CATPathElement ( spiSpecOnPart ); //\u83b7\u53d6\u53ef\u89c6\u5316\u7ba1\u7406\u63a5\u53e3 CATVisManager * pVisManager = CATVisManager :: GetVisManager (); //\u7528\u6765\u5c55\u793a\u8fd9\u4e2a\u6a21\u578b\u7684CATIVisu\u63a5\u53e3\u5217\u8868 list < IID > ListIVisu3d ; IID * pIIDInf = new IID ( IID_CATI3DGeoVisu ); ListIVisu3d . fastadd ( pIIDInf ); //\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u76843D\u89c6\u70b9 CAT3DViewpoint * p3DViewer = new CAT3DViewpoint (); //\u8fde\u63a5\u5230CATVisManager if ( pVisManager ) { hr = pVisManager -> AttachTo ( pRootPath , p3DViewer , ListIVisu3d ); } VisualizationTextRep ( pVisManager , ListIVisu3d , p3DViewer , spiPrtContainer , pRefDoc ); delete pIIDInf , pIIDInf = NULL ; ListIVisu3d . empty (); pRootPath -> Release (); pRootPath = NULL ; /// //\u83b7\u53d6\u673a\u68b0\u96f6\u4ef6\u7684\u56fe\u5f62\u8868\u793a\u63a5\u53e3 CATI3DGeoVisu_var spi3DGeoVisu = spiSpecOnPart ; if ( spi3DGeoVisu == NULL_var ) { cout << \"Fail to get spi3DGeoVisu\" << endl ; return NULL ; } CATRep * pRep = spi3DGeoVisu -> GiveRep (); if ( ! pRep ) { cout << \"fail to get Rep\" << endl ; return NULL ; } CAT3DRep * pRep3D = ( CAT3DRep * ) pRep ; return pRep3D ; } aaa CATDocument * pRefDoc = sPartDocList [ 1 ]; CATIDftDocumentServices * piDftDocServices = NULL ; //\u83b7\u53d6\u5de5\u7a0b\u56fe\u7684\u7ed8\u56fe\u6587\u6863\u63a5\u53e3\u6307\u9488 pRefDoc -> QueryInterface ( IID_CATIDftDocumentServices , ( void ** ) & piDftDocServices ); //\u83b7\u53d6\u5de5\u7a0b\u56fe\u7684\u7ed8\u56fe\u529f\u80fd\u63a5\u53e3 CATIDftDrawing * piDftDrawing = NULL ; //\u5de5\u7a0b\u56fe\u6307\u9488 piDftDocServices -> GetDrawing ( IID_CATIDftDrawing , ( void ** ) & piDftDrawing ); //\u83b7\u5f97\u5de5\u7a0b\u56fe\u6307\u9488 CATIDrawing_var spD = piDftDrawing ; CATISheet_var piS = spD -> GetCurrentSheet (); CATPathElement * pRootPath = new CATPathElement ( piS ); //\u83b7\u53d6\u53ef\u89c6\u5316\u7ba1\u7406\u63a5\u53e3 CATVisManager * pVisManager = CATVisManager :: GetVisManager (); //\u7528\u6765\u5c55\u793a\u8fd9\u4e2a\u6a21\u578b\u7684CATIVisu\u63a5\u53e3\u5217\u8868 list < IID > ListIVisu3d ; IID * pIIDInf = new IID ( IID_CATI2DGeoVisu ); ListIVisu3d . fastadd ( pIIDInf ); //\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u76843D\u89c6\u70b9 CAT2DViewpoint * p3DViewer = new CAT2DViewpoint (); //\u8fde\u63a5\u5230CATVisManager if ( pVisManager ) { pVisManager -> AttachTo ( pRootPath , p3DViewer , ListIVisu3d ); } delete pIIDInf , pIIDInf = NULL ; ListIVisu3d . empty (); pRootPath -> Release (); pRootPath = NULL ; //\u83b7\u53d6\u673a\u68b0\u96f6\u4ef6\u7684\u56fe\u5f62\u8868\u793a\u63a5\u53e3 CATI2DGeoVisu_var spi3DGeoVisu = piS ; CATRep * pRep = spi3DGeoVisu -> GiveRep ();","title":"V5\u8bbe\u7f6e\u540e\u53f0\u6570\u636eRep,\u4e8c\u7ef4\u540c\u7406"},{"location":"DS-CODE/CAA/V5%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AERep%2C%E4%BA%8C%E7%BB%B4%E5%90%8C%E7%90%86/#aaa","text":"CATDocument * pRefDoc = sPartDocList [ 1 ]; CATIDftDocumentServices * piDftDocServices = NULL ; //\u83b7\u53d6\u5de5\u7a0b\u56fe\u7684\u7ed8\u56fe\u6587\u6863\u63a5\u53e3\u6307\u9488 pRefDoc -> QueryInterface ( IID_CATIDftDocumentServices , ( void ** ) & piDftDocServices ); //\u83b7\u53d6\u5de5\u7a0b\u56fe\u7684\u7ed8\u56fe\u529f\u80fd\u63a5\u53e3 CATIDftDrawing * piDftDrawing = NULL ; //\u5de5\u7a0b\u56fe\u6307\u9488 piDftDocServices -> GetDrawing ( IID_CATIDftDrawing , ( void ** ) & piDftDrawing ); //\u83b7\u5f97\u5de5\u7a0b\u56fe\u6307\u9488 CATIDrawing_var spD = piDftDrawing ; CATISheet_var piS = spD -> GetCurrentSheet (); CATPathElement * pRootPath = new CATPathElement ( piS ); //\u83b7\u53d6\u53ef\u89c6\u5316\u7ba1\u7406\u63a5\u53e3 CATVisManager * pVisManager = CATVisManager :: GetVisManager (); //\u7528\u6765\u5c55\u793a\u8fd9\u4e2a\u6a21\u578b\u7684CATIVisu\u63a5\u53e3\u5217\u8868 list < IID > ListIVisu3d ; IID * pIIDInf = new IID ( IID_CATI2DGeoVisu ); ListIVisu3d . fastadd ( pIIDInf ); //\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u76843D\u89c6\u70b9 CAT2DViewpoint * p3DViewer = new CAT2DViewpoint (); //\u8fde\u63a5\u5230CATVisManager if ( pVisManager ) { pVisManager -> AttachTo ( pRootPath , p3DViewer , ListIVisu3d ); } delete pIIDInf , pIIDInf = NULL ; ListIVisu3d . empty (); pRootPath -> Release (); pRootPath = NULL ; //\u83b7\u53d6\u673a\u68b0\u96f6\u4ef6\u7684\u56fe\u5f62\u8868\u793a\u63a5\u53e3 CATI2DGeoVisu_var spi3DGeoVisu = piS ; CATRep * pRep = spi3DGeoVisu -> GiveRep ();","title":"aaa"},{"location":"DS-CODE/CAA/V6%E5%AF%BC%E5%87%BAcgr%E6%96%87%E4%BB%B6/","text":"V6\u5bfc\u51facgr\u6587\u4ef6 { CATIPLMNavReference * pBoltOccurrence = NULL ; CATOmbLifeCycleRootsBag iBag ; HRESULT rc = CAAOpenPLMComponent ( \"VPMReference\" , \"prd-94417684-00019505\" , \"A.1\" , IID_CATIPLMNavReference , ( void ** ) & pBoltOccurrence , iBag , TRUE ); if ( FAILED ( rc )) { cout << \"CAAOpenPLMComponent is failed\" << endl ; } CATIPLMNavReference_var piBoltReference = pBoltOccurrence ; CATIPLMNavOccurrence_var spBoltOccurrence ; CATIPrdOccurrenceMngt * piPrdOccurrenceMngt = NULL ; if ( SUCCEEDED ( rc )) { rc = CATPrdGetOccurrenceMngt ( piPrdOccurrenceMngt ); if ( SUCCEEDED ( rc )) { rc = piPrdOccurrenceMngt -> GetOrCreateRootOccurrence ( piBoltReference , spBoltOccurrence ); if ( SUCCEEDED ( rc )) cout << \"2-a- Get Bolt occurence OK\" << endl ; else cout << \"2-a- ERROR in getting Bolt occurence\" << endl << endl ; } } CATIAlias_var spiAlias = spBoltOccurrence ; cout << \"Root PRODUCT Name:\" << spiAlias -> GetAlias () << endl ; CATI3DGeoVisu_var spi3DGeoVisu = spBoltOccurrence ; if ( spi3DGeoVisu == NULL_var ) { cout << \"Fail to get spi3DGeoVisu\" << endl ; return ; } CATRep * pRep = spi3DGeoVisu -> GiveRep (); if ( ! pRep ) { cout << \"fail to get Rep\" << endl ; return ; } char * sPath = \"C: \\\\ Users \\\\ TL \\\\ Desktop \\\\ B1 \\\\ Test.cgr\" ; :: CATWriteCgr ( pRep , sPath ); }","title":"V6\u5bfc\u51facgr\u6587\u4ef6"},{"location":"DS-CODE/CAA/V6%E5%AF%BC%E5%87%BAcgr%E6%96%87%E4%BB%B6/#v6cgr","text":"{ CATIPLMNavReference * pBoltOccurrence = NULL ; CATOmbLifeCycleRootsBag iBag ; HRESULT rc = CAAOpenPLMComponent ( \"VPMReference\" , \"prd-94417684-00019505\" , \"A.1\" , IID_CATIPLMNavReference , ( void ** ) & pBoltOccurrence , iBag , TRUE ); if ( FAILED ( rc )) { cout << \"CAAOpenPLMComponent is failed\" << endl ; } CATIPLMNavReference_var piBoltReference = pBoltOccurrence ; CATIPLMNavOccurrence_var spBoltOccurrence ; CATIPrdOccurrenceMngt * piPrdOccurrenceMngt = NULL ; if ( SUCCEEDED ( rc )) { rc = CATPrdGetOccurrenceMngt ( piPrdOccurrenceMngt ); if ( SUCCEEDED ( rc )) { rc = piPrdOccurrenceMngt -> GetOrCreateRootOccurrence ( piBoltReference , spBoltOccurrence ); if ( SUCCEEDED ( rc )) cout << \"2-a- Get Bolt occurence OK\" << endl ; else cout << \"2-a- ERROR in getting Bolt occurence\" << endl << endl ; } } CATIAlias_var spiAlias = spBoltOccurrence ; cout << \"Root PRODUCT Name:\" << spiAlias -> GetAlias () << endl ; CATI3DGeoVisu_var spi3DGeoVisu = spBoltOccurrence ; if ( spi3DGeoVisu == NULL_var ) { cout << \"Fail to get spi3DGeoVisu\" << endl ; return ; } CATRep * pRep = spi3DGeoVisu -> GiveRep (); if ( ! pRep ) { cout << \"fail to get Rep\" << endl ; return ; } char * sPath = \"C: \\\\ Users \\\\ TL \\\\ Desktop \\\\ B1 \\\\ Test.cgr\" ; :: CATWriteCgr ( pRep , sPath ); }","title":"V6\u5bfc\u51facgr\u6587\u4ef6"},{"location":"DS-CODE/CAA/VB%E6%90%9C%E7%B4%A2%E5%B9%B6%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4/","text":"Sub CATMain() Dim kpcoll As New Collection CATIA.ActiveEditor.Selection.Clear CATIA.ActiveEditor.Selection.Search (\"Name=* & Knowledgeware.'Knowledge Pattern',all\") CATIA.StartCommand (\"Execute and upgrade\") Next End Sub","title":"VB\u641c\u7d22\u5e76\u542f\u52a8\u4e00\u4e2a\u547d\u4ee4"},{"location":"DS-CODE/CAA/View%20processing%20in%20CAA/","text":"CAA\u4e2d\u89c6\u56fe\u7684\u5904\u7406\u5206\u4e24\u79cd\u65b9\u5f0f\uff1a 1\u3001CATI3DCamera \u4fd7\u79f0\u7167\u76f8\u673a\uff0c\u6b64\u65b9\u6cd5\u8fdb\u884c\u89c6\u56fe\u8f6c\u6362\u65f6\uff0c\u9644\u5e26\u65cb\u8f6c\u52a8\u4f5c\uff1b 2\u3001CAT3DViewpoint 3D\u89c6\u89d2\uff0c\u6b64\u65b9\u6cd5\u8fdb\u884c\u89c6\u56fe\u8f6c\u6362\u65f6\uff0c\u65e0\u8f6c\u65cb\u8f6c\u52a8\u4f5c\u3002 \u5176\u4e2d\u9700\u6ce8\u610f\uff1a vp3d.SetTarget(fOriginalTarget); vp3d.SetOrigin(fOriginalOrigin); vp3d.SetSightDirection(fOriginalSightDirection); vp3d.SetUpDirection(fOriginalUpDirection); \u5176\u4e2dSetTarget\u4e0eSetOrigin\u987a\u5e8f\u7684\u6539\u53d8\u4f1a\u5bfc\u81f4\u8f6c\u6362\u540e\u89c6\u89d2\u7684\u4f4d\u7f6e\u6709\u6240\u504f\u5dee\u3002 \u5168\u90e8\u9002\u5e94\u529f\u80fd\uff1a //\u83b7\u5f97 main 3D viewpoint: CAT3DViewpoint & vp3d = pViewer -> GetMain3DViewpoint (); //To reframe the view, we also need the representation bounding volume. CAT3DBagRep * rootBag = ( CAT3DBagRep * )( vp3d . GetBag ()); if ( NULL == rootBag ) { return TRUE ; } //If the bounding element is invalid, let's force its calculation: if ( rootBag -> IsInvalid ()) rootBag -> ComputeBoundingElement ( 1 ); //Retrieving of the bounding element: const CAT3DBoundingSphere & bs3d = rootBag -> GetBoundingElement (); //Retrieving of the bounding element radius: float radius = bs3d . GetRadius (); if ( radius == 0.f ) radius = bs3d . GetRadiusMM (); double dbAngle = vp3d . GetAngle (); double dbRAngle = CATDegreeToRadian * dbAngle ; double focus = 1.05f * ( radius / tan ( dbRAngle )); float fzoom = vp3d . GetZoom (); CATMathPointf TargetPosition ; if ( 1 == _found ) { TargetPosition = Origin ; } else if ( 0 == _found ) { TargetPosition = bs3d . GetCenter (); } CATMathPointf OriginPosition = TargetPosition - SightDir * ( float ) focus ; vp3d . SetOrigin ( OriginPosition ); vp3d . SetSightDirection ( SightDir ); vp3d . SetTarget ( TargetPosition ); vp3d . SetUpDirection ( upDir ); \u6b64\u529f\u80fd\u662f\u83b7\u53d6\u89c6\u56fe\u4e2d\u6240\u6709\u7279\u5f81\u7684Rep\uff0c\u627e\u53d6\u4e2d\u5fc3\uff0c\u6839\u636eRep\u7684\u663e\u793a\u5927\u5c0f\uff0c\u786e\u5b9a\u89c6\u89d2\u53c2\u6570\uff0c\u8f6c\u6362\u89c6\u89d2\u3002","title":"View processing in CAA"},{"location":"DS-CODE/CAA/auto%28%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%29/","text":"127 \u3001 auto ( \u7c7b\u578b\u63a8\u65ad ) int a [ 3 ] = { 1 , 2 , 3 }; for ( auto i : a ) { cout << i << endl ; }","title":"Auto(\u7c7b\u578b\u63a8\u65ad)"},{"location":"DS-CODE/CAA/build/","text":"CMD BUILD \u914d\u7f6e CATIA \u7248\u672c VS \u7248\u672c \u5907\u6ce8 V5R25~27 VS2012 VS \u52fe\u9009\u5168\u90e8 V5R28~29 VS2015 VS \u52fe\u9009\u5168\u90e8C++ V5R30~31 VS2017 \u53c2\u8003\u6587\u4ef6\u5939\u5185\u7684xml ,\u5b89\u88c5\u65f6\u5019\u6709\u5bfc\u5165\u914d\u7f6e\u9009\u9879 V5R32~ VS2019 \u53c2\u8003\u6587\u4ef6\u5939\u5185\u7684xml ,\u5b89\u88c5\u65f6\u5019\u6709\u5bfc\u5165\u914d\u7f6e\u9009\u9879 CMD\u7f16\u8f91 \u4f9d\u6b21\u8fd0\u884c\u5982\u4e0b\u64cd\u4f5c \"C:\\Program Files\\Dassault Systemes\\B423_RADE\\win_b64\\code\\command\\tck_init.bat\" tck_profile V6R2021x_B423 cd C:\\XUS\\200-CODE\\Dassault_Systemes\\3DEXPERIENCE_XUS_Code\\B423_Civil mkmk -a -g -u -brief && mkrtv \u754c\u9762\u64cd\u4f5c \u5b89\u88c5VS \u63d2\u4ef6 \"C:\\Program Files\\Dassault Systemes\\B32_RADE\\win_b64\\code\\bin\\3DSOpenNativeAppsExt2019.vsix\" \u8bbe\u7f6eVS \u73af\u5883 C:\\Program Files\\Dassault Systemes\\B29_RADE\\win_b64\\code\\command\\tck_init.bat","title":"CMD BUILD"},{"location":"DS-CODE/CAA/build/#cmd-build","text":"","title":"CMD BUILD"},{"location":"DS-CODE/CAA/build/#_1","text":"CATIA \u7248\u672c VS \u7248\u672c \u5907\u6ce8 V5R25~27 VS2012 VS \u52fe\u9009\u5168\u90e8 V5R28~29 VS2015 VS \u52fe\u9009\u5168\u90e8C++ V5R30~31 VS2017 \u53c2\u8003\u6587\u4ef6\u5939\u5185\u7684xml ,\u5b89\u88c5\u65f6\u5019\u6709\u5bfc\u5165\u914d\u7f6e\u9009\u9879 V5R32~ VS2019 \u53c2\u8003\u6587\u4ef6\u5939\u5185\u7684xml ,\u5b89\u88c5\u65f6\u5019\u6709\u5bfc\u5165\u914d\u7f6e\u9009\u9879","title":"\u914d\u7f6e"},{"location":"DS-CODE/CAA/build/#cmd","text":"\u4f9d\u6b21\u8fd0\u884c\u5982\u4e0b\u64cd\u4f5c \"C:\\Program Files\\Dassault Systemes\\B423_RADE\\win_b64\\code\\command\\tck_init.bat\" tck_profile V6R2021x_B423 cd C:\\XUS\\200-CODE\\Dassault_Systemes\\3DEXPERIENCE_XUS_Code\\B423_Civil mkmk -a -g -u -brief && mkrtv","title":"CMD\u7f16\u8f91"},{"location":"DS-CODE/CAA/build/#_2","text":"\u5b89\u88c5VS \u63d2\u4ef6 \"C:\\Program Files\\Dassault Systemes\\B32_RADE\\win_b64\\code\\bin\\3DSOpenNativeAppsExt2019.vsix\" \u8bbe\u7f6eVS \u73af\u5883 C:\\Program Files\\Dassault Systemes\\B29_RADE\\win_b64\\code\\command\\tck_init.bat","title":"\u754c\u9762\u64cd\u4f5c"},{"location":"DS-CODE/CAA/char%E8%BD%ACwchar_t/","text":"case // \u9700\u8981\u5c06\u5b57\u7b26\u4e32\u4eceunicode\u8f6c\u4e3autf-8 // wchar_t* pwchar = NULL; // pwchar = new wchar_t((sPath.GetLengthInChar() + 1) * sizeof(wchar_t)); // sPath.ConvertToWChar(pwchar); // MultiByteToWideChar(CP_OEMCP, NULL, sPath.ConvertToChar(), strlen(sPath.ConvertToChar()), pwchar, sPath.GetLengthInChar()); // pwchar[sPath.GetLengthInChar()] = '\\0'; wchar_t * WStr ; //\u6700\u540e\u4e00\u79cd\u6bd4\u8f83\u597d size_t converted = 0 ; WStr = ( wchar_t * ) malloc (( sPath . GetLengthInChar () + 1 ) * sizeof ( wchar_t )); mbstowcs_s ( & converted , WStr , sPath . GetLengthInChar () + 1 , sPath . ConvertToChar (), _TRUNCATE );","title":"Char\u8f6cwchar t"},{"location":"DS-CODE/CAA/char%E8%BD%ACwchar_t/#case","text":"// \u9700\u8981\u5c06\u5b57\u7b26\u4e32\u4eceunicode\u8f6c\u4e3autf-8 // wchar_t* pwchar = NULL; // pwchar = new wchar_t((sPath.GetLengthInChar() + 1) * sizeof(wchar_t)); // sPath.ConvertToWChar(pwchar); // MultiByteToWideChar(CP_OEMCP, NULL, sPath.ConvertToChar(), strlen(sPath.ConvertToChar()), pwchar, sPath.GetLengthInChar()); // pwchar[sPath.GetLengthInChar()] = '\\0'; wchar_t * WStr ; //\u6700\u540e\u4e00\u79cd\u6bd4\u8f83\u597d size_t converted = 0 ; WStr = ( wchar_t * ) malloc (( sPath . GetLengthInChar () + 1 ) * sizeof ( wchar_t )); mbstowcs_s ( & converted , WStr , sPath . GetLengthInChar () + 1 , sPath . ConvertToChar (), _TRUNCATE );","title":"case"},{"location":"DS-CODE/CAA/double%E5%8F%96%E4%B8%89%E4%BD%8D%E5%B0%8F%E6%95%B0/","text":"case #include <math.h> double dDis = 0.123678 ; dDis = floor ( dDis * 1000.000f + 0.5 ) / 1000.000f ; //out : dDis = 0.124;","title":"Double\u53d6\u4e09\u4f4d\u5c0f\u6570"},{"location":"DS-CODE/CAA/double%E5%8F%96%E4%B8%89%E4%BD%8D%E5%B0%8F%E6%95%B0/#case","text":"#include <math.h> double dDis = 0.123678 ; dDis = floor ( dDis * 1000.000f + 0.5 ) / 1000.000f ; //out : dDis = 0.124;","title":"case"},{"location":"DS-CODE/CAA/lib/","text":"{ fatal error C1189 : # error : WINDOWS . H already included . \u89e3\u51b3\u65b9\u6cd5 \uff1a \u6700\u9876\u7aef\u5b9a\u4e49\u9884\u7f16\u8bd1\u7684\u5b8f */ #ifdef _WINDOWS_ #undef _WINDOWS_ #include <afx.h> #endif CAA\u5e38\u7528\u4ee3\u7801\u6784\u4ef6 #include <afxwin.h> AfcMessageBox ( _T ( \"hello!Point Command\" )); //\u53d8\u91cf\u548c\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u5b57\u7b26\u4e32 //\u4f7f\u7528\u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26\u6765\u5b9e\u73b0\u8f6c\u6362\u8f93\u51fa\u5b9a\u4e49 #define PR(x) cout<<#x\"=\"<<x<<\"\\n\"; //\u4e00\u3001\u5f39\u51fa\u5bf9\u8bdd\u6846 //1\u3001CATDlgNotify CATDlgNotify _OpenNotify ; CATUnicodeString NotifyText ; //NotifyText.BuildFromNum(iInputAllocatedSize); _OpenNotify = new CATDlgNotify ( this , \"TEST\" , CATDlgNfyWarning | CATDlgNfyOK ); _OpenNotify -> SetText ( NotifyText ); _OpenNotify -> SetVisibility ( CATDlgShow ); //2\u3001MessageBox CATUnicodeString -->LPSTR \u5229\u7528CString afxstr; CATUnicodeString InstanceName ; spProduct -> GetPrdInstanceName ( InstanceName ); CString name = InstanceName . ConvertToChar (); MessageBox ( NULL , name , L \"OK\" , MB_OK | MB_SYSTEMMODAL ); MessageBox ( NULL , L \"Hello World!\" , L \"\u6210\u529f\" , MB_OK | MB_SYSTEMMODAL ); //\u4e8c\u3001\u83b7\u53d6CATIA\u73af\u5883\u53d8\u91cf\uff1a CATUnicodeString oPreviewFileName , TmpDir , File ; char * slash_tmp = NULL ; if ( CATGetEnvValue ( \"CATInstallPath\" , & slash_tmp ) == CATLibSuccess ) oPreviewFileName = slash_tmp ; if ( slash_tmp ) free ( slash_tmp ); slash_tmp = NULL ; #ifndef _WINDOWS_SOURCE oPreviewFileName . Append ( \" \\\\ \" ); #else oPreviewFileName . Append ( \"/\" ); #endif oPreviewFileName . Append ( \"CAAxPDMPreview.jpg\" ); // get System environment variable char * pathvar ; pathvar = getenv ( \"PATH\" ); cout << pathvar << endl /*CATIA CAA 32\u4f4d\u548c64\u4f4d\u7f16\u8bd1 \u4fee\u6539\u73af\u5883\u53d8\u91cf\uff1a _MkmkOS_BitMode = 32 // Win32\u4f4d\u7f16\u8bd1 _MkmkOS_BitMode = 64 // Win64\u4f4d\u7f16\u8bd1 */ //\u4e94\u3001\u5c5e\u6027\u83b7\u53d6 CATIAttributesDescription * piAttrDesc = NULL ; rc = spRootProduct -> QueryInterface ( IID_CATIAttributesDescription , ( void ** ) & piAttrDesc ); if ( FAILED ( rc ) || ( NULL == piAttrDesc )) { cout << \"QueryInterface CATIAttributesDescription error\" << endl ; return 4 ; } CATIInstance * piInstance = NULL ; rc = spRootProduct -> QueryInterface ( IID_CATIInstance , ( void ** ) & piInstance ); if ( FAILED ( rc ) || ( NULL == piInstance )) { cout << \"QueryInterface CATIInstance error\" << endl ; return 4 ; } CATListValCATAttributeInfos attrInfoList ; piAttrDesc -> List ( & attrInfoList ); for ( int i = 1 ; i <= attrInfoList . Size (); i ++ ) { CATAttributeInfos attrInfo = attrInfoList [ i ]; const CATUnicodeString & propertyName = attrInfo . Name (); //\u5c5e\u6027\u540d const CATUnicodeString & valueType = attrInfo . Type () -> Name (); //\u5c5e\u6027\u7c7b\u578b CATIValue * pValue = piInstance -> GetValue ( propertyName ); //\u83b7\u5f97\u5bf9\u5e94\u5c5e\u6027\u540d\u7684\u5c5e\u6027\u503c CATUnicodeString value = \"\" ; pValue -> AsString ( value ); cout << propertyName << \"-\" << valueType << \"-\" << value << endl ; if ( pValue ) { pValue -> Release (); pValue = NULL ; } } //\u516d\u3001CATSystemInfo \u4e3b\u673a\u4fe1\u606f\u83b7\u53d6 /*\u5168\u5c40\u65b9\u6cd5CATGetSystemInfo\uff0c\u83b7\u5f97\u4e00\u4e2aCATSystemInfo\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e3b\u673a\u540d\u5b57\u3001\u4e3b\u673a\u7cfb\u7edf\u540d\u5b57\u3001\u7cfb\u7edf\u7248\u672c\u7b49\u4e3b\u673a\u4fe1\u606f\u3002*/ CATSystemInfo host ; :: CATGetSystemInfo ( & host ); cout << \"HostName:\" << host . HostName << endl ; cout << \"OSName:\" << host . OSName << endl ; cout << \"OSVersion:\" << host . OSVersion << endl ; cout << \"OSType:\" << host . OSType << endl ; cout << \"MinorVersion:\" << host . MinorVersion << endl ; cout << \"MajorVersion:\" << host . MajorVersion << endl ; CATTime CATTime timeNow = CATTime :: GetCurrentLocalTime (); CATUnicodeString timeStr = timeNow . ConvertToString ( \"%Y/%m/%d-%H:%M:%S\" ); std :: cout << \"Current Time:\" << timeStr . ConvertToChar () << std :: endl ; //\u4e03\u3001C\uff03 C++ \u5b57\u7b26\u96c6\u8f6c\u6362 \u5b57\u8282\u6d41 string str = \"\u5ba2\u670d\u7aef\u662f\u7528c#\u5199\u7684\uff0c\u670d\u52a1\u7aef\u662fc++\" ; send ( str ); public void send ( msg ) { string hexstr = StringToHexString ( str ) char [] chars = hexstr . ToCharArray (); byte [] byteData = Encoding . Default . GetBytes ( chars ); socket . write ( byteData , 0 , byteData . length ); } //\u5b57\u7b26\u4e32\u8f6c\u4e3a16\u8fdb\u5236 public string StringToHexString ( string message ) { //\u6309\u7167\u6307\u5b9a\u7f16\u7801\u5c06string\u7f16\u7a0b\u5b57\u8282\u6570\u7ec4 byte [] b = Encoding . UTF8 . GetBytes ( message ); string result = string . Empty ; for ( int i = 0 ; i < b . Length ; i ++ ) { result += Convert . ToString ( b [ i ], 16 ); } return result . ToUpper (); }","title":"Lib"},{"location":"DS-CODE/CAA/pAddedHuman%E4%B8%BA%E8%A2%AB%E5%A4%8D%E5%88%B6%E7%9A%84Product%20Reference%2CpDuplactedHuman%E4%B8%BA%E6%96%B0%E5%A4%8D%E5%88%B6%E7%9A%84Product%20Reference/","text":"CATAdpDuplicator duplicator ; CATIPLMComponent_var spComponent = pAddedHuman ; CATIAdpPLMIdentificator * pAddedHumanId = NULL ; spComponent -> GetAdpID ( pAddedHumanId ); hr = duplicator . AddElement ( pAddedHumanId ); CATAdpComponentsAssociation association ; hr = duplicator . Duplicate ( association ); CATIAdpPLMIdentificator * pDuplicated = NULL ; CATAdpOpener adpOpener ( Bag ); CATIPLMProducts * pDuplactedHuman = NULL ; if ( S_OK == association . GetAssociated ( pAddedHumanId , pDuplicated )) { hr = adpOpener . CompleteAndOpen ( pDuplicated , IID_CATIPLMProducts ,( void ** ) & pDuplactedHuman ); if ( hr != S_OK ){ :: MessageBoxString ( \"\u590d\u5236\u5f15\u7528\u5931\u8d25!\" ); return ; } }","title":"pAddedHuman\u4e3a\u88ab\u590d\u5236\u7684Product Reference,pDuplactedHuman\u4e3a\u65b0\u590d\u5236\u7684Product Reference"},{"location":"DS-CODE/CAA/preview/","text":"\u9884\u89c8 CAT3DBagRep * BagRep = new CAT3DBagRep (); CAAIMyFrontView * piMyFrontView = NULL ; HRESULT rc = QueryInterface ( IID_CAAIMyFrontView , ( void ** ) & piMyFrontView ); CATISpecObject_var spiView = NULL_var ; piMyFrontView -> GetView ( spiView ); CATI2DGeoVisu_var spi2DVisu = spiView ; if ( spi2DVisu != NULL_var ) { cout << \"CATI2DGeoVisu_var 80\" << endl ; CATRep * pRep = spi2DVisu -> GiveRep (); if ( pRep != NULL ) { CAT2DTo3DRep * p2DTo3DRep = CAT2DTo3DRep :: CreateRep (); if ( p2DTo3DRep != NULL ) { p2DTo3DRep -> AddChild ( * pRep ); BagRep -> AddChild ( * p2DTo3DRep ); } } } else cout << \"CATI2DGeoVisu_var 82\" << endl ; void CATAECBDGEnvDlg::This3DViewShow () { CATNavigation3DViewer * pNavigation3DViewer = new CATNavigation3DViewer ( _Frame2 , ( const char * ) \"Navigation3DViewer1\" , 0 , 600 , 400 , 0 ); pNavigation3DViewer -> SetGridConstraints ( 0 , 0 , 1 , 1 , CATGRID_4SIDES ); _Frame2 -> SetGridColumnResizable ( 0 ); if ( pNavigation3DViewer != NULL ) { CATFrmLayout * pLayout = CATFrmLayout :: GetCurrentLayout (); if ( pLayout != NULL ) { CATFrmWindow * pWindow = pLayout -> GetCurrentWindow (); if ( pWindow != NULL ) { CATViewer * pViewer = pWindow -> GetViewer (); float r = 0 , g = 0 , b = 0 ; if ( pViewer != NULL ) { pViewer -> GetBackgroundColor ( & r , & g , & b ); pNavigation3DViewer -> SetBackgroundColor ( r , g , b ); //\u8bbe\u7f6eCATNavigation3DViewer\u80cc\u666f\u8272\u4e0e\u4e3b\u754c\u9762\u80cc\u666f\u8272\u76f8\u540c } } } CATIMmiPrtContainer_var spiPrtCont = NULL_var ; if ( SUCCEEDED ( CAAGetPrtContainer ( spiPrtCont ))) { CATIMmiMechanicalFeature_var spPart = NULL_var ; if ( FAILED ( spiPrtCont -> GetMechanicalPart ( spPart ))) { cout << \"Error : Get Part Failed !\" << endl ; return ; } CATI3DGeoVisu_var spi3DGeoVisu = spPart ; if ( spi3DGeoVisu == NULL_var ) { cout << \"Fail to get spi3DGeoVisu\" << endl ; return ; } CATRep * pRep = spi3DGeoVisu -> GiveRep (); if ( ! pRep ) { cout << \"fail to get Rep\" << endl ; return ; } CAT3DRep * pRep3D = ( CAT3DRep * ) pRep ; pNavigation3DViewer -> AddRep ( pRep3D ); pNavigation3DViewer -> Draw (); pNavigation3DViewer -> Reframe (); } } }","title":"Preview"},{"location":"DS-CODE/CAA/preview/#_1","text":"CAT3DBagRep * BagRep = new CAT3DBagRep (); CAAIMyFrontView * piMyFrontView = NULL ; HRESULT rc = QueryInterface ( IID_CAAIMyFrontView , ( void ** ) & piMyFrontView ); CATISpecObject_var spiView = NULL_var ; piMyFrontView -> GetView ( spiView ); CATI2DGeoVisu_var spi2DVisu = spiView ; if ( spi2DVisu != NULL_var ) { cout << \"CATI2DGeoVisu_var 80\" << endl ; CATRep * pRep = spi2DVisu -> GiveRep (); if ( pRep != NULL ) { CAT2DTo3DRep * p2DTo3DRep = CAT2DTo3DRep :: CreateRep (); if ( p2DTo3DRep != NULL ) { p2DTo3DRep -> AddChild ( * pRep ); BagRep -> AddChild ( * p2DTo3DRep ); } } } else cout << \"CATI2DGeoVisu_var 82\" << endl ; void CATAECBDGEnvDlg::This3DViewShow () { CATNavigation3DViewer * pNavigation3DViewer = new CATNavigation3DViewer ( _Frame2 , ( const char * ) \"Navigation3DViewer1\" , 0 , 600 , 400 , 0 ); pNavigation3DViewer -> SetGridConstraints ( 0 , 0 , 1 , 1 , CATGRID_4SIDES ); _Frame2 -> SetGridColumnResizable ( 0 ); if ( pNavigation3DViewer != NULL ) { CATFrmLayout * pLayout = CATFrmLayout :: GetCurrentLayout (); if ( pLayout != NULL ) { CATFrmWindow * pWindow = pLayout -> GetCurrentWindow (); if ( pWindow != NULL ) { CATViewer * pViewer = pWindow -> GetViewer (); float r = 0 , g = 0 , b = 0 ; if ( pViewer != NULL ) { pViewer -> GetBackgroundColor ( & r , & g , & b ); pNavigation3DViewer -> SetBackgroundColor ( r , g , b ); //\u8bbe\u7f6eCATNavigation3DViewer\u80cc\u666f\u8272\u4e0e\u4e3b\u754c\u9762\u80cc\u666f\u8272\u76f8\u540c } } } CATIMmiPrtContainer_var spiPrtCont = NULL_var ; if ( SUCCEEDED ( CAAGetPrtContainer ( spiPrtCont ))) { CATIMmiMechanicalFeature_var spPart = NULL_var ; if ( FAILED ( spiPrtCont -> GetMechanicalPart ( spPart ))) { cout << \"Error : Get Part Failed !\" << endl ; return ; } CATI3DGeoVisu_var spi3DGeoVisu = spPart ; if ( spi3DGeoVisu == NULL_var ) { cout << \"Fail to get spi3DGeoVisu\" << endl ; return ; } CATRep * pRep = spi3DGeoVisu -> GiveRep (); if ( ! pRep ) { cout << \"fail to get Rep\" << endl ; return ; } CAT3DRep * pRep3D = ( CAT3DRep * ) pRep ; pNavigation3DViewer -> AddRep ( pRep3D ); pNavigation3DViewer -> Draw (); pNavigation3DViewer -> Reframe (); } } }","title":"\u9884\u89c8"},{"location":"DS-CODE/CAA/%E4%B8%8D%E8%83%BD%E7%94%A8int%E5%BC%BA%E8%BD%ACCATCommandClientData/","text":"\u4e0d\u80fd\u7528int\u5f3a\u8f6cCATCommandClientData #include \"CATDataType.h\" int SelectNum = CATPtrToINT32 ( data );","title":"\u4e0d\u80fd\u7528int\u5f3a\u8f6cCATCommandClientData"},{"location":"DS-CODE/CAA/%E4%B8%8D%E8%83%BD%E7%94%A8int%E5%BC%BA%E8%BD%ACCATCommandClientData/#intcatcommandclientdata","text":"#include \"CATDataType.h\" int SelectNum = CATPtrToINT32 ( data );","title":"\u4e0d\u80fd\u7528int\u5f3a\u8f6cCATCommandClientData"},{"location":"DS-CODE/CAA/%E4%B8%B4%E6%97%B6%E5%85%83%E7%B4%A0/","text":"case CAT3DArcCircleGP * pCircleGP = new CAT3DArcCircleGP ( CATMathPointf :: CATMathPointf ( mPoint ), CATMathVectorf :: CATMathVectorf ( mPlane . GetNormal ()) , dHeight , CATMathVectorf :: CATMathVectorf ( mLine . GetDirection ()), 0 , dAngle / 57.29577951308233 ); //\u53c2\u65701\u3001\u5706\u5fc3 //\u53c2\u65702\u3001\u652f\u6301\u9762 //\u53c2\u65703\u3001\u534a\u5f84 //\u53c2\u65704\u3001\u53c2\u8003\u8f74\uff0c\u5373\u89d2\u5ea6\u4ece\u54ea\u91cc\u5f00\u59cb\uff0c\u4e0e\u5f00\u59cb\u89d2\u5ea6\u7684\u5dee\u503c //\u53c2\u65705\u3001\u5f00\u59cb\u89d2\u5ea6 //\u53c2\u65706\u3001\u7ed3\u675f\u89d2\u5ea6","title":"\u4e34\u65f6\u5143\u7d20"},{"location":"DS-CODE/CAA/%E4%B8%B4%E6%97%B6%E5%85%83%E7%B4%A0/#case","text":"CAT3DArcCircleGP * pCircleGP = new CAT3DArcCircleGP ( CATMathPointf :: CATMathPointf ( mPoint ), CATMathVectorf :: CATMathVectorf ( mPlane . GetNormal ()) , dHeight , CATMathVectorf :: CATMathVectorf ( mLine . GetDirection ()), 0 , dAngle / 57.29577951308233 ); //\u53c2\u65701\u3001\u5706\u5fc3 //\u53c2\u65702\u3001\u652f\u6301\u9762 //\u53c2\u65703\u3001\u534a\u5f84 //\u53c2\u65704\u3001\u53c2\u8003\u8f74\uff0c\u5373\u89d2\u5ea6\u4ece\u54ea\u91cc\u5f00\u59cb\uff0c\u4e0e\u5f00\u59cb\u89d2\u5ea6\u7684\u5dee\u503c //\u53c2\u65705\u3001\u5f00\u59cb\u89d2\u5ea6 //\u53c2\u65706\u3001\u7ed3\u675f\u89d2\u5ea6","title":"case"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8EC%2B%2B%20%E5%AE%B9%E5%99%A8map%E7%9A%84%E4%BD%BF%E7%94%A8/","text":"\u5173\u4e8eC++ \u5bb9\u5668map\u7684\u4f7f\u7528 map\u952e\u4e0d\u53ef\u91cd\u590d multimap\u952e\u53ef\u91cd\u590d \u8fd9\u4e2a\u7c7b\u578b\u7684\u5bb9\u5668\u4f1a\u6839\u636e\u5b58\u5165\u952e\u503c\u6240\u5360\u5185\u5b58\u5927\u5c0f\u81ea\u52a8\u6392\u5e8f\uff0c\u56e0\u6b64\uff0c\u6570\u636e\u5b58\u5165\u548c\u53d6\u51fa\u7684\u987a\u5e8f\u53ef\u80fd\u4f1a\u4e0d\u540c\u3002","title":"\u5173\u4e8eC++ \u5bb9\u5668map\u7684\u4f7f\u7528"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8EC%2B%2B%20%E5%AE%B9%E5%99%A8map%E7%9A%84%E4%BD%BF%E7%94%A8/#c-map","text":"map\u952e\u4e0d\u53ef\u91cd\u590d multimap\u952e\u53ef\u91cd\u590d \u8fd9\u4e2a\u7c7b\u578b\u7684\u5bb9\u5668\u4f1a\u6839\u636e\u5b58\u5165\u952e\u503c\u6240\u5360\u5185\u5b58\u5927\u5c0f\u81ea\u52a8\u6392\u5e8f\uff0c\u56e0\u6b64\uff0c\u6570\u636e\u5b58\u5165\u548c\u53d6\u51fa\u7684\u987a\u5e8f\u53ef\u80fd\u4f1a\u4e0d\u540c\u3002","title":"\u5173\u4e8eC++ \u5bb9\u5668map\u7684\u4f7f\u7528"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8EGetUIActiveObject%E8%8E%B7%E5%8F%96%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%88%97%E8%A1%A8/","text":"CATPathElement . GetSize\u5f97\u5230\u7684\u7ed3\u6784\u6811\u662f\u4ece\u6839\u8282\u70b9\u5230\u9009\u62e9\u7684\u8282\u70b9 \u5982 \uff1a Product1 Product2 Product3 ( UIActiveObject ) \u90a3\u4e48\u6b64\u65f6 \uff0c GetSize\u6570\u91cf\u4e3a3 \uff0c \u4e14\u5bf9\u5e94\u7684\u987a\u5e8f\u4e3a 1 2 3 \u4e0b\u6807\u4ece0\u5f00\u59cb CATFrmEditor * pEditor = CATFrmEditor :: GetCurrentEditor (); if ( NULL != pEditor ) { CATPathElement UIActivePath = pEditor -> GetUIActiveObject (); CATBaseUnknown * pActiveProduct = ( CATBaseUnknown * )( UIActivePath . FindElement ( IID_CATIPLMProducts )); if ( NULL != pActiveProduct ) { CATIAlias_var spiAlias = pActiveProduct ; cout << \"43 : \" << spiAlias -> GetAlias () << endl ; } CATBaseUnknown * pBase = NULL ; UIActivePath . Search ( IID_CATIPLMProducts , ( void ** ) & pBase ); CATIAlias_var spiAlias = pBase ; cout << \"49 : \" << spiAlias -> GetAlias () << endl ; //\u6b64\u65f6\u5f97\u5230\u7684\u5c31\u662f\u9009\u62e9\u7684\u8282\u70b9(\u5b9e\u4f8b) cout << \"Size : \" << UIActivePath . GetSize () << endl ; for ( int i = 0 ; i < UIActivePath . GetSize (); i ++ ) { CATIAlias_var spiAlias = UIActivePath [ i ]; cout << \"55 : \" << spiAlias -> GetAlias () << \",\" << i << endl ; } }","title":"\u5173\u4e8eGetUIActiveObject\u83b7\u53d6\u7684\u5bf9\u8c61\u5217\u8868"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8CATSafeArrayVariant%EF%BC%88%E5%8F%AF%E5%8F%98%E6%95%B0%E7%BB%84%EF%BC%89/","text":"\u5173\u4e8e\u4f7f\u7528CATSafeArrayVariant\uff08\u53ef\u53d8\u6570\u7ec4\uff09 double dAxes [ 9 ] = {}; CATSafeArrayVariant * pSafeArrayVariant1 = BuildSafeArrayVariant ( dAxes , 9 ); //\u6784\u9020\u4e00\u4e2a\u6307\u5b9a\u5927\u5c0f\u7684CATSafeArrayVariant* double dArr [ 9 ] = {}; long lSize = ConvertSafeArrayVariant ( pSafeArrayVariant1 , dArr , 9 ); //\u4eceCATSafeArrayVariant*\u4e2d\u53d6\u51fa\u6307\u5b9a\u6570\u91cf\u7684\u5185\u5bb9","title":"\u5173\u4e8e\u4f7f\u7528CATSafeArrayVariant\uff08\u53ef\u53d8\u6570\u7ec4\uff09"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8CATSafeArrayVariant%EF%BC%88%E5%8F%AF%E5%8F%98%E6%95%B0%E7%BB%84%EF%BC%89/#catsafearrayvariant","text":"double dAxes [ 9 ] = {}; CATSafeArrayVariant * pSafeArrayVariant1 = BuildSafeArrayVariant ( dAxes , 9 ); //\u6784\u9020\u4e00\u4e2a\u6307\u5b9a\u5927\u5c0f\u7684CATSafeArrayVariant* double dArr [ 9 ] = {}; long lSize = ConvertSafeArrayVariant ( pSafeArrayVariant1 , dArr , 9 ); //\u4eceCATSafeArrayVariant*\u4e2d\u53d6\u51fa\u6307\u5b9a\u6570\u91cf\u7684\u5185\u5bb9","title":"\u5173\u4e8e\u4f7f\u7528CATSafeArrayVariant\uff08\u53ef\u53d8\u6570\u7ec4\uff09"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E5%88%9B%E5%BB%BA.CATfct%E6%96%87%E4%BB%B6/","text":"\u5173\u4e8e\u521b\u5efa.CATfct\u6587\u4ef6 \u53ef\u4ee5\u5c1d\u8bd5\u7279\u5f81\u5b9e\u73b0visu\u989d\u5916\u6dfb\u52a0\u65b0\u7684\u663e\u793a\u800c\u4e0d\u5f71\u54cd\u5176\u6784\u9020,\u4ec5\u5728\u8f93\u5165\u8f93\u51fa\u65f6\u8c03\u7528\u66f4\u65b0\u673a\u5236 \u53c2\u8003\u7f51\u5740\uff1ahttps://blog.csdn.net/c_I_always/article/details/88715213 \u5728CAA\u5f97Runtime Prompt\u7a97\u53e3\u8f93\u5165\u547d\u4ee4\u884cCATOptionsMgt.exe -nologin -Admin \u5728\u8bb8\u53ef\u8bc1\u53d1\u653e\u4e2d\u52fe\u9009\u8bb8\u53ef \u521b\u5efa\uff1a CATfctEditorAssistant -create-new-catalog -catalog-name XXX.CATfct -with-client-id XX -into-directory $PWD/OS_Directory/resources/graphic \u5bfc\u51faosm: CATfctEditorAssistant -describe-as-osm -catalog-name XXX.CATfct -with-client-id XX -as XXX.osm -into-directory $PWD \u5237\u65b0\uff1a CATfctEditorAssistant -update-catalog -catalog-name XXX.CATfct -with-client-id XX -with-osm $PWD/XXX.osm -into-directory $PWD xxx.CATfct(\u540d\u79f0) XX(id\u8981\u4e00\u81f4) $PWD(\u76ee\u5f55) \u5982\u679c\u901a\u8fc7\u547d\u4ee4\u884c\u65e0\u6cd5\u521b\u5efa.CATfct\u6587\u4ef6\uff0c\u53ef\u901a\u8fc7V5\u7a0b\u5e8f\u521b\u5efa\uff08\u8be6\u89c1\uff1a\u300a\u521b\u5efaCATfct.cpp\u300b\uff09 \u5982\u679c\u7279\u5f81\u5b9a\u4e49\u6b63\u786e\u4f46\u662f\u65e0\u6cd5\u66f4\u65b0\u5bf9\u5e94\u7684fct\uff0c\u5219\u68c0\u67e5\u5f53\u524d\u9879\u76ee\u91cc\u662f\u5426\u5b58\u5728\u540d\u79f0\u76f8\u540c\u7684\u81ea\u5b9a\u4e49\u7279\u5f81\uff0c\u5982\u679c\u5b58\u5728\uff0c\u66f4\u6362\u540d\u79f0\u6216\u8005\u5220\u6389\u65e7\u7684fct \u7528\u6cd5 E:\\03_BIM_WORKS\\DEVELOPMENT\\04-DS\\DesignProjectV6R2019x>CATfctEditorAssistant -help CATfctEditorAssistant -create-new-catalog -catalog-name < name_of_catalog > -with-client-id < id > [-author < name > ] [-comment < comment > ] [-using-template < template > ] [-into-directory < output_path > ] CATfctEditorAssistant -update-catalog -catalog-name < name_of_catalog > -with-client-id < id > [-with-osm < path_of_osm > ] [-author < name > ] [-comment < comment > ] [-into-directory < output_path > ] CATfctEditorAssistant -describe-as-osm -catalog-name < name_of_catalog > -with-client-id < id > [-in-version < level > ] -as < name_of_osm > [-into-directory < output_path > ] CATfctEditorAssistant -simulate-catalog-update -catalog-name < name_of_catalog > -with-client-id < id > -in-version < level > -with-osm < path_of_osm > [-into-directory < output_path > ] CATfctEditorAssistant -help \u5176\u4e2d \u4ee3\u8868\u5e26\u6709\u6269\u5c55\u540d\u7684\u6587\u4ef6\u540d\uff0c\u800c\u4e0d\u662f\u8def\u5f84,\u800c \u4ee3\u8868\u6587\u4ef6\u8def\u5f84\u3002 \u8be6\u7ec6\u4fe1\u606f -create-new-catalog\uff1a\u521b\u5efa\u65b0\u7684\u7a7a\u76ee\u5f55\u3002 -catalog-name \uff08\u5fc5\u586b\u9879\uff09 \u6307\u5b9a\u8981\u521b\u5efa\u7684\u65b0\u76ee\u5f55\u7684\u540d\u79f0\u3002 -with-client-id \uff08\u5fc5\u586b\u9879\uff09 \u8bbe\u7f6e\u5ba2\u6237\u7aef\u6807\u8bc6\u5bc6\u94a5\u3002 -author \u5728\u5386\u53f2\u8bb0\u5f55\u4e2d\u6307\u5b9a\u4f5c\u8005\u7684\u59d3\u540d\u3002 -comment \u5c06\u8bc4\u8bba\u6dfb\u52a0\u5230\u5386\u53f2\u8bb0\u5f55\u3002 -using-template \u4f7f\u7528\u53e6\u4e00\u4e2a\u6a21\u677f\uff08\u9ed8\u8ba4\u4e3a\u6807\u51c6\u6a21\u677f\uff09\u3002 -into-directory \u6307\u793a\u8f93\u51fa\u76ee\u5f55\uff0c\u5176\u4e2d\u5c06\u5b58\u50a8\u8f93\u51fa\u6587\u4ef6\u3002 -update-catalog\uff1a\u4f7f\u7528 osm \u6587\u4ef6\u66f4\u65b0\u73b0\u6709\u76ee\u5f55\u3002 -catalog-name \uff08\u5fc5\u586b\u9879\uff09 \u6307\u5b9a\u8981\u66f4\u65b0\u7684\u76ee\u5f55\u540d\u79f0\u3002 -with-client-id \uff08\u5fc5\u586b\u9879\uff09 \u63d0\u4f9b\u5ba2\u6237\u7aef\u6807\u8bc6\u5bc6\u94a5\u3002 -with-osm \u6307\u5b9a\u7528\u4e8e\u66f4\u65b0\u7684 osm \u6587\u4ef6\u8def\u5f84\u3002 -comment \u5c06\u8bc4\u8bba\u6dfb\u52a0\u5230\u5386\u53f2\u8bb0\u5f55\u3002 -into-directory \u6307\u793a\u8f93\u51fa\u76ee\u5f55\uff0c\u5176\u4e2d\u5c06\u5b58\u50a8\u8f93\u51fa\u76ee\u5f55\u3002 -describe-as-osm\uff1a\u901a\u8fc7\u751f\u6210\u5176\u5173\u8054\u7684 osm \u6587\u4ef6\u63cf\u8ff0\u76ee\u5f55\u3002 -catalog-name \uff08\u5fc5\u586b\u9879\uff09 \u6307\u5b9a\u8981\u63cf\u8ff0\u7684\u76ee\u5f55\u540d\u79f0\u3002 -with-client-id \uff08\u5fc5\u586b\u9879\uff09 \u63d0\u4f9b\u5ba2\u6237\u7aef\u6807\u8bc6\u5bc6\u94a5\u3002 -in-version \u5c06\u751f\u6210\u4e3a\u76ee\u5f55\u5185\u5bb9\u7eaf V5 \u6216\u7eaf V6 \u89c6\u56fe\u7684\u63cf\u8ff0\u3002\u56e0\u6b64\uff0c\u8fd9\u6837\u7684 osm \u63cf\u8ff0\u65e0\u6cd5\u7528\u4e8e\u66f4\u65b0\u3002 -as \uff08\u5fc5\u586b\u9879\uff09 \u6307\u793a\u8981\u751f\u6210\u7684\u5305\u542b\u76ee\u5f55\u63cf\u8ff0\u7684 osm \u6587\u4ef6\u3002 -into-directory \u6307\u793a\u8f93\u51fa\u76ee\u5f55\uff0c\u5176\u4e2d\u5c06\u5b58\u50a8\u8f93\u51fa osm \u6587\u4ef6\u3002 -simulate-catalog-update\uff1a\u6a21\u62df\u76ee\u5f55\u66f4\u65b0\u3002 -catalog-name \uff08\u5fc5\u586b\u9879\uff09 \u6307\u5b9a\u8981\u6a21\u62df\u7684\u76ee\u5f55\u540d\u79f0\u3002 -with-client-id \uff08\u5fc5\u586b\u9879\uff09 \u63d0\u4f9b\u5ba2\u6237\u7aef\u6807\u8bc6\u5bc6\u94a5\u3002 -in-version \uff08\u5fc5\u586b\u9879\uff09 \u5c06\u751f\u6210\u4e3a\u76ee\u5f55\u5185\u5bb9\u7684\u7eaf V5 \u6216\u7eaf V6 \u89c6\u56fe\u7684\u63cf\u8ff0\u3002\u56e0\u6b64\uff0c\u8fd9\u6837\u7684 osm \u63cf\u8ff0\u65e0\u6cd5\u7528\u4e8e\u66f4\u65b0\u3002 -with-osm","title":"\u5173\u4e8e\u521b\u5efa.CATfct\u6587\u4ef6"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E5%88%9B%E5%BB%BA.CATfct%E6%96%87%E4%BB%B6/#catfct","text":"\u53ef\u4ee5\u5c1d\u8bd5\u7279\u5f81\u5b9e\u73b0visu\u989d\u5916\u6dfb\u52a0\u65b0\u7684\u663e\u793a\u800c\u4e0d\u5f71\u54cd\u5176\u6784\u9020,\u4ec5\u5728\u8f93\u5165\u8f93\u51fa\u65f6\u8c03\u7528\u66f4\u65b0\u673a\u5236 \u53c2\u8003\u7f51\u5740\uff1ahttps://blog.csdn.net/c_I_always/article/details/88715213 \u5728CAA\u5f97Runtime Prompt\u7a97\u53e3\u8f93\u5165\u547d\u4ee4\u884cCATOptionsMgt.exe -nologin -Admin \u5728\u8bb8\u53ef\u8bc1\u53d1\u653e\u4e2d\u52fe\u9009\u8bb8\u53ef \u521b\u5efa\uff1a CATfctEditorAssistant -create-new-catalog -catalog-name XXX.CATfct -with-client-id XX -into-directory $PWD/OS_Directory/resources/graphic \u5bfc\u51faosm: CATfctEditorAssistant -describe-as-osm -catalog-name XXX.CATfct -with-client-id XX -as XXX.osm -into-directory $PWD \u5237\u65b0\uff1a CATfctEditorAssistant -update-catalog -catalog-name XXX.CATfct -with-client-id XX -with-osm $PWD/XXX.osm -into-directory $PWD xxx.CATfct(\u540d\u79f0) XX(id\u8981\u4e00\u81f4) $PWD(\u76ee\u5f55) \u5982\u679c\u901a\u8fc7\u547d\u4ee4\u884c\u65e0\u6cd5\u521b\u5efa.CATfct\u6587\u4ef6\uff0c\u53ef\u901a\u8fc7V5\u7a0b\u5e8f\u521b\u5efa\uff08\u8be6\u89c1\uff1a\u300a\u521b\u5efaCATfct.cpp\u300b\uff09 \u5982\u679c\u7279\u5f81\u5b9a\u4e49\u6b63\u786e\u4f46\u662f\u65e0\u6cd5\u66f4\u65b0\u5bf9\u5e94\u7684fct\uff0c\u5219\u68c0\u67e5\u5f53\u524d\u9879\u76ee\u91cc\u662f\u5426\u5b58\u5728\u540d\u79f0\u76f8\u540c\u7684\u81ea\u5b9a\u4e49\u7279\u5f81\uff0c\u5982\u679c\u5b58\u5728\uff0c\u66f4\u6362\u540d\u79f0\u6216\u8005\u5220\u6389\u65e7\u7684fct","title":"\u5173\u4e8e\u521b\u5efa.CATfct\u6587\u4ef6"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E5%88%9B%E5%BB%BA.CATfct%E6%96%87%E4%BB%B6/#_1","text":"E:\\03_BIM_WORKS\\DEVELOPMENT\\04-DS\\DesignProjectV6R2019x>CATfctEditorAssistant -help CATfctEditorAssistant -create-new-catalog -catalog-name < name_of_catalog > -with-client-id < id > [-author < name > ] [-comment < comment > ] [-using-template < template > ] [-into-directory < output_path > ] CATfctEditorAssistant -update-catalog -catalog-name < name_of_catalog > -with-client-id < id > [-with-osm < path_of_osm > ] [-author < name > ] [-comment < comment > ] [-into-directory < output_path > ] CATfctEditorAssistant -describe-as-osm -catalog-name < name_of_catalog > -with-client-id < id > [-in-version < level > ] -as < name_of_osm > [-into-directory < output_path > ] CATfctEditorAssistant -simulate-catalog-update -catalog-name < name_of_catalog > -with-client-id < id > -in-version < level > -with-osm < path_of_osm > [-into-directory < output_path > ] CATfctEditorAssistant -help \u5176\u4e2d \u4ee3\u8868\u5e26\u6709\u6269\u5c55\u540d\u7684\u6587\u4ef6\u540d\uff0c\u800c\u4e0d\u662f\u8def\u5f84,\u800c \u4ee3\u8868\u6587\u4ef6\u8def\u5f84\u3002","title":"\u7528\u6cd5"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E5%88%9B%E5%BB%BA.CATfct%E6%96%87%E4%BB%B6/#_2","text":"-create-new-catalog\uff1a\u521b\u5efa\u65b0\u7684\u7a7a\u76ee\u5f55\u3002 -catalog-name \uff08\u5fc5\u586b\u9879\uff09 \u6307\u5b9a\u8981\u521b\u5efa\u7684\u65b0\u76ee\u5f55\u7684\u540d\u79f0\u3002 -with-client-id \uff08\u5fc5\u586b\u9879\uff09 \u8bbe\u7f6e\u5ba2\u6237\u7aef\u6807\u8bc6\u5bc6\u94a5\u3002 -author \u5728\u5386\u53f2\u8bb0\u5f55\u4e2d\u6307\u5b9a\u4f5c\u8005\u7684\u59d3\u540d\u3002 -comment \u5c06\u8bc4\u8bba\u6dfb\u52a0\u5230\u5386\u53f2\u8bb0\u5f55\u3002 -using-template \u4f7f\u7528\u53e6\u4e00\u4e2a\u6a21\u677f\uff08\u9ed8\u8ba4\u4e3a\u6807\u51c6\u6a21\u677f\uff09\u3002 -into-directory \u6307\u793a\u8f93\u51fa\u76ee\u5f55\uff0c\u5176\u4e2d\u5c06\u5b58\u50a8\u8f93\u51fa\u6587\u4ef6\u3002 -update-catalog\uff1a\u4f7f\u7528 osm \u6587\u4ef6\u66f4\u65b0\u73b0\u6709\u76ee\u5f55\u3002 -catalog-name \uff08\u5fc5\u586b\u9879\uff09 \u6307\u5b9a\u8981\u66f4\u65b0\u7684\u76ee\u5f55\u540d\u79f0\u3002 -with-client-id \uff08\u5fc5\u586b\u9879\uff09 \u63d0\u4f9b\u5ba2\u6237\u7aef\u6807\u8bc6\u5bc6\u94a5\u3002 -with-osm \u6307\u5b9a\u7528\u4e8e\u66f4\u65b0\u7684 osm \u6587\u4ef6\u8def\u5f84\u3002 -comment \u5c06\u8bc4\u8bba\u6dfb\u52a0\u5230\u5386\u53f2\u8bb0\u5f55\u3002 -into-directory \u6307\u793a\u8f93\u51fa\u76ee\u5f55\uff0c\u5176\u4e2d\u5c06\u5b58\u50a8\u8f93\u51fa\u76ee\u5f55\u3002 -describe-as-osm\uff1a\u901a\u8fc7\u751f\u6210\u5176\u5173\u8054\u7684 osm \u6587\u4ef6\u63cf\u8ff0\u76ee\u5f55\u3002 -catalog-name \uff08\u5fc5\u586b\u9879\uff09 \u6307\u5b9a\u8981\u63cf\u8ff0\u7684\u76ee\u5f55\u540d\u79f0\u3002 -with-client-id \uff08\u5fc5\u586b\u9879\uff09 \u63d0\u4f9b\u5ba2\u6237\u7aef\u6807\u8bc6\u5bc6\u94a5\u3002 -in-version \u5c06\u751f\u6210\u4e3a\u76ee\u5f55\u5185\u5bb9\u7eaf V5 \u6216\u7eaf V6 \u89c6\u56fe\u7684\u63cf\u8ff0\u3002\u56e0\u6b64\uff0c\u8fd9\u6837\u7684 osm \u63cf\u8ff0\u65e0\u6cd5\u7528\u4e8e\u66f4\u65b0\u3002 -as \uff08\u5fc5\u586b\u9879\uff09 \u6307\u793a\u8981\u751f\u6210\u7684\u5305\u542b\u76ee\u5f55\u63cf\u8ff0\u7684 osm \u6587\u4ef6\u3002 -into-directory \u6307\u793a\u8f93\u51fa\u76ee\u5f55\uff0c\u5176\u4e2d\u5c06\u5b58\u50a8\u8f93\u51fa osm \u6587\u4ef6\u3002 -simulate-catalog-update\uff1a\u6a21\u62df\u76ee\u5f55\u66f4\u65b0\u3002 -catalog-name \uff08\u5fc5\u586b\u9879\uff09 \u6307\u5b9a\u8981\u6a21\u62df\u7684\u76ee\u5f55\u540d\u79f0\u3002 -with-client-id \uff08\u5fc5\u586b\u9879\uff09 \u63d0\u4f9b\u5ba2\u6237\u7aef\u6807\u8bc6\u5bc6\u94a5\u3002 -in-version \uff08\u5fc5\u586b\u9879\uff09 \u5c06\u751f\u6210\u4e3a\u76ee\u5f55\u5185\u5bb9\u7684\u7eaf V5 \u6216\u7eaf V6 \u89c6\u56fe\u7684\u63cf\u8ff0\u3002\u56e0\u6b64\uff0c\u8fd9\u6837\u7684 osm \u63cf\u8ff0\u65e0\u6cd5\u7528\u4e8e\u66f4\u65b0\u3002 -with-osm","title":"\u8be6\u7ec6\u4fe1\u606f"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E5%88%9B%E5%BB%BA%E7%89%B9%E5%BE%81%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5/","text":"1\u3001\u68c0\u67e5\u7279\u5f81\u8f93\u5165\u662f\u5426\u6b63\u786e 2\u3001\u68c0\u67e5\u624b\u52a8\u540c\u6837\u64cd\u4f5c\u662f\u5426\u80fd\u6b63\u786e\u4f7f\u7528\u8be5\u7279\u5f81 3\u3001\u5982\u624b\u52a8\u6ca1\u95ee\u9898\u5219\u68c0\u67e5\u7279\u5f81\u8f93\u5165\u662f\u5426\u8db3\u591f\uff0c\u6bd4\u5982\u8bbe\u7f6e\u4e86\u5bf9\u5e94\u7684\u6a21\u5f0f\u5374\u6ca1\u6709\u7ed9\u5bf9\u5e94\u7684\u53c2\u6570\uff08\u5047\u5982\u8bbe\u7f6e\u957f\u5ea6\u6a21\u5f0f\u5219\u5e94\u8be5\u7ed9\u957f\u5ea6\u53c2\u6570\uff09","title":"\u5173\u4e8e\u521b\u5efa\u7279\u5f81\u66f4\u65b0\u5931\u8d25"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E6%8E%A5%E5%8F%A3%E6%8C%87CATIPLMNavOccurrence/","text":"\u5173\u4e8e\u63a5\u53e3\u6307CATIPLMNavOccurrence \u8be5\u6307\u9488\u591a\u6b21\u91ca\u653e\u53ef\u80fd\u4f1a\u9020\u6210\u7a0b\u5e8f\u5d29\u6e83,\u6240\u4ee5\u7684CAA\u7a0b\u5e8f\u90fd\u5efa\u8bae\u591a\u4f7f\u7528\u667a\u80fd\u6307\u9488","title":"\u5173\u4e8e\u63a5\u53e3\u6307CATIPLMNavOccurrence"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E6%8E%A5%E5%8F%A3%E6%8C%87CATIPLMNavOccurrence/#catiplmnavoccurrence","text":"\u8be5\u6307\u9488\u591a\u6b21\u91ca\u653e\u53ef\u80fd\u4f1a\u9020\u6210\u7a0b\u5e8f\u5d29\u6e83,\u6240\u4ee5\u7684CAA\u7a0b\u5e8f\u90fd\u5efa\u8bae\u591a\u4f7f\u7528\u667a\u80fd\u6307\u9488","title":"\u5173\u4e8e\u63a5\u53e3\u6307CATIPLMNavOccurrence"},{"location":"DS-CODE/CAA/%E5%87%A0%E4%BD%95%EF%BC%8C%E6%8B%93%E6%89%91%EF%BC%8C%E7%89%B9%E5%BE%81%E7%9A%84%E7%90%86%E8%A7%A3/","text":"aa \u51e0\u4f55\u521b\u5efa\u8fc7\u7a0b\u4f1a\u5f97\u5230\u5bf9\u5e94\u7684\u51e0\u4f55\u4fe1\u606f\uff0c\u6bd4\u5982\u70b9\uff0c\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u5750\u6807 \u53ef\u4ee5\u901a\u8fc7\u62d3\u6251\u6784\u9020\u51e0\u4f55\u4fe1\u606f\u5bf9\u5e94\u7684Body\u4ece\u800c\u7528\u4e8e\u62d3\u6251\u64cd\u4f5c\u8ba1\u7b97 \u6bd4\u5982\u7528CATGeoFactory\u521b\u5efa\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230\u70b9\u7684\u5750\u6807\uff0c\u7136\u540e\u901a\u8fc7CATCGMCreateTopPointXYZ\u6784\u9020\u51fa\u70b9\u7684Body \u62d3\u6251\u8ba1\u7b97\u7684\u7ed3\u679c\u662f\u65ad\u53c2\u7684\uff0c\u6ca1\u6709\u521b\u5efa\u8fc7\u7a0b\uff0c\u4f46\u662f\u51e0\u4f55\uff0c\u62d3\u6251\u8fd0\u7b97\u901f\u5ea6\u5feb \u7279\u5f81\u8ba1\u7b97\u5e26\u8fc7\u7a0b\uff0c\u65b9\u4fbf\u7b80\u5355\uff0c\u901f\u5ea6\u8f83\u6162 CATGeoFactory * pGeoFactory = spCurveBody -> GetContainer (); CATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration (); CATTopData TopData ( pConfig ); CATLISTP ( CATCell ) pCellListp ; spCurveBody -> GetAllCells ( pCellListp , 0 ); CATBody * pBodyV = pGeoFactory -> CreateBody (); CATDomain * pShell = pBodyV -> CreateDomain ( 0 ); pShell -> AddCell ( pCellListp [ 1 ]); pBodyV -> AddDomain ( pShell ); CATBody * piPointOnWire = :: CATCGMCreateTopPointOnWire ( pGeoFactory , & TopData , spCurveBody , 0.5 , pBodyV , CatTopPointLRatio ); if ( piPointOnWire != NULL ) { CATBody * pNormalLineBody = :: CATCGMCreateTopLineNormalToShell ( pGeoFactory , & TopData , piPointOnWire , spFaceBody , 10000 ); CATIMmiMechanicalFeature * piNewFeature = NULL ; if ( SUCCEEDED ( spiDatumFactory -> InstanciateDatum ( pNormalLineBody , piNewFeature ))) { CAASetInsert ( piNewFeature , _spResultSet ); } }","title":"\u51e0\u4f55\uff0c\u62d3\u6251\uff0c\u7279\u5f81\u7684\u7406\u89e3"},{"location":"DS-CODE/CAA/%E5%87%A0%E4%BD%95%EF%BC%8C%E6%8B%93%E6%89%91%EF%BC%8C%E7%89%B9%E5%BE%81%E7%9A%84%E7%90%86%E8%A7%A3/#aa","text":"\u51e0\u4f55\u521b\u5efa\u8fc7\u7a0b\u4f1a\u5f97\u5230\u5bf9\u5e94\u7684\u51e0\u4f55\u4fe1\u606f\uff0c\u6bd4\u5982\u70b9\uff0c\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u5750\u6807 \u53ef\u4ee5\u901a\u8fc7\u62d3\u6251\u6784\u9020\u51e0\u4f55\u4fe1\u606f\u5bf9\u5e94\u7684Body\u4ece\u800c\u7528\u4e8e\u62d3\u6251\u64cd\u4f5c\u8ba1\u7b97 \u6bd4\u5982\u7528CATGeoFactory\u521b\u5efa\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230\u70b9\u7684\u5750\u6807\uff0c\u7136\u540e\u901a\u8fc7CATCGMCreateTopPointXYZ\u6784\u9020\u51fa\u70b9\u7684Body \u62d3\u6251\u8ba1\u7b97\u7684\u7ed3\u679c\u662f\u65ad\u53c2\u7684\uff0c\u6ca1\u6709\u521b\u5efa\u8fc7\u7a0b\uff0c\u4f46\u662f\u51e0\u4f55\uff0c\u62d3\u6251\u8fd0\u7b97\u901f\u5ea6\u5feb \u7279\u5f81\u8ba1\u7b97\u5e26\u8fc7\u7a0b\uff0c\u65b9\u4fbf\u7b80\u5355\uff0c\u901f\u5ea6\u8f83\u6162 CATGeoFactory * pGeoFactory = spCurveBody -> GetContainer (); CATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration (); CATTopData TopData ( pConfig ); CATLISTP ( CATCell ) pCellListp ; spCurveBody -> GetAllCells ( pCellListp , 0 ); CATBody * pBodyV = pGeoFactory -> CreateBody (); CATDomain * pShell = pBodyV -> CreateDomain ( 0 ); pShell -> AddCell ( pCellListp [ 1 ]); pBodyV -> AddDomain ( pShell ); CATBody * piPointOnWire = :: CATCGMCreateTopPointOnWire ( pGeoFactory , & TopData , spCurveBody , 0.5 , pBodyV , CatTopPointLRatio ); if ( piPointOnWire != NULL ) { CATBody * pNormalLineBody = :: CATCGMCreateTopLineNormalToShell ( pGeoFactory , & TopData , piPointOnWire , spFaceBody , 10000 ); CATIMmiMechanicalFeature * piNewFeature = NULL ; if ( SUCCEEDED ( spiDatumFactory -> InstanciateDatum ( pNormalLineBody , piNewFeature ))) { CAASetInsert ( piNewFeature , _spResultSet ); } }","title":"aa"},{"location":"DS-CODE/CAA/%E5%88%87%E6%8D%A2%E5%88%B0%E8%8D%89%E5%9B%BE%E7%95%8C%E9%9D%A2%E4%B8%94%E5%91%BD%E4%BB%A4%E5%9D%87%E5%8F%AF%E7%94%A8/","text":"CATIEdit_var spiEdit = spiSketch ; if ( !! spiEdit ) { cout << \"370\" << endl ; CATPathElement * pPathToReturn = NULL ; CATIMmiMechanicalFeature_var pSelectedElt = spiSketch ; if ( NULL_var != pSelectedElt ) { CATIBuildPath * piBuildPath = NULL ; if ( SUCCEEDED ( pSelectedElt -> QueryInterface ( IID_CATIBuildPath , ( void ** ) & piBuildPath ))) { CATPathElement Context = GetEditor () -> GetUIActiveObject (); piBuildPath -> ExtractPathElement ( & Context , & pPathToReturn ); piBuildPath -> Release (); piBuildPath = NULL ; } } spiEdit -> Activate ( pPathToReturn ); } else cout << \"373\" << endl ;","title":"\u5207\u6362\u5230\u8349\u56fe\u754c\u9762\u4e14\u547d\u4ee4\u5747\u53ef\u7528"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BAAEC%E8%8A%82%E7%82%B9%EF%BC%88%E9%81%93%E8%B7%AF%EF%BC%89/","text":"\u6dfb\u52a0\u73af\u5883\u53d8\u91cf\uff1aCEG_CAA_NewAecObject=1 \u7c7b\u578b\u53ef\u4ee5\u7528\u8bed\u8a00\u6d4f\u89c8\u5668\u67e5\u627e\u6216\u5176\u5b83\u65b9\u6cd5... ```cpp CATIPLMNavReference_var spReference = NULL_var; CATCivilPLMFactory::CreateAECObject(\"AecSite\", FALSE, FALSE, CATCkeScale::CATLargeScale, NULL_var, spReference); CATIPLMNavReference_var spReference = NULL_var; CATCivilPLMFactory::CreateAECObject(\"AecBeam\", FALSE, FALSE, CATCkeScale::CATLargeScale, NULL_var, spReference); CATIPLMComponent * pIPLMComponent = NULL;//\u83b7\u53d6\u5230\u5168\u5c40\u7684\u4f1a\u8bdd spReference->QueryInterface(IID_CATIPLMComponent, (void**)&pIPLMComponent); CATFrmEditor * opNewEditor = NULL; CATIPLMOpenServices* pPLMOpenServices = NULL; CATPLMOpenServicesFactory::GetPLMOpenServices(pPLMOpenServices); if (pPLMOpenServices == NULL) { cout << \"pPLMOpenServices == NULL\" << endl; return; } pPLMOpenServices->PLMOpenInNewWindow(pIPLMComponent, opNewEditor); //\u5c1d\u8bd5\u6240\u6709\u7684Civil\u7c7b\u578b CATUnicodeString sData = \"OtherBridgeArchitecturalElement,Abutment,AnchorBlock,Arch,Bridge,Deck,HangerBelt,OtherBridgeSpatialStructureElement,Pier,Span,StayBelt,SuspensionSystem,Tower,ArchSegment,Crosshead,DeckSegment,HangerCable,OtherBridgeStructureElement,PierSegemtn,StayCable,SuspensionCable,TowerSegment,Way,Chimney,Covering,CurtainWall,Door,OtherAecArchitecturalElement,Railing,Ramp,RampFlight,Roof,ShadingDevice,Stair,StairFlight,Window,ElementAssembly,SpatialZone,Anchor,Coupler,DiscreteAccessory,Reinforcingbar,ReinforcingMesh,Tendon,TendonAnchor,FurnishingElement,Foundation,OtherAecSpatialStructureElement,Site,Terrain,Beam,Bearing,Cable,CaissonFoundation,Column,Footing,Member,OpeningElement,OtherAecStructuralElement,Pile,Plate,Slab,Stiffener,Wall,TransportElement,Building,Space,Storey,Dam,OtherDamSpatialStructureElement,Culvert,Drainage,OtherDrainageSpatialStructureElement,Trench,3DPart,OtherRailwayElement,TrackPanel,TrackRail,TrackSleeper,TrackTurnout,OtherRailwaySpatialStructureElement,Railway,RailwayStretch,RailwaySwitch,OtherRoadElement,OtherRoadSpatialStructureElement,Road,RoadInterchange,RoadIntersection,RoadRamp,RoadStretch,ExcavationWorks,FillingWorks,OtherSubgradeElement,RetainingElement,Stockpile,SubgradeLayer,OtherSubgradeSpatialStructureElement,RetainingStructure,Subgrade,OtherTunnelElement,RingSegment,Bay,FullTunnelSpace,OtherTunnelSpatialStructureElement,RingSpace,Tunnel,TunnelInterchange,TunnelStretch\"; CATListOfCATUnicodeString sDataList = CAADecomposeTheString(\",\", sData); for (int i = 1;i <= sDataList.Size();i++) { CATUnicodeString sText = \"Aec\" + sDataList[i]; CATIPLMNavReference_var spReference = NULL_var; CATCivilPLMFactory::CreateAECObject(sText, FALSE, FALSE, CATCkeScale::CATLargeScale, NULL_var, spReference); if (spReference == NULL_var) { cout << \"Failed : \" << sDataList[i] << endl; } else cout << \"Success : \" << sDataList[i] << endl; } ``` //\u7ed3\u679c\uff0c\u6709\u4e00\u4e9b\u8fd9\u6837\u521b\u5efa\u4e0d\u51fa\u6765 Failed : OtherBridgeArchitecturalElement Failed : Abutment Failed : AnchorBlock Failed : Arch Failed : Bridge Failed : Deck Failed : HangerBelt Failed : OtherBridgeSpatialStructureElement Failed : Pier Failed : Span Failed : StayBelt Failed : SuspensionSystem Failed : Tower Failed : ArchSegment Failed : Crosshead Failed : DeckSegment Failed : HangerCable Failed : OtherBridgeStructureElement Failed : PierSegemtn Failed : StayCable Failed : SuspensionCable Failed : TowerSegment Failed : Way Success : Chimney Success : Covering Success : CurtainWall Success : Door Failed : OtherAecArchitecturalElement Success : Railing Success : Ramp Success : RampFlight Success : Roof Success : ShadingDevice Success : Stair Success : StairFlight Success : Window Success : ElementAssembly Success : SpatialZone Failed : Anchor Failed : Coupler Success : DiscreteAccessory Success : Reinforcingbar Success : ReinforcingMesh Success : Tendon Success : TendonAnchor Success : FurnishingElement Success : Foundation Failed : OtherAecSpatialStructureElement Success : Site Success : Terrain Success : Beam Success : Bearing Success : Cable Success : CaissonFoundation Success : Column Success : Footing Success : Member Success : OpeningElement Failed : OtherAecStructuralElement Success : Pile Success : Plate Success : Slab Success : Stiffener Success : Wall Success : TransportElement Failed : Building Failed : Space Failed : Storey Failed : Dam Failed : OtherDamSpatialStructureElement Failed : Culvert Failed : Drainage Failed : OtherDrainageSpatialStructureElement Failed : Trench Failed : 3DPart Failed : OtherRailwayElement Failed : TrackPanel Failed : TrackRail Failed : TrackSleeper Failed : TrackTurnout Failed : OtherRailwaySpatialStructureElement Failed : Railway Failed : RailwayStretch Failed : RailwaySwitch Failed : OtherRoadElement Failed : OtherRoadSpatialStructureElement Failed : Road Failed : RoadInterchange Failed : RoadIntersection Failed : RoadRamp Failed : RoadStretch Failed : ExcavationWorks Failed : FillingWorks Failed : OtherSubgradeElement Failed : RetainingElement Failed : Stockpile Failed : SubgradeLayer Failed : OtherSubgradeSpatialStructureElement Failed : RetainingStructure Failed : Subgrade Failed : OtherTunnelElement Failed : RingSegment Failed : Bay Failed : FullTunnelSpace Failed : OtherTunnelSpatialStructureElement Failed : RingSpace Failed : Tunnel Failed : TunnelInterchange }","title":"\u521b\u5efaAEC\u8282\u70b9\uff08\u9053\u8def\uff09"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BAAction/","text":"\u521b\u5efaAction { CATITypeDictionary_var spiDico = CATGlobalFunctions :: GetTypeDictionary (); CATICkeRelationFactory_var spiCkeRelationFactory = _spRelationSet -> GetFactory (); if ( spiCkeRelationFactory != NULL_var && spiDico != NULL_var && spiCkeParmFactory != NULL_var ) { CATIType_var spiType = NULL_var ; spiDico -> RetrieveType ( \"Plane\" , spiType ); if ( spiType == NULL_var ) { cout << \"NULL\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\" << endl ; return E_FAIL ; } CATICkeFunctionFactory_var ABCD = CATCkeGlobalFunctions :: GetFunctionFactory (); // CATIParmDictionary_var spParmDictionary = CATCkeGlobalFunctions::GetParmDictionary(); // CATICkeType_var spiLengthType = spParmDictionary->GetLengthType(); // if (ABCD != NULL_var) // { // cout << \"NUll 66666\" << endl; // // if ( ABCD == NULL_var ) { cout << \"NUll 55555555\" << endl ; return E_FAIL ; } CATICkeSignature_var spiSign = ABCD -> CreateEvent ( \"Fun\" ); //\u4e3aAction\u6dfb\u52a0\u5916\u90e8\u53c2\u6570\u8f93\u5165\uff0c\u6bd4\u5982\u9009\u62e9\u70b9 if ( spiSign == NULL_var ) { cout << \"NULL=========================\" << endl ; return E_FAIL ; } spiSign -> AddArgument ( ABCD -> CreateArg ( \"Destination\" , spiType )); spiSign -> AddArgument ( ABCD -> CreateArg ( \"Axis\" , spiType )); // CATCkeListOfParm pParmList = new CATListValCATBaseUnknown_var[1];//\u7b2c\u4e94\u4e2a\u53c2\u6570\u7528\u4e8e\u4e3aAction\u6dfb\u52a0\u8fd0\u7b97\u65f6\u6240\u9700\u7684\u5df2\u5b58\u5728\u7684\u53c2\u6570 // pParmList->Append(aaaa); CATICkeRelation_var spiCkeAction = spiCkeRelationFactory -> CreateAction ( \"Action\" , \"\" , \"\" , spiSign , NULL , \"Let a(point)\" ); if ( spiCkeAction != NULL_var ) { /* spiCkeAction->Add(aaaa, CATICkeArg::In);*/ //\u5c06\u5df2\u53c2\u6570\u7528\u4e8e\u8f93\u5165\u6216\u8005\u8f93\u51fa\u52a0\u5165\u5230Action _spRelationSet -> AppendElement ( spiCkeAction ); rc = S_OK ; } } }","title":"\u521b\u5efaAction"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BAAction/#action","text":"{ CATITypeDictionary_var spiDico = CATGlobalFunctions :: GetTypeDictionary (); CATICkeRelationFactory_var spiCkeRelationFactory = _spRelationSet -> GetFactory (); if ( spiCkeRelationFactory != NULL_var && spiDico != NULL_var && spiCkeParmFactory != NULL_var ) { CATIType_var spiType = NULL_var ; spiDico -> RetrieveType ( \"Plane\" , spiType ); if ( spiType == NULL_var ) { cout << \"NULL\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\" << endl ; return E_FAIL ; } CATICkeFunctionFactory_var ABCD = CATCkeGlobalFunctions :: GetFunctionFactory (); // CATIParmDictionary_var spParmDictionary = CATCkeGlobalFunctions::GetParmDictionary(); // CATICkeType_var spiLengthType = spParmDictionary->GetLengthType(); // if (ABCD != NULL_var) // { // cout << \"NUll 66666\" << endl; // // if ( ABCD == NULL_var ) { cout << \"NUll 55555555\" << endl ; return E_FAIL ; } CATICkeSignature_var spiSign = ABCD -> CreateEvent ( \"Fun\" ); //\u4e3aAction\u6dfb\u52a0\u5916\u90e8\u53c2\u6570\u8f93\u5165\uff0c\u6bd4\u5982\u9009\u62e9\u70b9 if ( spiSign == NULL_var ) { cout << \"NULL=========================\" << endl ; return E_FAIL ; } spiSign -> AddArgument ( ABCD -> CreateArg ( \"Destination\" , spiType )); spiSign -> AddArgument ( ABCD -> CreateArg ( \"Axis\" , spiType )); // CATCkeListOfParm pParmList = new CATListValCATBaseUnknown_var[1];//\u7b2c\u4e94\u4e2a\u53c2\u6570\u7528\u4e8e\u4e3aAction\u6dfb\u52a0\u8fd0\u7b97\u65f6\u6240\u9700\u7684\u5df2\u5b58\u5728\u7684\u53c2\u6570 // pParmList->Append(aaaa); CATICkeRelation_var spiCkeAction = spiCkeRelationFactory -> CreateAction ( \"Action\" , \"\" , \"\" , spiSign , NULL , \"Let a(point)\" ); if ( spiCkeAction != NULL_var ) { /* spiCkeAction->Add(aaaa, CATICkeArg::In);*/ //\u5c06\u5df2\u53c2\u6570\u7528\u4e8e\u8f93\u5165\u6216\u8005\u8f93\u51fa\u52a0\u5165\u5230Action _spRelationSet -> AppendElement ( spiCkeAction ); rc = S_OK ; } } }","title":"\u521b\u5efaAction"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BA%E4%BD%93%E7%A7%AF%E9%9D%A2%E7%A7%AF%E7%AD%89%E5%8D%95%E4%BD%8D%E5%8F%82%E6%95%B0/","text":"double dValue = 0 ; sValue . ConvertToNum ( & dValue ); spiCkeParm = spiCkeFactory -> CreateDimension ( CATCkeGlobalFunctions :: GetParmDictionary () -> FindMagnitude ( \"VOLUME\" ), sName , dValue );","title":"\u521b\u5efa\u4f53\u79ef\u9762\u79ef\u7b49\u5355\u4f4d\u53c2\u6570"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BA%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%E9%9B%86%E5%BE%97%E5%88%B0%E5%8F%82%E6%95%B0%E5%B7%A5%E5%8E%82%E4%BB%A5%E5%8F%8A%E5%8F%82%E6%95%B0%E9%9B%86/","text":"\u521b\u5efa\u51e0\u4f55\u56fe\u5f62\u96c6\u5f97\u5230\u53c2\u6570\u5de5\u5382\u4ee5\u53ca\u53c2\u6570\u96c6 CATIMmiUseSetFactory_var spiMmiUseSetFactory = piMmiPrtContainer ; CATIMmiMechanicalFeature_var spiOpSet = NULL_var ; if ( spiMmiUseSetFactory != NULL_var ) { rc = spiMmiUseSetFactory -> CreateGeometricalSet ( \"\" , spiMmiPart , spiOpSet ); if ( FAILED ( rc ) || spiOpSet == NULL_var ) { cout << \"Create Set FAILED\" << endl ; return FALSE ; } } else { cout << \"CATIMmiUseSetFactory is NULL\" << endl ; return FALSE ; } CATICkeParmFactory_var spiCkeParamFactory = piMmiPrtContainer ; CATIParmPublisher_var spiPartParm = spiOpSet ; CATIParmPublisher_var spiParameterSet = NULL_var ; CATIParmPublisher_var spiRelationSet = NULL_var ; CATIKweModelServices_var spiKweModelServices = CATCkeGlobalFunctions :: GetModelServices (); spiParameterSet = spiKweModelServices -> GetCurrentSet ( CATIKweModelServices :: Parameter , spiPartParm , 1 ); spiRelationSet = spiKweModelServices -> GetCurrentSet ( CATIKweModelServices :: Relation , spiPartParm , 1 ); }","title":"\u521b\u5efa\u51e0\u4f55\u56fe\u5f62\u96c6\u5f97\u5230\u53c2\u6570\u5de5\u5382\u4ee5\u53ca\u53c2\u6570\u96c6"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BA%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%E9%9B%86%E5%BE%97%E5%88%B0%E5%8F%82%E6%95%B0%E5%B7%A5%E5%8E%82%E4%BB%A5%E5%8F%8A%E5%8F%82%E6%95%B0%E9%9B%86/#_1","text":"CATIMmiUseSetFactory_var spiMmiUseSetFactory = piMmiPrtContainer ; CATIMmiMechanicalFeature_var spiOpSet = NULL_var ; if ( spiMmiUseSetFactory != NULL_var ) { rc = spiMmiUseSetFactory -> CreateGeometricalSet ( \"\" , spiMmiPart , spiOpSet ); if ( FAILED ( rc ) || spiOpSet == NULL_var ) { cout << \"Create Set FAILED\" << endl ; return FALSE ; } } else { cout << \"CATIMmiUseSetFactory is NULL\" << endl ; return FALSE ; } CATICkeParmFactory_var spiCkeParamFactory = piMmiPrtContainer ; CATIParmPublisher_var spiPartParm = spiOpSet ; CATIParmPublisher_var spiParameterSet = NULL_var ; CATIParmPublisher_var spiRelationSet = NULL_var ; CATIKweModelServices_var spiKweModelServices = CATCkeGlobalFunctions :: GetModelServices (); spiParameterSet = spiKweModelServices -> GetCurrentSet ( CATIKweModelServices :: Parameter , spiPartParm , 1 ); spiRelationSet = spiKweModelServices -> GetCurrentSet ( CATIKweModelServices :: Relation , spiPartParm , 1 ); }","title":"\u521b\u5efa\u51e0\u4f55\u56fe\u5f62\u96c6\u5f97\u5230\u53c2\u6570\u5de5\u5382\u4ee5\u53ca\u53c2\u6570\u96c6"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BA%E5%B9%95%E5%A2%99%E7%AB%8B%E9%9D%A2/","text":"Facade Divide #include \"DivideLogical.h\" CATObjectModelerClass aa ; DivideLogical bb ; HRESULT DivideLogical::CreateFacadeCurves ( CATDocument * pPartDoc , CATLISTV ( CATBaseUnknown_var LevelList ), CATLISTV ( CATBaseUnknown_var ) ShapeList ) { HRESULT hr = E_FAIL ; //\u58f0\u660e\u5168\u5c40\u53d8\u91cf CATISpecObject_var spGEO1 = NULL_var ; CATISpecObject_var spGEO2 = NULL_var ; CATISpecObject_var spGEO3 = NULL_var ; /*CATISpecObject_var spGEO4 = NULL_var;*/ CATIPrtPart_var spiPart = NULL_var ; CATIGSMFactory_var spGSMFactory = NULL_var ; CATICkeParmFactory_var spiParmFactory = NULL_var ; CATIMechanicalRootFactory_var pMechanicalRootFactory = NULL_var ; CATInit_var spInitOnDoc ( pPartDoc ); if ( NULL_var == spInitOnDoc ) return E_FAIL ; CATIPrtContainer * piPrtCont = ( CATIPrtContainer * ) spInitOnDoc -> GetRootContainer ( \"CATIPrtContainer\" ); if ( piPrtCont == NULL ) return E_FAIL ; spiPart = piPrtCont -> GetPart (); hr = piPrtCont -> QueryInterface ( IID_CATIGSMFactory , ( void ** ) & spGSMFactory ); if ( FAILED ( hr ) || spGSMFactory == NULL ) { cout << \"GSM \u5de5\u5382\u5931\u8d25\" << endl ; } //spiParmFactory = piPrtCont; hr = piPrtCont -> QueryInterface ( IID_CATICkeParmFactory , ( void ** ) & spiParmFactory ); if ( FAILED ( hr ) || spiParmFactory == NULL ) { cout << \"Parameters \u5de5\u5382\u5931\u8d25\" << endl ; } //\u5de5\u5382\u83b7\u5f97 //CATIMechanicalRootFactory_var pMechanicalRootFactory(piPrtCont); hr = piPrtCont -> QueryInterface ( IID_CATIMechanicalRootFactory , ( void ** ) & pMechanicalRootFactory ); if ( FAILED ( hr ) || pMechanicalRootFactory == NULL ) { cout << \"QI IID_CATIMechanicalRootFactory Failed !\" << endl ; } CATIPartRequest * piPartRequest = NULL ; if ( spiPart == NULL_var ) { cout << \"Get Part Failed !\" << endl ; return E_FAIL ; } hr = spiPart -> QueryInterface ( IID_CATIPartRequest , ( void ** ) & piPartRequest ); if ( FAILED ( hr ) || piPartRequest == NULL ) { cout << \"QI CATIPartRequest Failed !\" << endl ; return hr ; } //\u521b\u5efa\u4e3b\u51e0\u4f55\u56fe\u5f62\u96c6 pMechanicalRootFactory -> CreateGeometricalSet ( \"INTERSECTION_CRVS\" , spiPart , spGEO1 ); pMechanicalRootFactory -> CreateGeometricalSet ( \"INTERSECTION_CRVS_PTS\" , spiPart , spGEO2 ); pMechanicalRootFactory -> CreateGeometricalSet ( \"INTERSECTION_CRVS_LNS\" , spiPart , spGEO3 ); //pMechanicalRootFactory->CreateGeometricalSet(\"UDF\", spiPart, spGEO4); piPrtCont -> Release (); piPrtCont = NULL ; // \u521b\u5efa\u7684\u76f8\u4ea4\u7ebf\u5217\u8868 CATLISTV ( CATBaseUnknown_var ) InteCrvList ; // \u521b\u5efa\u66f2\u9762\u4e0e\u697c\u5c42\u5e73\u9762\u76f8\u4ea4 CATBaseUnknown_var aaa = NULL_var ; for ( int j = 1 ; j <= LevelList . Size (); j ++ ) { CATBaseUnknown_var spLVLPln = LevelList [ j ]; CATBaseUnknown_var spSurfRef = ShapeList [ 5 ]; CATIGSMIntersect_var spIntersec = spGSMFactory -> CreateIntersect ( spLVLPln , spSurfRef ); aa . ObjectUpdate ( spIntersec ); aa . SetInsert ( spIntersec , spGEO1 ); InteCrvList . Append ( spIntersec ); aaa = spIntersec ; CATIAlias_var spiAlias = aaa ; CATUnicodeString index_i ; index_i . BuildFromNum ( j ); aa . SetObjAlias ( aaa , \"INT-CRVS-\" + index_i ); } for ( int k = 1 ; k <= InteCrvList . Size (); k ++ ) { CATUnicodeString index_i ; index_i . BuildFromNum ( k ); CATISpecObject_var spiSetChild1 = NULL_var ; hr = pMechanicalRootFactory -> CreateGeometricalSet ( \"PTS-\" + index_i , spGEO2 , spiSetChild1 , 0 ); if ( FAILED ( hr ) || spiSetChild1 == NULL_var ) { cout << \"Create PTS Set FAILED\" << endl ; return hr ; } CATISpecObject_var spiSetChild2 = NULL_var ; hr = pMechanicalRootFactory -> CreateGeometricalSet ( \"LN-\" + index_i , spGEO3 , spiSetChild2 , 0 ); if ( FAILED ( hr ) || spiSetChild2 == NULL_var ) { cout << \"Create PTS Set FAILED\" << endl ; return hr ; } /*CATISpecObject_var spUDFSet = NULL_var; hr = pMechanicalRootFactory->CreateGeometricalSet(\"UDF-\" + index_i, spGEO4, spUDFSet, 0); if (FAILED(hr) || spUDFSet == NULL_var) { cout << \"Create PTS Set FAILED\" << endl; return hr; }*/ // GET LENGTH double lnLen ; aa . GetLength ( InteCrvList [ k ], lnLen ); CATUnicodeString llen ; llen . BuildFromNum ( lnLen ); double glaLength = 1.200 ; int jcount = lnLen / ( glaLength * 1000 ); cout << \"PTS COUNT:\" << jcount << endl ; CATICkeParm_var idistance = spiParmFactory -> CreateLength ( \"Length\" , glaLength ); CATLISTV ( CATBaseUnknown_var ) ptList ; ptList . RemoveAll (); CATBaseUnknown_var StartPoint = NULL_var ; StartPoint = spGSMFactory -> CreateIntersect ( InteCrvList [ k ], ShapeList [ 6 ]); aa . ObjectUpdate ( StartPoint ); aa . SetInsert ( StartPoint , spiSetChild1 ); aa . SetObjAlias ( StartPoint , \"PT-1\" ); //\u7b2c\u4e00\u70b9\u52a0\u5165\u5217\u8868 ptList . Append ( StartPoint ); for ( int j = 1 ; j <= jcount ; j ++ ) { //\u521b\u5efa\u5e95\u5c42\u57fa\u51c6\u70b9 CATIGSMUsePointOnCurve_var spOpt = spGSMFactory -> CreatePoint ( InteCrvList [ k ], StartPoint , idistance , CATGSMOrientation :: CATGSMSameOrientation ); spOpt -> SetLength ( idistance ); spOpt -> SetOnCurveType ( 0 ); spOpt -> SetReferencePoint ( StartPoint ); aa . ObjectUpdate ( spOpt ); aa . SetInsert ( spOpt , spiSetChild1 ); StartPoint = spOpt ; CATBaseUnknown_var obj = spOpt ; CATUnicodeString index ; index . BuildFromNum ( j + 1 ); aa . SetObjAlias ( obj , \"PT-\" + index ); ptList . Append ( spOpt ); } // \u83b7\u5f97\u5e73\u9762 CATBaseUnknown_var spBasePLN1 , spBasePLN2 ; // \u901a\u8fc7\u5e73\u9762\u53bb\u9650\u5b9a\u9ad8\u5ea6 for ( int m = 1 ; m <= ptList . Size (); m ++ ) { double ZVector [ 3 ]; ZVector [ 0 ] = 0. ; ZVector [ 1 ] = 0. ; ZVector [ 2 ] = 1. ; // \u521b\u5efaZ\u65b9\u5411\u53c2\u8003\u7ebf CATICkeParm_var ix = spiParmFactory -> CreateLength ( \"Length\" , 0.0 ); CATICkeParm_var iy = spiParmFactory -> CreateLength ( \"Length\" , 0.0 ); CATICkeParm_var iz = spiParmFactory -> CreateLength ( \"Length\" , 1.0 ); CATIGSMDirection_var zdir = spGSMFactory -> CreateDirection ( ix , iy , iz ); aa . ObjectUpdate ( zdir ); if ( k > 1 ) { spBasePLN1 = LevelList [ k - 1 ]; spBasePLN2 = LevelList [ k ]; CATUnicodeString plnname = aa . GetAlias ( spBasePLN1 ); cout << \"PLN name :\" << plnname << endl ; CATICkeParm_var ist = spiParmFactory -> CreateLength ( \"Length\" , 0.0 ); CATICkeParm_var ied = spiParmFactory -> CreateLength ( \"Length\" , 4.0 ); CATIGSMLine_var spLineZDir = spGSMFactory -> CreateLine ( ptList [ m ], zdir , ist , ied , CATGSMOrientation :: CATGSMSameOrientation ); spLineZDir -> SetFirstUptoElem ( spBasePLN1 ); spLineZDir -> SetSecondUptoElem ( spBasePLN2 ); aa . ObjectUpdate ( spLineZDir ); aa . SetInsert ( spLineZDir , spiSetChild2 ); CATUnicodeString INDEX_LN ; INDEX_LN . BuildFromNum ( k ); CATUnicodeString INDEX_LN2 ; INDEX_LN2 . BuildFromNum ( m ); CATBaseUnknown_var spVerLn = spLineZDir ; aa . SetAlias ( spVerLn , \"CW-LN-\" + INDEX_LN + \"_\" + INDEX_LN2 ); } } } return S_OK ; }","title":"Facade Divide"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BA%E5%B9%95%E5%A2%99%E7%AB%8B%E9%9D%A2/#facade-divide","text":"#include \"DivideLogical.h\" CATObjectModelerClass aa ; DivideLogical bb ; HRESULT DivideLogical::CreateFacadeCurves ( CATDocument * pPartDoc , CATLISTV ( CATBaseUnknown_var LevelList ), CATLISTV ( CATBaseUnknown_var ) ShapeList ) { HRESULT hr = E_FAIL ; //\u58f0\u660e\u5168\u5c40\u53d8\u91cf CATISpecObject_var spGEO1 = NULL_var ; CATISpecObject_var spGEO2 = NULL_var ; CATISpecObject_var spGEO3 = NULL_var ; /*CATISpecObject_var spGEO4 = NULL_var;*/ CATIPrtPart_var spiPart = NULL_var ; CATIGSMFactory_var spGSMFactory = NULL_var ; CATICkeParmFactory_var spiParmFactory = NULL_var ; CATIMechanicalRootFactory_var pMechanicalRootFactory = NULL_var ; CATInit_var spInitOnDoc ( pPartDoc ); if ( NULL_var == spInitOnDoc ) return E_FAIL ; CATIPrtContainer * piPrtCont = ( CATIPrtContainer * ) spInitOnDoc -> GetRootContainer ( \"CATIPrtContainer\" ); if ( piPrtCont == NULL ) return E_FAIL ; spiPart = piPrtCont -> GetPart (); hr = piPrtCont -> QueryInterface ( IID_CATIGSMFactory , ( void ** ) & spGSMFactory ); if ( FAILED ( hr ) || spGSMFactory == NULL ) { cout << \"GSM \u5de5\u5382\u5931\u8d25\" << endl ; } //spiParmFactory = piPrtCont; hr = piPrtCont -> QueryInterface ( IID_CATICkeParmFactory , ( void ** ) & spiParmFactory ); if ( FAILED ( hr ) || spiParmFactory == NULL ) { cout << \"Parameters \u5de5\u5382\u5931\u8d25\" << endl ; } //\u5de5\u5382\u83b7\u5f97 //CATIMechanicalRootFactory_var pMechanicalRootFactory(piPrtCont); hr = piPrtCont -> QueryInterface ( IID_CATIMechanicalRootFactory , ( void ** ) & pMechanicalRootFactory ); if ( FAILED ( hr ) || pMechanicalRootFactory == NULL ) { cout << \"QI IID_CATIMechanicalRootFactory Failed !\" << endl ; } CATIPartRequest * piPartRequest = NULL ; if ( spiPart == NULL_var ) { cout << \"Get Part Failed !\" << endl ; return E_FAIL ; } hr = spiPart -> QueryInterface ( IID_CATIPartRequest , ( void ** ) & piPartRequest ); if ( FAILED ( hr ) || piPartRequest == NULL ) { cout << \"QI CATIPartRequest Failed !\" << endl ; return hr ; } //\u521b\u5efa\u4e3b\u51e0\u4f55\u56fe\u5f62\u96c6 pMechanicalRootFactory -> CreateGeometricalSet ( \"INTERSECTION_CRVS\" , spiPart , spGEO1 ); pMechanicalRootFactory -> CreateGeometricalSet ( \"INTERSECTION_CRVS_PTS\" , spiPart , spGEO2 ); pMechanicalRootFactory -> CreateGeometricalSet ( \"INTERSECTION_CRVS_LNS\" , spiPart , spGEO3 ); //pMechanicalRootFactory->CreateGeometricalSet(\"UDF\", spiPart, spGEO4); piPrtCont -> Release (); piPrtCont = NULL ; // \u521b\u5efa\u7684\u76f8\u4ea4\u7ebf\u5217\u8868 CATLISTV ( CATBaseUnknown_var ) InteCrvList ; // \u521b\u5efa\u66f2\u9762\u4e0e\u697c\u5c42\u5e73\u9762\u76f8\u4ea4 CATBaseUnknown_var aaa = NULL_var ; for ( int j = 1 ; j <= LevelList . Size (); j ++ ) { CATBaseUnknown_var spLVLPln = LevelList [ j ]; CATBaseUnknown_var spSurfRef = ShapeList [ 5 ]; CATIGSMIntersect_var spIntersec = spGSMFactory -> CreateIntersect ( spLVLPln , spSurfRef ); aa . ObjectUpdate ( spIntersec ); aa . SetInsert ( spIntersec , spGEO1 ); InteCrvList . Append ( spIntersec ); aaa = spIntersec ; CATIAlias_var spiAlias = aaa ; CATUnicodeString index_i ; index_i . BuildFromNum ( j ); aa . SetObjAlias ( aaa , \"INT-CRVS-\" + index_i ); } for ( int k = 1 ; k <= InteCrvList . Size (); k ++ ) { CATUnicodeString index_i ; index_i . BuildFromNum ( k ); CATISpecObject_var spiSetChild1 = NULL_var ; hr = pMechanicalRootFactory -> CreateGeometricalSet ( \"PTS-\" + index_i , spGEO2 , spiSetChild1 , 0 ); if ( FAILED ( hr ) || spiSetChild1 == NULL_var ) { cout << \"Create PTS Set FAILED\" << endl ; return hr ; } CATISpecObject_var spiSetChild2 = NULL_var ; hr = pMechanicalRootFactory -> CreateGeometricalSet ( \"LN-\" + index_i , spGEO3 , spiSetChild2 , 0 ); if ( FAILED ( hr ) || spiSetChild2 == NULL_var ) { cout << \"Create PTS Set FAILED\" << endl ; return hr ; } /*CATISpecObject_var spUDFSet = NULL_var; hr = pMechanicalRootFactory->CreateGeometricalSet(\"UDF-\" + index_i, spGEO4, spUDFSet, 0); if (FAILED(hr) || spUDFSet == NULL_var) { cout << \"Create PTS Set FAILED\" << endl; return hr; }*/ // GET LENGTH double lnLen ; aa . GetLength ( InteCrvList [ k ], lnLen ); CATUnicodeString llen ; llen . BuildFromNum ( lnLen ); double glaLength = 1.200 ; int jcount = lnLen / ( glaLength * 1000 ); cout << \"PTS COUNT:\" << jcount << endl ; CATICkeParm_var idistance = spiParmFactory -> CreateLength ( \"Length\" , glaLength ); CATLISTV ( CATBaseUnknown_var ) ptList ; ptList . RemoveAll (); CATBaseUnknown_var StartPoint = NULL_var ; StartPoint = spGSMFactory -> CreateIntersect ( InteCrvList [ k ], ShapeList [ 6 ]); aa . ObjectUpdate ( StartPoint ); aa . SetInsert ( StartPoint , spiSetChild1 ); aa . SetObjAlias ( StartPoint , \"PT-1\" ); //\u7b2c\u4e00\u70b9\u52a0\u5165\u5217\u8868 ptList . Append ( StartPoint ); for ( int j = 1 ; j <= jcount ; j ++ ) { //\u521b\u5efa\u5e95\u5c42\u57fa\u51c6\u70b9 CATIGSMUsePointOnCurve_var spOpt = spGSMFactory -> CreatePoint ( InteCrvList [ k ], StartPoint , idistance , CATGSMOrientation :: CATGSMSameOrientation ); spOpt -> SetLength ( idistance ); spOpt -> SetOnCurveType ( 0 ); spOpt -> SetReferencePoint ( StartPoint ); aa . ObjectUpdate ( spOpt ); aa . SetInsert ( spOpt , spiSetChild1 ); StartPoint = spOpt ; CATBaseUnknown_var obj = spOpt ; CATUnicodeString index ; index . BuildFromNum ( j + 1 ); aa . SetObjAlias ( obj , \"PT-\" + index ); ptList . Append ( spOpt ); } // \u83b7\u5f97\u5e73\u9762 CATBaseUnknown_var spBasePLN1 , spBasePLN2 ; // \u901a\u8fc7\u5e73\u9762\u53bb\u9650\u5b9a\u9ad8\u5ea6 for ( int m = 1 ; m <= ptList . Size (); m ++ ) { double ZVector [ 3 ]; ZVector [ 0 ] = 0. ; ZVector [ 1 ] = 0. ; ZVector [ 2 ] = 1. ; // \u521b\u5efaZ\u65b9\u5411\u53c2\u8003\u7ebf CATICkeParm_var ix = spiParmFactory -> CreateLength ( \"Length\" , 0.0 ); CATICkeParm_var iy = spiParmFactory -> CreateLength ( \"Length\" , 0.0 ); CATICkeParm_var iz = spiParmFactory -> CreateLength ( \"Length\" , 1.0 ); CATIGSMDirection_var zdir = spGSMFactory -> CreateDirection ( ix , iy , iz ); aa . ObjectUpdate ( zdir ); if ( k > 1 ) { spBasePLN1 = LevelList [ k - 1 ]; spBasePLN2 = LevelList [ k ]; CATUnicodeString plnname = aa . GetAlias ( spBasePLN1 ); cout << \"PLN name :\" << plnname << endl ; CATICkeParm_var ist = spiParmFactory -> CreateLength ( \"Length\" , 0.0 ); CATICkeParm_var ied = spiParmFactory -> CreateLength ( \"Length\" , 4.0 ); CATIGSMLine_var spLineZDir = spGSMFactory -> CreateLine ( ptList [ m ], zdir , ist , ied , CATGSMOrientation :: CATGSMSameOrientation ); spLineZDir -> SetFirstUptoElem ( spBasePLN1 ); spLineZDir -> SetSecondUptoElem ( spBasePLN2 ); aa . ObjectUpdate ( spLineZDir ); aa . SetInsert ( spLineZDir , spiSetChild2 ); CATUnicodeString INDEX_LN ; INDEX_LN . BuildFromNum ( k ); CATUnicodeString INDEX_LN2 ; INDEX_LN2 . BuildFromNum ( m ); CATBaseUnknown_var spVerLn = spLineZDir ; aa . SetAlias ( spVerLn , \"CW-LN-\" + INDEX_LN + \"_\" + INDEX_LN2 ); } } } return S_OK ; }","title":"Facade Divide"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BA%E6%96%87%E6%A1%A3%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E8%B5%84%E6%BA%90/","text":"\u521b\u5efa\u6587\u6863\u4e0a\u4f20\u4e0b\u8f7d\u8d44\u6e90 HRESULT HR ; CATListOfCATUnicodeString lListFilePaths , lListFileComments ; CATUnicodeString p1 = \"H: \\\\ V6Exercise \\\\ TemplateProject \\\\ JuniorAdmin \\\\ SZLJuniorAdminFrame \\\\ CNext \\\\ resources \\\\ graphic \\\\ icons \\\\ normal \\\\ JuniorAdmin.bmp\" ; CATUnicodeString p2 = \"PLMCoreRepReference\" ; lListFilePaths . Append ( p1 ); lListFileComments . Append ( p2 ); CATIType_var spCATITypeOnType ; CATString typeName = \"Document\" ; //\u6587\u6863\u7c7b\u578b CATListValCATICkeParm_var lstCATListValCATICkeParmEmptyList ; HR = CATCkePLMNavPublicServices :: RetrieveKnowledgeType ( typeName . CastToCharPtr (), spCATITypeOnType ); if ( SUCCEEDED ( HR ) && ( NULL_var != spCATITypeOnType )) { cout << \" Success CATCkePLMNavPublicServices::RetrieveKnowledgeType \" << ( spCATITypeOnType -> Name ()). ConvertToChar () << endl ; //Create Attribute List CATICkeParm_var hTmpParm ; CATICkeParmFactory_var hCkeParamFact = CATCkeGlobalFunctions :: GetVolatileFactory (); if ( !! hCkeParamFact ) { hTmpParm = hCkeParamFact -> CreateString ( \"name\" , \"JuniorAdmin\" ); lstCATListValCATICkeParmEmptyList . Append ( hTmpParm ); hTmpParm = hCkeParamFact -> CreateString ( \"Title\" , \"\" ); lstCATListValCATICkeParmEmptyList . Append ( hTmpParm ); hTmpParm = hCkeParamFact -> CreateString ( \"description\" , \"\" ); lstCATListValCATICkeParmEmptyList . Append ( hTmpParm ); hTmpParm = hCkeParamFact -> CreateString ( \"Access Type\" , \"Inherited\" ); lstCATListValCATICkeParmEmptyList . Append ( hTmpParm ); hTmpParm = hCkeParamFact -> CreateString ( \"Language\" , \"English\" ); lstCATListValCATICkeParmEmptyList . Append ( hTmpParm ); cout << \" Attribute values are set.\" << endl ; } } else { cout << \"\u83b7\u53d6TYPE\u5931\u8d25\" << endl ; return 1 ;} cout << \" Creating New Document\" << endl ; PLMIDocument * piDocument = NULL ; HR = PLMDocumentServices :: CreateDocument ( spCATITypeOnType , lstCATListValCATICkeParmEmptyList , lListFilePaths , lListFileComments , piDocument ); //\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u6863\uff0c\u5373\u4f7f\u540c\u540d\uff0c\u6240\u4ee5\u5982\u679c\u591a\u6b21\u4f7f\u7528\u9700\u8981\u68c0\u67e5\u662f\u5426\u5b58\u5728 if ( FAILED ( HR ) || NULL == piDocument ) return 1 ; HR = piDocument -> DownloadFile ( \"JuniorAdmin.bmp\" , \"H: \\\\ \" ); //\u4e0b\u8f7d\u6587\u6863\u91cc\u7684\u8d44\u6e90 if ( FAILED ( HR )) { cout << \"\u4e0b\u8f7d\u6587\u4ef6\u5931\u8d25\" << endl ; } else { cout << \"\u4e0b\u8f7d\u6587\u4ef6\u6210\u529f\" << endl ; } HR = piDocument -> CreateFile ( \"H: \\\\ MyTemp \\\\ T \\\\ Resources \\\\ icon.jpg\" , p2 ); //\u5728\u6587\u6863\u4e2d\u4e0a\u4f20\uff08\u521b\u5efa\uff09\u4e00\u4e2a\u65b0\u7684\u6b21\u5143 if ( FAILED ( HR )) { cout << \"\u521b\u5efa\u6587\u4ef6\u5931\u8d25\" << endl ; } else { cout << \"\u521b\u5efa\u6587\u4ef6\u6210\u529f\" << endl ; } CATOmbLifeCycleRootsBag Bag ; Bag . InsertRoot ( piDocument ); piDocument -> Release (); piDocument = NULL ; Bag . RemoveAll ();","title":"\u521b\u5efa\u6587\u6863\u4e0a\u4f20\u4e0b\u8f7d\u8d44\u6e90"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BA%E6%96%87%E6%A1%A3%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E8%B5%84%E6%BA%90/#_1","text":"HRESULT HR ; CATListOfCATUnicodeString lListFilePaths , lListFileComments ; CATUnicodeString p1 = \"H: \\\\ V6Exercise \\\\ TemplateProject \\\\ JuniorAdmin \\\\ SZLJuniorAdminFrame \\\\ CNext \\\\ resources \\\\ graphic \\\\ icons \\\\ normal \\\\ JuniorAdmin.bmp\" ; CATUnicodeString p2 = \"PLMCoreRepReference\" ; lListFilePaths . Append ( p1 ); lListFileComments . Append ( p2 ); CATIType_var spCATITypeOnType ; CATString typeName = \"Document\" ; //\u6587\u6863\u7c7b\u578b CATListValCATICkeParm_var lstCATListValCATICkeParmEmptyList ; HR = CATCkePLMNavPublicServices :: RetrieveKnowledgeType ( typeName . CastToCharPtr (), spCATITypeOnType ); if ( SUCCEEDED ( HR ) && ( NULL_var != spCATITypeOnType )) { cout << \" Success CATCkePLMNavPublicServices::RetrieveKnowledgeType \" << ( spCATITypeOnType -> Name ()). ConvertToChar () << endl ; //Create Attribute List CATICkeParm_var hTmpParm ; CATICkeParmFactory_var hCkeParamFact = CATCkeGlobalFunctions :: GetVolatileFactory (); if ( !! hCkeParamFact ) { hTmpParm = hCkeParamFact -> CreateString ( \"name\" , \"JuniorAdmin\" ); lstCATListValCATICkeParmEmptyList . Append ( hTmpParm ); hTmpParm = hCkeParamFact -> CreateString ( \"Title\" , \"\" ); lstCATListValCATICkeParmEmptyList . Append ( hTmpParm ); hTmpParm = hCkeParamFact -> CreateString ( \"description\" , \"\" ); lstCATListValCATICkeParmEmptyList . Append ( hTmpParm ); hTmpParm = hCkeParamFact -> CreateString ( \"Access Type\" , \"Inherited\" ); lstCATListValCATICkeParmEmptyList . Append ( hTmpParm ); hTmpParm = hCkeParamFact -> CreateString ( \"Language\" , \"English\" ); lstCATListValCATICkeParmEmptyList . Append ( hTmpParm ); cout << \" Attribute values are set.\" << endl ; } } else { cout << \"\u83b7\u53d6TYPE\u5931\u8d25\" << endl ; return 1 ;} cout << \" Creating New Document\" << endl ; PLMIDocument * piDocument = NULL ; HR = PLMDocumentServices :: CreateDocument ( spCATITypeOnType , lstCATListValCATICkeParmEmptyList , lListFilePaths , lListFileComments , piDocument ); //\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u6863\uff0c\u5373\u4f7f\u540c\u540d\uff0c\u6240\u4ee5\u5982\u679c\u591a\u6b21\u4f7f\u7528\u9700\u8981\u68c0\u67e5\u662f\u5426\u5b58\u5728 if ( FAILED ( HR ) || NULL == piDocument ) return 1 ; HR = piDocument -> DownloadFile ( \"JuniorAdmin.bmp\" , \"H: \\\\ \" ); //\u4e0b\u8f7d\u6587\u6863\u91cc\u7684\u8d44\u6e90 if ( FAILED ( HR )) { cout << \"\u4e0b\u8f7d\u6587\u4ef6\u5931\u8d25\" << endl ; } else { cout << \"\u4e0b\u8f7d\u6587\u4ef6\u6210\u529f\" << endl ; } HR = piDocument -> CreateFile ( \"H: \\\\ MyTemp \\\\ T \\\\ Resources \\\\ icon.jpg\" , p2 ); //\u5728\u6587\u6863\u4e2d\u4e0a\u4f20\uff08\u521b\u5efa\uff09\u4e00\u4e2a\u65b0\u7684\u6b21\u5143 if ( FAILED ( HR )) { cout << \"\u521b\u5efa\u6587\u4ef6\u5931\u8d25\" << endl ; } else { cout << \"\u521b\u5efa\u6587\u4ef6\u6210\u529f\" << endl ; } CATOmbLifeCycleRootsBag Bag ; Bag . InsertRoot ( piDocument ); piDocument -> Release (); piDocument = NULL ; Bag . RemoveAll ();","title":"\u521b\u5efa\u6587\u6863\u4e0a\u4f20\u4e0b\u8f7d\u8d44\u6e90"},{"location":"DS-CODE/CAA/%E5%8D%95%E7%BA%AF%E5%A4%9A%E9%80%89%E7%89%B9%E5%BE%81%E7%9A%84%E5%91%BD%E4%BB%A4%E4%B8%8D%E9%9C%80%E8%A6%81%E6%9E%84%E5%BB%BA%E5%AF%B9%E8%AF%9D%E6%A1%86/","text":"\u7528\u4ee3\u7406\u81ea\u5e26\u7684\u6a21\u5f0f\u5373\u53ef { void CATSketchOutputsCmd::BuildGraph () { cout << \"CATSketchOutputsCmd::BuildGraph()\" << endl ; _AllAgent = new CATPathElementAgent ( \"All\" , CATISketch :: ClassName (), CATDlgEngWithCSO | CATDlgEngRepeat | CATDlgEngWithPrevaluation | CATDlgEngMultiAcquisitionCtrl ); _AllAgent -> AddElementType ( CATBaseUnknown :: ClassName ()); AddCSOClient ( _AllAgent ); CATDialogState * Agent = GetInitialState ( \"Select Sketch\" ); Agent -> AddDialogAgent ( _AllAgent ); AddTransition ( Agent , Agent , IsOutputSetCondition ( _AllAgent ), Action (( ActionMethod ) & CATSketchOutputsCmd :: ActionOne )); } //------------------------------------------------------------------------- // ActionOne () //------------------------------------------------------------------------- CATBoolean CATSketchOutputsCmd::ActionOne ( void * data ) { cout << \"ActionOne()\" << endl ; if ( _AllAgent != NULL ) { CATSO * pObjSO = _AllAgent -> GetListOfValues (); CATPathElement * pElemPath = NULL ; if ( NULL != pObjSO ) { pObjSO -> InitElementList (); while ( NULL != ( pElemPath = ( CATPathElement * ) pObjSO -> NextElement ())) { CATBaseUnknown_var spObj = pElemPath -> FindElement ( IID_CATBaseUnknown ); if ( NULL_var != spObj ) { _spAllSelectObjListV . Append ( spObj ); } else cout << \"Error : FindElement NULL !\" << endl ; } } } else cout << \"Error : Agent is NULL !\" << endl ; _AllAgent -> InitializeAcquisition (); if ( _spAllSelectObjListV . Size () > 0 ) { CommandOK (); RequestDelayedDestruction (); } return TRUE ; } void CATSketchOutputsCmd::CommandOK () { CATIAlias_var spiAlias = NULL_var ; cout << \" Size = \" << _spAllSelectObjListV . Size () << endl ; for ( int i = 1 ; i <= _spAllSelectObjListV . Size (); i ++ ) { CATISketch_var spiSkeSketch = _spAllSelectObjListV [ i ]; if ( spiSkeSketch != NULL_var ) { spiAlias = spiSkeSketch ; CATUnicodeString sSketchName = spiAlias -> GetAlias (); CATLISTV ( CATI2DWFGeometry_var ) sp2DGeometryListV ; if ( SUCCEEDED ( spiSkeSketch -> GetComponents ( CATBaseUnknown :: ClassName (), sp2DGeometryListV )) && sp2DGeometryListV . Size () > 0 ) { if ( FAILED ( spiSkeSketch -> OpenEdition ())) { CATUnicodeString sError = \"Error : OpenEditon is Failed , Sketch Name = \" + sSketchName + \" ! \" ; cout << sError << endl ; continue ; } CATI2DWFFactory_var spi2DFcatory = spiSkeSketch ; if ( spi2DFcatory != NULL_var ) { for ( int j = 2 ; j <= sp2DGeometryListV . Size (); j ++ ) { spiAlias = sp2DGeometryListV [ j ]; cout << \"2DGeometry : \" << spiAlias -> GetAlias () << endl ; CATI2DPoint_var spi2DPoint = spiAlias ; if ( spi2DPoint == NULL_var ) { CATBaseUnknown * pOutputGeometry = NULL ; if ( SUCCEEDED ( spi2DFcatory -> CreateOutput ( spiAlias , CATBaseUnknown :: ClassId (), & pOutputGeometry )) && pOutputGeometry != NULL ) { pOutputGeometry -> Release (); pOutputGeometry = NULL ; } else { cout << \"Error : CreateOutput is Failed !\" << endl ; } } } } if ( FAILED ( spiSkeSketch -> CloseEdition ())) { CATUnicodeString sError = \"Error : CloseEdition is Failed , Sketch Name = \" + sSketchName + \" ! \" ; cout << sError << endl ; continue ; } } else { cout << \"Error : GetComponents is Failed !\" << endl ; } sp2DGeometryListV . RemoveAll (); } CAAUpdate ( spiSkeSketch ); } } }","title":"\u5355\u7eaf\u591a\u9009\u7279\u5f81\u7684\u547d\u4ee4\u4e0d\u9700\u8981\u6784\u5efa\u5bf9\u8bdd\u6846"},{"location":"DS-CODE/CAA/%E5%8F%82%E6%95%B0%E6%B7%BB%E5%8A%A0%E5%A4%9A%E5%80%BC/","text":"code HRESULT CAAParmAddMultivalued ( CATBaseUnknown_var ispiElement , CATUnicodeString isName , CATListOfCATUnicodeString iStrList ) { HRESULT rc = E_FAIL ; CATIMmiPrtContainer_var spiPrtContainer = NULL_var ; CATIMmiMechanicalFeature_var spiPart = NULL_var ; if ( SUCCEEDED ( CAAGetPrtContainer ( spiPrtContainer )) && spiPrtContainer != NULL_var && SUCCEEDED ( spiPrtContainer -> GetMechanicalPart ( spiPart ))) { CATICkeParmFactory_var spiCkeParmFactory = spiPrtContainer ; CATICkeParm_var spiRoad = spiCkeParmFactory -> CreateString ( isName , \"\" ); if ( spiRoad != NULL_var ) { CATIAStrParam_var spiStrParam = spiRoad ; if ( spiStrParam != NULL_var ) { CATUnicodeString dData [ 1000 ] = {}; for ( int i = 1 ; i <= iStrList . Size (); i ++ ) { dData [ i - 1 ] = iStrList [ i ]; } int dSize = iStrList . Size (); CATSafeArrayVariant * pArray = BuildSafeArrayVariant ( dData , dSize ); if ( pArray != NULL ) { rc = spiStrParam -> SetEnumerateValues ( * pArray ); if ( SUCCEEDED ( rc )) { CATBSTR bstrText = NULL ; iStrList [ 1 ]. ConvertToBSTR ( & bstrText ); spiStrParam -> put_Value ( bstrText ); } spiRoad = spiStrParam ; if ( spiRoad != NULL_var ) { CATIParmPublisher_var spiPublish = ispiElement ; spiPublish -> AppendElement ( spiRoad ); } FreeVariantSafeArray ( pArray ); } } } } return rc ; }","title":"\u53c2\u6570\u6dfb\u52a0\u591a\u503c"},{"location":"DS-CODE/CAA/%E5%8F%82%E6%95%B0%E6%B7%BB%E5%8A%A0%E5%A4%9A%E5%80%BC/#code","text":"HRESULT CAAParmAddMultivalued ( CATBaseUnknown_var ispiElement , CATUnicodeString isName , CATListOfCATUnicodeString iStrList ) { HRESULT rc = E_FAIL ; CATIMmiPrtContainer_var spiPrtContainer = NULL_var ; CATIMmiMechanicalFeature_var spiPart = NULL_var ; if ( SUCCEEDED ( CAAGetPrtContainer ( spiPrtContainer )) && spiPrtContainer != NULL_var && SUCCEEDED ( spiPrtContainer -> GetMechanicalPart ( spiPart ))) { CATICkeParmFactory_var spiCkeParmFactory = spiPrtContainer ; CATICkeParm_var spiRoad = spiCkeParmFactory -> CreateString ( isName , \"\" ); if ( spiRoad != NULL_var ) { CATIAStrParam_var spiStrParam = spiRoad ; if ( spiStrParam != NULL_var ) { CATUnicodeString dData [ 1000 ] = {}; for ( int i = 1 ; i <= iStrList . Size (); i ++ ) { dData [ i - 1 ] = iStrList [ i ]; } int dSize = iStrList . Size (); CATSafeArrayVariant * pArray = BuildSafeArrayVariant ( dData , dSize ); if ( pArray != NULL ) { rc = spiStrParam -> SetEnumerateValues ( * pArray ); if ( SUCCEEDED ( rc )) { CATBSTR bstrText = NULL ; iStrList [ 1 ]. ConvertToBSTR ( & bstrText ); spiStrParam -> put_Value ( bstrText ); } spiRoad = spiStrParam ; if ( spiRoad != NULL_var ) { CATIParmPublisher_var spiPublish = ispiElement ; spiPublish -> AppendElement ( spiRoad ); } FreeVariantSafeArray ( pArray ); } } } } return rc ; }","title":"code"},{"location":"DS-CODE/CAA/%E5%A4%A7%E9%87%8F%E6%89%93%E5%BC%80%E4%BA%A7%E5%93%81%E6%97%B6%E9%9C%80%E6%B3%A8%E6%84%8F%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F%EF%BC%8C%E6%9C%80%E5%A5%BD%E4%B8%80%E4%B8%AA%E4%B8%AA%E6%89%93%E5%BC%80%E5%86%8D%E5%85%B3%E9%97%AD/","text":"\u5927\u91cf\u6253\u5f00\u4ea7\u54c1\u65f6\u9700\u6ce8\u610f\u5360\u7528\u5185\u5b58\u5927\u5c0f\uff0c\u6700\u597d\u4e00\u4e2a\u4e2a\u6253\u5f00\u518d\u5173\u95ed { ifstream in ( \"C: \\\\ Users \\\\ TL \\\\ Desktop \\\\ aa.txt\" ); string str ; CATListOfCATUnicodeString sNameList ; int LineNum = 0 ; while ( getline ( in , str )) //\u7740\u884c\u8bfb\u53d6\u6570\u636e\u5e76\u5b58\u4e8es\u4e2d\uff0c\u76f4\u81f3\u6570\u636e\u5168\u90e8\u8bfb\u53d6 { sNameList . Append ( str . c_str ()); } for ( int i = 1 ; i <= sNameList . Size (); i ++ ) { CATIPLMProducts * piProduct = NULL ; CATOmbLifeCycleRootsBag Bag ; if ( FAILED ( CAAOpenPLMComponent ( \"VPMReference\" , sNameList [ i ], \"A.1\" , IID_CATIPLMProducts , ( void ** ) & piProduct , Bag , TRUE ))) { cout << \"4444444444444444\" << endl ; } else cout << \"3333333333333333333333\" << endl ; CATBaseUnknown * pRefProduct = NULL ; CATIPrdObject * piRootPrdObject = NULL ; HRESULT rc = piProduct -> QueryInterface ( IID_CATIPrdObject , ( void ** ) & piRootPrdObject ); if ( SUCCEEDED ( rc )) { rc = piRootPrdObject -> GetReferenceObject ( pRefProduct , IID_CATBaseUnknown ); piRootPrdObject -> Release (); piRootPrdObject = NULL ; } CATIPLMNavReference_var piBoltReference = pRefProduct ; CATIPLMNavOccurrence_var spBoltOccurrence ; CATIPrdOccurrenceMngt * piPrdOccurrenceMngt = NULL ; if ( SUCCEEDED ( rc )) { rc = CATPrdGetOccurrenceMngt ( piPrdOccurrenceMngt ); if ( SUCCEEDED ( rc )) { rc = piPrdOccurrenceMngt -> GetOrCreateRootOccurrence ( piBoltReference , spBoltOccurrence ); if ( SUCCEEDED ( rc )) cout << \"2-a- Get Bolt occurence OK\" << endl ; else cout << \"2-a- ERROR in getting Bolt occurence\" << endl << endl ; } } CATIAlias_var spiAlias = spBoltOccurrence ; cout << \"Root PRODUCT Name:\" << spiAlias -> GetAlias () << endl ; CATBaseUnknown_var spBase = spBoltOccurrence ; CATIMmiPrtContainer * piCon = NULL ; CAAGetMechanicalContainer ( spBase , & piCon ); Bag . RemoveAll (); } }","title":"\u5927\u91cf\u6253\u5f00\u4ea7\u54c1\u65f6\u9700\u6ce8\u610f\u5360\u7528\u5185\u5b58\u5927\u5c0f\uff0c\u6700\u597d\u4e00\u4e2a\u4e2a\u6253\u5f00\u518d\u5173\u95ed"},{"location":"DS-CODE/CAA/%E5%A4%A7%E9%87%8F%E6%89%93%E5%BC%80%E4%BA%A7%E5%93%81%E6%97%B6%E9%9C%80%E6%B3%A8%E6%84%8F%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F%EF%BC%8C%E6%9C%80%E5%A5%BD%E4%B8%80%E4%B8%AA%E4%B8%AA%E6%89%93%E5%BC%80%E5%86%8D%E5%85%B3%E9%97%AD/#_1","text":"{ ifstream in ( \"C: \\\\ Users \\\\ TL \\\\ Desktop \\\\ aa.txt\" ); string str ; CATListOfCATUnicodeString sNameList ; int LineNum = 0 ; while ( getline ( in , str )) //\u7740\u884c\u8bfb\u53d6\u6570\u636e\u5e76\u5b58\u4e8es\u4e2d\uff0c\u76f4\u81f3\u6570\u636e\u5168\u90e8\u8bfb\u53d6 { sNameList . Append ( str . c_str ()); } for ( int i = 1 ; i <= sNameList . Size (); i ++ ) { CATIPLMProducts * piProduct = NULL ; CATOmbLifeCycleRootsBag Bag ; if ( FAILED ( CAAOpenPLMComponent ( \"VPMReference\" , sNameList [ i ], \"A.1\" , IID_CATIPLMProducts , ( void ** ) & piProduct , Bag , TRUE ))) { cout << \"4444444444444444\" << endl ; } else cout << \"3333333333333333333333\" << endl ; CATBaseUnknown * pRefProduct = NULL ; CATIPrdObject * piRootPrdObject = NULL ; HRESULT rc = piProduct -> QueryInterface ( IID_CATIPrdObject , ( void ** ) & piRootPrdObject ); if ( SUCCEEDED ( rc )) { rc = piRootPrdObject -> GetReferenceObject ( pRefProduct , IID_CATBaseUnknown ); piRootPrdObject -> Release (); piRootPrdObject = NULL ; } CATIPLMNavReference_var piBoltReference = pRefProduct ; CATIPLMNavOccurrence_var spBoltOccurrence ; CATIPrdOccurrenceMngt * piPrdOccurrenceMngt = NULL ; if ( SUCCEEDED ( rc )) { rc = CATPrdGetOccurrenceMngt ( piPrdOccurrenceMngt ); if ( SUCCEEDED ( rc )) { rc = piPrdOccurrenceMngt -> GetOrCreateRootOccurrence ( piBoltReference , spBoltOccurrence ); if ( SUCCEEDED ( rc )) cout << \"2-a- Get Bolt occurence OK\" << endl ; else cout << \"2-a- ERROR in getting Bolt occurence\" << endl << endl ; } } CATIAlias_var spiAlias = spBoltOccurrence ; cout << \"Root PRODUCT Name:\" << spiAlias -> GetAlias () << endl ; CATBaseUnknown_var spBase = spBoltOccurrence ; CATIMmiPrtContainer * piCon = NULL ; CAAGetMechanicalContainer ( spBase , & piCon ); Bag . RemoveAll (); } }","title":"\u5927\u91cf\u6253\u5f00\u4ea7\u54c1\u65f6\u9700\u6ce8\u610f\u5360\u7528\u5185\u5b58\u5927\u5c0f\uff0c\u6700\u597d\u4e00\u4e2a\u4e2a\u6253\u5f00\u518d\u5173\u95ed"},{"location":"DS-CODE/CAA/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%A0%BC%E5%BC%8F/","text":"case CATUnicodeString CATAECRoadSurfaceDataCmd::CAAUStringBuildFromChar ( const char * strchar ) { int len = MultiByteToWideChar ( CP_ACP , 0 , strchar , -1 , NULL , 0 ); wchar_t * strwcANSI = new wchar_t [ len + 1 ]; memset ( strwcANSI , 0 , len * 2 + 2 ); MultiByteToWideChar ( CP_ACP , 0 , strchar , -1 , strwcANSI , len ); CATUnicodeString strwcUnicode ; strwcUnicode . BuildFromWChar ( strwcANSI ); if ( strwcANSI ) delete [] strwcANSI ; return strwcUnicode ; } char * CATAECRoadSurfaceDataCmd::UnicodeToANSIFunc ( CATUnicodeString iStrText ) { int textlen = WideCharToMultiByte ( CP_ACP , 0 , iStrText , -1 , NULL , 0 , NULL , NULL ); char * result = ( char * ) malloc (( textlen + 1 ) * sizeof ( char )); memset ( result , 0 , sizeof ( char ) * ( textlen + 1 )); WideCharToMultiByte ( CP_ACP , 0 , iStrText , -1 , result , textlen , NULL , NULL ); return result ; } //UTF-8 \u8f6c UNICODE const char * szU8 = pExcelPath . ConvertToChar (); int wcsLen = MultiByteToWideChar ( CP_UTF8 , NULL , szU8 , strlen ( szU8 ), NULL , 0 ); wchar_t * wszString = new wchar_t [ wcsLen + 1 ]; MultiByteToWideChar ( CP_UTF8 , NULL , szU8 , strlen ( szU8 ), wszString , wcsLen ); wszString [ wcsLen ] = '\\0' ; //UNICODE \u8f6c ANSI int ansiLen = WideCharToMultiByte ( CP_ACP , NULL , wszString , wcslen ( wszString ), NULL , 0 , NULL , NULL ); char * szAnsi = new char [ ansiLen + 1 ]; WideCharToMultiByte ( CP_ACP , NULL , wszString , wcslen ( wszString ), szAnsi , ansiLen , NULL , NULL ); szAnsi [ ansiLen ] = '\\0' ;","title":"\u5b57\u7b26\u4e32\u8f6c\u683c\u5f0f"},{"location":"DS-CODE/CAA/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%A0%BC%E5%BC%8F/#case","text":"CATUnicodeString CATAECRoadSurfaceDataCmd::CAAUStringBuildFromChar ( const char * strchar ) { int len = MultiByteToWideChar ( CP_ACP , 0 , strchar , -1 , NULL , 0 ); wchar_t * strwcANSI = new wchar_t [ len + 1 ]; memset ( strwcANSI , 0 , len * 2 + 2 ); MultiByteToWideChar ( CP_ACP , 0 , strchar , -1 , strwcANSI , len ); CATUnicodeString strwcUnicode ; strwcUnicode . BuildFromWChar ( strwcANSI ); if ( strwcANSI ) delete [] strwcANSI ; return strwcUnicode ; } char * CATAECRoadSurfaceDataCmd::UnicodeToANSIFunc ( CATUnicodeString iStrText ) { int textlen = WideCharToMultiByte ( CP_ACP , 0 , iStrText , -1 , NULL , 0 , NULL , NULL ); char * result = ( char * ) malloc (( textlen + 1 ) * sizeof ( char )); memset ( result , 0 , sizeof ( char ) * ( textlen + 1 )); WideCharToMultiByte ( CP_ACP , 0 , iStrText , -1 , result , textlen , NULL , NULL ); return result ; } //UTF-8 \u8f6c UNICODE const char * szU8 = pExcelPath . ConvertToChar (); int wcsLen = MultiByteToWideChar ( CP_UTF8 , NULL , szU8 , strlen ( szU8 ), NULL , 0 ); wchar_t * wszString = new wchar_t [ wcsLen + 1 ]; MultiByteToWideChar ( CP_UTF8 , NULL , szU8 , strlen ( szU8 ), wszString , wcsLen ); wszString [ wcsLen ] = '\\0' ; //UNICODE \u8f6c ANSI int ansiLen = WideCharToMultiByte ( CP_ACP , NULL , wszString , wcslen ( wszString ), NULL , 0 , NULL , NULL ); char * szAnsi = new char [ ansiLen + 1 ]; WideCharToMultiByte ( CP_ACP , NULL , wszString , wcslen ( wszString ), szAnsi , ansiLen , NULL , NULL ); szAnsi [ ansiLen ] = '\\0' ;","title":"case"},{"location":"DS-CODE/CAA/%E5%AF%B9%E5%88%9B%E5%BB%BA%E7%9A%84%E4%BA%A7%E5%93%81%E6%88%96%E5%85%B6%E5%AE%83%E8%8A%82%E7%82%B9%E8%AE%BE%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%9B%B4/","text":"\u5bf9\u521b\u5efa\u7684\u4ea7\u54c1\u6216\u5176\u5b83\u8282\u70b9\u8bbe\u7f6e\u8bbe\u8ba1\u8303\u56f4 \u5176\u5b9e\u5c31\u662f\u5728\u521b\u5efa\u4e4b\u524d\u6839\u636e\u9700\u8981\u7684\u8bbe\u8ba1\u8303\u56f4\u5207\u6362\u5168\u5c40\u7684\u8bbe\u8ba1\u8303\u56f4\uff0c\u4e14\u4fdd\u5b58\u65e7\u7684\u8bbe\u8ba1\u8303\u56f4\u7684\u4fe1\u606f\uff0c\u5728\u521b\u5efa\u8282\u70b9\u5b8c\u6210\u540e\u5c06\u5168\u5c40\u7684\u8bbe\u8ba1\u8303\u56f4\u8bbe\u7f6e\u4e3a\u4e4b\u524d\u4fdd\u7559\u7684\u8bbe\u8ba1\u8303\u56f4\u5373\u53ef\u3002 CATICkeScalesServices_var spiCkeScalesServices = CATCkeGlobalFunctions :: GetScalesServices (); if ( spiCkeScalesServices != NULL_var ) { CATUnicodeString sDesignRange = imParamtersList [ 1 ]; CATCkeScale mOldScale = spiCkeScalesServices -> GetCurrentScale (); CATCkeScale mNewScale = CATNormalScale ; if ( sDesignRange == \"Normal Range\" || sDesignRange == \"\u6807\u51c6\u8303\u56f4\" ) mNewScale = CATNormalScale ; else if ( sDesignRange == \"Large Range\" || sDesignRange == \"\u5927\u8303\u56f4\" ) mNewScale = CATLargeScale ; else if ( sDesignRange == \"Small Range\" || sDesignRange == \"\u5c0f\u8303\u56f4\" ) mNewScale = CATSmallScale ; else if ( sDesignRange == \"Extra Large Range\" || sDesignRange == \"\u8d85\u5927\u8303\u56f4\" ) mNewScale = CATExtraLargeScale ; rc = spiCkeScalesServices -> SetCurrentScale ( mNewScale ); }","title":"\u5bf9\u521b\u5efa\u7684\u4ea7\u54c1\u6216\u5176\u5b83\u8282\u70b9\u8bbe\u7f6e\u8bbe\u8ba1\u8303\u56f4"},{"location":"DS-CODE/CAA/%E5%AF%B9%E5%88%9B%E5%BB%BA%E7%9A%84%E4%BA%A7%E5%93%81%E6%88%96%E5%85%B6%E5%AE%83%E8%8A%82%E7%82%B9%E8%AE%BE%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%9B%B4/#_1","text":"\u5176\u5b9e\u5c31\u662f\u5728\u521b\u5efa\u4e4b\u524d\u6839\u636e\u9700\u8981\u7684\u8bbe\u8ba1\u8303\u56f4\u5207\u6362\u5168\u5c40\u7684\u8bbe\u8ba1\u8303\u56f4\uff0c\u4e14\u4fdd\u5b58\u65e7\u7684\u8bbe\u8ba1\u8303\u56f4\u7684\u4fe1\u606f\uff0c\u5728\u521b\u5efa\u8282\u70b9\u5b8c\u6210\u540e\u5c06\u5168\u5c40\u7684\u8bbe\u8ba1\u8303\u56f4\u8bbe\u7f6e\u4e3a\u4e4b\u524d\u4fdd\u7559\u7684\u8bbe\u8ba1\u8303\u56f4\u5373\u53ef\u3002 CATICkeScalesServices_var spiCkeScalesServices = CATCkeGlobalFunctions :: GetScalesServices (); if ( spiCkeScalesServices != NULL_var ) { CATUnicodeString sDesignRange = imParamtersList [ 1 ]; CATCkeScale mOldScale = spiCkeScalesServices -> GetCurrentScale (); CATCkeScale mNewScale = CATNormalScale ; if ( sDesignRange == \"Normal Range\" || sDesignRange == \"\u6807\u51c6\u8303\u56f4\" ) mNewScale = CATNormalScale ; else if ( sDesignRange == \"Large Range\" || sDesignRange == \"\u5927\u8303\u56f4\" ) mNewScale = CATLargeScale ; else if ( sDesignRange == \"Small Range\" || sDesignRange == \"\u5c0f\u8303\u56f4\" ) mNewScale = CATSmallScale ; else if ( sDesignRange == \"Extra Large Range\" || sDesignRange == \"\u8d85\u5927\u8303\u56f4\" ) mNewScale = CATExtraLargeScale ; rc = spiCkeScalesServices -> SetCurrentScale ( mNewScale ); }","title":"\u5bf9\u521b\u5efa\u7684\u4ea7\u54c1\u6216\u5176\u5b83\u8282\u70b9\u8bbe\u7f6e\u8bbe\u8ba1\u8303\u56f4"},{"location":"DS-CODE/CAA/%E5%B0%86Body%E6%8C%82%E5%88%B0%E7%BB%93%E6%9E%84%E6%A0%91/","text":"CATIMmiUseDatumFactory CATIGSMUseProceduralView","title":"\u5c06Body\u6302\u5230\u7ed3\u6784\u6811"},{"location":"DS-CODE/CAA/%E5%B0%86%E4%BA%A7%E5%93%81%E6%88%96%E9%9B%B6%E4%BB%B6%E6%88%96%E8%80%85%E6%9B%B4%E5%A4%9A%E6%89%93%E5%BC%80%E5%88%B0%E7%AA%97%E5%8F%A3/","text":"CASE //\u6253\u5f00 CATIPLMComponent * pIPLMComponent = NULL ; //\u83b7\u53d6\u5230\u5168\u5c40\u7684\u4f1a\u8bdd piBoltReference -> QueryInterface ( IID_CATIPLMComponent ,( void ** ) & pIPLMComponent ); CATFrmEditor * opNewEditor = NULL ; CATIPLMOpenServices * pPLMOpenServices = NULL ; CATPLMOpenServicesFactory :: GetPLMOpenServices ( pPLMOpenServices ); if ( pPLMOpenServices == NULL ) { cout << \"pPLMOpenServices == NULL\" << endl ; return ; } pPLMOpenServices -> PLMOpenInNewWindow ( pIPLMComponent , opNewEditor ); //\u4fdd\u5b58\u5e76\u5173\u95ed CATFrmLayout * pFrmLayout = CATFrmLayout :: GetCurrentLayout (); CATLISTP ( CATFrmWindow ) pWindowList = pFrmLayout -> GetWindowList (); CATFrmWindow * pFrmWindow = pWindowList [ pWindowList . Size () -1 ]; CATFrmEditor * pEditor = pFrmWindow -> GetEditor (); if ( NULL != pEditor ) { CATPathElement UIActivePath = pEditor -> GetUIActiveObject (); CATBaseUnknown * pActiveProduct = ( CATBaseUnknown * )( UIActivePath . FindElement ( IID_CATIPLMProducts )); if ( NULL != pActiveProduct ) { CATBaseUnknown * pRefPrd = NULL ; CATIPrdObject * piRootPrdObject = NULL ; rc = pActiveProduct -> QueryInterface ( IID_CATIPrdObject , ( void ** ) & piRootPrdObject ); if ( SUCCEEDED ( rc )) { rc = piRootPrdObject -> GetReferenceObject ( pRefPrd , IID_CATBaseUnknown ); if ( SUCCEEDED ( rc )) { CATListPtrCATBaseUnknown pB ; pB . Append ( pRefPrd ); CATAdpSaver pSave ; pSave . Save ( & pB ); } piRootPrdObject -> Release (); piRootPrdObject = NULL ; } pActiveProduct -> Release (); pActiveProduct = NULL ; } } pFrmWindow -> DeleteWindow ();","title":"\u5c06\u4ea7\u54c1\u6216\u96f6\u4ef6\u6216\u8005\u66f4\u591a\u6253\u5f00\u5230\u7a97\u53e3"},{"location":"DS-CODE/CAA/%E5%B0%86%E4%BA%A7%E5%93%81%E6%88%96%E9%9B%B6%E4%BB%B6%E6%88%96%E8%80%85%E6%9B%B4%E5%A4%9A%E6%89%93%E5%BC%80%E5%88%B0%E7%AA%97%E5%8F%A3/#case","text":"//\u6253\u5f00 CATIPLMComponent * pIPLMComponent = NULL ; //\u83b7\u53d6\u5230\u5168\u5c40\u7684\u4f1a\u8bdd piBoltReference -> QueryInterface ( IID_CATIPLMComponent ,( void ** ) & pIPLMComponent ); CATFrmEditor * opNewEditor = NULL ; CATIPLMOpenServices * pPLMOpenServices = NULL ; CATPLMOpenServicesFactory :: GetPLMOpenServices ( pPLMOpenServices ); if ( pPLMOpenServices == NULL ) { cout << \"pPLMOpenServices == NULL\" << endl ; return ; } pPLMOpenServices -> PLMOpenInNewWindow ( pIPLMComponent , opNewEditor ); //\u4fdd\u5b58\u5e76\u5173\u95ed CATFrmLayout * pFrmLayout = CATFrmLayout :: GetCurrentLayout (); CATLISTP ( CATFrmWindow ) pWindowList = pFrmLayout -> GetWindowList (); CATFrmWindow * pFrmWindow = pWindowList [ pWindowList . Size () -1 ]; CATFrmEditor * pEditor = pFrmWindow -> GetEditor (); if ( NULL != pEditor ) { CATPathElement UIActivePath = pEditor -> GetUIActiveObject (); CATBaseUnknown * pActiveProduct = ( CATBaseUnknown * )( UIActivePath . FindElement ( IID_CATIPLMProducts )); if ( NULL != pActiveProduct ) { CATBaseUnknown * pRefPrd = NULL ; CATIPrdObject * piRootPrdObject = NULL ; rc = pActiveProduct -> QueryInterface ( IID_CATIPrdObject , ( void ** ) & piRootPrdObject ); if ( SUCCEEDED ( rc )) { rc = piRootPrdObject -> GetReferenceObject ( pRefPrd , IID_CATBaseUnknown ); if ( SUCCEEDED ( rc )) { CATListPtrCATBaseUnknown pB ; pB . Append ( pRefPrd ); CATAdpSaver pSave ; pSave . Save ( & pB ); } piRootPrdObject -> Release (); piRootPrdObject = NULL ; } pActiveProduct -> Release (); pActiveProduct = NULL ; } } pFrmWindow -> DeleteWindow ();","title":"CASE"},{"location":"DS-CODE/CAA/%E5%B0%86%E5%90%8E%E5%8F%B0%E6%89%93%E5%BC%80%E7%9A%84%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E5%9C%A8%E7%AA%97%E5%8F%A3/","text":"sss CATFrmEditor * opNewEditor = NULL ; CATIPLMOpenServices * pPLMOpenServices = NULL ; CATPLMOpenServicesFactory :: GetPLMOpenServices ( pPLMOpenServices ); if ( pPLMOpenServices == NULL ) { cout << \"pPLMOpenServices == NULL\" << endl ; return E_FAIL ; } pPLMOpenServices -> PLMOpenInNewWindow ( pIPLMComponent , opNewEditor ); if ( opNewEditor == NULL ) { cout << \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\" << endl ; return E_FAIL ; } else { cout << \"======================================\" << endl ; }","title":"\u5c06\u540e\u53f0\u6253\u5f00\u7684\u6587\u4ef6\u663e\u793a\u5728\u7a97\u53e3"},{"location":"DS-CODE/CAA/%E5%B0%86%E5%90%8E%E5%8F%B0%E6%89%93%E5%BC%80%E7%9A%84%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E5%9C%A8%E7%AA%97%E5%8F%A3/#sss","text":"CATFrmEditor * opNewEditor = NULL ; CATIPLMOpenServices * pPLMOpenServices = NULL ; CATPLMOpenServicesFactory :: GetPLMOpenServices ( pPLMOpenServices ); if ( pPLMOpenServices == NULL ) { cout << \"pPLMOpenServices == NULL\" << endl ; return E_FAIL ; } pPLMOpenServices -> PLMOpenInNewWindow ( pIPLMComponent , opNewEditor ); if ( opNewEditor == NULL ) { cout << \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\" << endl ; return E_FAIL ; } else { cout << \"======================================\" << endl ; }","title":"sss"},{"location":"DS-CODE/CAA/%E5%B0%86%E5%A4%9A%E4%B8%AA%E6%8C%89%E9%92%AE%E5%81%9A%E6%88%90%E8%8F%9C%E5%8D%95/","text":"void MyPRDWorkshopAddin::CreateCommands () { CATAfrCommandHeader :: CATCreateCommandHeader ( \"AAA\" , \"CATCalculationData\" , \"CATCalculationDataCmd\" , ( void * ) NULL , \"PRDWorkshopAddin\" , CATFrmAvailable ); CATAfrCommandHeader :: CATCreateCommandHeader ( \"bbb\" , \"CATCalculationData\" , \"CATCalculationDataCmd\" , ( void * ) NULL , \"PRDWorkshopAddin\" , CATFrmAvailable ); CATAfrCommandHeader :: CATCreateCommandHeader ( \"ccc\" , \"CATCalculationData\" , \"CATCalculationDataCmd\" , ( void * ) NULL , \"PRDWorkshopAddin\" , CATFrmAvailable ); //\u7b2c\u4e94\u4e2a\u53c2\u6570\u662f\u5bf9\u5e94\u5f97\u8d44\u6e90\u6587\u4ef6\u7684\u540d\u79f0 } CATCmdContainer * MyPRDWorkshopAddin::CreateToolbars () { NewAccess ( CATCmdContainer , pCAASec , CAASec ); NewAccess ( CATCmdContainer , pCAATlb , CAATlb ); SetAccessChild ( pCAASec , pCAATlb ); NewAccess ( CATCmdStarter , pCAAStr , CAAStr ); SetAccessCommand ( pCAAStr , \"AAA\" ); SetAccessChild ( pCAATlb , pCAAStr ); NewAccess ( CATCmdContainer , pCAATPMSTrdStr , CAATPMSTrdStr ); //\u521b\u5efa\u83dc\u5355\u5bb9\u5668 SetAccessNext ( pCAAStr , pCAATPMSTrdStr ); NewAccess ( CATCmdStarter , pCAAStr1 , CAAStr1 ); SetAccessCommand ( pCAAStr1 , \"bbb\" ); SetAccessChild ( pCAATPMSTrdStr , pCAAStr1 ); //\u653e\u5165\u7b2c\u4e00\u4e2a\u6309\u94ae NewAccess ( CATCmdStarter , pCAAStr2 , CAAStr2 ); SetAccessCommand ( pCAAStr2 , \"ccc\" ); SetAccessNext ( pCAAStr1 , pCAAStr2 ); //\u653e\u5165\u7b2c\u4e8c\u4e2a\u6309\u94ae //AddToolbarView(pCAATlb, 1,Right); return pCAASec ; }","title":"\u5c06\u591a\u4e2a\u6309\u94ae\u505a\u6210\u83dc\u5355"},{"location":"DS-CODE/CAA/%E5%B0%86%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E5%9C%A8%E6%96%87%E4%BB%B6%E5%A4%B9/","text":"wchar_t* pWchar = new wchar_t[sDocPath.GetLengthInChar() + 1]; sDocPath.ConvertToWChar(pWchar); ShellExecute(NULL,_T(\"open\"),_T(\"Explorer.exe\"), pWchar,NULL,SW_SHOWDEFAULT);","title":"\u5c06\u6587\u4ef6\u663e\u793a\u5728\u6587\u4ef6\u5939"},{"location":"DS-CODE/CAA/%E6%88%AA%E5%9B%BE/","text":"case HRESULT CATParmAnimationCmd::CaptureWindow ( CATUnicodeString sExportPath ) { HRESULT hr = E_FAIL ; CATFrmLayout * pLayout = CATFrmLayout :: GetCurrentLayout (); if ( pLayout != NULL ) { CATFrmWindow * pWindow = pLayout -> GetCurrentWindow (); if ( pWindow != NULL ) { CATViewer * pViewer = pWindow -> GetViewer (); float fW = 0 , fH = 0 , r = 0 , g = 0 , b = 0 ; if ( pViewer != NULL ) { pViewer -> GetGraphicSize ( & fW , & fH ); CATPrintViewerImage * pPrintViewerImage = new CATPrintViewerImage ( pViewer , CATPRINTRENDER_CAPTURE , 0 ); if ( pPrintViewerImage != NULL ) { CATUnicodeString tempFile = sExportPath ; //\u8bbe\u7f6e\u8def\u5f84 pViewer -> GetBackgroundColor ( & r , & g , & b ); cout << \"r = \" << r << \", g =\" << g << \",b=\" << b << endl ; CATIAViewer * piAViewerVB = NULL ; if ( FAILED ( pViewer -> QueryInterface ( IID_CATIAViewer , ( void ** ) & piAViewerVB ))) { cout << \"Error : QI CATIAViewer Failed !\" << endl ; return hr ; } CATBSTR bstrText = NULL ; tempFile . ConvertToBSTR ( & bstrText ); piAViewerVB -> CaptureToFile ( catCaptureFormatJPEG , bstrText ); piAViewerVB -> Release (); piAViewerVB = NULL ; pViewer -> SetBackgroundColor ( r , g , b ); pViewer -> SetFeedbackMode ( TRUE ); // pViewer->Resize(640,480);//\u4ece\u5de6\u4e0a\u89d2\u8bbe\u7f6e\u5c4f\u5e55\u8303\u56f4 pViewer -> Draw (); pViewer = NULL ; CATPrintFileGenerator * pGenerator = CATPrintDriverManager :: GetGenerator ( \"CAPTURE\" ); if ( pGenerator == NULL ) { cout << \"Error : CATPrintFileGenerator NULL \" << endl ; return hr ; } /*float arr[2] = {1920,1080}; CATPixelImage* pPixelImage = new CATPixelImage(1920,1080, CATPixelImageFormat::RGB,arr); if (pPixelImage != NULL) { pPixelImage->SetXPixelSize(1920); pPixelImage->SetYPixelSize(1080); CATRasterizationData pRasterizationData; pRasterizationData._PixelImage = pPixelImage; pGenerator->AddRaster(pRasterizationData); cout << \"CATPixelImage not NULL !\" << endl; } else cout << \"CATPixelImage is NULL !\" << endl;*/ CATPrintFileDevice * pDevice = new CATPrintFileDevice ( sExportPath . ConvertToChar (), pGenerator ); if ( pDevice == NULL ) { cout << \"Error : CATPrintFileDevice NULL \" << endl ; return hr ; } CATPrintParameters printParameters ; printParameters . SetWhitePixel ( 1 ); //\u8bbe\u7f6e\u767d\u8272\u50cf\u7d20\u6807\u5fd7 printParameters . SetMapToPaper ( 1 ); //\u5c06\u6620\u5c04\u8bbe\u7f6e\u4e3a\u7eb8\u5f20\u6807\u5fd7 printParameters . SetLineWidthSpecificationMode ( CATPRINT_SCALED ); //\u4f7f\u7528\u6307\u5b9a\u6a21\u5f0f\u8bbe\u7f6e\u884c printParameters . SetLineTypeSpecificationMode ( CATPRINT_SCALED ); // \u8bbe\u7f6e\u7ebf\u578b\u89c4\u8303\u6a21\u5f0f printParameters . SetQuality ( 100 ); //\u6253\u5370\u8d28\u91cf printParameters . SetStandard ( CATPRINT_ISO ); //\u6253\u5370\u6807\u51c6 printParameters . SetArea ( CATPRINT_WHOLE_DOCUMENT ); //\u6253\u5370\u533a\u57df pPrintViewerImage -> Print ( pDevice , printParameters ); hr = S_OK ; } else { cout << \"CATPrintViewerImage Failed !\" << endl ; } } } } return hr ; }","title":"\u622a\u56fe"},{"location":"DS-CODE/CAA/%E6%88%AA%E5%9B%BE/#case","text":"HRESULT CATParmAnimationCmd::CaptureWindow ( CATUnicodeString sExportPath ) { HRESULT hr = E_FAIL ; CATFrmLayout * pLayout = CATFrmLayout :: GetCurrentLayout (); if ( pLayout != NULL ) { CATFrmWindow * pWindow = pLayout -> GetCurrentWindow (); if ( pWindow != NULL ) { CATViewer * pViewer = pWindow -> GetViewer (); float fW = 0 , fH = 0 , r = 0 , g = 0 , b = 0 ; if ( pViewer != NULL ) { pViewer -> GetGraphicSize ( & fW , & fH ); CATPrintViewerImage * pPrintViewerImage = new CATPrintViewerImage ( pViewer , CATPRINTRENDER_CAPTURE , 0 ); if ( pPrintViewerImage != NULL ) { CATUnicodeString tempFile = sExportPath ; //\u8bbe\u7f6e\u8def\u5f84 pViewer -> GetBackgroundColor ( & r , & g , & b ); cout << \"r = \" << r << \", g =\" << g << \",b=\" << b << endl ; CATIAViewer * piAViewerVB = NULL ; if ( FAILED ( pViewer -> QueryInterface ( IID_CATIAViewer , ( void ** ) & piAViewerVB ))) { cout << \"Error : QI CATIAViewer Failed !\" << endl ; return hr ; } CATBSTR bstrText = NULL ; tempFile . ConvertToBSTR ( & bstrText ); piAViewerVB -> CaptureToFile ( catCaptureFormatJPEG , bstrText ); piAViewerVB -> Release (); piAViewerVB = NULL ; pViewer -> SetBackgroundColor ( r , g , b ); pViewer -> SetFeedbackMode ( TRUE ); // pViewer->Resize(640,480);//\u4ece\u5de6\u4e0a\u89d2\u8bbe\u7f6e\u5c4f\u5e55\u8303\u56f4 pViewer -> Draw (); pViewer = NULL ; CATPrintFileGenerator * pGenerator = CATPrintDriverManager :: GetGenerator ( \"CAPTURE\" ); if ( pGenerator == NULL ) { cout << \"Error : CATPrintFileGenerator NULL \" << endl ; return hr ; } /*float arr[2] = {1920,1080}; CATPixelImage* pPixelImage = new CATPixelImage(1920,1080, CATPixelImageFormat::RGB,arr); if (pPixelImage != NULL) { pPixelImage->SetXPixelSize(1920); pPixelImage->SetYPixelSize(1080); CATRasterizationData pRasterizationData; pRasterizationData._PixelImage = pPixelImage; pGenerator->AddRaster(pRasterizationData); cout << \"CATPixelImage not NULL !\" << endl; } else cout << \"CATPixelImage is NULL !\" << endl;*/ CATPrintFileDevice * pDevice = new CATPrintFileDevice ( sExportPath . ConvertToChar (), pGenerator ); if ( pDevice == NULL ) { cout << \"Error : CATPrintFileDevice NULL \" << endl ; return hr ; } CATPrintParameters printParameters ; printParameters . SetWhitePixel ( 1 ); //\u8bbe\u7f6e\u767d\u8272\u50cf\u7d20\u6807\u5fd7 printParameters . SetMapToPaper ( 1 ); //\u5c06\u6620\u5c04\u8bbe\u7f6e\u4e3a\u7eb8\u5f20\u6807\u5fd7 printParameters . SetLineWidthSpecificationMode ( CATPRINT_SCALED ); //\u4f7f\u7528\u6307\u5b9a\u6a21\u5f0f\u8bbe\u7f6e\u884c printParameters . SetLineTypeSpecificationMode ( CATPRINT_SCALED ); // \u8bbe\u7f6e\u7ebf\u578b\u89c4\u8303\u6a21\u5f0f printParameters . SetQuality ( 100 ); //\u6253\u5370\u8d28\u91cf printParameters . SetStandard ( CATPRINT_ISO ); //\u6253\u5370\u6807\u51c6 printParameters . SetArea ( CATPRINT_WHOLE_DOCUMENT ); //\u6253\u5370\u533a\u57df pPrintViewerImage -> Print ( pDevice , printParameters ); hr = S_OK ; } else { cout << \"CATPrintViewerImage Failed !\" << endl ; } } } } return hr ; }","title":"case"},{"location":"DS-CODE/CAA/%E6%89%93%E5%BC%80%E4%BA%A7%E5%93%81%E9%81%8D%E5%8E%86%E6%89%80%E6%9C%89%E9%9B%B6%E4%BB%B6%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E5%85%B3%E7%B3%BB/","text":"\u6253\u5f00\u4ea7\u54c1\u904d\u5386\u6240\u6709\u96f6\u4ef6\u4ee5\u53ca\u4e0e\u5185\u5b58\u7684\u5173\u7cfb \u6253\u5f00\u8fc7\u7a0b\u4e2d\u5360\u7528\u5185\u5b58\uff0c\u6253\u5f00\u540e\u4f1a\u81ea\u52a8\u91ca\u653e\u5185\u5b58 \u5bfc\u822a\u6a21\u5f0f\uff1a Navigation \u6253\u5f00\u540e\u65e0\u6cd5\u83b7\u53d63DShape\uff0c\u7c7b\u4f3c\u4e8eCGR\u6587\u4ef6 \u521b\u4f5c\u6a21\u5f0f\uff1a Authoring 1\u3001\u5982\u679c\u5c06\u6240\u6709\u5b50\u96f6\u4ef6\u5207\u6362\u5230\u7f16\u8f91\u6a21\u5f0f\u4f1a\u5360\u7528\u8f83\u591a\u5185\u5b58\uff0c\u5207\u6362\u5b8c\u6bd5\u540e\u4f1a\u81ea\u52a8\u91ca\u653e\u5185\u5b58 2\u3001\u5982\u679c\u5c06\u6240\u6709\u5b50\u96f6\u4ef6\u4e00\u4e2a\u4e00\u4e2a\u5207\u6362\u5230\u7f16\u8f91\u6a21\u5f0f\u4f7f\u7528\u540e\u518d\u5207\u6362\u5230\u53ef\u89c6\u5316\u6a21\u5f0f(VisuMode)\uff0c\u5360\u7528\u5185\u5b58\u8f83\u5c11\uff0c\u4f46\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\u8f83\u957f *\u4e3b\u8981\u4f53\u73b0\u5728\u5bf9\u7535\u8111\u5185\u5b58\u7684\u8981\u6c42\uff0c\u7535\u8111\u5185\u5b58\u5c0f\u5efa\u8bae\u4f7f\u7528\u9009\u98792 { \u53ef\u89c6\u5316\u6a21\u5f0f\u65e0\u6cd5\u83b7\u53d6\u4fe1\u606f\u3002 \u4ea7\u54c1\u6a21\u5f0f\u53ef\u83b7\u53d6\u3002 BREP\u6a21\u5f0f\u53ef\u83b7\u53d6 \u8bbe\u8ba1\u6a21\u5f0f\u53ef\u83b7\u53d6\u4f46\u662f\u7528\u65f6\u8f83\u957f\u3002 \u5207\u6362\u5230\u4ea7\u54c1\u6a21\u5f0f\u540e\u4e0d\u5207\u6362\u5230\u539f\u6a21\u5f0f\uff0c\u518d\u6b21\u8fd0\u884c\u4f1a\u81ea\u52a8\u5207\u6362\u5230\u7f16\u8f91\u6a21\u5f0f \u540c\u4e00\u4e2a\u8282\u70b9\u7684\u5b9e\u4f8b\u83b7\u53d6\u7b2c\u4e8c\u6b21\u4fe1\u606f\u4f1a\u81ea\u52a8\u53d8\u6210\u7f16\u8f91\u6a21\u5f0f }","title":"\u6253\u5f00\u4ea7\u54c1\u904d\u5386\u6240\u6709\u96f6\u4ef6\u4ee5\u53ca\u4e0e\u5185\u5b58\u7684\u5173\u7cfb"},{"location":"DS-CODE/CAA/%E6%89%93%E5%BC%80%E4%BA%A7%E5%93%81%E9%81%8D%E5%8E%86%E6%89%80%E6%9C%89%E9%9B%B6%E4%BB%B6%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E5%85%B3%E7%B3%BB/#_1","text":"\u6253\u5f00\u8fc7\u7a0b\u4e2d\u5360\u7528\u5185\u5b58\uff0c\u6253\u5f00\u540e\u4f1a\u81ea\u52a8\u91ca\u653e\u5185\u5b58","title":"\u6253\u5f00\u4ea7\u54c1\u904d\u5386\u6240\u6709\u96f6\u4ef6\u4ee5\u53ca\u4e0e\u5185\u5b58\u7684\u5173\u7cfb"},{"location":"DS-CODE/CAA/%E6%89%93%E5%BC%80%E4%BA%A7%E5%93%81%E9%81%8D%E5%8E%86%E6%89%80%E6%9C%89%E9%9B%B6%E4%BB%B6%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E5%85%B3%E7%B3%BB/#_2","text":"Navigation \u6253\u5f00\u540e\u65e0\u6cd5\u83b7\u53d63DShape\uff0c\u7c7b\u4f3c\u4e8eCGR\u6587\u4ef6","title":"\u5bfc\u822a\u6a21\u5f0f\uff1a"},{"location":"DS-CODE/CAA/%E6%89%93%E5%BC%80%E4%BA%A7%E5%93%81%E9%81%8D%E5%8E%86%E6%89%80%E6%9C%89%E9%9B%B6%E4%BB%B6%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E5%85%B3%E7%B3%BB/#_3","text":"Authoring 1\u3001\u5982\u679c\u5c06\u6240\u6709\u5b50\u96f6\u4ef6\u5207\u6362\u5230\u7f16\u8f91\u6a21\u5f0f\u4f1a\u5360\u7528\u8f83\u591a\u5185\u5b58\uff0c\u5207\u6362\u5b8c\u6bd5\u540e\u4f1a\u81ea\u52a8\u91ca\u653e\u5185\u5b58 2\u3001\u5982\u679c\u5c06\u6240\u6709\u5b50\u96f6\u4ef6\u4e00\u4e2a\u4e00\u4e2a\u5207\u6362\u5230\u7f16\u8f91\u6a21\u5f0f\u4f7f\u7528\u540e\u518d\u5207\u6362\u5230\u53ef\u89c6\u5316\u6a21\u5f0f(VisuMode)\uff0c\u5360\u7528\u5185\u5b58\u8f83\u5c11\uff0c\u4f46\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\u8f83\u957f *\u4e3b\u8981\u4f53\u73b0\u5728\u5bf9\u7535\u8111\u5185\u5b58\u7684\u8981\u6c42\uff0c\u7535\u8111\u5185\u5b58\u5c0f\u5efa\u8bae\u4f7f\u7528\u9009\u98792 { \u53ef\u89c6\u5316\u6a21\u5f0f\u65e0\u6cd5\u83b7\u53d6\u4fe1\u606f\u3002 \u4ea7\u54c1\u6a21\u5f0f\u53ef\u83b7\u53d6\u3002 BREP\u6a21\u5f0f\u53ef\u83b7\u53d6 \u8bbe\u8ba1\u6a21\u5f0f\u53ef\u83b7\u53d6\u4f46\u662f\u7528\u65f6\u8f83\u957f\u3002 \u5207\u6362\u5230\u4ea7\u54c1\u6a21\u5f0f\u540e\u4e0d\u5207\u6362\u5230\u539f\u6a21\u5f0f\uff0c\u518d\u6b21\u8fd0\u884c\u4f1a\u81ea\u52a8\u5207\u6362\u5230\u7f16\u8f91\u6a21\u5f0f \u540c\u4e00\u4e2a\u8282\u70b9\u7684\u5b9e\u4f8b\u83b7\u53d6\u7b2c\u4e8c\u6b21\u4fe1\u606f\u4f1a\u81ea\u52a8\u53d8\u6210\u7f16\u8f91\u6a21\u5f0f }","title":"\u521b\u4f5c\u6a21\u5f0f\uff1a"},{"location":"DS-CODE/CAA/%E6%89%93%E5%BC%80%E5%9B%BE%E7%BA%B8%E5%92%8C%E6%B7%BB%E5%8A%A0TPS%E8%A7%86%E5%9B%BE/","text":"\u6253\u5f00\u56fe\u7eb8\u548c\u6dfb\u52a0TPS\u89c6\u56fe { HRESULT rc = E_FAIL ; CATIMmiPrtContainer * piMmiPrtContainer = NULL ; CATIMmiMechanicalFeature_var spiMmiPart = NULL_var ; CATIAlias_var spiAlias = NULL_var ; CATBaseUnknown * pUnknown = NULL ; rc = CAAGetRootProduct ( & pUnknown ); if ( pUnknown != NULL && SUCCEEDED ( rc )) { CATIPLMNavReference * pRef = NULL ; rc = pUnknown -> QueryInterface ( IID_CATIPLMNavReference , ( void ** ) & pRef ); if ( FAILED ( rc ) || pRef == NULL ) { cout << \"QI CATIPLMNavReference FAILED\" << endl ; return E_FAIL ; } CATIPLMNavOccurrence_var spiPartOccurrence = NULL_var ; CATIPrdOccurrenceMngt * piPrdOccurrenceMngt = NULL ; CATPrdGetOccurrenceMngt ( piPrdOccurrenceMngt ); if ( piPrdOccurrenceMngt != NULL ) { piPrdOccurrenceMngt -> GetOrCreateRootOccurrence ( pRef , spiPartOccurrence ); } if ( spiPartOccurrence != NULL_var ) { CATIPLMRepInstances_var spiRepIns = spiPartOccurrence ; if ( spiRepIns != NULL_var ) { CATUnicodeString sId = \"3sh-94417684-00000223\" ; //\"drw-94417684-00000101\"; CATUnicodeString sVersion = \"A.1\" ; CATIPsiRepresentationReference * piDrawingRepRef = NULL ; CATOmbLifeCycleRootsBag Bag ; rc = CAAOpenPLMComponent ( \"VPMRepReference\" , sId , sVersion , IID_CATIPsiRepresentationReference , ( void ** ) & piDrawingRepRef , Bag ); if ( FAILED ( rc ) || ( NULL == piDrawingRepRef )) { cout << \"Error : Open Drawing is Failed ! \" << endl ; return E_FAIL ; } CATIPsiRepresentationLoadMode * piRepLoadMode = NULL ; if ( piDrawingRepRef && SUCCEEDED ( piDrawingRepRef -> QueryInterface ( IID_CATIPsiRepresentationLoadMode , ( void ** ) & piRepLoadMode ))) { rc = piRepLoadMode -> ChangeLoadingMode ( CATIPsiRepresentationLoadMode :: EditMode ); piRepLoadMode -> Release (); piRepLoadMode = NULL ; } CATBaseUnknown * pBaseUnknown = NULL ; if ( SUCCEEDED ( spiRepIns -> AddRepInstance ( \"\" , piDrawingRepRef , pBaseUnknown ))) { cout << \"AddRepInstance Not Null\" << endl ; } else cout << \"AddRepInstance is Null\" << endl ; CATITPSServicesContainers * piTPSServ = NULL ; CATITPSSet * piTpsSet = NULL ; if ( SUCCEEDED ( CATTPSInstantiateUseComponent ( DfTPS_ItfTPSServicesContainer , ( void ** ) & piTPSServ ))) { if ( SUCCEEDED ( piTPSServ -> RetrieveOrCreateCurrentTPSSet ( pUnknown , CreateIfMissing , & piTpsSet ))) { cout << \"RetrieveOrCreateCurrentTPSSet OK\" << endl ; } else cout << \"RetrieveOrCreateCurrentTPSSet KO\" << endl ; if ( piTpsSet != NULL ) { CATITPSViewFactory * piTPSViewFactory = NULL ; if ( SUCCEEDED ( piTpsSet -> QueryInterface ( IID_CATITPSViewFactory ,( void ** ) & piTPSViewFactory ))) { CATMathPlane ViewPlane = CATMathOIJ ; CATITPSView * piTPSView = NULL ; piTPSViewFactory -> CreateView ( & piTPSView , & ViewPlane , DftFrontView ); } } } } } } }","title":"\u6253\u5f00\u56fe\u7eb8\u548c\u6dfb\u52a0TPS\u89c6\u56fe"},{"location":"DS-CODE/CAA/%E6%89%93%E5%BC%80%E5%9B%BE%E7%BA%B8%E5%92%8C%E6%B7%BB%E5%8A%A0TPS%E8%A7%86%E5%9B%BE/#tps","text":"{ HRESULT rc = E_FAIL ; CATIMmiPrtContainer * piMmiPrtContainer = NULL ; CATIMmiMechanicalFeature_var spiMmiPart = NULL_var ; CATIAlias_var spiAlias = NULL_var ; CATBaseUnknown * pUnknown = NULL ; rc = CAAGetRootProduct ( & pUnknown ); if ( pUnknown != NULL && SUCCEEDED ( rc )) { CATIPLMNavReference * pRef = NULL ; rc = pUnknown -> QueryInterface ( IID_CATIPLMNavReference , ( void ** ) & pRef ); if ( FAILED ( rc ) || pRef == NULL ) { cout << \"QI CATIPLMNavReference FAILED\" << endl ; return E_FAIL ; } CATIPLMNavOccurrence_var spiPartOccurrence = NULL_var ; CATIPrdOccurrenceMngt * piPrdOccurrenceMngt = NULL ; CATPrdGetOccurrenceMngt ( piPrdOccurrenceMngt ); if ( piPrdOccurrenceMngt != NULL ) { piPrdOccurrenceMngt -> GetOrCreateRootOccurrence ( pRef , spiPartOccurrence ); } if ( spiPartOccurrence != NULL_var ) { CATIPLMRepInstances_var spiRepIns = spiPartOccurrence ; if ( spiRepIns != NULL_var ) { CATUnicodeString sId = \"3sh-94417684-00000223\" ; //\"drw-94417684-00000101\"; CATUnicodeString sVersion = \"A.1\" ; CATIPsiRepresentationReference * piDrawingRepRef = NULL ; CATOmbLifeCycleRootsBag Bag ; rc = CAAOpenPLMComponent ( \"VPMRepReference\" , sId , sVersion , IID_CATIPsiRepresentationReference , ( void ** ) & piDrawingRepRef , Bag ); if ( FAILED ( rc ) || ( NULL == piDrawingRepRef )) { cout << \"Error : Open Drawing is Failed ! \" << endl ; return E_FAIL ; } CATIPsiRepresentationLoadMode * piRepLoadMode = NULL ; if ( piDrawingRepRef && SUCCEEDED ( piDrawingRepRef -> QueryInterface ( IID_CATIPsiRepresentationLoadMode , ( void ** ) & piRepLoadMode ))) { rc = piRepLoadMode -> ChangeLoadingMode ( CATIPsiRepresentationLoadMode :: EditMode ); piRepLoadMode -> Release (); piRepLoadMode = NULL ; } CATBaseUnknown * pBaseUnknown = NULL ; if ( SUCCEEDED ( spiRepIns -> AddRepInstance ( \"\" , piDrawingRepRef , pBaseUnknown ))) { cout << \"AddRepInstance Not Null\" << endl ; } else cout << \"AddRepInstance is Null\" << endl ; CATITPSServicesContainers * piTPSServ = NULL ; CATITPSSet * piTpsSet = NULL ; if ( SUCCEEDED ( CATTPSInstantiateUseComponent ( DfTPS_ItfTPSServicesContainer , ( void ** ) & piTPSServ ))) { if ( SUCCEEDED ( piTPSServ -> RetrieveOrCreateCurrentTPSSet ( pUnknown , CreateIfMissing , & piTpsSet ))) { cout << \"RetrieveOrCreateCurrentTPSSet OK\" << endl ; } else cout << \"RetrieveOrCreateCurrentTPSSet KO\" << endl ; if ( piTpsSet != NULL ) { CATITPSViewFactory * piTPSViewFactory = NULL ; if ( SUCCEEDED ( piTpsSet -> QueryInterface ( IID_CATITPSViewFactory ,( void ** ) & piTPSViewFactory ))) { CATMathPlane ViewPlane = CATMathOIJ ; CATITPSView * piTPSView = NULL ; piTPSViewFactory -> CreateView ( & piTPSView , & ViewPlane , DftFrontView ); } } } } } } }","title":"\u6253\u5f00\u56fe\u7eb8\u548c\u6dfb\u52a0TPS\u89c6\u56fe"},{"location":"DS-CODE/CAA/%E6%8A%95%E5%BD%B13D%E8%A7%86%E5%9B%BE/","text":"\u6295\u5f71CATITPSView -> CreateViewFrom3D \u6295\u5f71CATI2DLayoutView -> CreateFrontView","title":"\u6295\u5f713D\u89c6\u56fe"},{"location":"DS-CODE/CAA/%E6%8B%93%E6%89%91%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB/","text":"case double CATEAECBDGTypeCurveBehavior::GetTwoBodyDistance ( CATGeoFactory * pGeoFactory , CATTopData Topdata , CATBody_var soBody1 , CATBody_var spBody2 ) { CATGeoFactory * pGeoFactory = NULL_var ; CATIMmiPrtContainer_var spiPrtCont = NULL_var ; if ( SUCCEEDED ( spiInput1 -> GetPrtContainer ( spiPrtCont ))) { if ( SUCCEEDED ( spiPrtCont -> QueryInterface ( IID_CATGeoFactory ,( void ** ) & pGeoFactory ))) { CATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration (); CATTopData topdata ( pConfig , NULL ); } } double dDis = -1 ; CATICGMDistanceMinBodyBody * pDisBodyBody = CATCGMCreateDistanceMinTopo ( pGeoFactory , & Topdata , soBody1 , spBody2 ); if ( pDisBodyBody == NULL ) { return dDis ; } pDisBodyBody -> Run (); dDis = pDisBodyBody -> GetDistance (); cout << \" Distance : \" << dDis << endl ; return dDis ; }","title":"\u62d3\u6251\u8ba1\u7b97\u8ddd\u79bb"},{"location":"DS-CODE/CAA/%E6%8B%93%E6%89%91%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB/#case","text":"double CATEAECBDGTypeCurveBehavior::GetTwoBodyDistance ( CATGeoFactory * pGeoFactory , CATTopData Topdata , CATBody_var soBody1 , CATBody_var spBody2 ) { CATGeoFactory * pGeoFactory = NULL_var ; CATIMmiPrtContainer_var spiPrtCont = NULL_var ; if ( SUCCEEDED ( spiInput1 -> GetPrtContainer ( spiPrtCont ))) { if ( SUCCEEDED ( spiPrtCont -> QueryInterface ( IID_CATGeoFactory ,( void ** ) & pGeoFactory ))) { CATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration (); CATTopData topdata ( pConfig , NULL ); } } double dDis = -1 ; CATICGMDistanceMinBodyBody * pDisBodyBody = CATCGMCreateDistanceMinTopo ( pGeoFactory , & Topdata , soBody1 , spBody2 ); if ( pDisBodyBody == NULL ) { return dDis ; } pDisBodyBody -> Run (); dDis = pDisBodyBody -> GetDistance (); cout << \" Distance : \" << dDis << endl ; return dDis ; }","title":"case"},{"location":"DS-CODE/CAA/%E6%A8%A1%E5%9D%97%E4%B8%8E%E9%A6%96%E9%80%89%E9%A1%B9%E5%90%84%E9%A1%B5%E9%9D%A2%E5%BE%97%E5%90%8D%E7%A7%B0/","text":"Infrastructure.Title=\"\u57fa\u7840\u7ed3\u6784\"; Interactive3DExperience.Title=\"\u4ea4\u4e92\u5f0f 3DEXPERIENCE\"; Systems.Title=\"\u7cfb\u7edf\"; Engineering.Title=\"\u5de5\u7a0b\"; Shape.Title=\"\u5f62\u72b6\"; MechanicalDesign.Title=\"\u673a\u68b0\"; AnalysisSimulation.Title=\"\u6a21\u62df\"; AECPlant.Title=\"\u5efa\u7b51\u548c\u516c\u5171\u8bbe\u65bd\"; ProcessPlanning.Title=\"\u6d41\u7a0b\u89c4\u5212\"; Equipments.Title=\"\u8bbe\u5907\"; NCManufacturing.Title=\"\u52a0\u5de5\"; DMUNavigator.Title=\"\u6570\u5b57\u5316\u88c5\u914d\"; DPManufacturing.Title=\"\u5236\u9020\u89c4\u5212\"; VNC.Title=\"\u52a0\u5de5\u6a21\u62df\"; Inspection.Title=\"\u68c0\u67e5\"; IGRIP.Title=\"\u673a\u5668\u4eba\u5b66\"; Safework.Title=\"\u4eba\u673a\u5de5\u7a0b\u5b66\"; AECShipBuilding.Title=\"\u8239\u8236\u4e0e\u6d77\u6d0b\"; LMSEngineeringViewer.Title=\"\u684c\u9762\"; LMSNoiseAndVibration.Title=\"\u566a\u97f3\u4e0e\u632f\u52a8\"; LMSMotion.Title=\"\u52a8\u4f5c\"; LMSGeometry.Title=\"\u51e0\u4f55\u56fe\u5f62\"; LMSDurability.Title=\"\u6301\u4e45\u6027\"; LMSAcoustics.Title=\"\u58f0\u5b66\"; LMSOptimization.Title=\"\u4f18\u5316\"; LMSMeshing.Title=\"\u5efa\u6a21\"; LMSCrash.Title=\"\u78b0\u649e\"; LMSOccupantSafety.Title=\"\u4e58\u5458\u5b89\u5168\"; Knowledge.Title=\"\u77e5\u8bc6\u5de5\u7a0b\u6a21\u5757\"; ENOVIAV5VPM.Title=\"VPM\"; ENOVIAV5PPR.Title=\"PPR\"; LogicControlModeling.Title=\"\u81ea\u52a8\u5316\"; Factory.Title=\"\u5de5\u5382\";","title":"\u6a21\u5757\u4e0e\u9996\u9009\u9879\u5404\u9875\u9762\u5f97\u540d\u79f0"},{"location":"DS-CODE/CAA/%E7%88%B6%E5%AD%90%E7%BA%A7/","text":"\u7236\u5b50\u7ea7 CATIMmiUseStructureAnalyse","title":"\u7236\u5b50\u7ea7"},{"location":"DS-CODE/CAA/%E7%88%B6%E5%AD%90%E7%BA%A7/#_1","text":"CATIMmiUseStructureAnalyse","title":"\u7236\u5b50\u7ea7"},{"location":"DS-CODE/CAA/%E7%89%B9%E5%BE%81%E5%8C%96-CAAFeaturize/","text":"case HRESULT CAAFeaturize ( CATBaseUnknown_var ispObject , CATBaseUnknown_var & ospObject ) { HRESULT rc = E_FAIL ; CATIMmiUseBRepAccess_var spiRepAccess = ispObject ; if ( spiRepAccess != NULL_var ) { CATIMmiUseFeaturize_var spiFeaturize = spiRepAccess ; CATIMmiUseMfBRep_var spiBRep = NULL_var ; if ( SUCCEEDED ( spiFeaturize -> Featurize ( spiBRep , CATMmrFunctional ))) { ospObject = spiBRep ; rc = S_OK ; } else { cout << \"Error : CAAGetAxisBRep Featurize Failed !\" << endl ; rc = E_FAIL ; } } else { cout << \"Error : CAAGetAxisBRep CATIMmiUseBRepAccess Failed !\" << endl ; rc = E_FAIL ; } if ( ospObject == NULL_var ) { rc = E_FAIL ; } return rc ; }","title":"\u7279\u5f81\u5316 CAAFeaturize"},{"location":"DS-CODE/CAA/%E7%89%B9%E5%BE%81%E5%8C%96-CAAFeaturize/#case","text":"HRESULT CAAFeaturize ( CATBaseUnknown_var ispObject , CATBaseUnknown_var & ospObject ) { HRESULT rc = E_FAIL ; CATIMmiUseBRepAccess_var spiRepAccess = ispObject ; if ( spiRepAccess != NULL_var ) { CATIMmiUseFeaturize_var spiFeaturize = spiRepAccess ; CATIMmiUseMfBRep_var spiBRep = NULL_var ; if ( SUCCEEDED ( spiFeaturize -> Featurize ( spiBRep , CATMmrFunctional ))) { ospObject = spiBRep ; rc = S_OK ; } else { cout << \"Error : CAAGetAxisBRep Featurize Failed !\" << endl ; rc = E_FAIL ; } } else { cout << \"Error : CAAGetAxisBRep CATIMmiUseBRepAccess Failed !\" << endl ; rc = E_FAIL ; } if ( ospObject == NULL_var ) { rc = E_FAIL ; } return rc ; }","title":"case"},{"location":"DS-CODE/CAA/%E7%95%8C%E9%9D%A2%E5%B1%85%E4%B8%AD%E5%92%8C%E7%BB%93%E6%9E%84%E6%A0%91%E5%B1%85%E4%B8%AD/","text":"\u754c\u9762\u5c45\u4e2d\u548c\u7ed3\u6784\u6811\u5c45\u4e2d { //3D\u7279\u5f81\u5c45\u4e2d void CAAPartCenteredCmd::PartReframeOn ( PartData & imPartData ) { CATFrmLayout * pLayout = CATFrmLayout :: GetCurrentLayout (); if ( pLayout != NULL ) { CATFrmWindow * pWindow = pLayout -> GetCurrentWindow (); if ( pWindow != NULL ) { CATViewer * pViewer = pWindow -> GetViewer (); if ( pViewer ) { CATI3DGeoVisu_var spi3DGeoVisu = imPartData . spiPart ; if ( spi3DGeoVisu != NULL_var ) { CAT3DRep * pRep = ( CAT3DRep * ) spi3DGeoVisu -> GetRep (); if ( pRep ) { CAAAddHighlight ( imPartData . spiPart ); //\u5c06\u96f6\u4ef6\u6dfb\u52a0\u9ad8\u4eae CAT3DBoundingSphere pBoundingSphere = pRep -> GetBoundingElement (); //\u5f97\u5230\u96f6\u4ef6\u539f\u59cb\u76843DBoundingSphere CATMathPointf mCenter = pBoundingSphere . GetCenter (); float mRadius = pBoundingSphere . GetRadius (); float mRadiusMM = pBoundingSphere . GetRadiusMM (); CATMathTransformation mTransformation = imPartData . mPrdTransformation ; //\u83b7\u53d6\u96f6\u4ef6\u5b9e\u4f8b\u7684\u77e9\u9635 CATMathPoint mThisCenter ; mCenter . GetValue ( mThisCenter ); CATMathPointf mNewCenter = CATMathPointf ( mTransformation * mThisCenter ); //\u901a\u8fc7\u77e9\u9635\u8f6c\u6362\u5f97\u5230\u5b9e\u4f8b\u6240\u5728\u7684Center CAT3DBoundingSphere pNew3DBoundingSphere ( mNewCenter , mRadius , mRadiusMM ); (( CAT3DViewer * ) pViewer ) -> ReframeOn ( pNew3DBoundingSphere ); } } } } } } //\u7ed3\u6784\u6811\u5c45\u4e2d \u7ed3\u6784\u6811\u5c45\u4e2d\u524d\u9700\u5148\u9ad8\u4eae\u9009\u9700\u8981\u5c45\u4e2d\u7684\u8282\u70b9 void CAAPartCenteredCmd::TreeReframeOn () { CATFrmLayout * pLayout = CATFrmLayout :: GetCurrentLayout (); if ( NULL != pLayout ) { CATFrmWindow * pCurrentWindow = pLayout -> GetCurrentWindow (); if ( NULL != pCurrentWindow ) { if ( 1 == pCurrentWindow -> IsAKindOf ( \"CATFrmNavigGraphicWindow\" )) { CATFrmNavigGraphicWindow * pFrmNavigGraphicWindow = ( CATFrmNavigGraphicWindow * ) pCurrentWindow ; CATNavigBox * pNavigBox = NULL ; pNavigBox = pFrmNavigGraphicWindow -> GetNavigBox (); CATCafCenterGraph MyObj ; MyObj . CenterGraph ( \"OnHSO\" , pNavigBox ); } } } } }","title":"\u754c\u9762\u5c45\u4e2d\u548c\u7ed3\u6784\u6811\u5c45\u4e2d"},{"location":"DS-CODE/CAA/%E7%95%8C%E9%9D%A2%E5%B1%85%E4%B8%AD%E5%92%8C%E7%BB%93%E6%9E%84%E6%A0%91%E5%B1%85%E4%B8%AD/#_1","text":"{ //3D\u7279\u5f81\u5c45\u4e2d void CAAPartCenteredCmd::PartReframeOn ( PartData & imPartData ) { CATFrmLayout * pLayout = CATFrmLayout :: GetCurrentLayout (); if ( pLayout != NULL ) { CATFrmWindow * pWindow = pLayout -> GetCurrentWindow (); if ( pWindow != NULL ) { CATViewer * pViewer = pWindow -> GetViewer (); if ( pViewer ) { CATI3DGeoVisu_var spi3DGeoVisu = imPartData . spiPart ; if ( spi3DGeoVisu != NULL_var ) { CAT3DRep * pRep = ( CAT3DRep * ) spi3DGeoVisu -> GetRep (); if ( pRep ) { CAAAddHighlight ( imPartData . spiPart ); //\u5c06\u96f6\u4ef6\u6dfb\u52a0\u9ad8\u4eae CAT3DBoundingSphere pBoundingSphere = pRep -> GetBoundingElement (); //\u5f97\u5230\u96f6\u4ef6\u539f\u59cb\u76843DBoundingSphere CATMathPointf mCenter = pBoundingSphere . GetCenter (); float mRadius = pBoundingSphere . GetRadius (); float mRadiusMM = pBoundingSphere . GetRadiusMM (); CATMathTransformation mTransformation = imPartData . mPrdTransformation ; //\u83b7\u53d6\u96f6\u4ef6\u5b9e\u4f8b\u7684\u77e9\u9635 CATMathPoint mThisCenter ; mCenter . GetValue ( mThisCenter ); CATMathPointf mNewCenter = CATMathPointf ( mTransformation * mThisCenter ); //\u901a\u8fc7\u77e9\u9635\u8f6c\u6362\u5f97\u5230\u5b9e\u4f8b\u6240\u5728\u7684Center CAT3DBoundingSphere pNew3DBoundingSphere ( mNewCenter , mRadius , mRadiusMM ); (( CAT3DViewer * ) pViewer ) -> ReframeOn ( pNew3DBoundingSphere ); } } } } } } //\u7ed3\u6784\u6811\u5c45\u4e2d \u7ed3\u6784\u6811\u5c45\u4e2d\u524d\u9700\u5148\u9ad8\u4eae\u9009\u9700\u8981\u5c45\u4e2d\u7684\u8282\u70b9 void CAAPartCenteredCmd::TreeReframeOn () { CATFrmLayout * pLayout = CATFrmLayout :: GetCurrentLayout (); if ( NULL != pLayout ) { CATFrmWindow * pCurrentWindow = pLayout -> GetCurrentWindow (); if ( NULL != pCurrentWindow ) { if ( 1 == pCurrentWindow -> IsAKindOf ( \"CATFrmNavigGraphicWindow\" )) { CATFrmNavigGraphicWindow * pFrmNavigGraphicWindow = ( CATFrmNavigGraphicWindow * ) pCurrentWindow ; CATNavigBox * pNavigBox = NULL ; pNavigBox = pFrmNavigGraphicWindow -> GetNavigBox (); CATCafCenterGraph MyObj ; MyObj . CenterGraph ( \"OnHSO\" , pNavigBox ); } } } } }","title":"\u754c\u9762\u5c45\u4e2d\u548c\u7ed3\u6784\u6811\u5c45\u4e2d"},{"location":"DS-CODE/CAA/%E7%9F%A9%E9%98%B5%E7%9A%84%E7%90%86%E8%A7%A3/","text":"CATMathTransformation Matrix= a11 a12 a13 Vector= u1 a21 a22 a23 u2 a31 a32 a33 u3 \u7b80\u5355\u7406\u89e3\u53ef\u4ee5\u7406\u89e3\u4e3a\u8f74\u7cfb\uff0c\u76f8\u5f53\u4e8e\u4e09\u4e2a\u65b9\u5411\uff08\u4f4d\u59ff\uff09\u548c\u539f\u70b9\uff08\u5b9a\u4f4d\u70b9\uff09 \u5982\u679c\u662f4*4\u7684\u77e9\u9635\u5219\u591a\u51fa\u7684\u7528\u4e8e\u653e\u5927\u7f29\u5c0f\u7684\u7cfb\u6570; CATMathPoint Pt1(0, 0, 0); CATMathVector mV(mPoint - Pt1); CATMathTransformation Translation(mV); //\u5b9a\u4e49\u4e00\u4e2a\u7528\u4e8e\u5e73\u79fb\u7684\u77e9\u9635\uff0c\u5373Vector\u5305\u542b\u4e86\u5e73\u79fb\u7684\u65b9\u5411\u548c\u8ddd\u79bb CATAngle Angle = CATPI; //180\u5ea6 CATMathLine Line(Pt1, mPoint); CATMathTransformation Rotation(Angle, Line); //\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7528\u4e8e\u9009\u62e9\u7684\u77e9\u9635\uff0c\u5373\u7ed5\u7740Line(\u65cb\u8f6c\u8f74)\u65cb\u8f6c180\u5ea6\uff08Angle\uff09","title":"\u77e9\u9635\u7684\u7406\u89e3"},{"location":"DS-CODE/CAA/%E7%BB%99%E6%8C%87%E5%AE%9A%E7%B1%BB%E5%9E%8B%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/","text":"\u7ed9\u6307\u5b9a\u7c7b\u578b\u6dfb\u52a0\u53f3\u952e\u83dc\u5355 { { _daPathElement = new CATPathElementAgent ( \"pathelt\" ); _daPathElement -> SetBehavior ( CATDlgEngWithContext | CATDlgEngRepeat ); _daPathElement -> AddElementType ( IID_CATIGSMTool ); //\u9009\u62e9\u6dfb\u52a0\u7684\u7c7b\u578b\u4f1a\u51fa\u6765\u6dfb\u52a0\u7684\u83dc\u5355\u9009\u9879 _daDialog = new CATDialogAgent ( \"dialoagent\" ); _daDialog -> SetBehavior ( CATDlgEngWithUndo | CATDlgEngWithContext ); _daDialog -> AcceptOnNotify ( NULL , \"CATContext\" ); CATDialogState * stBackGroundState = GetInitialState ( \"stBackGroundStateId\" ); stBackGroundState -> AddDialogAgent ( _daPathElement ); stBackGroundState -> AddDialogAgent ( _daDialog ); CATDialogTransition * pCntxMenuTransition = AddTransition ( stBackGroundState , stBackGroundState , IsOutputSetCondition ( _daDialog ), Action (( ActionMethod ) & CAAECreateNewFeatureCmd :: CreateCntxMenu ) ) ; } void CAAECreateNewFeatureCmd :: CreateCntxMenu () { cout << \"\u53f3\u952e + 1 \" << endl ; _daPathElement -> InitializeAcquisition (); _daDialog -> InitializeAcquisition (); CATNotification * pNotif = GetLastNotification (); if ( NULL != pNotif ) { CATDlgContextualMenu * pCntxMenu = (( CATContext * ) pNotif ) -> GetContextualMenu (); if ( NULL != pCntxMenu ) { cout << \"Add CATDlgContextualMenu \\n \" << endl ; // Default Item Title CATString StartString ( \"StartPoint\" ); CATString MediumString ( \"MediumPoint\" ); CATString EndString ( \"EndPoint\" ) ; // all these dialog objects are deleted when the contextual menu // is deleted. The command does't delete them. CATDlgSeparatorItem * Separator = new CATDlgSeparatorItem ( pCntxMenu , \"separator\" ); CATDlgPushItem * StartPoint = new CATDlgPushItem ( pCntxMenu , StartString ) ; CATDlgPushItem * MediumPoint = new CATDlgPushItem ( pCntxMenu , MediumString ) ; CATDlgPushItem * EndPoint = new CATDlgPushItem ( pCntxMenu , EndString ) ; } else { cout << \"CATDlgContextualMenu NULL \\n \" << endl ; } } else { cout << \"CATNotification NULL \\n \" << endl ; } } //////////////////////////// void CAAECreateNewFeatureCmd :: CreateCntxMenu () { CATDlgContextualMenu * pCntxMenu = new CATDlgContextualMenu ( _pNewFeatureDlg -> GetSpinner (), \"menu\" ); if ( NULL != pCntxMenu ) { cout << \"Add CATDlgContextualMenu \\n \" << endl ; // Default Item Title CATString StartString ( \"StartPoint\" ); CATString MediumString ( \"MediumPoint\" ); CATString EndString ( \"EndPoint\" ) ; // all these dialog objects are deleted when the contextual menu // is deleted. The command does't delete them. CATDlgSeparatorItem * Separator = new CATDlgSeparatorItem ( pCntxMenu , \"separator\" ); CATDlgPushItem * StartPoint = new CATDlgPushItem ( pCntxMenu , StartString ) ; CATDlgPushItem * MediumPoint = new CATDlgPushItem ( pCntxMenu , MediumString ) ; CATDlgPushItem * EndPoint = new CATDlgPushItem ( pCntxMenu , EndString ) ; AddAnalyseNotificationCB ( StartPoint , StartPoint -> GetMenuIActivateNotification (), ( CATCommandMethod ) & CAAECreateNewFeatureCmd :: Menu ,( void * ) 1 ); AddAnalyseNotificationCB ( MediumPoint , MediumPoint -> GetMenuIActivateNotification (), ( CATCommandMethod ) & CAAECreateNewFeatureCmd :: Menu ,( void * ) 2 ); AddAnalyseNotificationCB ( EndPoint , EndPoint -> GetMenuIActivateNotification (), ( CATCommandMethod ) & CAAECreateNewFeatureCmd :: Menu ,( void * ) 3 ); } else { cout << \"CATDlgContextualMenu NULL \\n \" << endl ; } } void CAAECreateNewFeatureCmd :: Menu ( CATCommand * cmd , CATNotification * evt , CATCommandClientData data ) { int dNum = CATPtrToINT32 ( data ); if ( dNum == 1 ) { cout << \"\u6309\u952e 1 \" << endl ; this -> RequestStatusChange ( CATCommandMsgDesactivated ); cout << \"2 \" << endl ; CATCommand * pCmd = NULL ; if ( SUCCEEDED ( CATAfrStartCommand ( \"CATEditFormulaHdr\" , pCmd ))) //\u8c03\u7528\u7cfb\u7edf\u547d\u4ee4 { cout << \"3 -1\" << endl ; } cout << \"3 -2\" << endl ; if ( pCmd != NULL ) { cout << \"4 \" << endl ; pCmd -> RequestStatusChange ( CATCommandMsgRequestSharedMode ); } cout << \"5 \" << endl ; } if ( dNum == 2 ) { cout << \"\u6309\u952e 2 \" << endl ; } if ( dNum == 3 ) { cout << \"\u6309\u952e 3 \" << endl ; } } }","title":"\u7ed9\u6307\u5b9a\u7c7b\u578b\u6dfb\u52a0\u53f3\u952e\u83dc\u5355"},{"location":"DS-CODE/CAA/%E7%BB%99%E6%8C%87%E5%AE%9A%E7%B1%BB%E5%9E%8B%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/#_1","text":"{ { _daPathElement = new CATPathElementAgent ( \"pathelt\" ); _daPathElement -> SetBehavior ( CATDlgEngWithContext | CATDlgEngRepeat ); _daPathElement -> AddElementType ( IID_CATIGSMTool ); //\u9009\u62e9\u6dfb\u52a0\u7684\u7c7b\u578b\u4f1a\u51fa\u6765\u6dfb\u52a0\u7684\u83dc\u5355\u9009\u9879 _daDialog = new CATDialogAgent ( \"dialoagent\" ); _daDialog -> SetBehavior ( CATDlgEngWithUndo | CATDlgEngWithContext ); _daDialog -> AcceptOnNotify ( NULL , \"CATContext\" ); CATDialogState * stBackGroundState = GetInitialState ( \"stBackGroundStateId\" ); stBackGroundState -> AddDialogAgent ( _daPathElement ); stBackGroundState -> AddDialogAgent ( _daDialog ); CATDialogTransition * pCntxMenuTransition = AddTransition ( stBackGroundState , stBackGroundState , IsOutputSetCondition ( _daDialog ), Action (( ActionMethod ) & CAAECreateNewFeatureCmd :: CreateCntxMenu ) ) ; } void CAAECreateNewFeatureCmd :: CreateCntxMenu () { cout << \"\u53f3\u952e + 1 \" << endl ; _daPathElement -> InitializeAcquisition (); _daDialog -> InitializeAcquisition (); CATNotification * pNotif = GetLastNotification (); if ( NULL != pNotif ) { CATDlgContextualMenu * pCntxMenu = (( CATContext * ) pNotif ) -> GetContextualMenu (); if ( NULL != pCntxMenu ) { cout << \"Add CATDlgContextualMenu \\n \" << endl ; // Default Item Title CATString StartString ( \"StartPoint\" ); CATString MediumString ( \"MediumPoint\" ); CATString EndString ( \"EndPoint\" ) ; // all these dialog objects are deleted when the contextual menu // is deleted. The command does't delete them. CATDlgSeparatorItem * Separator = new CATDlgSeparatorItem ( pCntxMenu , \"separator\" ); CATDlgPushItem * StartPoint = new CATDlgPushItem ( pCntxMenu , StartString ) ; CATDlgPushItem * MediumPoint = new CATDlgPushItem ( pCntxMenu , MediumString ) ; CATDlgPushItem * EndPoint = new CATDlgPushItem ( pCntxMenu , EndString ) ; } else { cout << \"CATDlgContextualMenu NULL \\n \" << endl ; } } else { cout << \"CATNotification NULL \\n \" << endl ; } } //////////////////////////// void CAAECreateNewFeatureCmd :: CreateCntxMenu () { CATDlgContextualMenu * pCntxMenu = new CATDlgContextualMenu ( _pNewFeatureDlg -> GetSpinner (), \"menu\" ); if ( NULL != pCntxMenu ) { cout << \"Add CATDlgContextualMenu \\n \" << endl ; // Default Item Title CATString StartString ( \"StartPoint\" ); CATString MediumString ( \"MediumPoint\" ); CATString EndString ( \"EndPoint\" ) ; // all these dialog objects are deleted when the contextual menu // is deleted. The command does't delete them. CATDlgSeparatorItem * Separator = new CATDlgSeparatorItem ( pCntxMenu , \"separator\" ); CATDlgPushItem * StartPoint = new CATDlgPushItem ( pCntxMenu , StartString ) ; CATDlgPushItem * MediumPoint = new CATDlgPushItem ( pCntxMenu , MediumString ) ; CATDlgPushItem * EndPoint = new CATDlgPushItem ( pCntxMenu , EndString ) ; AddAnalyseNotificationCB ( StartPoint , StartPoint -> GetMenuIActivateNotification (), ( CATCommandMethod ) & CAAECreateNewFeatureCmd :: Menu ,( void * ) 1 ); AddAnalyseNotificationCB ( MediumPoint , MediumPoint -> GetMenuIActivateNotification (), ( CATCommandMethod ) & CAAECreateNewFeatureCmd :: Menu ,( void * ) 2 ); AddAnalyseNotificationCB ( EndPoint , EndPoint -> GetMenuIActivateNotification (), ( CATCommandMethod ) & CAAECreateNewFeatureCmd :: Menu ,( void * ) 3 ); } else { cout << \"CATDlgContextualMenu NULL \\n \" << endl ; } } void CAAECreateNewFeatureCmd :: Menu ( CATCommand * cmd , CATNotification * evt , CATCommandClientData data ) { int dNum = CATPtrToINT32 ( data ); if ( dNum == 1 ) { cout << \"\u6309\u952e 1 \" << endl ; this -> RequestStatusChange ( CATCommandMsgDesactivated ); cout << \"2 \" << endl ; CATCommand * pCmd = NULL ; if ( SUCCEEDED ( CATAfrStartCommand ( \"CATEditFormulaHdr\" , pCmd ))) //\u8c03\u7528\u7cfb\u7edf\u547d\u4ee4 { cout << \"3 -1\" << endl ; } cout << \"3 -2\" << endl ; if ( pCmd != NULL ) { cout << \"4 \" << endl ; pCmd -> RequestStatusChange ( CATCommandMsgRequestSharedMode ); } cout << \"5 \" << endl ; } if ( dNum == 2 ) { cout << \"\u6309\u952e 2 \" << endl ; } if ( dNum == 3 ) { cout << \"\u6309\u952e 3 \" << endl ; } } }","title":"\u7ed9\u6307\u5b9a\u7c7b\u578b\u6dfb\u52a0\u53f3\u952e\u83dc\u5355"},{"location":"DS-CODE/CAA/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%89%B9%E5%BE%81%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E5%8F%AF%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%8E%A5%E5%8F%A3/","text":"{ V6 { \u53ea\u6709\u62d3\u6251\u64cd\u4f5c\u624d\u9700\u8981build GeometricalElement3D Mandatory //\u5fc5\u987b\u5b9e\u73b0 CATIFmFeatureBehaviorCustomization CATIReplace CATIMf3DBehavior CATIInputDescription DS Behavior //DS \u7684\u884c\u4e3a CATIEdit CATIContextualSubMenu CATICCPable CATIMechanicalProperties Specific case //\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u51b3\u5b9a\u662f\u5426\u5b9e\u73b0 CATIIcon CATIParmPublisher CATIReplaceUI CATIReplacable GSMGeom Mandatory CATIFmFeatureBehaviorCustomization CATIInputDescription CATIMf3DBehavior (only for a volumic feature) DS Behavior CATIEdit CATICCPable Specific case CATIContextualSubMenu CATIIcon CATIParmPublisher CATIReplaceUI CATIReplacable CATINavigateObject MechanicalFormFeature Mandatory CATIFmFeatureBehaviorCustomization CATIBuildShape CATIReplace CATIShapeFeatureProperties DS Behavior CATIEdit CATIContextualSubMenu CATICCPable Specific Case CATIIcon CATIParmPublisher CATIReplaceUI CATIReplacable MechanicalContextualFeature Mandatory CATIFmFeatureBehaviorCustomization CATIReplace CATIShapeFeatureProperties DS Behavior CATIEdit CATIContextualSubMenu CATICCPable Specific Case CATIIcon CATIParmPublisher CATIReplaceUI CATIReplacable MechanicalSet Mandatory CATIFmFeatureBehaviorCustomization CATIReplace CATIEdit DS Behavior CATINavigateObject CATIContextualSubMenu CATIParmPublisher CATIVisu Specific Case CATIVisProperties CATIVisu CATISelectShow CATIReplacable MechanicalElement Mandatory CATIFmFeatureBehaviorCustomization CATIReplace CATIEdit DS Behavior CATINavigateObject CATIContextualSubMenu CATIParmPublisher Specific Case CATIVisProperties CATIVisu CATISelectShow CATIReplacable } V5 { GeometricalElement3D \u25e6Mandatory \u25feCATIBuild \u25feCATIReplace \u25feCATIMf3DBehavior \u25feCATIMf3DBehavior2 (only for a volumic feature) \u25feCATIInputDescription \u25e6DS Behavior \u25feCATIEdit \u25feCATIContextualSubMenu \u25feCATICCPable \u25feCATIMechanicalProperties \u25e6Specific case \u25feCATIIcon \u25feCATIParmPublisher \u25feCATIReplaceUI \u25feCATIReplacable \u25feCATIMechanicalCCP \u2022GSMGeom \u25e6Mandatory \u25feCATIBuild \u25feCATIAttrBehavior \u25feCATIInputDescription \u25feCATIMf3DBehavior2 (only for a volumic feature) \u25e6DS Behavior \u25feCATIEdit \u25feCATICCPable \u25e6Specific case \u25feCATIContextualSubMenu \u25feCATIIcon \u25feCATIParmPublisher \u25feCATIReplaceUI \u25feCATIReplacable \u25feCATINavigateObject \u2022MechanicaFormFeature \u25e6Mandatory \u25feCATIBuild \u25feCATIBuildShape \u25feCATIReplace \u25feCATIShapeFeatureProperties \u25e6DS Behavior \u25feCATIEdit \u25feCATIContextualSubMenu \u25feCATICCPable \u25e6Specific Case \u25feCATIIcon \u25feCATIParmPublisher \u25feCATIReplaceUI \u25feCATIReplacable \u25fe CATIMechanicalCCP \u2022MechanicalContextualFeature \u25e6Mandatory \u25feCATIBuild \u25feCATIReplace \u25feCATIShapeFeatureProperties \u25e6DS Behavior \u25feCATIEdit \u25feCATIContextualSubMenu \u25feCATICCPable \u25e6Specific Case \u25feCATIIcon \u25feCATIParmPublisher \u25feCATIReplaceUI \u25feCATIReplacable \u25fe CATIMechanicalCCP \u2022MechanicalSet \u25e6Mandatory \u25e6DS Behavior \u25feCATINavigateObject \u25feCATIContextualSubMenu \u25feCATIParmPublisher \u25feCATIMechanicalCCP \u25feCATIEdit \u25e6Specific Case \u25feCATIVisProperties \u25feInterface deriving from CATIVisu \u25feCATISelectShow \u25feCATIReplacable \u25feCATIBuild \u25feCATIReplace \u2022MechanicalElement \u25e6Mandatory \u25feCATIBuild \u25feCATIReplace \u25e6DS Behavior \u25feCATINavigateObject \u25feCATIContextualSubMenu \u25feCATIParmPublisher \u25feCATIMechanicalCCP \u25feCATIEdit \u25e6Specific Case \u25feCATIVisProperties \u25feInterface deriving from CATIVisu \u25feCATISelectShow \u25feCATIReplacable } }","title":"\u81ea\u5b9a\u4e49\u7279\u5f81\u4e0d\u540c\u7c7b\u578b\u53ef\u5b9e\u73b0\u7684\u63a5\u53e3"},{"location":"DS-CODE/CAA/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%89%B9%E5%BE%81%E5%AE%9E%E7%8E%B0CATINavigateObject%E5%90%8E%E5%A6%82%E4%BD%95%E7%BB%A7%E7%BB%AD%E6%B7%BB%E5%8A%A0%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E7%9A%84%E7%89%B9%E5%BE%81/","text":"\u81ea\u5b9a\u4e49\u7279\u5f81\u5b9e\u73b0CATINavigateObject\u540e\u5982\u4f55\u7ee7\u7eed\u6dfb\u52a0\u590d\u5236\u7c98\u8d34\u7684\u7279\u5f81 CATLISTV ( CATBaseUnknown_var ) * CATEArcSlabSetFeatureNavigateObject :: GetChildren () { cout << \"CATEArcSlabSetFeatureNavigateObject::GetChildren()\" << endl ; CATLISTV ( CATBaseUnknown_var ) * Children = NULL ; //Show components Children = new CATListValCATBaseUnknown_var (); CATIArcSlabSetFeature_var spiSlab = this ; if ( spiSlab != NULL_var ) { CATISpecObject_var spiObj = NULL_var ; if ( SUCCEEDED ( spiSlab -> GetArcSlabSpecifications ( spiObj ))) { Children -> Append ( spiObj ); } } CATIDescendants_var spiDescendants = this ; if ( spiDescendants != NULL_var ) { CATListValCATISpecObject_var spA ; spiDescendants -> GetDirectChildren ( CATBaseUnknown :: ClassName (), spA ); for ( int i = 1 ; i <= spA . Size (); i ++ ) { CATIAlias_var spiAlias = spA [ i ]; cout << \"XXAA : \" << spiAlias -> GetAlias () << endl ; Children -> Append ( spiAlias ); } } return Children ; }","title":"\u81ea\u5b9a\u4e49\u7279\u5f81\u5b9e\u73b0CATINavigateObject\u540e\u5982\u4f55\u7ee7\u7eed\u6dfb\u52a0\u590d\u5236\u7c98\u8d34\u7684\u7279\u5f81"},{"location":"DS-CODE/CAA/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%89%B9%E5%BE%81%E5%AE%9E%E7%8E%B0CATINavigateObject%E5%90%8E%E5%A6%82%E4%BD%95%E7%BB%A7%E7%BB%AD%E6%B7%BB%E5%8A%A0%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E7%9A%84%E7%89%B9%E5%BE%81/#catinavigateobject","text":"CATLISTV ( CATBaseUnknown_var ) * CATEArcSlabSetFeatureNavigateObject :: GetChildren () { cout << \"CATEArcSlabSetFeatureNavigateObject::GetChildren()\" << endl ; CATLISTV ( CATBaseUnknown_var ) * Children = NULL ; //Show components Children = new CATListValCATBaseUnknown_var (); CATIArcSlabSetFeature_var spiSlab = this ; if ( spiSlab != NULL_var ) { CATISpecObject_var spiObj = NULL_var ; if ( SUCCEEDED ( spiSlab -> GetArcSlabSpecifications ( spiObj ))) { Children -> Append ( spiObj ); } } CATIDescendants_var spiDescendants = this ; if ( spiDescendants != NULL_var ) { CATListValCATISpecObject_var spA ; spiDescendants -> GetDirectChildren ( CATBaseUnknown :: ClassName (), spA ); for ( int i = 1 ; i <= spA . Size (); i ++ ) { CATIAlias_var spiAlias = spA [ i ]; cout << \"XXAA : \" << spiAlias -> GetAlias () << endl ; Children -> Append ( spiAlias ); } } return Children ; }","title":"\u81ea\u5b9a\u4e49\u7279\u5f81\u5b9e\u73b0CATINavigateObject\u540e\u5982\u4f55\u7ee7\u7eed\u6dfb\u52a0\u590d\u5236\u7c98\u8d34\u7684\u7279\u5f81"},{"location":"DS-CODE/CAA/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%89%B9%E5%BE%81%E8%8E%B7%E5%8F%96%E6%88%96%E8%AE%BE%E7%BD%AE%E6%9E%84%E9%80%A0%E6%97%A5%E5%BF%97%E7%9A%84%E4%BF%A1%E6%81%AF/","text":"\u81ea\u5b9a\u4e49\u7279\u5f81\u83b7\u53d6\u6216\u8bbe\u7f6e\u6784\u9020\u65e5\u5fd7\u7684\u4fe1\u606f int CATEArcSlabFeatureBuildShape::TopDumpJournal ( CATCGMJournalList * iJournal ) { cout << \"TopDumpJournal()\" << endl ; if ( NULL == iJournal ) return 1 ; int rc = 0 ; CATLONG32 np = 10000 ; CATCGMJournal * Next = NULL ; while ( Next = iJournal -> Next ( Next )) { CATCGMJournalItem * pJournalItem = Next -> CastToReportItem (); if ( NULL == pJournalItem ) { cout << \"You must tass the journal\" << endl ; return ( 1 ); } CATLISTP ( CATGeometry ) parentList ; pJournalItem -> GetFirstObjs ( parentList ); int numberParentList = parentList . Size (); // // If no parents - that is \"[ ] -> Creation [xx]\" for example // if ( numberParentList == 0 ) { cout << \"[ ]\" ; } // // If several parents \"[ Edge 1, Vertex 2] -> Modification [xx,yy]\" for example // for ( int i = 1 ; i <= numberParentList ; i ++ ) { cout << \"[\" ; char * str1 = \" \" ; if (( parentList )[ i ] -> IsATypeOf ( CATFaceType )) { str1 = \"Face_\" ; } else if (( parentList )[ i ] -> IsATypeOf ( CATEdgeType )) { str1 = \"Edge_\" ; } else if (( parentList )[ i ] -> IsATypeOf ( CATVertexType )) { str1 = \"Vertex_\" ; } else { str1 = \"UnauthorizedType_\" ; } cout << str1 ; CATULONG32 persTag = ( parentList )[ i ] -> GetPersistentTag (); cout << persTag ; cout << \"]\" ; if ( i < numberParentList ) cout << \",\" ; } // // Print the type // CATCGMJournal :: Type CGMEventType = pJournalItem -> GetType (); switch ( CGMEventType ) { case CATCGMJournal :: Creation : { cout << \"->Creation\" ; break ; } case CATCGMJournal :: Modification : { cout << \"->Modification\" ; break ; } case CATCGMJournal :: Subdivision : { cout << \"->Subdivision\" ; break ; } case CATCGMJournal :: Absorption : { cout << \"->Absorption\" ; break ; } case CATCGMJournal :: Deletion : { cout << \"->Deletion\" ; break ; } case CATCGMJournal :: Keep : { cout << \"->Keep\" ; break ; } } // // Print the children // CATLISTP ( CATGeometry ) childrenList ; pJournalItem -> GetLastObjs ( childrenList ); int numberChildrenList = childrenList . Size (); for ( i = 1 ; i <= numberChildrenList ; i ++ ) { cout << \"[\" ; char * str1 = \" \" ; if (( childrenList )[ i ] -> IsATypeOf ( CATFaceType )) { str1 = \"Face_\" ; } else if (( childrenList )[ i ] -> IsATypeOf ( CATEdgeType )) { str1 = \"Edge_\" ; } else if (( childrenList )[ i ] -> IsATypeOf ( CATVertexType )) { str1 = \"Vertex_\" ; } else { str1 = \"UnauthorizedType_\" ; } cout << str1 ; CATULONG32 persTag = ( childrenList )[ i ] -> GetPersistentTag (); cout << persTag ; cout << \"]\" ; if ( i < numberChildrenList ) cout << \",\" ; } // Print the infos if any // CATCGMJournalInfo * pInfo = new CATCGMJournalInfo ( np ); pJournalItem -> SetAssociatedInfo ( pInfo ); np += 100 ; const CATCGMJournalInfo * journalInfo = pJournalItem -> GetAssociatedInfo (); if ( journalInfo ) { CATLONG32 infoNumber = journalInfo -> GetNumber (); cout << \" Info = \" << infoNumber ; } cout << endl ; } return rc ; }","title":"\u81ea\u5b9a\u4e49\u7279\u5f81\u83b7\u53d6\u6216\u8bbe\u7f6e\u6784\u9020\u65e5\u5fd7\u7684\u4fe1\u606f"},{"location":"DS-CODE/CAA/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%89%B9%E5%BE%81%E8%8E%B7%E5%8F%96%E6%88%96%E8%AE%BE%E7%BD%AE%E6%9E%84%E9%80%A0%E6%97%A5%E5%BF%97%E7%9A%84%E4%BF%A1%E6%81%AF/#_1","text":"int CATEArcSlabFeatureBuildShape::TopDumpJournal ( CATCGMJournalList * iJournal ) { cout << \"TopDumpJournal()\" << endl ; if ( NULL == iJournal ) return 1 ; int rc = 0 ; CATLONG32 np = 10000 ; CATCGMJournal * Next = NULL ; while ( Next = iJournal -> Next ( Next )) { CATCGMJournalItem * pJournalItem = Next -> CastToReportItem (); if ( NULL == pJournalItem ) { cout << \"You must tass the journal\" << endl ; return ( 1 ); } CATLISTP ( CATGeometry ) parentList ; pJournalItem -> GetFirstObjs ( parentList ); int numberParentList = parentList . Size (); // // If no parents - that is \"[ ] -> Creation [xx]\" for example // if ( numberParentList == 0 ) { cout << \"[ ]\" ; } // // If several parents \"[ Edge 1, Vertex 2] -> Modification [xx,yy]\" for example // for ( int i = 1 ; i <= numberParentList ; i ++ ) { cout << \"[\" ; char * str1 = \" \" ; if (( parentList )[ i ] -> IsATypeOf ( CATFaceType )) { str1 = \"Face_\" ; } else if (( parentList )[ i ] -> IsATypeOf ( CATEdgeType )) { str1 = \"Edge_\" ; } else if (( parentList )[ i ] -> IsATypeOf ( CATVertexType )) { str1 = \"Vertex_\" ; } else { str1 = \"UnauthorizedType_\" ; } cout << str1 ; CATULONG32 persTag = ( parentList )[ i ] -> GetPersistentTag (); cout << persTag ; cout << \"]\" ; if ( i < numberParentList ) cout << \",\" ; } // // Print the type // CATCGMJournal :: Type CGMEventType = pJournalItem -> GetType (); switch ( CGMEventType ) { case CATCGMJournal :: Creation : { cout << \"->Creation\" ; break ; } case CATCGMJournal :: Modification : { cout << \"->Modification\" ; break ; } case CATCGMJournal :: Subdivision : { cout << \"->Subdivision\" ; break ; } case CATCGMJournal :: Absorption : { cout << \"->Absorption\" ; break ; } case CATCGMJournal :: Deletion : { cout << \"->Deletion\" ; break ; } case CATCGMJournal :: Keep : { cout << \"->Keep\" ; break ; } } // // Print the children // CATLISTP ( CATGeometry ) childrenList ; pJournalItem -> GetLastObjs ( childrenList ); int numberChildrenList = childrenList . Size (); for ( i = 1 ; i <= numberChildrenList ; i ++ ) { cout << \"[\" ; char * str1 = \" \" ; if (( childrenList )[ i ] -> IsATypeOf ( CATFaceType )) { str1 = \"Face_\" ; } else if (( childrenList )[ i ] -> IsATypeOf ( CATEdgeType )) { str1 = \"Edge_\" ; } else if (( childrenList )[ i ] -> IsATypeOf ( CATVertexType )) { str1 = \"Vertex_\" ; } else { str1 = \"UnauthorizedType_\" ; } cout << str1 ; CATULONG32 persTag = ( childrenList )[ i ] -> GetPersistentTag (); cout << persTag ; cout << \"]\" ; if ( i < numberChildrenList ) cout << \",\" ; } // Print the infos if any // CATCGMJournalInfo * pInfo = new CATCGMJournalInfo ( np ); pJournalItem -> SetAssociatedInfo ( pInfo ); np += 100 ; const CATCGMJournalInfo * journalInfo = pJournalItem -> GetAssociatedInfo (); if ( journalInfo ) { CATLONG32 infoNumber = journalInfo -> GetNumber (); cout << \" Info = \" << infoNumber ; } cout << endl ; } return rc ; }","title":"\u81ea\u5b9a\u4e49\u7279\u5f81\u83b7\u53d6\u6216\u8bbe\u7f6e\u6784\u9020\u65e5\u5fd7\u7684\u4fe1\u606f"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96VS%E8%AE%BE%E7%BD%AE%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/","text":"\u53d8\u91cf\u540d\u79f0\u4e3a\uff1aLanguage \u503c\u4e3a\uff1aChinese char* sp = NULL; CATLibStatus p = ::CATGetEnvValue(\"Language\",&sp); if (p == CATLibSuccess) { cout << \"aaaaaaa\" <<sp<< endl; } cout << \"=== : \" << ::CATGetEnv(\"CATTemp\") << endl; cout << \"=== : \" << ::CATGetEnv(\"PATH\") << endl; cout << \"=== : \" << ::CATGetEnv(\"CATReport\") << endl; cout << \"=== : \" << ::CATGetEnv(\"CLASSPATH\") << endl;","title":"\u83b7\u53d6VS\u8bbe\u7f6e\u7684\u73af\u5883\u53d8\u91cf"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96cell%E7%9A%84%E5%86%85%E9%83%A8%E8%BD%AE%E5%BB%93%28%E7%8E%AF%29/","text":"\u5f97\u5230Cell(\u9762),Cell->GetNbDomains\u5f97\u5230\u73af\u7684\u6570\u91cf,==1 \u8bf4\u660e\u8be5\u9762\u53ea\u5b58\u5728\u4e00\u4e2a\u5916\u8f6e\u5ed3,\u65e0\u5185\u73af Cell->GetDomain(i);(i <= Cell->GetNbDomains),1\u4e3a\u5916\u73af(\u5916\u8f6e\u5ed3)","title":"\u83b7\u53d6cell\u7684\u5185\u90e8\u8f6e\u5ed3(\u73af)"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%8D%95%E4%BD%8D/","text":"\u83b7\u53d6\u53c2\u6570\u5355\u4f4d CATICkeParm_var spParm = ( * spList )[ n ]; if ( spParm != NULL_var ) { CATICkeMagnitude_var spCkeMagnitude = spParm -> Type (); if ( spCkeMagnitude != NULL_var ) { ParamData mParamData ; mParamData . sUnit = spCkeMagnitude -> CurrentUnit () -> Symbol (); } }","title":"\u83b7\u53d6\u53c2\u6570\u5355\u4f4d"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%8D%95%E4%BD%8D/#_1","text":"CATICkeParm_var spParm = ( * spList )[ n ]; if ( spParm != NULL_var ) { CATICkeMagnitude_var spCkeMagnitude = spParm -> Type (); if ( spCkeMagnitude != NULL_var ) { ParamData mParamData ; mParamData . sUnit = spCkeMagnitude -> CurrentUnit () -> Symbol (); } }","title":"\u83b7\u53d6\u53c2\u6570\u5355\u4f4d"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E5%AD%90%E5%AF%B9%E8%B1%A1GetChildren%28%29/","text":"case CATINavigateObject_var spiNavObj = ispSet ; CATICkeParameterSet_var spiCkeParamSet = NULL_var ; CATListValCATBaseUnknown_var * pChildrenListV = spiNavObj -> GetChildren (); cout << \"Children Size = \" << pChildrenListV -> Size () << endl ; if ( pChildrenListV -> Size () > 0 ) { for ( int i = 1 ; i <= pChildrenListV -> Size (); i ++ ) { spiAlias = ( * pChildrenListV )[ i ]; } }","title":"\u83b7\u53d6\u5b50\u5bf9\u8c61GetChildren()"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E5%AD%90%E5%AF%B9%E8%B1%A1GetChildren%28%29/#case","text":"CATINavigateObject_var spiNavObj = ispSet ; CATICkeParameterSet_var spiCkeParamSet = NULL_var ; CATListValCATBaseUnknown_var * pChildrenListV = spiNavObj -> GetChildren (); cout << \"Children Size = \" << pChildrenListV -> Size () << endl ; if ( pChildrenListV -> Size () > 0 ) { for ( int i = 1 ; i <= pChildrenListV -> Size (); i ++ ) { spiAlias = ( * pChildrenListV )[ i ]; } }","title":"case"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E6%BF%80%E6%B4%BB%E7%9A%84%E5%8F%82%E6%95%B0%E9%9B%86/","text":"\u83b7\u53d6\u6fc0\u6d3b\u7684\u53c2\u6570\u96c6 { CATIParmPublisher* piParmPublisherOnMechPart = NULL; hr = spMechFeatOnPart->QueryInterface(IID_CATIParmPublisher, (void**)&piParmPublisherOnMechPart); if (FAILED(hr))return 1; CATIKweModelServices_var spKweModelServices = CATCkeGlobalFunctions::GetModelServices(); if ( spKweModelServices == NULL_var ) return 1; // Retrieve the set of knowledge parameter CATICkeParameterSet_var spParmSet= spKweModelServices->GetCurrentSet(CATIKweModelServices::Parameter,piParmPublisherOnMechPart); piParmPublisherOnMechPart->Release(); piParmPublisherOnMechPart = NULL; }","title":"\u83b7\u53d6\u6fc0\u6d3b\u7684\u53c2\u6570\u96c6"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E6%BF%80%E6%B4%BB%E7%9A%84%E5%8F%82%E6%95%B0%E9%9B%86/#_1","text":"{ CATIParmPublisher* piParmPublisherOnMechPart = NULL; hr = spMechFeatOnPart->QueryInterface(IID_CATIParmPublisher, (void**)&piParmPublisherOnMechPart); if (FAILED(hr))return 1; CATIKweModelServices_var spKweModelServices = CATCkeGlobalFunctions::GetModelServices(); if ( spKweModelServices == NULL_var ) return 1; // Retrieve the set of knowledge parameter CATICkeParameterSet_var spParmSet= spKweModelServices->GetCurrentSet(CATIKweModelServices::Parameter,piParmPublisherOnMechPart); piParmPublisherOnMechPart->Release(); piParmPublisherOnMechPart = NULL; }","title":"\u83b7\u53d6\u6fc0\u6d3b\u7684\u53c2\u6570\u96c6"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%89%B9%E5%BE%81%E7%B1%BB%E5%9E%8BGetType/","text":"\u83b7\u53d6\u7279\u5f81\u7c7b\u578bGetType CATICkeFeature_var spiCkeFeature = spFeature ; if ( spiCkeFeature != NULL_var ) { if ( spiCkeFeature -> GetType () -> Name () == \"AdvisorRelationSet\" ) { bBool = TRUE ; } }","title":"\u83b7\u53d6\u7279\u5f81\u7c7b\u578bGetType"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%89%B9%E5%BE%81%E7%B1%BB%E5%9E%8BGetType/#gettype","text":"CATICkeFeature_var spiCkeFeature = spFeature ; if ( spiCkeFeature != NULL_var ) { if ( spiCkeFeature -> GetType () -> Name () == \"AdvisorRelationSet\" ) { bBool = TRUE ; } }","title":"\u83b7\u53d6\u7279\u5f81\u7c7b\u578bGetType"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%9A%84EXE%E6%89%80%E5%9C%A8%E7%9A%84%E8%B7%AF%E5%BE%84/","text":"\u83b7\u53d6\u7a0b\u5e8f\u6267\u884c\u7684EXE\u6240\u5728\u7684\u8def\u5f84 CATUnicodeString CATAECFeatureCmd::GetThisExePath () { wchar_t exePath [ MAX_PATH ]; GetModuleFileName ( NULL , exePath , MAX_PATH ); string arrStr ; Wchar_tToString ( arrStr , exePath ); arrStr = arrStr . substr ( 0 , arrStr . rfind ( \" \\\\ \" )); arrStr = arrStr . substr ( 0 , arrStr . rfind ( \" \\\\ \" )); arrStr = arrStr . substr ( 0 , arrStr . rfind ( \" \\\\ \" )); CATUnicodeString pStr ( arrStr . c_str ()); return pStr ; } void CATAECFeatureCmd::Wchar_tToString ( string & szDst , wchar_t * wchar ) { wchar_t * wText = wchar ; DWORD dwNum = WideCharToMultiByte ( CP_OEMCP , NULL , wText , -1 , NULL , 0 , NULL , FALSE ); char * psText ; psText = new char [ dwNum ]; WideCharToMultiByte ( CP_OEMCP , NULL , wText , -1 , psText , dwNum , NULL , FALSE ); szDst = psText ; delete [] psText ; } char * CATAECBDGEnvCmd::UnicodeToUtf8 ( const wchar_t * unicode ) { int len ; len = WideCharToMultiByte ( CP_UTF8 , 0 , unicode , -1 , NULL , 0 , NULL , NULL ); char * szUtf8 = ( char * ) malloc ( len + 1 ); memset ( szUtf8 , 0 , len + 1 ); WideCharToMultiByte ( CP_UTF8 , 0 , unicode , -1 , szUtf8 , len , NULL , NULL ); delete [] unicode ; unicode = NULL ; return szUtf8 ; } //\u8c03\u7528exe\u6587\u4ef6 ShellExecute ( 0 ,( LPCWSTR ) L \"open\" ,( LPCWSTR ) L \"D: \\\\ Bin_x64 \\\\ SuperMapDemo.exe\" ,( LPCWSTR ) L \"\" ,( LPCWSTR ) L \"\" , SW_SHOWNORMAL ); SHELLEXECUTEINFO ShellInfo ; memset ( & ShellInfo , 0 , sizeof ( ShellInfo )); ShellInfo . cbSize = sizeof ( ShellInfo ); ShellInfo . hwnd = NULL ; ShellInfo . lpVerb = _T ( \"open\" ); //ShellInfo.lpFile=_T(\"..\\\\..\\\\..\\\\SuperMapDemo\\\\SuperMapDemo.exe\"); ShellInfo . lpFile = _T ( \"E: \\\\ supermap \\\\ Bin_x64 \\\\ SuperMapDemo.exe\" ); ShellInfo . lpParameters = name ; ShellInfo . nShow = SW_HIDE ; //SW_SHOWNORMAL ShellInfo . fMask = SEE_MASK_NOCLOSEPROCESS ; BOOL bResult = ShellExecuteEx ( & ShellInfo ); if ( ! bResult ) { return false ; } \u884c\u53f7 \u53c2\u6570 \u542b\u4e49 1 SW_HIDE \u9690\u85cf\u8fd9\u4e2a\u7a97\u4f53\uff0c\u5e76\u6fc0\u6d3b\u5176\u4ed6\u7a97\u4f53\u3002 2 SW_MAXIMIZE \u6700\u5927\u5316\u6307\u5b9a\u7684\u7a97\u4f53\u3002 3 SW_MINIMIZE \u6700\u5c0f\u5316\u6307\u5b9a\u7684\u7a97\u4f53\uff0c\u5e76\u6309\u987a\u5e8f\u6fc0\u6d3b\u6700\u4e0a\u5c42\u7684\u7a97\u4f53\u3002 4 SW_RESTORE \u6fc0\u6d3b\u5e76\u663e\u793a\u7a97\u4f53\u3002\u5982\u679c\u7a97\u4f53\u4e3a\u6700\u5c0f\u5316\u6216\u8005\u6700\u5927\u5316\uff0c\u7a97\u4f53\u6062\u590d\u5230\u539f\u59cb\u5927\u5c0f\u548c\u4f4d\u7f6e\u3002\u5e94\u7528\u7a0b\u5e8f\u5f53\u6062\u590d\u4e00\u4e2a\u6700\u5c0f\u5316\u7684\u7a97\u4f53\u65f6\u5c06\u6307\u5b9a\u6807\u8bb0\u3002 5 SW_SHOW \u4ee5\u5f53\u524d\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u6fc0\u6d3b\u5e76\u663e\u793a\u7a97\u4f53\u3002 6 SW_SHOWDEFAULT 7 SW_SHOWMAXIMIZED \u6fc0\u6d3b\u5e76\u6700\u5927\u5316\u663e\u793a\u7a97\u4f53\u3002 8 SW_SHOWMINIMIZED \u6fc0\u6d3b\u5e76\u6700\u5c0f\u5316\u73b0\u5b9e\u7a97\u4f53\u3002 9 SW_SHOWMINNOACTIVE \u6700\u5c0f\u5316\u7a97\u4f53\uff0c\u4fdd\u6301\u5176\u6fc0\u6d3b\u72b6\u6001\u3002 10 SW_SHOWNA \u4ee5\u5f53\u524d\u72b6\u6001\u663e\u793a\u7a97\u4f53\uff0c\u4fdd\u6301\u5176\u6fc0\u6d3b\u72b6\u6001\u3002 11 SW_SHOWNOACTIVATE \u4ee5\u5f53\u524d\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u663e\u793a\u7a97\u4f53\uff0c\u5e76\u4fdd\u6301\u5176\u6fc0\u6d3b\u72b6\u6001\u3002 12 SW_SHOWNORMAL \u6fc0\u6d3b\u5e76\u663e\u793a\u4e00\u4e2a\u7a97\u4f53\u3002\u5982\u679c\u7a97\u4f53\u4e3a\u6700\u5927\u5316\u6216\u8005\u6700\u5c0f\u5316\uff0c\u7a97\u4f53\u6062\u590d\u5230\u539f\u59cb\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u3002\u5f53\u7a97\u4f53\u7b2c\u4e00\u6b21\u663e\u793a\u7684\u65f6\u5019\uff0c\u5e94\u7528\u7a0b\u5e8f\u8bb0\u5f55\u6807\u8bb0\u3002","title":"\u83b7\u53d6\u7a0b\u5e8f\u6267\u884c\u7684EXE\u6240\u5728\u7684\u8def\u5f84"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%9A%84EXE%E6%89%80%E5%9C%A8%E7%9A%84%E8%B7%AF%E5%BE%84/#exe","text":"CATUnicodeString CATAECFeatureCmd::GetThisExePath () { wchar_t exePath [ MAX_PATH ]; GetModuleFileName ( NULL , exePath , MAX_PATH ); string arrStr ; Wchar_tToString ( arrStr , exePath ); arrStr = arrStr . substr ( 0 , arrStr . rfind ( \" \\\\ \" )); arrStr = arrStr . substr ( 0 , arrStr . rfind ( \" \\\\ \" )); arrStr = arrStr . substr ( 0 , arrStr . rfind ( \" \\\\ \" )); CATUnicodeString pStr ( arrStr . c_str ()); return pStr ; } void CATAECFeatureCmd::Wchar_tToString ( string & szDst , wchar_t * wchar ) { wchar_t * wText = wchar ; DWORD dwNum = WideCharToMultiByte ( CP_OEMCP , NULL , wText , -1 , NULL , 0 , NULL , FALSE ); char * psText ; psText = new char [ dwNum ]; WideCharToMultiByte ( CP_OEMCP , NULL , wText , -1 , psText , dwNum , NULL , FALSE ); szDst = psText ; delete [] psText ; } char * CATAECBDGEnvCmd::UnicodeToUtf8 ( const wchar_t * unicode ) { int len ; len = WideCharToMultiByte ( CP_UTF8 , 0 , unicode , -1 , NULL , 0 , NULL , NULL ); char * szUtf8 = ( char * ) malloc ( len + 1 ); memset ( szUtf8 , 0 , len + 1 ); WideCharToMultiByte ( CP_UTF8 , 0 , unicode , -1 , szUtf8 , len , NULL , NULL ); delete [] unicode ; unicode = NULL ; return szUtf8 ; } //\u8c03\u7528exe\u6587\u4ef6 ShellExecute ( 0 ,( LPCWSTR ) L \"open\" ,( LPCWSTR ) L \"D: \\\\ Bin_x64 \\\\ SuperMapDemo.exe\" ,( LPCWSTR ) L \"\" ,( LPCWSTR ) L \"\" , SW_SHOWNORMAL ); SHELLEXECUTEINFO ShellInfo ; memset ( & ShellInfo , 0 , sizeof ( ShellInfo )); ShellInfo . cbSize = sizeof ( ShellInfo ); ShellInfo . hwnd = NULL ; ShellInfo . lpVerb = _T ( \"open\" ); //ShellInfo.lpFile=_T(\"..\\\\..\\\\..\\\\SuperMapDemo\\\\SuperMapDemo.exe\"); ShellInfo . lpFile = _T ( \"E: \\\\ supermap \\\\ Bin_x64 \\\\ SuperMapDemo.exe\" ); ShellInfo . lpParameters = name ; ShellInfo . nShow = SW_HIDE ; //SW_SHOWNORMAL ShellInfo . fMask = SEE_MASK_NOCLOSEPROCESS ; BOOL bResult = ShellExecuteEx ( & ShellInfo ); if ( ! bResult ) { return false ; } \u884c\u53f7 \u53c2\u6570 \u542b\u4e49 1 SW_HIDE \u9690\u85cf\u8fd9\u4e2a\u7a97\u4f53\uff0c\u5e76\u6fc0\u6d3b\u5176\u4ed6\u7a97\u4f53\u3002 2 SW_MAXIMIZE \u6700\u5927\u5316\u6307\u5b9a\u7684\u7a97\u4f53\u3002 3 SW_MINIMIZE \u6700\u5c0f\u5316\u6307\u5b9a\u7684\u7a97\u4f53\uff0c\u5e76\u6309\u987a\u5e8f\u6fc0\u6d3b\u6700\u4e0a\u5c42\u7684\u7a97\u4f53\u3002 4 SW_RESTORE \u6fc0\u6d3b\u5e76\u663e\u793a\u7a97\u4f53\u3002\u5982\u679c\u7a97\u4f53\u4e3a\u6700\u5c0f\u5316\u6216\u8005\u6700\u5927\u5316\uff0c\u7a97\u4f53\u6062\u590d\u5230\u539f\u59cb\u5927\u5c0f\u548c\u4f4d\u7f6e\u3002\u5e94\u7528\u7a0b\u5e8f\u5f53\u6062\u590d\u4e00\u4e2a\u6700\u5c0f\u5316\u7684\u7a97\u4f53\u65f6\u5c06\u6307\u5b9a\u6807\u8bb0\u3002 5 SW_SHOW \u4ee5\u5f53\u524d\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u6fc0\u6d3b\u5e76\u663e\u793a\u7a97\u4f53\u3002 6 SW_SHOWDEFAULT 7 SW_SHOWMAXIMIZED \u6fc0\u6d3b\u5e76\u6700\u5927\u5316\u663e\u793a\u7a97\u4f53\u3002 8 SW_SHOWMINIMIZED \u6fc0\u6d3b\u5e76\u6700\u5c0f\u5316\u73b0\u5b9e\u7a97\u4f53\u3002 9 SW_SHOWMINNOACTIVE \u6700\u5c0f\u5316\u7a97\u4f53\uff0c\u4fdd\u6301\u5176\u6fc0\u6d3b\u72b6\u6001\u3002 10 SW_SHOWNA \u4ee5\u5f53\u524d\u72b6\u6001\u663e\u793a\u7a97\u4f53\uff0c\u4fdd\u6301\u5176\u6fc0\u6d3b\u72b6\u6001\u3002 11 SW_SHOWNOACTIVATE \u4ee5\u5f53\u524d\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u663e\u793a\u7a97\u4f53\uff0c\u5e76\u4fdd\u6301\u5176\u6fc0\u6d3b\u72b6\u6001\u3002 12 SW_SHOWNORMAL \u6fc0\u6d3b\u5e76\u663e\u793a\u4e00\u4e2a\u7a97\u4f53\u3002\u5982\u679c\u7a97\u4f53\u4e3a\u6700\u5927\u5316\u6216\u8005\u6700\u5c0f\u5316\uff0c\u7a97\u4f53\u6062\u590d\u5230\u539f\u59cb\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u3002\u5f53\u7a97\u4f53\u7b2c\u4e00\u6b21\u663e\u793a\u7684\u65f6\u5019\uff0c\u5e94\u7528\u7a0b\u5e8f\u8bb0\u5f55\u6807\u8bb0\u3002","title":"\u83b7\u53d6\u7a0b\u5e8f\u6267\u884c\u7684EXE\u6240\u5728\u7684\u8def\u5f84"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E7%9A%84%E5%85%AC%E5%B7%AE/","text":"case CATTolerance mTol ; double dLngTol = mTol . ResolutionForLengthTest (); cout << \"\u516c\u5dee\uff1a\" << dLngTol << endl ;","title":"\u83b7\u53d6\u7cfb\u7edf\u8bbe\u7f6e\u7684\u516c\u5dee"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E7%9A%84%E5%85%AC%E5%B7%AE/#case","text":"CATTolerance mTol ; double dLngTol = mTol . ResolutionForLengthTest (); cout << \"\u516c\u5dee\uff1a\" << dLngTol << endl ;","title":"case"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%BB%99%E5%AE%9A%E5%B9%B3%E9%9D%A2%E6%B3%95%E7%BA%BF%20%E6%88%96%20%E8%8E%B7%E5%8F%96MathPlane%20%E7%84%B6%E5%90%8EGetNormal/","text":"\u83b7\u53d6\u7ed9\u5b9a\u5e73\u9762\u6cd5\u7ebf \u6216 \u83b7\u53d6MathPlane \u7136\u540eGetNormal void GetNormalOfPlane ( CATBody_var ispBodyOfPlane , CATMathVector & oNormalVector ) { if ( NULL_var == ispBodyOfPlane ) { return ; } CATLISTP ( CATCell ) cells ; ispBodyOfPlane -> GetAllCells ( cells , 2 ); CATPlane_var spBasePlane = NULL_var ; for ( int currentCell = 1 ; currentCell <= cells . Size (); currentCell ++ ) { CATCell_var spCell ( cells [ currentCell ]); if ( NULL_var != spCell ) { CATFace_var spFace = spCell ; if ( NULL_var != spFace ) { CATSurface_var spSurface = NULL_var ; spSurface = spFace -> GetSurface (); if ( NULL_var != spSurface ) { spBasePlane = spSurface ; } } } } if ( NULL_var == spBasePlane ) { return ; } CATMathPoint iOrgin ( 0.0 , 0.0 , 0.0 ); spBasePlane -> GetNormal ( iOrgin , oNormalVector ); }","title":"\u83b7\u53d6\u7ed9\u5b9a\u5e73\u9762\u6cd5\u7ebf \u6216 \u83b7\u53d6MathPlane \u7136\u540eGetNormal"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%BB%99%E5%AE%9A%E5%B9%B3%E9%9D%A2%E6%B3%95%E7%BA%BF%20%E6%88%96%20%E8%8E%B7%E5%8F%96MathPlane%20%E7%84%B6%E5%90%8EGetNormal/#mathplane-getnormal","text":"void GetNormalOfPlane ( CATBody_var ispBodyOfPlane , CATMathVector & oNormalVector ) { if ( NULL_var == ispBodyOfPlane ) { return ; } CATLISTP ( CATCell ) cells ; ispBodyOfPlane -> GetAllCells ( cells , 2 ); CATPlane_var spBasePlane = NULL_var ; for ( int currentCell = 1 ; currentCell <= cells . Size (); currentCell ++ ) { CATCell_var spCell ( cells [ currentCell ]); if ( NULL_var != spCell ) { CATFace_var spFace = spCell ; if ( NULL_var != spFace ) { CATSurface_var spSurface = NULL_var ; spSurface = spFace -> GetSurface (); if ( NULL_var != spSurface ) { spBasePlane = spSurface ; } } } } if ( NULL_var == spBasePlane ) { return ; } CATMathPoint iOrgin ( 0.0 , 0.0 , 0.0 ); spBasePlane -> GetNormal ( iOrgin , oNormalVector ); }","title":"\u83b7\u53d6\u7ed9\u5b9a\u5e73\u9762\u6cd5\u7ebf \u6216 \u83b7\u53d6MathPlane \u7136\u540eGetNormal"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E8%8A%82%E7%82%B9%E5%85%A8%E8%B7%AF%E5%BE%84/","text":"CATPathElement CATPathElement \u5982\u679c\u662fAgent\u9009\u53d6\u7684\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6 \u6216\u8005\u901a\u8fc7HSO\u83b7\u53d6\u9ad8\u4eae\u8282\u70b9 CATPathElement * pPathElement = ( CATPathElement * )( * _HSO )[ i ]; \u5982\u679c\u662f\u5355\u4e2a\u8282\u70b9\u5e94\u8be5\u53ef\u4ee5 CATFrmEditor * pEditor = CATFrmEditor :: GetCurrentEditor (); CATPathElement pContext = pEditor -> GetUIActiveObject (); //Get UI Active Object CATIBuildPath * piBuildPath = NULL ; ispHighlight -> QueryInterface ( IID_CATIBuildPath , ( void ** ) & piBuildPath ); if ( piBuildPath != NULL ) { CATPathElement * pPathElement = NULL ; rc = piBuildPath -> ExtractPathElement ( & pContext , & pPathElement ); }","title":"\u83b7\u53d6\u8282\u70b9\u5168\u8def\u5f84"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E8%8A%82%E7%82%B9%E5%85%A8%E8%B7%AF%E5%BE%84/#catpathelement","text":"CATPathElement \u5982\u679c\u662fAgent\u9009\u53d6\u7684\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6 \u6216\u8005\u901a\u8fc7HSO\u83b7\u53d6\u9ad8\u4eae\u8282\u70b9 CATPathElement * pPathElement = ( CATPathElement * )( * _HSO )[ i ]; \u5982\u679c\u662f\u5355\u4e2a\u8282\u70b9\u5e94\u8be5\u53ef\u4ee5 CATFrmEditor * pEditor = CATFrmEditor :: GetCurrentEditor (); CATPathElement pContext = pEditor -> GetUIActiveObject (); //Get UI Active Object CATIBuildPath * piBuildPath = NULL ; ispHighlight -> QueryInterface ( IID_CATIBuildPath , ( void ** ) & piBuildPath ); if ( piBuildPath != NULL ) { CATPathElement * pPathElement = NULL ; rc = piBuildPath -> ExtractPathElement ( & pContext , & pPathElement ); }","title":"CATPathElement"},{"location":"DS-CODE/CAA/%E8%AE%BE%E7%BD%AE%E7%BA%BF%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%95%9C%E5%83%8F%E8%8C%83%E5%9B%B4%E5%B1%9E%E6%80%A7/","text":"SetSymmetricalExtension();//\u8bbe\u7f6e\u955c\u50cf\u8303\u56f4","title":"\u8bbe\u7f6e\u7ebf\u5bf9\u8c61\u7684\u955c\u50cf\u8303\u56f4\u5c5e\u6027"},{"location":"DS-CODE/CAA/%E9%80%89%E5%8F%96%E6%93%8D%E4%BD%9C%E7%9A%84%E7%BB%B4%E5%BA%A6/","text":"CATIMfZeroDimResult 0 ; CATIMfMonoDimResult 1 ; CATIMfBiDimResult 2 ; CATIMfTriDimResult 3 ; CATIMfInfiniteResult X ; eg : _pContourAgent = new CATPathElementAgent ( \"All\" , CATIMfMonoDimResult :: ClassName (), CATDlgEngWithCSO | CATDlgEngRepeat | CATDlgEngWithPrevaluation ); AddCSOClient ( _pContourAgent );","title":"\u9009\u53d6\u64cd\u4f5c\u7684\u7ef4\u5ea6"},{"location":"DS-CODE/CAA/%E9%80%9A%E8%BF%87%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E6%8E%A7%E5%88%B6%E6%8E%A7%E4%BB%B6/","text":"_MultiList1 = new CATDlgMultiList ( this , ( const char * ) \"MultiList1\" , 0 ); CATUnicodeString MultiList001Titles [ 2 ]; MultiList001Titles [ 0 ] = CATMsgCatalog :: BuildMessage ( \"CAAPartCenteredDlg\" , \"MultiList1.ColumnTitle1\" ); //CATNls\u6587\u4ef6 MultiList001Titles [ 1 ] = CATMsgCatalog :: BuildMessage ( \"CAAPartCenteredDlg\" , \"MultiList1.ColumnTitle2\" ); _MultiList1 -> SetColumnTitles ( 2 , MultiList001Titles ); _MultiList1 -> SetVisibleColumnCount ( 2 ); _MultiList1 -> SetGridConstraints ( 1 , 0 , 1 , 1 , 0 | CATGRID_LEFT | CATGRID_RIGHT | CATGRID_TOP | CATGRID_BOTTOM );","title":"\u901a\u8fc7\u8d44\u6e90\u6587\u4ef6\u63a7\u5236\u63a7\u4ef6"},{"location":"DS-CODE/CAA/%E9%81%8D%E5%8E%86NODE%E7%9A%84%E6%96%B9%E6%B3%95/","text":"\u904d\u5386NODE\u7684\u65b9\u6cd5 { CATFrmLayout * pLayout = CATFrmLayout :: GetCurrentLayout (); if ( NULL != pLayout ) { CATFrmWindow * pCurrentWindow = pLayout -> GetCurrentWindow (); if ( NULL != pCurrentWindow ) { if ( 1 == pCurrentWindow -> IsAKindOf ( \"CATFrmNavigGraphicWindow\" )) { CATFrmNavigGraphicWindow * pFrmNavigGraphicWindow = ( CATFrmNavigGraphicWindow * ) pCurrentWindow ; CATNavigBox * pNavigBox = NULL ; pNavigBox = pFrmNavigGraphicWindow -> GetNavigBox (); if ( NULL != pNavigBox ) { CATListValCATBaseUnknown_var * pRoots = pNavigBox -> GetAllRoots (); int Size = pRoots -> Size (); for ( int k = 1 ; k <= Size ; k ++ ) { CATINavigateObject_var spNavObj = ( * pRoots )[ k ]; if ( spNavObj != NULL_var ) { CATListValCATBaseUnknown_var * spList = spNavObj -> GetChildren (); int NavObjSize = spList -> Size (); cout << \" NavObjSize = \" << NavObjSize << endl ; for ( int n = 1 ; n <= NavObjSize ; n ++ ) { CATIProduct_var spProd = ( * spList )[ n ]; if ( spProd != NULL ) { CATUnicodeString mPartNumber1 = spProd -> GetPartNumber (); cout << mPartNumber1 << endl ; } CATINavigateObject_var spNavInner = ( * spList )[ n ]; CATListValCATIxPDMItem_var * oItemsWithError = NULL ; CATIReporter * oReporter = NULL ; CATxPDMProductServices :: SetProductInstanceActivation ( spProd , TRUE , oItemsWithError , oReporter ); if ( spNavInner != NULL_var ) { CATListValCATBaseUnknown_var * spList1 = spNavInner -> GetChildren (); if ( spList1 != NULL ) { int NavObjSize1 = spList1 -> Size (); cout << \" NavObjSize1 = \" << NavObjSize1 << endl ; for ( int n1 = 1 ; n1 <= NavObjSize1 ; n1 ++ ) { CATIProduct_var spProd1 = ( * spList1 )[ n1 ]; if ( spProd1 != NULL ) { CATUnicodeString mPartNumber2 = spProd1 -> GetPartNumber (); cout << \" \" << mPartNumber2 << endl ; } } } } } } } delete pRoots ; pRoots = NULL ; } } } } }","title":"\u904d\u5386NODE\u7684\u65b9\u6cd5"},{"location":"DS-CODE/CAA/%E9%81%8D%E5%8E%86NODE%E7%9A%84%E6%96%B9%E6%B3%95/#node","text":"{ CATFrmLayout * pLayout = CATFrmLayout :: GetCurrentLayout (); if ( NULL != pLayout ) { CATFrmWindow * pCurrentWindow = pLayout -> GetCurrentWindow (); if ( NULL != pCurrentWindow ) { if ( 1 == pCurrentWindow -> IsAKindOf ( \"CATFrmNavigGraphicWindow\" )) { CATFrmNavigGraphicWindow * pFrmNavigGraphicWindow = ( CATFrmNavigGraphicWindow * ) pCurrentWindow ; CATNavigBox * pNavigBox = NULL ; pNavigBox = pFrmNavigGraphicWindow -> GetNavigBox (); if ( NULL != pNavigBox ) { CATListValCATBaseUnknown_var * pRoots = pNavigBox -> GetAllRoots (); int Size = pRoots -> Size (); for ( int k = 1 ; k <= Size ; k ++ ) { CATINavigateObject_var spNavObj = ( * pRoots )[ k ]; if ( spNavObj != NULL_var ) { CATListValCATBaseUnknown_var * spList = spNavObj -> GetChildren (); int NavObjSize = spList -> Size (); cout << \" NavObjSize = \" << NavObjSize << endl ; for ( int n = 1 ; n <= NavObjSize ; n ++ ) { CATIProduct_var spProd = ( * spList )[ n ]; if ( spProd != NULL ) { CATUnicodeString mPartNumber1 = spProd -> GetPartNumber (); cout << mPartNumber1 << endl ; } CATINavigateObject_var spNavInner = ( * spList )[ n ]; CATListValCATIxPDMItem_var * oItemsWithError = NULL ; CATIReporter * oReporter = NULL ; CATxPDMProductServices :: SetProductInstanceActivation ( spProd , TRUE , oItemsWithError , oReporter ); if ( spNavInner != NULL_var ) { CATListValCATBaseUnknown_var * spList1 = spNavInner -> GetChildren (); if ( spList1 != NULL ) { int NavObjSize1 = spList1 -> Size (); cout << \" NavObjSize1 = \" << NavObjSize1 << endl ; for ( int n1 = 1 ; n1 <= NavObjSize1 ; n1 ++ ) { CATIProduct_var spProd1 = ( * spList1 )[ n1 ]; if ( spProd1 != NULL ) { CATUnicodeString mPartNumber2 = spProd1 -> GetPartNumber (); cout << \" \" << mPartNumber2 << endl ; } } } } } } } delete pRoots ; pRoots = NULL ; } } } } }","title":"\u904d\u5386NODE\u7684\u65b9\u6cd5"},{"location":"DS-CODE/CAA/BuildCAA/BUILD_CAA/","text":"CAA \u7f16\u8bd1 CATIA \u7248\u672c VS \u7248\u672c \u5907\u6ce8 V5R25~27 VS2012 VS \u52fe\u9009\u5168\u90e8 V5R28~29 VS2015 VS \u52fe\u9009\u5168\u90e8C++ V5R30~31 VS2017 \u53c2\u8003\u6587\u4ef6\u5939\u5185\u7684xml ,\u5b89\u88c5\u65f6\u5019\u6709\u5bfc\u5165\u914d\u7f6e\u9009\u9879 V5R32~ VS2019 \u53c2\u8003\u6587\u4ef6\u5939\u5185\u7684xml ,\u5b89\u88c5\u65f6\u5019\u6709\u5bfc\u5165\u914d\u7f6e\u9009\u9879 \u5b89\u88c5VS \u63d2\u4ef6 \"C:\\Program Files\\Dassault Systemes\\B32_RADE\\win_b64\\code\\bin\\3DSOpenNativeAppsExt2019.vsix\" cd /d D:\\010_Gitee\\CAA\\CAATest \"C:\\Program Files\\Dassault Systemes\\B29_RADE\\win_b64\\code\\command\\tck_init.bat\" tck_profile V5_6R2019_B29 mkmk -a -g -u -brief && mkrtv cd /d D:\\010_Gitee\\CAA\\CAATest \"C:\\Program Files\\Dassault Systemes\\B27_RADE\\win_b64\\code\\command\\tck_init.bat\" tck_profile V5_6R2017_B27 mkmk -a -g -u -brief && mkrtv","title":"CAA \u7f16\u8bd1"},{"location":"DS-CODE/CAA/BuildCAA/BUILD_CAA/#caa","text":"CATIA \u7248\u672c VS \u7248\u672c \u5907\u6ce8 V5R25~27 VS2012 VS \u52fe\u9009\u5168\u90e8 V5R28~29 VS2015 VS \u52fe\u9009\u5168\u90e8C++ V5R30~31 VS2017 \u53c2\u8003\u6587\u4ef6\u5939\u5185\u7684xml ,\u5b89\u88c5\u65f6\u5019\u6709\u5bfc\u5165\u914d\u7f6e\u9009\u9879 V5R32~ VS2019 \u53c2\u8003\u6587\u4ef6\u5939\u5185\u7684xml ,\u5b89\u88c5\u65f6\u5019\u6709\u5bfc\u5165\u914d\u7f6e\u9009\u9879 \u5b89\u88c5VS \u63d2\u4ef6 \"C:\\Program Files\\Dassault Systemes\\B32_RADE\\win_b64\\code\\bin\\3DSOpenNativeAppsExt2019.vsix\" cd /d D:\\010_Gitee\\CAA\\CAATest \"C:\\Program Files\\Dassault Systemes\\B29_RADE\\win_b64\\code\\command\\tck_init.bat\" tck_profile V5_6R2019_B29 mkmk -a -g -u -brief && mkrtv cd /d D:\\010_Gitee\\CAA\\CAATest \"C:\\Program Files\\Dassault Systemes\\B27_RADE\\win_b64\\code\\command\\tck_init.bat\" tck_profile V5_6R2017_B27 mkmk -a -g -u -brief && mkrtv","title":"CAA \u7f16\u8bd1"},{"location":"DS-CODE/EKL/Action%20%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9E%8B%E9%A2%9C%E8%89%B2/","text":"Action \u4fee\u6539\u6a21\u578b\u989c\u8272 EKL Action Editor : Action Coloring Argument list Name Type Keep_modi . fter ave Boolean KAdd new ... rgume t / * The action will calar instances \"right\" in green , and \"left\" in purple Let childrenList , Refl_ist , OccurenceList ( _\u00c9t ) Let rootFroduct ( VPMReference ) let roo\u00dcc , Insti ( PraductOccurrence ) let i , n ( IntEger ) / * following line retrelve Root product of be active Editor , sa it will no be necessary Yat user select ; It * / Refl_ ( \"VPMRefarence l') / * following lines are there to retreive Occurence cf frie root editor . Why is this ? because if yau Quer ' f the Productoccurence below a Reference you will get instances , and instances have na calar ate - ibute But Product\u00dcccurence \u00fca have color attribute , and b : ) retreive Yem , yau must Query Pruduct\u00dcccurence fram the Praduct\u00dcccurenca of tie root Occurencel_ rantOczOccurenceListOGetItern ( ) / * previous line finds Product\u00dcccurence cf the root * /","title":"Action \u4fee\u6539\u6a21\u578b\u989c\u8272"},{"location":"DS-CODE/EKL/Action%20%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9E%8B%E9%A2%9C%E8%89%B2/#action","text":"","title":"Action \u4fee\u6539\u6a21\u578b\u989c\u8272"},{"location":"DS-CODE/EKL/Action%20%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9E%8B%E9%A2%9C%E8%89%B2/#ekl","text":"Action Editor : Action Coloring Argument list Name Type Keep_modi . fter ave Boolean KAdd new ... rgume t / * The action will calar instances \"right\" in green , and \"left\" in purple Let childrenList , Refl_ist , OccurenceList ( _\u00c9t ) Let rootFroduct ( VPMReference ) let roo\u00dcc , Insti ( PraductOccurrence ) let i , n ( IntEger ) / * following line retrelve Root product of be active Editor , sa it will no be necessary Yat user select ; It * / Refl_ ( \"VPMRefarence l') / * following lines are there to retreive Occurence cf frie root editor . Why is this ? because if yau Quer ' f the Productoccurence below a Reference you will get instances , and instances have na calar ate - ibute But Product\u00dcccurence \u00fca have color attribute , and b : ) retreive Yem , yau must Query Pruduct\u00dcccurence fram the Praduct\u00dcccurenca of tie root Occurencel_ rantOczOccurenceListOGetItern ( ) / * previous line finds Product\u00dcccurence cf the root * /","title":"EKL"},{"location":"DS-CODE/EKL/Create%20Progress%20Bar/","text":"Action\u8fdb\u5ea6\u6761 //\u8bbe\u7f6e\u8fdb\u5ea6\u6761 let i , nbPts ( integer ) let ... CreateProgressBar ( \"ProgressBar Name\" ) i = 1 for i while i <= nbPts { ... ProgressBarSetValue ( 100 * i / nbPts ) ProgressBarSetText ( \" \uff1a\u5df2\u5b8c\u6210 \u5171\" + floor ( nbPts )) }","title":"Create Progress Bar"},{"location":"DS-CODE/EKL/Create%20Progress%20Bar/#action","text":"//\u8bbe\u7f6e\u8fdb\u5ea6\u6761 let i , nbPts ( integer ) let ... CreateProgressBar ( \"ProgressBar Name\" ) i = 1 for i while i <= nbPts { ... ProgressBarSetValue ( 100 * i / nbPts ) ProgressBarSetText ( \" \uff1a\u5df2\u5b8c\u6210 \u5171\" + floor ( nbPts )) }","title":"Action\u8fdb\u5ea6\u6761"},{"location":"DS-CODE/EKL/EKL%20Excel/","text":"Use EKL read EXCEL Let strFileName ( String ) Let oXLSheet ( DTSheetType ) Let indx ( Integer ) Let noOfRows ( Integer ) Let strColorName ( String ) Let rValue ( Real ) Let gValue ( Real ) Let bValue ( Real ) Let strRowValue ( String ) let s ( String ) strFileName = \"E:/Temp/Test/Input.xlsx\" Set oXLSheet = CreateSheet ( strFileName ) noOfRows = oXLSheet . RowsNb indx = 1 For indx while indx < noOfRow { s = oXLSheet . CellAsString ( indx , 1 ) lst . Append ( s ) }","title":"EKL Excel"},{"location":"DS-CODE/EKL/EKL%20Excel/#use-ekl-read-excel","text":"Let strFileName ( String ) Let oXLSheet ( DTSheetType ) Let indx ( Integer ) Let noOfRows ( Integer ) Let strColorName ( String ) Let rValue ( Real ) Let gValue ( Real ) Let bValue ( Real ) Let strRowValue ( String ) let s ( String ) strFileName = \"E:/Temp/Test/Input.xlsx\" Set oXLSheet = CreateSheet ( strFileName ) noOfRows = oXLSheet . RowsNb indx = 1 For indx while indx < noOfRow { s = oXLSheet . CellAsString ( indx , 1 ) lst . Append ( s ) }","title":"Use EKL read EXCEL"},{"location":"DS-CODE/EKL/EKL%20Get%20point%20coordinate/","text":"let i ( inetger ) let x , y , z ( length ) let p ( point ) let l ( list ) let dt ( SheetType ) dt = .... l = XX . Query ( \"\" , \"Point\" ) i = 1 for i While i <= l . Size () { set p = l . GetItem ( i ) x = distance ( yzpln , p ) y = distance ( xzpln , p ) z = distance ( xypln , p ) dt . SetCell ( i , 1 , x ) dt . SetCell ( i , 2 , y ) dt . SetCell ( i , 3 , z ) }","title":"EKL Get point coordinate"},{"location":"DS-CODE/EKL/EKL%20Instantiate%20template/","text":"let i ( Integer ) let myStartPoint ( Point ) let myDirection ( Line ) let myDirection02 ( Line ) let temp ( Feature ) let myList ( List ) let myGeo ( OpenBodyFeature ) i = 1 myStartPoint = `DGP_First_Tem\\Multi Output.12 (Intersect)\\StartPoint` myDirection = DGP_First_Tem \\ Direction myDirection02 = DGP_First_Tem \\ Direction02 for i while i <= 590 { temp = InstantiateTemplate ( \"Resource1\" , Output02 ) temp -> SetAttributeObject ( \"StartPoint\" , myStartPoint ) temp -> SetAttributeObject ( \"Direction\" , myDirection ) temp -> SetAttributeObject ( \"Direction02\" , myDirection02 ) temp -> SetAttributeObject ( \"MainLine\" , `Geometrical Set.1\\S_MainLine` ) temp -> SetAttributeObject ( \"CenterCurve\" , `Geometrical Set.1\\N_CenterCurve` ) EndModifyTemplate ( temp ) i = i + 1 myGeo = temp -> GetAttributeObject ( \"DGP_Tem\" ) myStartPoint = myGeo . Find ( \"Point\" , \"x.Name==\\\"StartPoint\\\"\" , True ) myDirection = myGeo . Find ( \"Line\" , \"x.Name==\\\"Direction\\\"\" , True ) myDirection02 = myGeo . Find ( \"Line\" , \"x.Name==\\\"Direction02\\\"\" , True ) myGeo . Name = \"DGP_Tem\" + ( i - 1 ) }","title":"EKL Instantiate template"},{"location":"DS-CODE/EKL/EKL%20%E8%8E%B7%E5%BE%97%E5%BD%93%E5%89%8DPart/","text":"EKL \u83b7\u5f97\u5f53\u524d\u6839\u8282\u70b9 \u83b7\u53d6\u6839\u8282\u70b9\u4e3aOccurrence let root ( ProductOccurrence ) root = GetEditorRootOccurrences ( \"ProductOccurrence\" ). GetItem ( 1 ) \u83b7\u53d6\u6839\u8282\u70b9\u4e3aVPMReference let root ( VPMReference ) root = GetEditorRoots ( \"VPMReference\" ). GetItem ( 1 ) \u83b7\u53d6\u6240\u6709occurrence\u4e0b\u7684\u5185\u5bb9 let root ( ProductOccurrence ) root = GetEditorRootOccurrences ( \"ProductOccurrence\" ). GetItem ( 1 ) let allOccurrences ( List ) let predicate = \"\" allOccurrences = root . Query ( \"ProductOccurrence\" , \"\" ) EKL \u83b7\u5f97\u5f53\u524dPart \u901a\u8fc7\u5f53\u524d\u6587\u4ef6\u7684 xyplane \u6765\u83b7\u5f97part container let rootFeat ( PartFeature ) let repRef ( VPMRepReference ) let Destination_Body ( BodyFeature ) repRef = GetPLMOwner ( ` xy \u5e73\u9762 ` ) rootFeat = repRef -> Find ( \"PartFeature\" , \"\" , TRUE ) Destination_Body = new ( \"OpenBodyFeature\" , \"ALL-BODY\" , rootFeat )","title":"EKL \u83b7\u5f97\u5f53\u524d\u6839\u8282\u70b9"},{"location":"DS-CODE/EKL/EKL%20%E8%8E%B7%E5%BE%97%E5%BD%93%E5%89%8DPart/#ekl","text":"","title":"EKL \u83b7\u5f97\u5f53\u524d\u6839\u8282\u70b9"},{"location":"DS-CODE/EKL/EKL%20%E8%8E%B7%E5%BE%97%E5%BD%93%E5%89%8DPart/#occurrence","text":"let root ( ProductOccurrence ) root = GetEditorRootOccurrences ( \"ProductOccurrence\" ). GetItem ( 1 )","title":"\u83b7\u53d6\u6839\u8282\u70b9\u4e3aOccurrence"},{"location":"DS-CODE/EKL/EKL%20%E8%8E%B7%E5%BE%97%E5%BD%93%E5%89%8DPart/#vpmreference","text":"let root ( VPMReference ) root = GetEditorRoots ( \"VPMReference\" ). GetItem ( 1 )","title":"\u83b7\u53d6\u6839\u8282\u70b9\u4e3aVPMReference"},{"location":"DS-CODE/EKL/EKL%20%E8%8E%B7%E5%BE%97%E5%BD%93%E5%89%8DPart/#occurrence_1","text":"let root ( ProductOccurrence ) root = GetEditorRootOccurrences ( \"ProductOccurrence\" ). GetItem ( 1 ) let allOccurrences ( List ) let predicate = \"\" allOccurrences = root . Query ( \"ProductOccurrence\" , \"\" )","title":"\u83b7\u53d6\u6240\u6709occurrence\u4e0b\u7684\u5185\u5bb9"},{"location":"DS-CODE/EKL/EKL%20%E8%8E%B7%E5%BE%97%E5%BD%93%E5%89%8DPart/#ekl-part","text":"\u901a\u8fc7\u5f53\u524d\u6587\u4ef6\u7684 xyplane \u6765\u83b7\u5f97part container let rootFeat ( PartFeature ) let repRef ( VPMRepReference ) let Destination_Body ( BodyFeature ) repRef = GetPLMOwner ( ` xy \u5e73\u9762 ` ) rootFeat = repRef -> Find ( \"PartFeature\" , \"\" , TRUE ) Destination_Body = new ( \"OpenBodyFeature\" , \"ALL-BODY\" , rootFeat )","title":"EKL \u83b7\u5f97\u5f53\u524dPart"},{"location":"DS-CODE/EKL/EKL%E8%AF%8D%E5%85%B8/","text":"```vb 1. String.ToReal() \u5b57\u7b26\u4e32\u8f6c\u6362\u5b9e\u6570 2. VPMReference 3. NewSK=new(\"VPMReference\",\"\u690d\u7269\",Location) \u65b0\u5efa\u7269\u7406\u4ea7\u54c1 4. let NewSK(`3DPart`) 5. NewSK=new(\"3DPart\",\"\u690d\u7269\",Location) \u65b0\u5efa\u96f6\u4ef6 6. ColumnsNb \u6574\u6570 \u6307\u793a\u8bbe\u8ba1\u8868\u7684\u5217\u6570\u3002 7. CopyMode \u6574\u6570 \u5982\u679c\u8bbe\u4e3a 1\uff0c\u5219\u6570\u636e\u4f1a\u5b58\u50a8\u5728\u6a21\u578b\u548c\u6587\u4ef6\u4e2d\u3002 \u5982\u679c\u8bbe\u4e3a 0\uff0c\u5219\u6570\u636e\u53ea\u4f1a\u5b58\u50a8\u5728\u6587\u4ef6\u4e2d\u3002 8. FilePath \u5b57\u7b26\u4e32 - 9. RowsNb \u6574\u6570 \u6307\u793a\u884c\u6570\u3002 //\u4f8b\u5982\uff1aDTSheetType.RowsNb 10. SheetCopy \u5b57\u7b26\u4e32 \u5f53 CopyMode \u8bbe\u4e3a 1\uff0c\u5219\u63cf\u8ff0\u6587\u4ef6\u5185\u5bb9\u3002 11. SheetIndex \u6574\u6570 \u6307\u793a Excel \u4e2d\u7684\u5de5\u4f5c\u8868\u6570\u3002 12. VerticalColumns \u6574\u6570 \u6307\u793a Excel \u4e2d\u7684\u5217\u662f\u7eb5\u5411\u8fd8\u662f\u6a2a\u5411\u3002 13. for i while dt->CellAsString(i,1)<>\"\" \u5f53dt\u8868\u683c\u7684\u7b2ci\u884c\u7b2c1\u5217\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u6267\u884ci++ 14. Ceil \u5411\u4e0a\u53d6\u6574 15. Floor \u5411\u4e0b\u53d6\u6574 16. Int \u53d6\u53c2\u6570\u7684\u6574\u6570\u90e8\u5206 17. plane(point(0m,0m,0m),point(1m,0m,0m),point(0m,1m,0m)) 18. Message(\"\",) Notify() 19. y1=circleCtrRadius(pt1,pl,1200mm,0,60deg,-60deg) \u5efa\u7acb\u786e\u5b9a\u89d2\u5ea6\u7684\u5706\u5f27 20. y1=corner(`\u51e0\u4f55\u4f53.2\\\u5206\u5272.1` ,`\u51e0\u4f55\u4f53.2\\\u5206\u5272.2` ,pl,1200mm,false,false,true) \u5efa\u7acb\u4e24\u66f2\u7ebf\u5706\u89d2\uff08\u4fee\u5efa\uff09 21. F(Feature/DocumentTemplate) 22. \u63a5\u5408 assemble 23. \u70b9 point 24. \u76f4\u7ebf line 25. \u66f2\u7ebf curve 26. \u5e73\u9762 plane 27. \u66f2\u9762 surface 28. \u51e0\u4f55\u4f53 BodyFeature 29. \u51e0\u4f55\u56fe\u5f62\u96c6 OpenBodyFeature 30. \u96f6\u4ef6 PartFeature 31. \u88c5\u914d ProductOccurrence/VPMReference 32. \u653e\u5c04 affinity 33. \u8fb9\u754c boundary(element : Surface) : Curve 34. \u62c6\u89e3 disassemble(Input: Body, CellsMode : Boolean) : List 35. \u63d0\u53d6 extract(cell : CATCell [,propagationType (0: G0; 1: G1; 2: G2; other or no value: no propagation): Integer]) : Wireframe 36. \u53cd\u8f6c invert(CurveOrSurfaceToInvert: Wireframe 37. ) : Wireframe 38. \u63a5\u8fd1 near(sur : Surface , near : Wireframe) : Surface 39. \u65cb\u8f6c rotate(totransform: Wireframe, axis: Line , angle : ANGLE) : Wireframe 40. \u7f29\u653e scaling(totransform : Wireframe, reference : Wireframe , ratio: Real ) : Wireframe 41. \u5bf9\u79f0 symmetry(totransform : Wireframe, invariant: Wireframe) : Wireframe 42. \u5e73\u79fb translate(totransform : Wireframe , dir : Direction , distance: LENGTH) : Wireframe 43. \u4fee\u526a trim(crv1: Curve, orientationCrv1 : Boolean , crv2: Curve , orientationCrv2: Boolean ) : Curve 44. \u5706\u89d2 corner(crv1 : Curve , crv2: Curve , support : Surface, radius : LENGTH , orientationCrv1: Boolean, orientationCrv2: Boolean , trim : Boolean) : Curve 45. \u5e73\u884c\u66f2\u7ebf curveparallel(crv: Curve , sur : Surface, offset: LENGTH [,OptionalRoundMode: Boolean ]) : Curve 46. \u70b9\u62c9\u4f38 extrude(Point , Direction , length1: LENGTH, length2: LENGTH, orientation: Boolean) : Line 47. \u76f8\u4ea4 intersect(\u5143\u7d201 , \u5143\u7d202) 48. \u6295\u5f71 project(toproject: Curve , support: Surface [,OptionalDir: Direction ]) : Curve 49. \u65cb\u8f6c revolve(Point , axis : Line , angle1 : ANGLE, angle2: ANGLE) : Circle 50. \u56db\u820d\u4e94\u5165 round 51. \u53d6\u6574 floor/int 52. \u8fdb\u4e00 ceil 53. \u8f93\u51fa\u8868\u683c\u5230\u5730\u5740 Createsheet 54. \u5206\u5272 split(tosplit: Surface , splitting : Curve, orientation : Boolean ) : Surface 55. \u6837\u6761\u7ebf spline([Point, ..]) : Curve 56. \u5750\u6807 {\u2018\u70b9.1\u2019.coord(3) } ,{ }\u91cc\u610f\u601d\u662f\u70b91\u7684Z\u5750\u6807\u503c 57. \u8868\u683c DTSheetType (\u65b0\u5efa\u8868\u683c\u7c7b\u578b) 58. for i while dt->CellAsString(i,1)<>\"\" \u5f53dt\u8868\u683c\u7684\u7b2ci\u884c\u7b2c1\u5217\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u6267\u884ci++ 59. list[i]==list.GetItm(i) 60. 61. `\u5217\u8868.1`=Part4 ->Query(\"point\",\"x.Name==\\\"pt\\\"\") \u628aPart4\u4e0b\u9762\u53eb\u505apt\u7684point\u52a0\u5165\u5230\u5217\u8868.1 62. Notify(\"between # and #\", Axis1.Name , Axis2.Name) //\u8fd0\u884c\u540e\u5c4f\u5e55\u53f3\u4e0a\u65b9\u4f1a\u663e\u793a\u901a\u77e5\u2018between Axis1.Name and Axis2.Name\u2019 63. Notify(\"iteration #, instantiation of #\",i,destinationRef.Name) //\u663e\u793a\u901a\u77e5 iteration i, instantiation of destinationRef.Name 64. ColumnsNb \u6574\u6570 \u6307\u793a\u8bbe\u8ba1\u8868\u7684\u5217\u6570\u3002 65. CopyMode \u6574\u6570 \u5982\u679c\u8bbe\u4e3a 1\uff0c\u5219\u6570\u636e\u4f1a\u5b58\u50a8\u5728\u6a21\u578b\u548c\u6587\u4ef6\u4e2d\u3002 \u5982\u679c\u8bbe\u4e3a 0\uff0c\u5219\u6570\u636e\u53ea\u4f1a\u5b58\u50a8\u5728\u6587\u4ef6\u4e2d\u3002 66. FilePath \u5b57\u7b26\u4e32 - 67. RowsNb \u6574\u6570 \u6307\u793a\u884c\u6570\u3002 //\u4f8b\u5982\uff1aDTSheetType.RowsNb 68. SheetCopy \u5b57\u7b26\u4e32 \u5f53 CopyMode \u8bbe\u4e3a 1\uff0c\u5219\u63cf\u8ff0\u6587\u4ef6\u5185\u5bb9\u3002 69. SheetIndex \u6574\u6570 \u6307\u793a Excel \u4e2d\u7684\u5de5\u4f5c\u8868\u6570\u3002 70. VerticalColumns \u6574\u6570 \u6307\u793a Excel \u4e2d\u7684\u5217\u662f\u7eb5\u5411\u8fd8\u662f\u6a2a\u5411\u3002 71. L3=L1.Subtract(L2) \u5217\u88683\u662f\u5217\u88681\u51cf\u53bb\u5217\u88682 72. \u5173\u4e8e\u663e\u793a\u6570\u8fdb\u5236 FormatNumber([Real : Real, Format : String, Accuracy : Integer]) : String a. Let R (Real) \u4e8c\u8fdb\u5236 binary b. Let S (String) \u516b\u8fdb\u5236 octal c. R = 9.589 d. S = FormatNumber(R, \u201cscientific\u201d, 2) // now S contains \u201c9.59e+000\u201d e. S = FormatNumber(R, \u201cscientific\u201d) // now S contains \u201c1e+001\u201d f. S = FormatNumber(R, \u201cdecimal\u201d, 5) // now S contains \u201c9.58900\u201d g. S = FormatNumber(R, \u201cinteger\u201d) // now S contains \u201c10\u201d 73. \u6709\u5e8f\u51e0\u4f55\u56fe\u5f62\u96c6 MMOrderedGeometricalSet 74. \u67e5\u8be2\u7c7b\u578b PrimaryType 75. isoparamcurve (SupportSurface: \u66f2\u9762, PassingPoint: \u70b9, Direction: \u76f4\u7ebf): UV\u66f2\u7ebf 76. (-1)**i \u6b63\u8d1f\u4ea4\u66ff 77. IsASortOf \u5224\u65ad\u5bf9\u8c61\u662f\u5426\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b, \u8fd4\u56de\u5e03\u5c14\u503c ``","title":"EKL\u8bcd\u5178"},{"location":"DS-CODE/EKL/Get%20Volume/","text":"Get Volume let i ( Integer ) let vol1 ( VOLUME ) let vol ( VOLUME ) let L1 ( list ) let F1 ( surface ) L1 = `\u5173\u7cfb\\\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217.1\\JJL` i = 1 for i inside L1 { F1 = L1 . GetItem ( i ) vol1 = F1 . GetAttributeObject ( \"\u52a0\u52b2\u808b\u4f53\u79ef\" ) vol = vol + vol1 } `\u4f53\u79ef` = vol","title":"Get Volume"},{"location":"DS-CODE/EKL/Get%20Volume/#get-volume","text":"let i ( Integer ) let vol1 ( VOLUME ) let vol ( VOLUME ) let L1 ( list ) let F1 ( surface ) L1 = `\u5173\u7cfb\\\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217.1\\JJL` i = 1 for i inside L1 { F1 = L1 . GetItem ( i ) vol1 = F1 . GetAttributeObject ( \"\u52a0\u52b2\u808b\u4f53\u79ef\" ) vol = vol + vol1 } `\u4f53\u79ef` = vol","title":"Get Volume"},{"location":"DS-CODE/EKL/How%20to%20know%20if%20an%20axis%20system%20is%20published%20in%20EKL/","text":"How to know if an axis system is published in EKL ? Hello @Annie LELONG \u200b\u200b\u200b\u200b\u200b\u200b\u200b, Unfortunately there is no method allowing to determine whether an element is published or not at the moment. There is one solution though, not ideal of course but at least you are not stuck. Please find a suggestion below: /* Argument: f (Feature) */ // Get the 3DShape PLM object owning the selected feature let rep ( VPMRepReference ) set rep = GetPLMOwner ( f ) // Get the parent 3DPart let ref ( VPMReference ) set ref = rep . AggregatingReference // Get the list of publications (list of strings: publication names) let lPublications ( List ) lPublications = ref . ListPublications () let p ( String ) let testF ( Feature ) let bIsPublished ( Boolean ) bIsPublished = false // Loop through the publications for p inside lPublications { // Access the element that is published with the name <p> testF = ref . Access ( p , \"Feature\" ) // Test if the element published by the name <p> is the selected one if testF == f { bIsPublished = true // if it is, exit the loop: found it! break } } Notify ( \"# is published: #\" , f . Name , bIsPublished )","title":"How to know if an axis system is published in EKL ?"},{"location":"DS-CODE/EKL/How%20to%20know%20if%20an%20axis%20system%20is%20published%20in%20EKL/#how-to-know-if-an-axis-system-is-published-in-ekl","text":"Hello @Annie LELONG \u200b\u200b\u200b\u200b\u200b\u200b\u200b, Unfortunately there is no method allowing to determine whether an element is published or not at the moment. There is one solution though, not ideal of course but at least you are not stuck. Please find a suggestion below: /* Argument: f (Feature) */ // Get the 3DShape PLM object owning the selected feature let rep ( VPMRepReference ) set rep = GetPLMOwner ( f ) // Get the parent 3DPart let ref ( VPMReference ) set ref = rep . AggregatingReference // Get the list of publications (list of strings: publication names) let lPublications ( List ) lPublications = ref . ListPublications () let p ( String ) let testF ( Feature ) let bIsPublished ( Boolean ) bIsPublished = false // Loop through the publications for p inside lPublications { // Access the element that is published with the name <p> testF = ref . Access ( p , \"Feature\" ) // Test if the element published by the name <p> is the selected one if testF == f { bIsPublished = true // if it is, exit the loop: found it! break } } Notify ( \"# is published: #\" , f . Name , bIsPublished )","title":"How to know if an axis system is published in EKL ?"},{"location":"DS-CODE/EKL/InstantiateTemplate%202/","text":"InstantiateTemplate 2 /*The following script replaces two references contained in the template by newly created ones: In this sample you instantiate an Engineering Template under the current editor root and replace some references within the template by newly created references */ let ref , ref1 , ref2 ( Feature ) let templateInstantiatedRoot ( Feature ) ref = GetEditorRoots ( \"VPMReference\" ) -> GetItem ( 1 ) let tmp ( TemplateInstance ) let lToReplace ( List ) tmp = InstantiateTemplate ( \"Template\" , ref ) lToReplace = tmp . ComponentsToReplace ref1 = lToReplace [ 1 ] ref2 = lToReplace [ 2 ] tmp -> SetReplacingComponent ( ref1 , new ( \"VPMReference\" , \"MaRef1\" , NULL )) tmp -> SetReplacingComponent ( ref2 , new ( \"VPMReference\" , \"MaRef2\" , NULL )) EndModifyTemplate ( tmp )","title":"InstantiateTemplate 2"},{"location":"DS-CODE/EKL/InstantiateTemplate%202/#instantiatetemplate-2","text":"/*The following script replaces two references contained in the template by newly created ones: In this sample you instantiate an Engineering Template under the current editor root and replace some references within the template by newly created references */ let ref , ref1 , ref2 ( Feature ) let templateInstantiatedRoot ( Feature ) ref = GetEditorRoots ( \"VPMReference\" ) -> GetItem ( 1 ) let tmp ( TemplateInstance ) let lToReplace ( List ) tmp = InstantiateTemplate ( \"Template\" , ref ) lToReplace = tmp . ComponentsToReplace ref1 = lToReplace [ 1 ] ref2 = lToReplace [ 2 ] tmp -> SetReplacingComponent ( ref1 , new ( \"VPMReference\" , \"MaRef1\" , NULL )) tmp -> SetReplacingComponent ( ref2 , new ( \"VPMReference\" , \"MaRef2\" , NULL )) EndModifyTemplate ( tmp )","title":"InstantiateTemplate 2"},{"location":"DS-CODE/EKL/KP%20Case/","text":"\u9002\u7528\u4e8eV5 \u7248\u672c\u7684\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217 let i ( Integer ) let F ( Surface ) let L ( List ) i = 1 L = SORTED_LIST_PLANES for i while i <= L -> Size () { F = L -> GetItem ( i ) /*F.SetAttributeString(\"TOWER\",\"1\") F.SetAttributeString(\"FACADE_TYPE\",\"S\") F.SetAttributeString(\"FACE\",\"A\")*/ F . SetAttributeInteger ( \"LEVEL\" , 01 ) /*F.SetAttributeInteger(\"UNIT_NUMBER\",01) F.SetAttributeString(\"SUB_TYPE\",\"G\")*/ F . SetAttributeString ( \"FLOOR_TYPE\" , \"R\" ) }","title":"KP Case"},{"location":"DS-CODE/EKL/KP%20Case/#v5","text":"let i ( Integer ) let F ( Surface ) let L ( List ) i = 1 L = SORTED_LIST_PLANES for i while i <= L -> Size () { F = L -> GetItem ( i ) /*F.SetAttributeString(\"TOWER\",\"1\") F.SetAttributeString(\"FACADE_TYPE\",\"S\") F.SetAttributeString(\"FACE\",\"A\")*/ F . SetAttributeInteger ( \"LEVEL\" , 01 ) /*F.SetAttributeInteger(\"UNIT_NUMBER\",01) F.SetAttributeString(\"SUB_TYPE\",\"G\")*/ F . SetAttributeString ( \"FLOOR_TYPE\" , \"R\" ) }","title":"\u9002\u7528\u4e8eV5 \u7248\u672c\u7684\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217"},{"location":"DS-CODE/EKL/KP%20V5/","text":"call KP let m ( Integer ) let n ( Integer ) let pipe ( Pipeudfa ) n = 1 for n while n <= `\u5173\u7cfb\\\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217.1\\curList` -> Size () { m = 1 for m while m <= 21 { pipe = CreateOrModifyTemplate ( \"Pipeudfa\" , ObodyGeo , `\u5173\u7cfb\\\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217.2\\PipeList` , m * 3 ) pipe . CURVE = `\u8d85\u524d\u5c0f\u5bfc\u7ba1\u6a21\u677f\\CURVE` pipe . CUR = `\u5173\u7cfb\\\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217.1\\curList` -> GetItem ( n ) pipe . Ratio = ( m - 1 ) * 0.05 EndModifyTemplate ( pipe ) pipe . Name = \"pipe.\" + ToString ( m ) } }","title":"KP V5"},{"location":"DS-CODE/EKL/KP%20V5/#call-kp","text":"let m ( Integer ) let n ( Integer ) let pipe ( Pipeudfa ) n = 1 for n while n <= `\u5173\u7cfb\\\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217.1\\curList` -> Size () { m = 1 for m while m <= 21 { pipe = CreateOrModifyTemplate ( \"Pipeudfa\" , ObodyGeo , `\u5173\u7cfb\\\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217.2\\PipeList` , m * 3 ) pipe . CURVE = `\u8d85\u524d\u5c0f\u5bfc\u7ba1\u6a21\u677f\\CURVE` pipe . CUR = `\u5173\u7cfb\\\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217.1\\curList` -> GetItem ( n ) pipe . Ratio = ( m - 1 ) * 0.05 EndModifyTemplate ( pipe ) pipe . Name = \"pipe.\" + ToString ( m ) } }","title":"call KP"},{"location":"DS-CODE/EKL/KP%20V6%20Case%201/","text":"let i ( integer ) ( 1 ) let p ( Point ) let p2 ( Point ) let l ( line ) let R ( integer ) let G ( integer ) let B ( integer ) i = 1 For i while i <= NbPoints { set p = CreateOrModifyDatum ( \"Point\" , `Geometrical Set.1` , Points , i ) ( 2 ) p = point ( PartBody \\ Point .2 \\ X + cos ( i * XFactor ) * 10 mm , PartBody \\ Point .2 \\ Y + cos ( i * YFactor ) * 10 mm , PartBody \\ Point .2 \\ Z + cos ( i * ZFactor ) * 10 mm ) ( 3 ) p . Name = \"Point.\" + ToString ( i ) if PointsHidden == True ( 4 ) p . Show = False else { p . Show = True R = mod ( i , 255 ) G = mod ( i * 2 , 255 ) B = 255 - mod ( i , 255 ) p . Color = ToString ( R ) + \",\" + ToString ( G ) + \",\" + ToString ( B ) } i = i + 1 } if GenerateLines == True { i = 1 For i while i <= `Relations\\Knowledge Pattern.1\\Points` - 1 { set l = CreateOrModifyDatum ( \"Line\" , `Geometrical Set.1` , Lines , i )( 5 ) l . Name = \"Line.\" + ToString ( i ) p = Points . GetItem ( i ) p2 = Points . GetItem ( i + 1 ) l = line ( p , p2 ) R = mod ( i , 255 ) G = mod ( i * 2 , 255 ) B = 255 - mod ( i , 255 ) l . Color = ToString ( R ) + \",\" + ToString ( G ) + \",\" + ToString ( B ) ( 6 ) i = i + 1 } }","title":"KP V6 Case 1"},{"location":"DS-CODE/EKL/KP%20V6%20Case%202/","text":"case let i(Integer) let obj1,obj2(Feature) let temp(Feature) let myList(List) let myGeo(OpenBodyFeature) i=1 set obj1=`StartPoints\\Axis System.2` set obj2=`Road\\Alignment Set.1\\Alignment.1\\3D Alignment.1` myGeo = new(\"OpenBodyFeature\",\"UDF3\",`LOD100-3D Shape00039597 A.1`\uff09 for i while i<=5 { temp=InstantiateTemplate(\"Resource1\",myGeo ) temp->SetAttributeObject(\"Axis System\",obj1) temp->SetAttributeObject(\"3D Alignment\",obj2) EndModifyTemplate(temp) i=i+1 set obj1 = temp->GetAttributeObject(\"RefAxisSystem\") }","title":"KP V6 Case 2"},{"location":"DS-CODE/EKL/KP%20V6%20Case%202/#case","text":"let i(Integer) let obj1,obj2(Feature) let temp(Feature) let myList(List) let myGeo(OpenBodyFeature) i=1 set obj1=`StartPoints\\Axis System.2` set obj2=`Road\\Alignment Set.1\\Alignment.1\\3D Alignment.1` myGeo = new(\"OpenBodyFeature\",\"UDF3\",`LOD100-3D Shape00039597 A.1`\uff09 for i while i<=5 { temp=InstantiateTemplate(\"Resource1\",myGeo ) temp->SetAttributeObject(\"Axis System\",obj1) temp->SetAttributeObject(\"3D Alignment\",obj2) EndModifyTemplate(temp) i=i+1 set obj1 = temp->GetAttributeObject(\"RefAxisSystem\") }","title":"case"},{"location":"DS-CODE/EKL/KP-V6/","text":"KP let i ( Integer ) let obj1 , obj2 ( Feature ) let temp ( Feature ) let myList ( List ) let myGeo ( OpenBodyFeature ) i = 1 set obj1 = ` Geometrical Set .2 \\ Axis System .2 ` set obj2 = ` Road \\ Alignment Set .1 \\ Alignment .1 \\ 3D Alignment .1 ` myGeo = new ( \"OpenBodyFeature\" , \"\" , ` 3D Shape00039597 A .1 `\uff09 for i while i <= 10 { temp = InstantiateTemplate ( \"Resource1\" , myGeo ) temp -> SetAttributeObject ( \"Axis System\" , obj1 ) temp -> SetAttributeObject ( \"3D Alignment\" , obj2 ) EndModifyTemplate ( temp ) i = i + 1 set obj1 = temp -> GetAttributeObject ( \"Side2_Axis_System\" ) }","title":"KP"},{"location":"DS-CODE/EKL/KP-V6/#kp","text":"let i ( Integer ) let obj1 , obj2 ( Feature ) let temp ( Feature ) let myList ( List ) let myGeo ( OpenBodyFeature ) i = 1 set obj1 = ` Geometrical Set .2 \\ Axis System .2 ` set obj2 = ` Road \\ Alignment Set .1 \\ Alignment .1 \\ 3D Alignment .1 ` myGeo = new ( \"OpenBodyFeature\" , \"\" , ` 3D Shape00039597 A .1 `\uff09 for i while i <= 10 { temp = InstantiateTemplate ( \"Resource1\" , myGeo ) temp -> SetAttributeObject ( \"Axis System\" , obj1 ) temp -> SetAttributeObject ( \"3D Alignment\" , obj2 ) EndModifyTemplate ( temp ) i = i + 1 set obj1 = temp -> GetAttributeObject ( \"Side2_Axis_System\" ) }","title":"KP"},{"location":"DS-CODE/EKL/KP_%E5%85%A8%E5%B1%80ARM/","text":"arm \u8d44\u6e90\u5168\u5c40\u8bbe\u7f6e F = CreateOrModifyTemplate ( \"KnowledgeResources|BEAM_L\" , body , BRIDGE_DESIGN \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_UDF \\ UDF_LIST , i )","title":"arm \u8d44\u6e90\u5168\u5c40\u8bbe\u7f6e"},{"location":"DS-CODE/EKL/KP_%E5%85%A8%E5%B1%80ARM/#arm","text":"F = CreateOrModifyTemplate ( \"KnowledgeResources|BEAM_L\" , body , BRIDGE_DESIGN \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_UDF \\ UDF_LIST , i )","title":"arm \u8d44\u6e90\u5168\u5c40\u8bbe\u7f6e"},{"location":"DS-CODE/EKL/ReadExcel/","text":"Read Excel let doc ( Document ) let query ( PLMQuery ) let results ( List ) let result ( PLMQueryResult ) query = CreatePLMQuery ( \"Document\" ) query -> AddCriterion ( \"Title\" , \"TestCSV\" ) results = query -> RunQuery () Message ( \"Documents touv\u00e9s : #\" , results . Size ()) set result = results . GetItem ( 1 ) set doc = result . LoadResult ( TRUE ) //Message(\"Doc : #\", doc.Title ) let mysheet ( DTSheetType ) //Then try to cast set mysheet = doc Message ( \"cell 1,1 : #\" , mysheet . CellAsString ( 1 , 1 )) Let strFileName ( String ) Let oXLSheet ( DTSheetType ) Let indx ( Integer ) Let noOfRows ( Integer ) Let strColorName ( String ) Let rValue ( Real ) Let gValue ( Real ) Let bValue ( Real ) Let strRowValue ( String ) let s ( String ) strFileName = \"E:/Temp/Test/Input.xlsx\" Set oXLSheet = CreateSheet ( strFileName ) noOfRows = oXLSheet . RowsNb indx = 1 For indx while indx < noOfRow { s = oXLSheet . CellAsString ( indx , 1 ) lst . Append ( s ) } let s ( DTSheetType ) s = CreateSheet ( \"KnowledgeResources|resource1\" ) if ( s <> NULL ) { P . FirstLength = s . CellAsReal ( Row , Column ) * 1 mm }","title":"Read Excel"},{"location":"DS-CODE/EKL/ReadExcel/#read-excel","text":"let doc ( Document ) let query ( PLMQuery ) let results ( List ) let result ( PLMQueryResult ) query = CreatePLMQuery ( \"Document\" ) query -> AddCriterion ( \"Title\" , \"TestCSV\" ) results = query -> RunQuery () Message ( \"Documents touv\u00e9s : #\" , results . Size ()) set result = results . GetItem ( 1 ) set doc = result . LoadResult ( TRUE ) //Message(\"Doc : #\", doc.Title ) let mysheet ( DTSheetType ) //Then try to cast set mysheet = doc Message ( \"cell 1,1 : #\" , mysheet . CellAsString ( 1 , 1 )) Let strFileName ( String ) Let oXLSheet ( DTSheetType ) Let indx ( Integer ) Let noOfRows ( Integer ) Let strColorName ( String ) Let rValue ( Real ) Let gValue ( Real ) Let bValue ( Real ) Let strRowValue ( String ) let s ( String ) strFileName = \"E:/Temp/Test/Input.xlsx\" Set oXLSheet = CreateSheet ( strFileName ) noOfRows = oXLSheet . RowsNb indx = 1 For indx while indx < noOfRow { s = oXLSheet . CellAsString ( indx , 1 ) lst . Append ( s ) } let s ( DTSheetType ) s = CreateSheet ( \"KnowledgeResources|resource1\" ) if ( s <> NULL ) { P . FirstLength = s . CellAsReal ( Row , Column ) * 1 mm }","title":"Read Excel"},{"location":"DS-CODE/EKL/tunnel/","text":"/*\u89c4\u5219 \u521b\u5efa\u8005 86156 2019/12/3*/ let i , j , k ( integer ) let pt , pt1 , pt2 ( point ) let list1 , list2 ( list ) let L , a , b , c ( length ) i = 2 list1 = ` \u5de6\u7ebf \\ \u8f74\u7cfb \\ Myaxis \\ List .821 ` pt1 = list1 [ 1 ] set a = distance ( pt1 , ` \u5de6\u7ebf \\ \u8f74\u7cfb \\ Myaxis \\ Project .2464 ` ) c = a for i while i <= list1 . Size () { pt2 = list1 [ i ] set b = distance ( pt2 , ` \u5de6\u7ebf \\ \u8f74\u7cfb \\ Myaxis \\ Project .2464 ` ) if c >= b { a = b pt = pt2 } else { a = c pt = pt1 } c = a pt1 = pt } i = 1 for i while i <= list1 . Size () { if pt == list1 [ i ] { break } } if i == 2 { ` \u5de6\u7ebf \\ \u8f74\u7cfb \\ Myaxis \\ \u65cb\u8f6c\u89d2 ` = 25.7143 deg } else if i == 3 { ` \u5de6\u7ebf \\ \u8f74\u7cfb \\ Myaxis \\ \u65cb\u8f6c\u89d2 ` = 102.8572 deg } else if i == 4 { ` \u5de6\u7ebf \\ \u8f74\u7cfb \\ Myaxis \\ \u65cb\u8f6c\u89d2 ` = 180 deg } else if i == 5 { ` \u5de6\u7ebf \\ \u8f74\u7cfb \\ Myaxis \\ \u65cb\u8f6c\u89d2 ` = 257.143 deg } else { ` \u5de6\u7ebf \\ \u8f74\u7cfb \\ Myaxis \\ \u65cb\u8f6c\u89d2 ` = 334.2859 deg } ` \u5de6\u7ebf \\ \u8f74\u7cfb \\ Myaxis \\ MyPoint ` = pt //`\u65cb\u8f6c\u89d2` =(360deg/14)*(i-1)","title":"Tunnel"},{"location":"DS-CODE/EKL/udf%E4%BB%A5%E4%B8%8A%E4%B8%80%E4%B8%AA%E7%94%9F%E6%88%90%E7%BB%93%E6%9E%9C%E4%B8%BA%E5%8F%82%E8%80%83%E9%98%B5%E5%88%97/","text":"udf\u4ee5\u4e0a\u4e00\u4e2a\u751f\u6210\u7ed3\u679c\u4e3a\u53c2\u8003\u9635\u5217 let f1 ( Feature ) let vp ( point ) let i ( Integer ) set vp = ` \u51e0\u4f55\u56fe\u5f62\u96c6 .1 \\ \u70b9 .4 ` i = 1 for i while i <= 50 { f1 = CreateOrModifyTemplate ( \"R\" , ` \u51e0\u4f55\u56fe\u5f62\u96c6 .1 ` , ` \u5173\u7cfb \\ \u77e5\u8bc6\u5de5\u7a0b\u9635\u5217 .1 \\ \u5217\u8868 .1 ` , i ) f1 . SetAttributeObject ( \"p1\" , vp ) EndModifyTemplate ( f1 ) f1 . Name = \"L_\" + i vp = f1 . GetAttributeObject ( \"p2\" ) Vp . show = false }","title":"udf\u4ee5\u4e0a\u4e00\u4e2a\u751f\u6210\u7ed3\u679c\u4e3a\u53c2\u8003\u9635\u5217"},{"location":"DS-CODE/EKL/udf%E4%BB%A5%E4%B8%8A%E4%B8%80%E4%B8%AA%E7%94%9F%E6%88%90%E7%BB%93%E6%9E%9C%E4%B8%BA%E5%8F%82%E8%80%83%E9%98%B5%E5%88%97/#udf","text":"let f1 ( Feature ) let vp ( point ) let i ( Integer ) set vp = ` \u51e0\u4f55\u56fe\u5f62\u96c6 .1 \\ \u70b9 .4 ` i = 1 for i while i <= 50 { f1 = CreateOrModifyTemplate ( \"R\" , ` \u51e0\u4f55\u56fe\u5f62\u96c6 .1 ` , ` \u5173\u7cfb \\ \u77e5\u8bc6\u5de5\u7a0b\u9635\u5217 .1 \\ \u5217\u8868 .1 ` , i ) f1 . SetAttributeObject ( \"p1\" , vp ) EndModifyTemplate ( f1 ) f1 . Name = \"L_\" + i vp = f1 . GetAttributeObject ( \"p2\" ) Vp . show = false }","title":"udf\u4ee5\u4e0a\u4e00\u4e2a\u751f\u6210\u7ed3\u679c\u4e3a\u53c2\u8003\u9635\u5217"},{"location":"DS-CODE/EKL/%E6%A0%B9%E6%8D%AE%E5%90%8D%E7%A7%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%88%B0%E8%A3%85%E9%85%8D%E4%B8%AD/","text":"\u6839\u636e\u540d\u79f0\u6570\u636e\u5e93\u4e2d\u67e5\u627e\u5b9e\u4f8b\u5316\u5230\u88c5\u914d\u4e2d let root ( VPMReference ) let query ( PLMQuery ) let queryResults ( List ) let queryResult ( PLMQueryResult ) let resultReference ( VPMReference ) let newInstance ( VPMInstance ) let newInstanceName ( String ) //Get root of current editor root = GetEditorRoots ( \"VPMReference\" ). GetItem ( 1 ) //Build the PLM Query query = CreatePLMQuery ( \"VPMReference\" ) query . AddCriterion ( \"V_Name\" , \"Plate_A\" ) queryResults = query . RunQuery () //Check if the query returned results if ( queryResults . Size () > 0 ) { //Return the first item in the list of query results queryResult = queryResults [ 1 ] //LoadResult() method returns Feature type, set resultReference to cast Feature to VPMReference type set resultReference = queryResult . LoadResult ( true ) //Create new instance of returned reference in tree newInstance = new ( \"VPMInstance\" , \"Instance_1\" , root , resultReference ) } //\u6570\u636e\u5e93\u4e2d\u67e5\u627e\u5e76\u6309\u8f74\u7cfb\u88c5\u914d let root ( VPMReference ) let query ( PLMQuery ) let queryResults ( List ) let queryResult ( PLMQueryResult ) let resultReference ( VPMReference ) let newInstance ( VPMInstance ) let newInstanceName ( String ) //Get root of current editor root = GetEditorRoots ( \"VPMReference\" ). GetItem ( 1 ) //Build the PLM Query query = CreatePLMQuery ( \"VPMReference\" ) //Add query criteria, any attributes can be used to ensure correct part is retrieved query . AddCriterion ( \"V_Name\" , \"Demo_ManageInstance_Bkt_C\" ) query . AddCriterion ( \"V_isLastVersion\" , \"TRUE\" ) queryResults = query . RunQuery () //Check if the query returned results if ( queryResults . Size () > 0 ) { //Return the first item in the list of query results queryResult = queryResults [ 1 ] //LoadResult() method returns Feature type, set resultReference to cast Feature to VPMReference type set resultReference = queryResult . LoadResult ( true ) } //Create and constrain instances to target axes let targetAxesGeoset ( OpenBodyFeature ) let targetAxis , refAxis ( AxisSystem ) let targetAxes ( List ) let targetAxisPath , refAxisPath ( String ) let coincidenceConstraint ( MRXCoincidence ) let i ( Integer ) targetAxesGeoset = root . Find ( \"OpenBodyFeature\" , \"x.Name == \\\" PositionAxes \\\" \" , true ) targetAxes = targetAxesGeoset . Query ( \"AxisSystem\" , \"\" ) i = 1 for targetAxis inside targetAxes { newInstance = new ( \"VPMInstance\" , \"Instance_\" + ToString ( i ), root , resultReference ) refAxis = newInstance . Access ( \"EngAxis\" , \"AxisSystem\" ) refAxisPath = root . CreatePathString ( newInstance , refAxis ) targetAxisPath = root . CreatePathString ( NULL , targetAxis ) coincidenceConstraint = root . CreateConstraint ( \"Coincidence_\" + ToString ( i ), \"Coincidence\" , refAxisPath , targetAxisPath ) i = i + 1 }","title":"\u6839\u636e\u540d\u79f0\u6570\u636e\u5e93\u4e2d\u67e5\u627e\u5b9e\u4f8b\u5316\u5230\u88c5\u914d\u4e2d"},{"location":"DS-CODE/EKL/%E6%A0%B9%E6%8D%AE%E5%90%8D%E7%A7%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%88%B0%E8%A3%85%E9%85%8D%E4%B8%AD/#_1","text":"let root ( VPMReference ) let query ( PLMQuery ) let queryResults ( List ) let queryResult ( PLMQueryResult ) let resultReference ( VPMReference ) let newInstance ( VPMInstance ) let newInstanceName ( String ) //Get root of current editor root = GetEditorRoots ( \"VPMReference\" ). GetItem ( 1 ) //Build the PLM Query query = CreatePLMQuery ( \"VPMReference\" ) query . AddCriterion ( \"V_Name\" , \"Plate_A\" ) queryResults = query . RunQuery () //Check if the query returned results if ( queryResults . Size () > 0 ) { //Return the first item in the list of query results queryResult = queryResults [ 1 ] //LoadResult() method returns Feature type, set resultReference to cast Feature to VPMReference type set resultReference = queryResult . LoadResult ( true ) //Create new instance of returned reference in tree newInstance = new ( \"VPMInstance\" , \"Instance_1\" , root , resultReference ) } //\u6570\u636e\u5e93\u4e2d\u67e5\u627e\u5e76\u6309\u8f74\u7cfb\u88c5\u914d let root ( VPMReference ) let query ( PLMQuery ) let queryResults ( List ) let queryResult ( PLMQueryResult ) let resultReference ( VPMReference ) let newInstance ( VPMInstance ) let newInstanceName ( String ) //Get root of current editor root = GetEditorRoots ( \"VPMReference\" ). GetItem ( 1 ) //Build the PLM Query query = CreatePLMQuery ( \"VPMReference\" ) //Add query criteria, any attributes can be used to ensure correct part is retrieved query . AddCriterion ( \"V_Name\" , \"Demo_ManageInstance_Bkt_C\" ) query . AddCriterion ( \"V_isLastVersion\" , \"TRUE\" ) queryResults = query . RunQuery () //Check if the query returned results if ( queryResults . Size () > 0 ) { //Return the first item in the list of query results queryResult = queryResults [ 1 ] //LoadResult() method returns Feature type, set resultReference to cast Feature to VPMReference type set resultReference = queryResult . LoadResult ( true ) } //Create and constrain instances to target axes let targetAxesGeoset ( OpenBodyFeature ) let targetAxis , refAxis ( AxisSystem ) let targetAxes ( List ) let targetAxisPath , refAxisPath ( String ) let coincidenceConstraint ( MRXCoincidence ) let i ( Integer ) targetAxesGeoset = root . Find ( \"OpenBodyFeature\" , \"x.Name == \\\" PositionAxes \\\" \" , true ) targetAxes = targetAxesGeoset . Query ( \"AxisSystem\" , \"\" ) i = 1 for targetAxis inside targetAxes { newInstance = new ( \"VPMInstance\" , \"Instance_\" + ToString ( i ), root , resultReference ) refAxis = newInstance . Access ( \"EngAxis\" , \"AxisSystem\" ) refAxisPath = root . CreatePathString ( newInstance , refAxis ) targetAxisPath = root . CreatePathString ( NULL , targetAxis ) coincidenceConstraint = root . CreateConstraint ( \"Coincidence_\" + ToString ( i ), \"Coincidence\" , refAxisPath , targetAxisPath ) i = i + 1 }","title":"\u6839\u636e\u540d\u79f0\u6570\u636e\u5e93\u4e2d\u67e5\u627e\u5b9e\u4f8b\u5316\u5230\u88c5\u914d\u4e2d"},{"location":"DS-CODE/EKL/%E6%A0%B9%E6%8D%AE%E8%A1%A8%E6%A0%BC%E4%BF%AE%E6%94%B9%E5%AE%9E%E4%BE%8B%E5%90%8D%E7%A7%B0/","text":"\u6839\u636e\u8868\u683c\u4fee\u6539\u5b9e\u4f8b\u540d\u79f0 let PartList ( List ) let i ( Integer ) let Fea ( Feature ) let NameSheet ( DTSheetType ) let SheetPath ( String ) SheetPath = \"E:\\YZBName.xlsx\" NameSheet = CreateSheet ( SheetPath ) PartList = MyProduct . Query ( \"VPMInstance\" , \"x.Reference.V_Name like \\\" \u9884\u5236\u677f* \\\" \" ) //Message(\"Number=#\",PartList.Size()) i = 1 for i while i <= PartList . Size () { set Fea = PartList . GetItem ( i ) Fea . Name = NameSheet -> CellAsString ( i + 1 , 1 ) }","title":"\u6839\u636e\u8868\u683c\u4fee\u6539\u5b9e\u4f8b\u540d\u79f0"},{"location":"DS-CODE/EKL/%E6%A0%B9%E6%8D%AE%E8%A1%A8%E6%A0%BC%E4%BF%AE%E6%94%B9%E5%AE%9E%E4%BE%8B%E5%90%8D%E7%A7%B0/#_1","text":"let PartList ( List ) let i ( Integer ) let Fea ( Feature ) let NameSheet ( DTSheetType ) let SheetPath ( String ) SheetPath = \"E:\\YZBName.xlsx\" NameSheet = CreateSheet ( SheetPath ) PartList = MyProduct . Query ( \"VPMInstance\" , \"x.Reference.V_Name like \\\" \u9884\u5236\u677f* \\\" \" ) //Message(\"Number=#\",PartList.Size()) i = 1 for i while i <= PartList . Size () { set Fea = PartList . GetItem ( i ) Fea . Name = NameSheet -> CellAsString ( i + 1 , 1 ) }","title":"\u6839\u636e\u8868\u683c\u4fee\u6539\u5b9e\u4f8b\u540d\u79f0"},{"location":"DS-CODE/EKL/%E8%8E%B7%E5%BE%97%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB%E7%82%B9/","text":"let i , j ( Integer ) let L1 , L2 ( list ) let a , b ( LENGTH ) L1 = ` udf_def \\ Geometrical Set .11 \\ Geometrical Set .15 \\ List .2 ` i = 1 for i while i <= L1 . Size () { a = distance ( L1 [ i ] , ` udf_def \\ Geometrical Set .11 \\ Multi Output .2 ( Intersect ) \\ Intersect .6 ` ) L2 . Append ( a ) } L2 . Compute ( \"min\" , \"\" , \"\" , b ) Notify ( \"\" , b ) j = L2 . IndexOf ( b , 1 ) Notify ( \"\" , j ) ` udf_def \\ Geometrical Set .11 \\ Geometrical Set .15 \\ min - pt ` = L1 [ j ]","title":"\u83b7\u5f97\u6700\u77ed\u8ddd\u79bb\u70b9"},{"location":"DS-CODE/EKL/%E8%A1%A8%E6%A0%BC%E7%94%9F%E6%88%90%E8%BD%B4%E7%B3%BB/","text":"\u8868\u683c\u751f\u6210\u8f74\u7cfb /* \u4ece\u8868\u683c\u751f\u6210\u8f74\u7cfb*/ let i ( integer ) let j ( integer ) let pt1 ( point ) let pt2 ( point ) let l1 ( line ) let l2 ( line ) let l3 ( line ) let pl ( plane ) let A ( axissystem ) i = 2 ` \u5173\u7cfb \\ test .1 \\ \u91cc\u7a0b\u70b9 ` -> AddItem ( ` \u9053\u8def\u4e2d\u5fc3\u7ebf \\ \u7a7a\u95f4\u7ebf\u8d77\u70b9 \uff08 \u91cc\u7a0b\u70b9 \uff09` , 1 ) for i while i <= 18 { set pt1 = pointoncurve ( ` \u9053\u8def\u4e2d\u5fc3\u7ebf \\ test - \u5e73\u9762\u4e2d\u5fc3\u7ebf ` , ` \u5173\u7cfb \\ test .1 \\ \u91cc\u7a0b\u70b9 ` -> GetItem ( i -1 ),( ` \u5173\u7cfb \\ test \\ \u56fe\u7eb8 ` -> CellAsReal ( i , 3 )) * 1 m , false ) pt2 = CreateOrModifyDatum ( \"point\" , ` \u9053\u8def\u4e2d\u5fc3\u7ebf \\ \u91cc\u7a0b\u70b9 ` , ` \u5173\u7cfb \\ test .1 \\ \u91cc\u7a0b\u70b9 ` , i ) pt2 = project ( pt1 , ` \u9053\u8def\u4e2d\u5fc3\u7ebf \\ test - \u7a7a\u95f4\u4e2d\u5fc3\u7ebf ` , direction ( ` xy \u5e73\u9762 ` )) pt2 . Name = ( ` \u5173\u7cfb \\ test \\ \u56fe\u7eb8 ` -> CellAsString ( i , 4 ) ) i = i + 1 } j = 1 for j while j <= ` \u5173\u7cfb \\ test .1 \\ \u91cc\u7a0b\u70b9 \\ \u5c3a\u5bf8 ` { set l1 = linetangent ( ` \u9053\u8def\u4e2d\u5fc3\u7ebf \\ test - \u7a7a\u95f4\u4e2d\u5fc3\u7ebf ` , ` \u5173\u7cfb \\ test .1 \\ \u91cc\u7a0b\u70b9 ` . GetItem ( j ), 0 mm , 50 mm , true ) set l2 = project ( l1 , ` xy \u5e73\u9762 ` , direction ( ` xy \u5e73\u9762 ` )) set pl = planenormal ( ` \u9053\u8def\u4e2d\u5fc3\u7ebf \\ test - \u7a7a\u95f4\u4e2d\u5fc3\u7ebf ` , pt2 ) set l3 = invert ( intersect ( pl , ` xy \u5e73\u9762 ` )) A = CreateOrModifyDatum ( \"axissystem\" , ` \u9053\u8def\u4e2d\u5fc3\u7ebf \\ \u91cc\u7a0b\u8f74\u7cfb ` , ` \u5173\u7cfb \\ test .1 \\ \u8f74\u7cfb ` , j ) A = axisSystem ( ` \u5173\u7cfb \\ test .1 \\ \u91cc\u7a0b\u70b9 ` . GetItem ( j ), direction ( l2 ), direction ( l3 ), direction ( ` xy \u5e73\u9762 ` )) A . Name = ( ` \u5173\u7cfb \\ test \\ \u56fe\u7eb8 ` -> CellAsString ( j , 4 ) ) j = j + 1 }","title":"\u8868\u683c\u751f\u6210\u8f74\u7cfb"},{"location":"DS-CODE/EKL/%E8%A1%A8%E6%A0%BC%E7%94%9F%E6%88%90%E8%BD%B4%E7%B3%BB/#_1","text":"/* \u4ece\u8868\u683c\u751f\u6210\u8f74\u7cfb*/ let i ( integer ) let j ( integer ) let pt1 ( point ) let pt2 ( point ) let l1 ( line ) let l2 ( line ) let l3 ( line ) let pl ( plane ) let A ( axissystem ) i = 2 ` \u5173\u7cfb \\ test .1 \\ \u91cc\u7a0b\u70b9 ` -> AddItem ( ` \u9053\u8def\u4e2d\u5fc3\u7ebf \\ \u7a7a\u95f4\u7ebf\u8d77\u70b9 \uff08 \u91cc\u7a0b\u70b9 \uff09` , 1 ) for i while i <= 18 { set pt1 = pointoncurve ( ` \u9053\u8def\u4e2d\u5fc3\u7ebf \\ test - \u5e73\u9762\u4e2d\u5fc3\u7ebf ` , ` \u5173\u7cfb \\ test .1 \\ \u91cc\u7a0b\u70b9 ` -> GetItem ( i -1 ),( ` \u5173\u7cfb \\ test \\ \u56fe\u7eb8 ` -> CellAsReal ( i , 3 )) * 1 m , false ) pt2 = CreateOrModifyDatum ( \"point\" , ` \u9053\u8def\u4e2d\u5fc3\u7ebf \\ \u91cc\u7a0b\u70b9 ` , ` \u5173\u7cfb \\ test .1 \\ \u91cc\u7a0b\u70b9 ` , i ) pt2 = project ( pt1 , ` \u9053\u8def\u4e2d\u5fc3\u7ebf \\ test - \u7a7a\u95f4\u4e2d\u5fc3\u7ebf ` , direction ( ` xy \u5e73\u9762 ` )) pt2 . Name = ( ` \u5173\u7cfb \\ test \\ \u56fe\u7eb8 ` -> CellAsString ( i , 4 ) ) i = i + 1 } j = 1 for j while j <= ` \u5173\u7cfb \\ test .1 \\ \u91cc\u7a0b\u70b9 \\ \u5c3a\u5bf8 ` { set l1 = linetangent ( ` \u9053\u8def\u4e2d\u5fc3\u7ebf \\ test - \u7a7a\u95f4\u4e2d\u5fc3\u7ebf ` , ` \u5173\u7cfb \\ test .1 \\ \u91cc\u7a0b\u70b9 ` . GetItem ( j ), 0 mm , 50 mm , true ) set l2 = project ( l1 , ` xy \u5e73\u9762 ` , direction ( ` xy \u5e73\u9762 ` )) set pl = planenormal ( ` \u9053\u8def\u4e2d\u5fc3\u7ebf \\ test - \u7a7a\u95f4\u4e2d\u5fc3\u7ebf ` , pt2 ) set l3 = invert ( intersect ( pl , ` xy \u5e73\u9762 ` )) A = CreateOrModifyDatum ( \"axissystem\" , ` \u9053\u8def\u4e2d\u5fc3\u7ebf \\ \u91cc\u7a0b\u8f74\u7cfb ` , ` \u5173\u7cfb \\ test .1 \\ \u8f74\u7cfb ` , j ) A = axisSystem ( ` \u5173\u7cfb \\ test .1 \\ \u91cc\u7a0b\u70b9 ` . GetItem ( j ), direction ( l2 ), direction ( l3 ), direction ( ` xy \u5e73\u9762 ` )) A . Name = ( ` \u5173\u7cfb \\ test \\ \u56fe\u7eb8 ` -> CellAsString ( j , 4 ) ) j = j + 1 }","title":"\u8868\u683c\u751f\u6210\u8f74\u7cfb"},{"location":"DS-CODE/EKL/%E9%80%92%E5%BD%92/","text":"\u9012\u5f52 U = POWERCOPY \\ PANEL_TYPE \\ CONSTRUCTIONS \\ ref_inputs \\ ref_surf p = 1 for p while p <= l . Size () { os = split ( U , l . GetItem ( p ), false ) U = os } re = U re . Name = \"RESULT\" ' U \u7b49\u4e8e\u4fee\u5efa\u9762 \uff0c ' os = \u4fee\u5efa\u540e\u7ed3\u679c \uff0c ' U = os","title":"\u9012\u5f52"},{"location":"DS-CODE/EKL/%E9%80%92%E5%BD%92/#_1","text":"U = POWERCOPY \\ PANEL_TYPE \\ CONSTRUCTIONS \\ ref_inputs \\ ref_surf p = 1 for p while p <= l . Size () { os = split ( U , l . GetItem ( p ), false ) U = os } re = U re . Name = \"RESULT\" ' U \u7b49\u4e8e\u4fee\u5efa\u9762 \uff0c ' os = \u4fee\u5efa\u540e\u7ed3\u679c \uff0c ' U = os","title":"\u9012\u5f52"},{"location":"DS-CODE/EKL/Creat%20Tree/Creat%20Tree/","text":"\u521b\u5efaCATIA \u7ed3\u6784\u6811 /* Action created by MElkhaldi 08/12/2016 */ let sheet ( DTSheetType ) sheet = `Knowledge Engineering Specification Physical00014183 A.1\\Relations\\DesignTable.1\\Sheet` let separator , cellStr , siteName , buildingName , storeyName , elemAssemblyName , collaborativeSpace , client , projectName , projectNumberSTR ( String ) let projectNumber ( Integer ) let aSite ( AecSite ) let aBuilding ( VPMInstance ) let lastStorey ( VPMInstance ) let elemAssembly ( VPMInstance ) aSite = GetEditorRoots ( \"AecSite\" ). GetItem ( 1 ) let next ( Boolean ) next = true let row = 1 separator = \"-\" collaborativeSpace = aSite . GetAttributeString ( \"V_project\" ) projectNumberSTR = SplitString ( collaborativeSpace , separator ). GetItem ( 1 ) projectNumber = projectNumberSTR . ToReal () client = SplitString ( collaborativeSpace , separator ). GetItem ( 2 ) projectName = SplitString ( collaborativeSpace , separator ). GetItem ( 3 ) siteName = collaborativeSpace aSite . SetAttributeString ( \"Name\" , siteName ) aSite . SetAttributeString ( \"ProjectName\" , projectName ) aSite . SetAttributeString ( \"ClientShort\" , client ) aSite . SetAttributeReal ( \"ProjectNum\" , projectNumber ) for row while next { cellStr = sheet . CellAsString ( row , 1 ) if ( cellStr == \"BUILDING\" ){ buildingName = projectNumberSTR + separator + sheet . CellAsString ( row , 2 ) aBuilding = new ( \"Building\" , buildingName , aSite ) aBuilding . Reference . SetAttributeString ( \"Name\" , buildingName ) } else if ( cellStr == \"STOREY\" ){ storeyName = buildingName + separator + sheet . CellAsString ( row , 3 ) lastStorey = new ( \"BuildingStorey\" , storeyName , aBuilding . Reference ) lastStorey . Reference . SetAttributeString ( \"Name\" , storeyName ) } else if ( cellStr == \"ELEMENT ASSEMBLY\" ){ elemAssemblyName = storeyName + separator + sheet . CellAsString ( row , 4 ) elemAssembly = new ( \"AecElementAssembly\" , elemAssemblyName , lastStorey . Reference ) elemAssembly . Reference . SetAttributeString ( \"Name\" , elemAssemblyName ) } else if ( cellStr == \"END\" ){ next = false } else { next = false } row = row + 1 } let separator , cellStr , siteName , buildingName ( String ) let projectNumber ( Integer ) projectNumber = 111 let aSite ( AecSite ) let aBuilding ( VPMInstance ) let lastStorey ( VPMInstance ) let elemAssembly ( VPMInstance ) aSite = GetEditorRoots ( \"AecSite\" ). GetItem ( 1 ) aSite . SetAttributeString ( \"Name\" , \"NAME\" ) aSite . SetAttributeString ( \"ProjectName\" , \"NAME\" ) aSite . SetAttributeString ( \"ClientShort\" , \"NAME\" ) aSite . SetAttributeReal ( \"ProjectNum\" , projectNumber ) separator = \"-\" aSite . SetAttributeReal ( \"ProjectNum\" , projectNumber ) buildingName = \"BUILDING_1\" aBuilding = new ( \"Building\" , buildingName , aSite ) aBuilding . Reference . SetAttributeString ( \"Name\" , buildingName ) let prt ( VPMInstance ) prt = new ( \"3DPart\" , \"partName1\" , aBuilding . Reference ) //prt.Reference.SetAttributeString(\"Name\", buildingName) prt = new ( \"3DPart\" , \"partName2\" , aBuilding . Reference ) buildingName = \"BUILDING_2\" aBuilding = new ( \"Building\" , buildingName , aSite ) aBuilding . Reference . SetAttributeString ( \"Name\" , buildingName )","title":"Creat Tree"},{"location":"DS-CODE/EKL/Creat%20Tree/Creat%20Tree/#catia","text":"/* Action created by MElkhaldi 08/12/2016 */ let sheet ( DTSheetType ) sheet = `Knowledge Engineering Specification Physical00014183 A.1\\Relations\\DesignTable.1\\Sheet` let separator , cellStr , siteName , buildingName , storeyName , elemAssemblyName , collaborativeSpace , client , projectName , projectNumberSTR ( String ) let projectNumber ( Integer ) let aSite ( AecSite ) let aBuilding ( VPMInstance ) let lastStorey ( VPMInstance ) let elemAssembly ( VPMInstance ) aSite = GetEditorRoots ( \"AecSite\" ). GetItem ( 1 ) let next ( Boolean ) next = true let row = 1 separator = \"-\" collaborativeSpace = aSite . GetAttributeString ( \"V_project\" ) projectNumberSTR = SplitString ( collaborativeSpace , separator ). GetItem ( 1 ) projectNumber = projectNumberSTR . ToReal () client = SplitString ( collaborativeSpace , separator ). GetItem ( 2 ) projectName = SplitString ( collaborativeSpace , separator ). GetItem ( 3 ) siteName = collaborativeSpace aSite . SetAttributeString ( \"Name\" , siteName ) aSite . SetAttributeString ( \"ProjectName\" , projectName ) aSite . SetAttributeString ( \"ClientShort\" , client ) aSite . SetAttributeReal ( \"ProjectNum\" , projectNumber ) for row while next { cellStr = sheet . CellAsString ( row , 1 ) if ( cellStr == \"BUILDING\" ){ buildingName = projectNumberSTR + separator + sheet . CellAsString ( row , 2 ) aBuilding = new ( \"Building\" , buildingName , aSite ) aBuilding . Reference . SetAttributeString ( \"Name\" , buildingName ) } else if ( cellStr == \"STOREY\" ){ storeyName = buildingName + separator + sheet . CellAsString ( row , 3 ) lastStorey = new ( \"BuildingStorey\" , storeyName , aBuilding . Reference ) lastStorey . Reference . SetAttributeString ( \"Name\" , storeyName ) } else if ( cellStr == \"ELEMENT ASSEMBLY\" ){ elemAssemblyName = storeyName + separator + sheet . CellAsString ( row , 4 ) elemAssembly = new ( \"AecElementAssembly\" , elemAssemblyName , lastStorey . Reference ) elemAssembly . Reference . SetAttributeString ( \"Name\" , elemAssemblyName ) } else if ( cellStr == \"END\" ){ next = false } else { next = false } row = row + 1 } let separator , cellStr , siteName , buildingName ( String ) let projectNumber ( Integer ) projectNumber = 111 let aSite ( AecSite ) let aBuilding ( VPMInstance ) let lastStorey ( VPMInstance ) let elemAssembly ( VPMInstance ) aSite = GetEditorRoots ( \"AecSite\" ). GetItem ( 1 ) aSite . SetAttributeString ( \"Name\" , \"NAME\" ) aSite . SetAttributeString ( \"ProjectName\" , \"NAME\" ) aSite . SetAttributeString ( \"ClientShort\" , \"NAME\" ) aSite . SetAttributeReal ( \"ProjectNum\" , projectNumber ) separator = \"-\" aSite . SetAttributeReal ( \"ProjectNum\" , projectNumber ) buildingName = \"BUILDING_1\" aBuilding = new ( \"Building\" , buildingName , aSite ) aBuilding . Reference . SetAttributeString ( \"Name\" , buildingName ) let prt ( VPMInstance ) prt = new ( \"3DPart\" , \"partName1\" , aBuilding . Reference ) //prt.Reference.SetAttributeString(\"Name\", buildingName) prt = new ( \"3DPart\" , \"partName2\" , aBuilding . Reference ) buildingName = \"BUILDING_2\" aBuilding = new ( \"Building\" , buildingName , aSite ) aBuilding . Reference . SetAttributeString ( \"Name\" , buildingName )","title":"\u521b\u5efaCATIA \u7ed3\u6784\u6811"},{"location":"DS-CODE/EKL/%E5%AF%BB%E6%89%BE%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%E9%9B%86%E4%B8%8B%E7%9A%84%E7%89%B9%E5%BE%81/Find%20features%20under%20a%20geometry%20set/","text":"Find features under a geometry set OpenBody.Query (\"Point\",\"x.Name -> Extract (0,2) == \\\"\u4ea4\u70b9\\\"\")","title":"Find features under a geometry set"},{"location":"DS-CODE/EKL/%E5%AF%BB%E6%89%BE%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%E9%9B%86%E4%B8%8B%E7%9A%84%E7%89%B9%E5%BE%81/Find%20features%20under%20a%20geometry%20set/#find-features-under-a-geometry-set","text":"OpenBody.Query (\"Point\",\"x.Name -> Extract (0,2) == \\\"\u4ea4\u70b9\\\"\")","title":"Find features under a geometry set"},{"location":"DS-CODE/Functions/BIM_Save/","text":"BIM save V2 UI Private Sub CheckBox1_Click() 'new files only FDM_1.Save_New_Files_Only = CheckBox1.Value End Sub Private Sub CheckBox2_Click() FDM_1.Use_Directory_Path_of_Root_Product = CheckBox2.Value 'use root... End Sub Private Sub cmdSave_Click() Dim NoneChecked As Boolean ' Dim fso ' Set fso = CreateObject(\"Scripting.FileSystemObject\") NoneChecked = True If Right(TextBox1.Text, 1) = \"\\\" Then TextBox1.Text = Left(TextBox1.Text, Len(TextBox1.Text) - 1) End If FDM_1.Target_Directory = TextBox1.Text 'save files.. FDM.Repaint If FDM_1.Target_Directory = \"\" Then FDM.lblStatusBar.Caption = \"Specify Target Directory\" FDM.lblStatusBar.ForeColor = RGB(255, 0, 0) FDM.Repaint Else FDM_1.Dir_For_Save = Target_Directory If FDM.chkIGSExport.Value = -1 Then FDM_1.Dir_For_Save = Target_Directory & \"\\IGS\" FDM_1.Save_Files NoneChecked = False Else NoneChecked = True End If If FDM.chkDWGExport.Value = -1 Then FDM_1.Dir_For_Save = Target_Directory & \"\\DWG\" FDM_1.Save_Files NoneChecked = False Else NoneChecked = True End If If FDM.chk3DXMLExport.Value = -1 Then FDM_1.Dir_For_Save = Target_Directory & \"\\3DXML\" FDM_1.Save_Files NoneChecked = False Else NoneChecked = True End If If FDM.chkDPExport.Value = -1 Then MsgBox \"WARNING:\" & (Chr(13)) & _ \"This will save and update the\" & (Chr(13)) & _ \"Links in the original Product!\", vbCritical FDM_1.Dir_For_Save = Target_Directory & \"\\DP\" FDM_1.Save_Files NoneChecked = False Else NoneChecked = True End If End If If FDM_1.Dir_For_Save = \"\" Then 'FDM.lblStatusBar.Caption = \"Specify Target Directory\" FDM.lblStatusBar.ForeColor = RGB(0, 0, 255) Else If NoneChecked = True Then FDM_1.Save_Files End If End If MsgBox \"Completed\" End Sub Private Sub cmdExit_Click() End 'exit End Sub Private Sub TextBox1_AfterUpdate() TextBox1.ForeColor = RGB(0, 0, 0) End Sub Private Sub TextBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean) TextBox1.Value = \"\" End Sub Private Sub UserForm_Click() End Sub ===\"code\" 'Victor Keto - Gehry Technologies 7/20/08 'Vish Urala - Arup Americas 2009-10-09 '******************************************************** '************************************************* 'Note: the first instance found for each product is saved, All other instances are ignored (to avoid redundant saves) 'If the 'in context' instance appears first in the tree, it will be saved to a matching folder path, instead of to the path of an 'out of context' instance Public Save_New_Files_Only As Boolean Public Use_Directory_Path_of_Root_Product As Boolean Public Target_Directory As String 'if not using the directory of the root.. 'folder will be created during the save if it does not exist... Public Dir_For_Save As String Public PartDocuments_Found() As PartDocument Public PartDocuments_Found_Save_Path() As String Public PartDocuments_Found_Partnumbers() As String Public ProductDocuments_Found() As ProductDocument Public ProductDocuments_Found_Save_Path() As String Public ProductDocuments_Found_Partnumbers() As String '*********************************************************************************** '*********************************************************************************** Sub CATMain() Target_Directory = \"\" 'if not using the directory of the root.. FDM.Show End Sub Sub Save_Files() ReDim PartDocuments_Found(0) ReDim PartDocuments_Found_Save_Path(0) ReDim PartDocuments_Found_Partnumbers(0) ReDim ProductDocuments_Found(0) ReDim ProductDocuments_Found_Save_Path(0) ReDim ProductDocuments_Found_Partnumbers(0) On Error GoTo ErrorHandler CATIA.DisplayFileAlerts = False If CATIA.ActiveDocument.Name = \"\" Then Else Call query_objects_for_save(CATIA.ActiveDocument.Product, Dir_For_Save) Call Save_in_Reverse_Order End If On Error GoTo 0 Exit Sub ' Exit to avoid handler. ErrorHandler: ' Error-handling routine. Select Case Err.Number ' Evaluate error number. Case -2147467259 ' \"File already open\" error. FDM.lblStatusBar.Caption = \"OPEN a DP Product \" FDM.lblStatusBar.ForeColor = RGB(255, 0, 0) End Select Resume ' Resume execution at same line that caused the error. End Sub '*********************************************************************************** '*********************************************************************************** 'recursively query files top-down, and then save in reverse order to avoid autosaves to parent product folders... Sub query_objects_for_save(current_product As Product, current_directory_for_saving As String) 'the root product should be saved, therefore no save occurs at recursive step 1 Dim fso Set fso = CreateObject(\"Scripting.FileSystemObject\") Dim current_ref_doc As Document Dim a As Integer Dim products_within As Products If TypeName(current_product.ReferenceProduct.Parent) = \"PartDocument\" Then 'a .CATPart On Error GoTo Omit_from_Save Set current_ref_doc = current_product.ReferenceProduct.Parent 'create folder for part (if does not exist) with parent product name and save part within.... If Save_New_Files_Only = True And current_ref_doc.Path <> \"\" Then GoTo Omit_from_Save 'check if part number exists in set before saving.... If UBound(PartDocuments_Found_Partnumbers) > 0 Then For check_pnum = 1 To UBound(PartDocuments_Found_Partnumbers) 'avoid duplicates If current_product.PartNumber = PartDocuments_Found_Partnumbers(check_pnum) Then GoTo Omit_from_Save Next check_pnum End If On Error Resume Next 'if folder exists..... fso.CreateFolder current_directory_for_saving ReDim Preserve PartDocuments_Found(UBound(PartDocuments_Found) + 1) ReDim Preserve PartDocuments_Found_Save_Path(UBound(PartDocuments_Found_Save_Path) + 1) ReDim Preserve PartDocuments_Found_Partnumbers(UBound(PartDocuments_Found_Partnumbers) + 1) Set PartDocuments_Found(UBound(PartDocuments_Found)) = current_ref_doc PartDocuments_Found_Save_Path(UBound(PartDocuments_Found_Save_Path)) = current_directory_for_saving & \"\\\" & current_product.PartNumber PartDocuments_Found_Partnumbers(UBound(PartDocuments_Found_Partnumbers)) = current_product.PartNumber 'add additional file types here 'ElseIf TypeName(current_product.ReferenceProduct.Parent) = \"Shape\" Then.... Omit_from_Save: ElseIf TypeName(current_product.ReferenceProduct.Parent) = \"ProductDocument\" Then Set current_ref_doc = current_product.ReferenceProduct.Parent 'is a .CATProduct 'save file within the folder of parent product.... If Save_New_Files_Only = True And current_ref_doc.Path <> \"\" Then GoTo Omit_from_Save_2 'check if part number exists in set before saving.... If UBound(ProductDocuments_Found_Partnumbers) > 0 Then For check_pnum_pct = 1 To UBound(ProductDocuments_Found_Partnumbers) 'avoid duplicates If current_product.PartNumber = ProductDocuments_Found_Partnumbers(check_pnum_pct) Then GoTo Omit_from_Save_2 Next check_pnum_pct End If On Error Resume Next 'if folder exists..... fso.CreateFolder current_directory_for_saving ReDim Preserve ProductDocuments_Found(UBound(ProductDocuments_Found) + 1) ReDim Preserve ProductDocuments_Found_Save_Path(UBound(ProductDocuments_Found_Save_Path) + 1) ReDim Preserve ProductDocuments_Found_Partnumbers(UBound(ProductDocuments_Found_Partnumbers) + 1) Set ProductDocuments_Found(UBound(ProductDocuments_Found)) = current_ref_doc ProductDocuments_Found_Save_Path(UBound(ProductDocuments_Found_Save_Path)) = current_directory_for_saving & \"\\\" & current_product.PartNumber ProductDocuments_Found_Partnumbers(UBound(ProductDocuments_Found_Partnumbers)) = current_product.PartNumber Omit_from_Save_2: Set products_within = current_product.Products For a = 1 To products_within.Count Call query_objects_for_save(products_within.Item(a), current_directory_for_saving & \"\\\" & current_product.PartNumber) Next a End If End Sub '*********************************************************************************** '*********************************************************************************** Sub Save_in_Reverse_Order() 'folders already created.... Dim NoneChecked As Boolean Dim AutomationObj Dim objDWGex As DwgExport Dim OutputDirPath As String Dim FileName As String Dim mPart As Part 'save parts and then products in reverse order NoneChecked = False If FDM.chkIGSExport.Enabled = True Then If FDM.chkIGSExport.Value = -1 Then NoneChecked = False FDM.lblStatusBar.Caption = \"Saving... IGS files to \" & FDM_1.Dir_For_Save For h = UBound(PartDocuments_Found) To 1 Step -1 Call PartDocuments_Found(h).ExportData(PartDocuments_Found_Save_Path(h), \"igs\") Next h NoneChecked = False FDM.chkIGSExport.Enabled = False FDM.lblStatusBar.Caption = \"Saved IGS files to \" & FDM_1.Dir_For_Save Exit Sub Else NoneChecked = True End If NoneChecked = False End If If FDM.chkDWGExport.Enabled = True Then If FDM.chkDWGExport.Value = -1 Then NoneChecked = False FDM.lblStatusBar.Caption = \"Saving... DWG files to \" & FDM_1.Dir_For_Save For h = UBound(PartDocuments_Found) To 1 Step -1 Set mPart = PartDocuments_Found(h).Part Set AutomationObj = mPart.GetItem(\"GTCEDwgVBExt\") Set objDWGex = AutomationObj objDWGex.MultipleBlocks = False OutputDirPath = Left(PartDocuments_Found_Save_Path(h), InStrRev(PartDocuments_Found_Save_Path(h), \"\\\") - 1) FileName = Right(PartDocuments_Found_Save_Path(h), _ Len(PartDocuments_Found_Save_Path(h)) - InStrRev(PartDocuments_Found_Save_Path(h), \"\\\")) & \".dwg\" objDWGex.ExportCurrentDoc OutputDirPath, FileName Next h FDM.chkDWGExport.Enabled = False FDM.lblStatusBar.Caption = \"Saved DWG files to \" & FDM_1.Dir_For_Save Exit Sub Else NoneChecked = True End If NoneChecked = False End If If FDM.chk3DXMLExport.Enabled = True Then If FDM.chk3DXMLExport.Value = -1 Then NoneChecked = False FDM.lblStatusBar.Caption = \"Saving... 3DXML files to \" & FDM_1.Dir_For_Save For h = UBound(PartDocuments_Found) To 1 Step -1 Call PartDocuments_Found(h).ExportData(PartDocuments_Found_Save_Path(h), \"3dxml\") Next h FDM.chk3DXMLExport.Enabled = False FDM.lblStatusBar.Caption = \"Saved 3DXML files to \" & FDM_1.Dir_For_Save Exit Sub Else NoneChecked = True End If NoneChecked = False End If If FDM.chkDPExport.Enabled = True Then If FDM.chkDPExport.Value = -1 Then NoneChecked = False FDM.lblStatusBar.Caption = \"Saving... DP Model to \" & FDM_1.Dir_For_Save For h = UBound(PartDocuments_Found) To 1 Step -1 'partdocuments_found(h).SaveAs Call PartDocuments_Found(h).SaveAs(PartDocuments_Found_Save_Path(h) & \".CATPart\") Next h For n = UBound(ProductDocuments_Found) To 1 Step -1 Call ProductDocuments_Found(n).SaveAs(ProductDocuments_Found_Save_Path(n) & \".CATProduct\") Next n FDM.chkDPExport.Enabled = False FDM.lblStatusBar.Caption = \"Saved DP Model to \" & FDM_1.Dir_For_Save Else NoneChecked = True End If NoneChecked = False End If If NoneChecked = True Then FDM.lblStatusBar.Caption = \"Select at least one format - IGS/DWG/3DXML/DP\" FDM.lblStatusBar.ForeColor = RGB(255, 0, 0) End If End Sub V1 Private Sub CheckBox1_Click() 'new files only FDM_1.Save_New_Files_Only = CheckBox1.Value End Sub Private Sub CheckBox2_Click() FDM_1.Use_Directory_Path_of_Root_Product = CheckBox2.Value 'use root... End Sub Private Sub CommandButton1_Click() FDM_1.Target_Directory = TextBox1.Text 'save files.. If Use_Directory_Path_of_Root_Product = True Then FDM_1.Dir_For_Save = CATIA.ActiveDocument.Path Else FDM_1.Dir_For_Save = Target_Directory End If If FDM_1.Dir_For_Save = \"\" Then MsgBox \"Directory Not Specified\" Else 'save work FDM_1.Save_Files End If End Sub Private Sub CommandButton2_Click() End 'exit End Sub Private Sub CommandButton3_Click() CATIA.StartCommand \"Save Management\" 'check file status End Sub 'Victor Keto - Gehry Technologies 7/20/08 '******************************************************** '************************************************* 'Note: the first instance found for each product is saved, All other instances are ignored (to avoid redundant saves) 'If the 'in context' instance appears first in the tree, it will be saved to a matching folder path, instead of to the path of an 'out of context' instance Public Save_New_Files_Only As Boolean Public Use_Directory_Path_of_Root_Product As Boolean Public Target_Directory As String 'if not using the directory of the root.. 'folder will be created during the save if it does not exist... Public Dir_For_Save As String Public PartDocuments_Found() As PartDocument Public PartDocuments_Found_Save_Path() As String Public PartDocuments_Found_Partnumbers() As String Public ProductDocuments_Found() As ProductDocument Public ProductDocuments_Found_Save_Path() As String Public ProductDocuments_Found_Partnumbers() As String '*********************************************************************************** '*********************************************************************************** Sub CATMain() Save_New_Files_Only = False Use_Directory_Path_of_Root_Product = False Target_Directory = \"\" 'if not using the directory of the root.. FDM.Show End Sub Sub Save_Files() ReDim PartDocuments_Found(0) ReDim PartDocuments_Found_Save_Path(0) ReDim PartDocuments_Found_Partnumbers(0) ReDim ProductDocuments_Found(0) ReDim ProductDocuments_Found_Save_Path(0) ReDim ProductDocuments_Found_Partnumbers(0) CATIA.DisplayFileAlerts = False Call query_objects_for_save(CATIA.ActiveDocument.Product, Dir_For_Save) Call save_in_reverse_order End Sub '*********************************************************************************** '*********************************************************************************** 'recursively query files top-down, and then save in reverse order to avoid autosaves to parent product folders... Sub query_objects_for_save(current_product As Product, current_directory_for_saving As String) 'the root product should be saved, therefore no save occurs at recursive step 1 Dim fso Set fso = CreateObject(\"Scripting.FileSystemObject\") Dim current_ref_doc As Document Dim a As Integer Dim products_within As Products If TypeName(current_product.ReferenceProduct.Parent) = \"PartDocument\" Then 'a .CATPart On Error GoTo Omit_from_Save Set current_ref_doc = current_product.ReferenceProduct.Parent 'create folder for part (if does not exist) with parent product name and save part within.... If Save_New_Files_Only = True And current_ref_doc.Path <> \"\" Then GoTo Omit_from_Save 'check if part number exists in set before saving.... If UBound(PartDocuments_Found_Partnumbers) > 0 Then For check_pnum = 1 To UBound(PartDocuments_Found_Partnumbers) 'avoid duplicates If current_product.PartNumber = PartDocuments_Found_Partnumbers(check_pnum) Then GoTo Omit_from_Save Next check_pnum End If On Error Resume Next 'if folder exists..... fso.CreateFolder current_directory_for_saving ReDim Preserve PartDocuments_Found(UBound(PartDocuments_Found) + 1) ReDim Preserve PartDocuments_Found_Save_Path(UBound(PartDocuments_Found_Save_Path) + 1) ReDim Preserve PartDocuments_Found_Partnumbers(UBound(PartDocuments_Found_Partnumbers) + 1) Set PartDocuments_Found(UBound(PartDocuments_Found)) = current_ref_doc PartDocuments_Found_Save_Path(UBound(PartDocuments_Found_Save_Path)) = current_directory_for_saving & \"\\\" & current_product.PartNumber PartDocuments_Found_Partnumbers(UBound(PartDocuments_Found_Partnumbers)) = current_product.PartNumber 'add additional file types here 'ElseIf TypeName(current_product.ReferenceProduct.Parent) = \"Shape\" Then.... Omit_from_Save: ElseIf TypeName(current_product.ReferenceProduct.Parent) = \"ProductDocument\" Then Set current_ref_doc = current_product.ReferenceProduct.Parent 'is a .CATProduct 'save file within the folder of parent product.... If Save_New_Files_Only = True And current_ref_doc.Path <> \"\" Then GoTo Omit_from_Save_2 'check if part number exists in set before saving.... If UBound(ProductDocuments_Found_Partnumbers) > 0 Then For check_pnum_pct = 1 To UBound(ProductDocuments_Found_Partnumbers) 'avoid duplicates If current_product.PartNumber = ProductDocuments_Found_Partnumbers(check_pnum_pct) Then GoTo Omit_from_Save_2 Next check_pnum_pct End If On Error Resume Next 'if folder exists..... fso.CreateFolder current_directory_for_saving ReDim Preserve ProductDocuments_Found(UBound(ProductDocuments_Found) + 1) ReDim Preserve ProductDocuments_Found_Save_Path(UBound(ProductDocuments_Found_Save_Path) + 1) ReDim Preserve ProductDocuments_Found_Partnumbers(UBound(ProductDocuments_Found_Partnumbers) + 1) Set ProductDocuments_Found(UBound(ProductDocuments_Found)) = current_ref_doc ProductDocuments_Found_Save_Path(UBound(ProductDocuments_Found_Save_Path)) = current_directory_for_saving & \"\\\" & current_product.PartNumber ProductDocuments_Found_Partnumbers(UBound(ProductDocuments_Found_Partnumbers)) = current_product.PartNumber Omit_from_Save_2: Set products_within = current_product.Products For a = 1 To products_within.Count Call query_objects_for_save(products_within.Item(a), current_directory_for_saving & \"\\\" & current_product.PartNumber) Next a End If End Sub '*********************************************************************************** '*********************************************************************************** Sub save_in_reverse_order() 'folders already created.... 'save parts and then products in reverse order For h = UBound(PartDocuments_Found) To 1 Step -1 PartDocuments_Found(h).SaveAs PartDocuments_Found_Save_Path(h) Next h For n = UBound(ProductDocuments_Found) To 1 Step -1 ProductDocuments_Found(n).SaveAs ProductDocuments_Found_Save_Path(n) Next n End Sub","title":"BIM save"},{"location":"DS-CODE/Functions/BIM_Save/#bim-save","text":"V2 UI Private Sub CheckBox1_Click() 'new files only FDM_1.Save_New_Files_Only = CheckBox1.Value End Sub Private Sub CheckBox2_Click() FDM_1.Use_Directory_Path_of_Root_Product = CheckBox2.Value 'use root... End Sub Private Sub cmdSave_Click() Dim NoneChecked As Boolean ' Dim fso ' Set fso = CreateObject(\"Scripting.FileSystemObject\") NoneChecked = True If Right(TextBox1.Text, 1) = \"\\\" Then TextBox1.Text = Left(TextBox1.Text, Len(TextBox1.Text) - 1) End If FDM_1.Target_Directory = TextBox1.Text 'save files.. FDM.Repaint If FDM_1.Target_Directory = \"\" Then FDM.lblStatusBar.Caption = \"Specify Target Directory\" FDM.lblStatusBar.ForeColor = RGB(255, 0, 0) FDM.Repaint Else FDM_1.Dir_For_Save = Target_Directory If FDM.chkIGSExport.Value = -1 Then FDM_1.Dir_For_Save = Target_Directory & \"\\IGS\" FDM_1.Save_Files NoneChecked = False Else NoneChecked = True End If If FDM.chkDWGExport.Value = -1 Then FDM_1.Dir_For_Save = Target_Directory & \"\\DWG\" FDM_1.Save_Files NoneChecked = False Else NoneChecked = True End If If FDM.chk3DXMLExport.Value = -1 Then FDM_1.Dir_For_Save = Target_Directory & \"\\3DXML\" FDM_1.Save_Files NoneChecked = False Else NoneChecked = True End If If FDM.chkDPExport.Value = -1 Then MsgBox \"WARNING:\" & (Chr(13)) & _ \"This will save and update the\" & (Chr(13)) & _ \"Links in the original Product!\", vbCritical FDM_1.Dir_For_Save = Target_Directory & \"\\DP\" FDM_1.Save_Files NoneChecked = False Else NoneChecked = True End If End If If FDM_1.Dir_For_Save = \"\" Then 'FDM.lblStatusBar.Caption = \"Specify Target Directory\" FDM.lblStatusBar.ForeColor = RGB(0, 0, 255) Else If NoneChecked = True Then FDM_1.Save_Files End If End If MsgBox \"Completed\" End Sub Private Sub cmdExit_Click() End 'exit End Sub Private Sub TextBox1_AfterUpdate() TextBox1.ForeColor = RGB(0, 0, 0) End Sub Private Sub TextBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean) TextBox1.Value = \"\" End Sub Private Sub UserForm_Click() End Sub ===\"code\" 'Victor Keto - Gehry Technologies 7/20/08 'Vish Urala - Arup Americas 2009-10-09 '******************************************************** '************************************************* 'Note: the first instance found for each product is saved, All other instances are ignored (to avoid redundant saves) 'If the 'in context' instance appears first in the tree, it will be saved to a matching folder path, instead of to the path of an 'out of context' instance Public Save_New_Files_Only As Boolean Public Use_Directory_Path_of_Root_Product As Boolean Public Target_Directory As String 'if not using the directory of the root.. 'folder will be created during the save if it does not exist... Public Dir_For_Save As String Public PartDocuments_Found() As PartDocument Public PartDocuments_Found_Save_Path() As String Public PartDocuments_Found_Partnumbers() As String Public ProductDocuments_Found() As ProductDocument Public ProductDocuments_Found_Save_Path() As String Public ProductDocuments_Found_Partnumbers() As String '*********************************************************************************** '*********************************************************************************** Sub CATMain() Target_Directory = \"\" 'if not using the directory of the root.. FDM.Show End Sub Sub Save_Files() ReDim PartDocuments_Found(0) ReDim PartDocuments_Found_Save_Path(0) ReDim PartDocuments_Found_Partnumbers(0) ReDim ProductDocuments_Found(0) ReDim ProductDocuments_Found_Save_Path(0) ReDim ProductDocuments_Found_Partnumbers(0) On Error GoTo ErrorHandler CATIA.DisplayFileAlerts = False If CATIA.ActiveDocument.Name = \"\" Then Else Call query_objects_for_save(CATIA.ActiveDocument.Product, Dir_For_Save) Call Save_in_Reverse_Order End If On Error GoTo 0 Exit Sub ' Exit to avoid handler. ErrorHandler: ' Error-handling routine. Select Case Err.Number ' Evaluate error number. Case -2147467259 ' \"File already open\" error. FDM.lblStatusBar.Caption = \"OPEN a DP Product \" FDM.lblStatusBar.ForeColor = RGB(255, 0, 0) End Select Resume ' Resume execution at same line that caused the error. End Sub '*********************************************************************************** '*********************************************************************************** 'recursively query files top-down, and then save in reverse order to avoid autosaves to parent product folders... Sub query_objects_for_save(current_product As Product, current_directory_for_saving As String) 'the root product should be saved, therefore no save occurs at recursive step 1 Dim fso Set fso = CreateObject(\"Scripting.FileSystemObject\") Dim current_ref_doc As Document Dim a As Integer Dim products_within As Products If TypeName(current_product.ReferenceProduct.Parent) = \"PartDocument\" Then 'a .CATPart On Error GoTo Omit_from_Save Set current_ref_doc = current_product.ReferenceProduct.Parent 'create folder for part (if does not exist) with parent product name and save part within.... If Save_New_Files_Only = True And current_ref_doc.Path <> \"\" Then GoTo Omit_from_Save 'check if part number exists in set before saving.... If UBound(PartDocuments_Found_Partnumbers) > 0 Then For check_pnum = 1 To UBound(PartDocuments_Found_Partnumbers) 'avoid duplicates If current_product.PartNumber = PartDocuments_Found_Partnumbers(check_pnum) Then GoTo Omit_from_Save Next check_pnum End If On Error Resume Next 'if folder exists..... fso.CreateFolder current_directory_for_saving ReDim Preserve PartDocuments_Found(UBound(PartDocuments_Found) + 1) ReDim Preserve PartDocuments_Found_Save_Path(UBound(PartDocuments_Found_Save_Path) + 1) ReDim Preserve PartDocuments_Found_Partnumbers(UBound(PartDocuments_Found_Partnumbers) + 1) Set PartDocuments_Found(UBound(PartDocuments_Found)) = current_ref_doc PartDocuments_Found_Save_Path(UBound(PartDocuments_Found_Save_Path)) = current_directory_for_saving & \"\\\" & current_product.PartNumber PartDocuments_Found_Partnumbers(UBound(PartDocuments_Found_Partnumbers)) = current_product.PartNumber 'add additional file types here 'ElseIf TypeName(current_product.ReferenceProduct.Parent) = \"Shape\" Then.... Omit_from_Save: ElseIf TypeName(current_product.ReferenceProduct.Parent) = \"ProductDocument\" Then Set current_ref_doc = current_product.ReferenceProduct.Parent 'is a .CATProduct 'save file within the folder of parent product.... If Save_New_Files_Only = True And current_ref_doc.Path <> \"\" Then GoTo Omit_from_Save_2 'check if part number exists in set before saving.... If UBound(ProductDocuments_Found_Partnumbers) > 0 Then For check_pnum_pct = 1 To UBound(ProductDocuments_Found_Partnumbers) 'avoid duplicates If current_product.PartNumber = ProductDocuments_Found_Partnumbers(check_pnum_pct) Then GoTo Omit_from_Save_2 Next check_pnum_pct End If On Error Resume Next 'if folder exists..... fso.CreateFolder current_directory_for_saving ReDim Preserve ProductDocuments_Found(UBound(ProductDocuments_Found) + 1) ReDim Preserve ProductDocuments_Found_Save_Path(UBound(ProductDocuments_Found_Save_Path) + 1) ReDim Preserve ProductDocuments_Found_Partnumbers(UBound(ProductDocuments_Found_Partnumbers) + 1) Set ProductDocuments_Found(UBound(ProductDocuments_Found)) = current_ref_doc ProductDocuments_Found_Save_Path(UBound(ProductDocuments_Found_Save_Path)) = current_directory_for_saving & \"\\\" & current_product.PartNumber ProductDocuments_Found_Partnumbers(UBound(ProductDocuments_Found_Partnumbers)) = current_product.PartNumber Omit_from_Save_2: Set products_within = current_product.Products For a = 1 To products_within.Count Call query_objects_for_save(products_within.Item(a), current_directory_for_saving & \"\\\" & current_product.PartNumber) Next a End If End Sub '*********************************************************************************** '*********************************************************************************** Sub Save_in_Reverse_Order() 'folders already created.... Dim NoneChecked As Boolean Dim AutomationObj Dim objDWGex As DwgExport Dim OutputDirPath As String Dim FileName As String Dim mPart As Part 'save parts and then products in reverse order NoneChecked = False If FDM.chkIGSExport.Enabled = True Then If FDM.chkIGSExport.Value = -1 Then NoneChecked = False FDM.lblStatusBar.Caption = \"Saving... IGS files to \" & FDM_1.Dir_For_Save For h = UBound(PartDocuments_Found) To 1 Step -1 Call PartDocuments_Found(h).ExportData(PartDocuments_Found_Save_Path(h), \"igs\") Next h NoneChecked = False FDM.chkIGSExport.Enabled = False FDM.lblStatusBar.Caption = \"Saved IGS files to \" & FDM_1.Dir_For_Save Exit Sub Else NoneChecked = True End If NoneChecked = False End If If FDM.chkDWGExport.Enabled = True Then If FDM.chkDWGExport.Value = -1 Then NoneChecked = False FDM.lblStatusBar.Caption = \"Saving... DWG files to \" & FDM_1.Dir_For_Save For h = UBound(PartDocuments_Found) To 1 Step -1 Set mPart = PartDocuments_Found(h).Part Set AutomationObj = mPart.GetItem(\"GTCEDwgVBExt\") Set objDWGex = AutomationObj objDWGex.MultipleBlocks = False OutputDirPath = Left(PartDocuments_Found_Save_Path(h), InStrRev(PartDocuments_Found_Save_Path(h), \"\\\") - 1) FileName = Right(PartDocuments_Found_Save_Path(h), _ Len(PartDocuments_Found_Save_Path(h)) - InStrRev(PartDocuments_Found_Save_Path(h), \"\\\")) & \".dwg\" objDWGex.ExportCurrentDoc OutputDirPath, FileName Next h FDM.chkDWGExport.Enabled = False FDM.lblStatusBar.Caption = \"Saved DWG files to \" & FDM_1.Dir_For_Save Exit Sub Else NoneChecked = True End If NoneChecked = False End If If FDM.chk3DXMLExport.Enabled = True Then If FDM.chk3DXMLExport.Value = -1 Then NoneChecked = False FDM.lblStatusBar.Caption = \"Saving... 3DXML files to \" & FDM_1.Dir_For_Save For h = UBound(PartDocuments_Found) To 1 Step -1 Call PartDocuments_Found(h).ExportData(PartDocuments_Found_Save_Path(h), \"3dxml\") Next h FDM.chk3DXMLExport.Enabled = False FDM.lblStatusBar.Caption = \"Saved 3DXML files to \" & FDM_1.Dir_For_Save Exit Sub Else NoneChecked = True End If NoneChecked = False End If If FDM.chkDPExport.Enabled = True Then If FDM.chkDPExport.Value = -1 Then NoneChecked = False FDM.lblStatusBar.Caption = \"Saving... DP Model to \" & FDM_1.Dir_For_Save For h = UBound(PartDocuments_Found) To 1 Step -1 'partdocuments_found(h).SaveAs Call PartDocuments_Found(h).SaveAs(PartDocuments_Found_Save_Path(h) & \".CATPart\") Next h For n = UBound(ProductDocuments_Found) To 1 Step -1 Call ProductDocuments_Found(n).SaveAs(ProductDocuments_Found_Save_Path(n) & \".CATProduct\") Next n FDM.chkDPExport.Enabled = False FDM.lblStatusBar.Caption = \"Saved DP Model to \" & FDM_1.Dir_For_Save Else NoneChecked = True End If NoneChecked = False End If If NoneChecked = True Then FDM.lblStatusBar.Caption = \"Select at least one format - IGS/DWG/3DXML/DP\" FDM.lblStatusBar.ForeColor = RGB(255, 0, 0) End If End Sub V1 Private Sub CheckBox1_Click() 'new files only FDM_1.Save_New_Files_Only = CheckBox1.Value End Sub Private Sub CheckBox2_Click() FDM_1.Use_Directory_Path_of_Root_Product = CheckBox2.Value 'use root... End Sub Private Sub CommandButton1_Click() FDM_1.Target_Directory = TextBox1.Text 'save files.. If Use_Directory_Path_of_Root_Product = True Then FDM_1.Dir_For_Save = CATIA.ActiveDocument.Path Else FDM_1.Dir_For_Save = Target_Directory End If If FDM_1.Dir_For_Save = \"\" Then MsgBox \"Directory Not Specified\" Else 'save work FDM_1.Save_Files End If End Sub Private Sub CommandButton2_Click() End 'exit End Sub Private Sub CommandButton3_Click() CATIA.StartCommand \"Save Management\" 'check file status End Sub 'Victor Keto - Gehry Technologies 7/20/08 '******************************************************** '************************************************* 'Note: the first instance found for each product is saved, All other instances are ignored (to avoid redundant saves) 'If the 'in context' instance appears first in the tree, it will be saved to a matching folder path, instead of to the path of an 'out of context' instance Public Save_New_Files_Only As Boolean Public Use_Directory_Path_of_Root_Product As Boolean Public Target_Directory As String 'if not using the directory of the root.. 'folder will be created during the save if it does not exist... Public Dir_For_Save As String Public PartDocuments_Found() As PartDocument Public PartDocuments_Found_Save_Path() As String Public PartDocuments_Found_Partnumbers() As String Public ProductDocuments_Found() As ProductDocument Public ProductDocuments_Found_Save_Path() As String Public ProductDocuments_Found_Partnumbers() As String '*********************************************************************************** '*********************************************************************************** Sub CATMain() Save_New_Files_Only = False Use_Directory_Path_of_Root_Product = False Target_Directory = \"\" 'if not using the directory of the root.. FDM.Show End Sub Sub Save_Files() ReDim PartDocuments_Found(0) ReDim PartDocuments_Found_Save_Path(0) ReDim PartDocuments_Found_Partnumbers(0) ReDim ProductDocuments_Found(0) ReDim ProductDocuments_Found_Save_Path(0) ReDim ProductDocuments_Found_Partnumbers(0) CATIA.DisplayFileAlerts = False Call query_objects_for_save(CATIA.ActiveDocument.Product, Dir_For_Save) Call save_in_reverse_order End Sub '*********************************************************************************** '*********************************************************************************** 'recursively query files top-down, and then save in reverse order to avoid autosaves to parent product folders... Sub query_objects_for_save(current_product As Product, current_directory_for_saving As String) 'the root product should be saved, therefore no save occurs at recursive step 1 Dim fso Set fso = CreateObject(\"Scripting.FileSystemObject\") Dim current_ref_doc As Document Dim a As Integer Dim products_within As Products If TypeName(current_product.ReferenceProduct.Parent) = \"PartDocument\" Then 'a .CATPart On Error GoTo Omit_from_Save Set current_ref_doc = current_product.ReferenceProduct.Parent 'create folder for part (if does not exist) with parent product name and save part within.... If Save_New_Files_Only = True And current_ref_doc.Path <> \"\" Then GoTo Omit_from_Save 'check if part number exists in set before saving.... If UBound(PartDocuments_Found_Partnumbers) > 0 Then For check_pnum = 1 To UBound(PartDocuments_Found_Partnumbers) 'avoid duplicates If current_product.PartNumber = PartDocuments_Found_Partnumbers(check_pnum) Then GoTo Omit_from_Save Next check_pnum End If On Error Resume Next 'if folder exists..... fso.CreateFolder current_directory_for_saving ReDim Preserve PartDocuments_Found(UBound(PartDocuments_Found) + 1) ReDim Preserve PartDocuments_Found_Save_Path(UBound(PartDocuments_Found_Save_Path) + 1) ReDim Preserve PartDocuments_Found_Partnumbers(UBound(PartDocuments_Found_Partnumbers) + 1) Set PartDocuments_Found(UBound(PartDocuments_Found)) = current_ref_doc PartDocuments_Found_Save_Path(UBound(PartDocuments_Found_Save_Path)) = current_directory_for_saving & \"\\\" & current_product.PartNumber PartDocuments_Found_Partnumbers(UBound(PartDocuments_Found_Partnumbers)) = current_product.PartNumber 'add additional file types here 'ElseIf TypeName(current_product.ReferenceProduct.Parent) = \"Shape\" Then.... Omit_from_Save: ElseIf TypeName(current_product.ReferenceProduct.Parent) = \"ProductDocument\" Then Set current_ref_doc = current_product.ReferenceProduct.Parent 'is a .CATProduct 'save file within the folder of parent product.... If Save_New_Files_Only = True And current_ref_doc.Path <> \"\" Then GoTo Omit_from_Save_2 'check if part number exists in set before saving.... If UBound(ProductDocuments_Found_Partnumbers) > 0 Then For check_pnum_pct = 1 To UBound(ProductDocuments_Found_Partnumbers) 'avoid duplicates If current_product.PartNumber = ProductDocuments_Found_Partnumbers(check_pnum_pct) Then GoTo Omit_from_Save_2 Next check_pnum_pct End If On Error Resume Next 'if folder exists..... fso.CreateFolder current_directory_for_saving ReDim Preserve ProductDocuments_Found(UBound(ProductDocuments_Found) + 1) ReDim Preserve ProductDocuments_Found_Save_Path(UBound(ProductDocuments_Found_Save_Path) + 1) ReDim Preserve ProductDocuments_Found_Partnumbers(UBound(ProductDocuments_Found_Partnumbers) + 1) Set ProductDocuments_Found(UBound(ProductDocuments_Found)) = current_ref_doc ProductDocuments_Found_Save_Path(UBound(ProductDocuments_Found_Save_Path)) = current_directory_for_saving & \"\\\" & current_product.PartNumber ProductDocuments_Found_Partnumbers(UBound(ProductDocuments_Found_Partnumbers)) = current_product.PartNumber Omit_from_Save_2: Set products_within = current_product.Products For a = 1 To products_within.Count Call query_objects_for_save(products_within.Item(a), current_directory_for_saving & \"\\\" & current_product.PartNumber) Next a End If End Sub '*********************************************************************************** '*********************************************************************************** Sub save_in_reverse_order() 'folders already created.... 'save parts and then products in reverse order For h = UBound(PartDocuments_Found) To 1 Step -1 PartDocuments_Found(h).SaveAs PartDocuments_Found_Save_Path(h) Next h For n = UBound(ProductDocuments_Found) To 1 Step -1 ProductDocuments_Found(n).SaveAs ProductDocuments_Found_Save_Path(n) Next n End Sub","title":"BIM save"},{"location":"DS-CODE/Functions/BMEDI_RD_ContralPoints/","text":"Attribute VB_Name = \"BMEDI_RD_ContralPoints\" Sub main () ' Auther : XUSong ' Data : 2021.12.24 Dim CATIA As INFITF . Application : Set CATIA = GetObject (, \"CATIA.Application\" ) '\u521b\u5efaEXCEL\u5bf9\u8c61 ' MsgBox catia.ActiveEditor.ActiveObject.Name Dim part As part Set part = CATIA . ActiveEditor . ActiveObject Dim hb As HybridBody Set hb = part . HybridBodies . Add hb . Name = \"\u5e73\u4ea4\u53e3\u9053\u8def\u63a7\u5236\u70b9\" Dim obj1 As HybridBody Set obj1 = CATIA . ActiveEditor . Selection . Item ( 1 ). Value ' Dim surf1 As HybridShape: Set surf1 = obj1.HybridShapes.Item(1) ' Dim surf2 As HybridShape: Set surf2 = obj1.HybridShapes.Item(2) Dim Alignment1 As HybridShape : Set Alignment1 = obj1 . HybridShapes . Item ( 1 ) Dim Alignment2 As HybridShape : Set Alignment2 = obj1 . HybridShapes . Item ( 2 ) Dim roadsurface As HybridShape : Set roadsurface = obj1 . HybridShapes . Item ( 3 ) ' msgbox Alignment1.Name + \" | \" + Alignment2.Name Call RoadSurfaceContral ( part , Alignment1 , Alignment2 , roadsurface , hb ) End Sub Function RoadSurfaceContral ( ByVal part As MECMOD . part , ByVal edge1 As HybridShape , ByVal edge2 As HybridShape , ByVal roadsurf As HybridShape , ByVal hb As HybridBody ) Dim hsf As HybridShapeFactory Set hsf = part . HybridShapeFactory Dim ptHcount As Integer ptHcount = 10 Dim ptVcount As Integer ptVcount = 5 Dim hb1 As HybridBody Set hb1 = hb . HybridBodies . Add hb1 . Name = \"\u63a7\u5236\u70b9\" For i = 1 To ptHcount - 1 Dim pts As HybridShape Set pts = hsf . AddNewPointOnCurveFromPercent ( edge2 , i / ptHcount , True ) pts . Compute Dim pln As HybridShape Set pln = hsf . AddNewPlaneNormal ( edge2 , pts ) pln . Compute Dim intt1 As HybridShape Set intt1 = hsf . AddNewIntersection ( pln , roadsurf ) intt1 . Compute 'hb.AppendHybridShape intt1 For j = 1 To ptVcount - 1 Dim pts1 As HybridShape Set pts1 = hsf . AddNewPointOnCurveFromPercent ( intt1 , j / ptVcount , True ) pts1 . Compute Dim zpts As HybridShape Set zpts = hsf . AddNewTranslate ( pts1 , hsf . AddNewDirectionByCoord ( 0 , 0 , 1 ), 40 ) zpts . Compute zpts . Name = CStr ( i ) + \"_\" + CStr ( j ) hb1 . AppendHybridShape zpts Next Next Dim hybridShapeBoundary1 As HybridShapeBoundary Set hybridShapeBoundary1 = hsf . AddNewBoundaryOfSurface ( roadsurf ) hybridShapeBoundary1 . Compute Dim hybridShapeFill1 As HybridShapeFill Set hybridShapeFill1 = hsf . AddNewFill () hybridShapeFill1 . AddBound hybridShapeBoundary1 For k = 1 To hb1 . HybridShapes . Count hybridShapeFill1 . AppendConstraint hb1 . HybridShapes . Item ( k ) hybridShapeFill1 . Compute Next hybridShapeFill1 . Compute hb . AppendHybridShape hybridShapeFill1 hybridShapeFill1 . Name = \"\u5e73\u4ea4\u53e3\u66f2\u9762\" End Function","title":"BMEDI RD ContralPoints"},{"location":"DS-CODE/Functions/BMEDI_SplitRoadSurface/","text":"Attribute VB_Name = \"BMEDI_SplitRoadSurface\" Sub main() Dim CATIA As INFITF.Application: Set CATIA = GetObject(, \"CATIA.Application\") '\u521b\u5efaEXCEL\u5bf9\u8c61 ' MsgBox catia.ActiveEditor.ActiveObject.Name Dim part As part Set part = CATIA.ActiveEditor.ActiveObject Dim hb As HybridBody Set hb = part.HybridBodies.Add hb.Name = \"\u5e73\u4ea4\u53e3\u9053\u8def\u66f2\u9762\" Dim obj1 As HybridBody Set obj1 = CATIA.ActiveEditor.Selection.Item(1).Value Dim surf1 As HybridShape: Set surf1 = obj1.HybridShapes.Item(1) Dim surf2 As HybridShape: Set surf2 = obj1.HybridShapes.Item(2) Dim Alignment1 As HybridShape: Set Alignment1 = obj1.HybridShapes.Item(6) Dim Alignment2 As HybridShape: Set Alignment2 = obj1.HybridShapes.Item(7) msgbox surf1.Name + \"#\" + surf1.Name + \"#\" + Alignment1.Name + \"#\" + Alignment2.Name Dim opt As HybridShape Set opt = CreateRoadInterPoint(part, Alignment1, Alignment2, hb) Call splitRoadSurf(part, surf1, Alignment1, opt, 45000, hb) Call splitRoadSurf(part, surf2, Alignment2, opt, 45000, hb) End Sub Function CreateRoadInterPoint(part As MECMOD.part, Alignment1, Alignment2, hb) As HybridShape Dim hsf As HybridShapeFactory Set hsf = part.HybridShapeFactory If CheckIntersection(part, Alignment1, Alignment2) = True Then Dim intt1 As HybridShape Set intt1 = hsf.AddNewIntersection(Alignment1, Alignment2) intt1.Compute hb.AppendHybridShape intt1 intt1.Name = \"\u9053\u8def\u4e2d\u5fc3\u4ea4\u70b9\" Set CreateRoadInterPoint = intt1 End If End Function Function splitRoadSurf(part, surf1, crv1, opt, roadLength, hb) ' \u8f93\u5165\u6761\u4ef6\uff1a part\uff0c\u8def\u9762\uff0c\u4e2d\u5fc3\u7ebf\uff0c\u4ea4\u70b9 Dim hsf As HybridShapeFactory Set hsf = part.HybridShapeFactory ' Dim hybridShapeSphere1 As HybridShapeSphere Set hybridShapeSphere1 = hsf.AddNewSphere(opt, Nothing, roadLength, -45, 45, 0, 180) hybridShapeSphere1.Compute hybridShapeSphere1.Limitation = 1 'hb.AppendHybridShape hybridShapeSphere1 '\u521b\u5efa\u65b9\u5411\u5224\u65ad Dim hybridShapeLineTangency1 As HybridShapeLineTangency Set hybridShapeLineTangency1 = hsf.AddNewLineTangency(crv1, opt, -100#, 1000#, False) hybridShapeLineTangency1.Compute Dim hybridShapeLineTangency2 As HybridShapeLineTangency Set hybridShapeLineTangency2 = hsf.AddNewLineTangency(crv1, opt, -100#, -1000#, False) hybridShapeLineTangency2.Compute 'hb.AppendHybridShape hybridShapeLineTangency1 'hb.AppendHybridShape hybridShapeLineTangency2 Dim hybridShapeIntersection2 As HybridShapeIntersection Set hybridShapeIntersection2 = hsf.AddNewIntersection(hybridShapeSphere1, crv1) hybridShapeIntersection2.PointType = 0 'hb.AppendHybridShape hybridShapeIntersection2 ' Dim hybridShapeNear1 As HybridShapeNear Set hybridShapeNear1 = hsf.AddNewNear(hybridShapeIntersection2, hybridShapeLineTangency1) hb.AppendHybridShape hybridShapeNear1 hybridShapeNear1.Name = \"End_pt1\" Dim hybridShapeNear2 As HybridShapeNear Set hybridShapeNear2 = hsf.AddNewNear(hybridShapeIntersection2, hybridShapeLineTangency2) hb.AppendHybridShape hybridShapeNear2 hybridShapeNear2.Name = \"End_pt2\" ' \u521b\u5efa\u5e73\u9762 Dim pln1 As HybridShape Set pln1 = hsf.AddNewPlaneNormal(crv1, hybridShapeNear1) pln1.Compute Dim pln2 As HybridShape Set pln2 = hsf.AddNewPlaneNormal(crv1, hybridShapeNear2) pln2.Compute pln1.Name = \"Start_Pln\" pln2.Name = \"End_Pln\" hb.AppendHybridShape pln1 hb.AppendHybridShape pln2 Dim split1 As HybridShapeSplit Set split1 = hsf.AddNewHybridSplit(surf1, pln1, False) split1.BothSidesMode = True split1.Compute hsf.GSMVisibility split1.GetOtherSide, 0 Dim split2 As HybridShapeSplit Set split2 = hsf.AddNewHybridSplit(split1.GetOtherSide, pln2, True) split2.BothSidesMode = False split2.Compute split1.Name = \"Rd_Surf_1\" split2.Name = \"Rd_Surf_2\" hb.AppendHybridShape split1 hb.AppendHybridShape split2 End Function Function CheckIntersection(part As MECMOD.part, Object1 As Variant, Object2 As Variant) As Boolean Dim MyHSFactory As HybridShapeFactory Set MyHSFactory = part.HybridShapeFactory On Error GoTo Blast Dim TestInt As HybridShapeIntersection Set TestInt = MyHSFactory.AddNewIntersection(Object1, Object2) part.UpdateObject TestInt CheckIntersection = True Exit Function Blast: CheckIntersection = False End Function","title":"BMEDI SplitRoadSurface"},{"location":"DS-CODE/Functions/CreatePointFromExcel/","text":"CreatePointFromExcel VB.NET Imports System Imports excel = Microsoft.Office.Interop.Excel Imports HybridShapeTypeLib Imports MECMOD Imports KnowledgewareTypeLib Partial Public NotInheritable Class ThisApplication Inherits ObjectModelAgentLib.CATIAEntryPoint Public Shared Sub CATMain() 'Debug entry point, not visible from the host CATIA.SystemService.PrintToStdout(\"Hello, World! VB.NET\") Dim xlsapp As Microsoft.Office.Interop.Excel.Application = GetObject(, \"Excel.Application\") Dim sheet As excel.Worksheet = xlsapp.ActiveSheet Dim part As MECMOD.Part = CATIA.ActiveEditor.ActiveObject Dim hsf As HybridShapeTypeLib.HybridShapeFactory = part.HybridShapeFactory Dim hb As HybridBody hb = part.HybridBodies.Add Dim i As Integer = 1 Dim x, y, z As Double For i = 1 To 35 x = sheet.Cells(i + 2, 11).value y = sheet.Cells(i + 2, 12).value z = sheet.Cells(i + 2, 13).value Dim pt As Point = hsf.AddNewPointCoord(x, y, z) pt.Compute() hb.AppendHybridShape(pt) Next End Sub End Class println! ( \"Hello, world!\" );","title":"CreatePointFromExcel"},{"location":"DS-CODE/Functions/CreatePointFromExcel/#createpointfromexcel","text":"","title":"CreatePointFromExcel"},{"location":"DS-CODE/Functions/CreatePointFromExcel/#vbnet","text":"Imports System Imports excel = Microsoft.Office.Interop.Excel Imports HybridShapeTypeLib Imports MECMOD Imports KnowledgewareTypeLib Partial Public NotInheritable Class ThisApplication Inherits ObjectModelAgentLib.CATIAEntryPoint Public Shared Sub CATMain() 'Debug entry point, not visible from the host CATIA.SystemService.PrintToStdout(\"Hello, World! VB.NET\") Dim xlsapp As Microsoft.Office.Interop.Excel.Application = GetObject(, \"Excel.Application\") Dim sheet As excel.Worksheet = xlsapp.ActiveSheet Dim part As MECMOD.Part = CATIA.ActiveEditor.ActiveObject Dim hsf As HybridShapeTypeLib.HybridShapeFactory = part.HybridShapeFactory Dim hb As HybridBody hb = part.HybridBodies.Add Dim i As Integer = 1 Dim x, y, z As Double For i = 1 To 35 x = sheet.Cells(i + 2, 11).value y = sheet.Cells(i + 2, 12).value z = sheet.Cells(i + 2, 13).value Dim pt As Point = hsf.AddNewPointCoord(x, y, z) pt.Compute() hb.AppendHybridShape(pt) Next End Sub End Class println! ( \"Hello, world!\" );","title":"VB.NET"},{"location":"DS-CODE/Functions/ExportCaptureImg/","text":"ExportCaptureImg VBA Sub CATMain() Dim partDocument1 As PartDocument Set partDocument1 = CATIA.ActiveDocument Dim part1 As Part Set part1 = partDocument1.Part For k = 1 To CATIA.ActiveDocument.Selection.Count Dim parm1 As Parameter Set parm1 = CATIA.ActiveDocument.Selection.Item(k).Value 'part1.Parameters.Item(\"Angle.1\") Debug.Print parm1.ValueAsString() For i = 1 To 360 Dim str As String str = CStr(i) & \"deg\" parm1.ValuateFromString (str) part1.Update CATIA.ActiveWindow.ActiveViewer.CaptureToFile catCaptureFormatJPEG, \"C:\\temp\\img\\\" & \"\\MyImage\" & CStr(k) & \"_\" & CStr(i) & \".jpg\" Next Next End Sub Sub delay() '\u524d\u9762\u7684\u4ee3\u7801\u5230\u6b64 T = Timer Do While Timer - 2 < T Debug.Print Loop '\u540e\u9762\u7684\u4ee3\u7801\u7ee7\u7eed End Sub","title":"ExportCaptureImg"},{"location":"DS-CODE/Functions/ExportCaptureImg/#exportcaptureimg","text":"","title":"ExportCaptureImg"},{"location":"DS-CODE/Functions/ExportCaptureImg/#vba","text":"Sub CATMain() Dim partDocument1 As PartDocument Set partDocument1 = CATIA.ActiveDocument Dim part1 As Part Set part1 = partDocument1.Part For k = 1 To CATIA.ActiveDocument.Selection.Count Dim parm1 As Parameter Set parm1 = CATIA.ActiveDocument.Selection.Item(k).Value 'part1.Parameters.Item(\"Angle.1\") Debug.Print parm1.ValueAsString() For i = 1 To 360 Dim str As String str = CStr(i) & \"deg\" parm1.ValuateFromString (str) part1.Update CATIA.ActiveWindow.ActiveViewer.CaptureToFile catCaptureFormatJPEG, \"C:\\temp\\img\\\" & \"\\MyImage\" & CStr(k) & \"_\" & CStr(i) & \".jpg\" Next Next End Sub Sub delay() '\u524d\u9762\u7684\u4ee3\u7801\u5230\u6b64 T = Timer Do While Timer - 2 < T Debug.Print Loop '\u540e\u9762\u7684\u4ee3\u7801\u7ee7\u7eed End Sub","title":"VBA"},{"location":"DS-CODE/Functions/GenerateAnimation/","text":"GenerateAnimation \u9009\u62e9\u4e00\u4e2a\u66f2\u7ebf\uff0c\u5373\u53ef\u57fa\u4e8e\u8fd9\u4e2a\u7ebf\u521b\u5efa\u622a\u56fe\uff0c\u9ed8\u8ba4\u4e00\u4e2a\u7ebf\u5206\u4e86 10 \u4e2a\u70b9\uff0c\u81ea\u5df1\u6839\u636e\u9700\u8981\u8c03\u8282\uff1b V5 V6 Public ParamSelected , SectionSelected , CurveSelected Public SectionCoords ( 11 ) Sub GenerateAnimation () Dim TempCoords ( 11 ) Set Temp = CATIA . ActiveWindow . ActiveViewer Set TempCrv = CATIA . ActiveDocument . Selection . Item ( 1 ). Value Set CurrentPart = ContainingPart ( TempCrv ) Set TempSet = CurrentPart . HybridBodies . Add () TempSet . Name = \"ANIMATION_GEOMETRY\" '*************************** CREATE REFERENCE POINT ****************************** Set NewPt = CurrentPart . HybridShapeFactory . AddNewPointOnCurveFromPercent ( CurrentPart . CreateReferenceFromObject ( TempCrv ), 0 , False ) Call TempSet . AppendHybridShape ( NewPt ) CurrentPart . UpdateObject ( NewPt ) Set NewLine = CurrentPart . HybridShapeFactory . AddNewLineTangency ( CurrentPart . CreateReferenceFromObject ( TempCrv ), CurrentPart . CreateReferenceFromObject ( NewPt ), 0 , 1000 , False ) TempSet . AppendHybridShape ( NewLine ) CurrentPart . UpdateObject ( NewLine ) Set SPA = CATIA . ActiveDocument . GetWorkbench ( \"SPAWorkbench\" ) Set PtMes = SPA . GetMeasurable ( CurrentPart . CreateReferenceFromObject ( NewPt )) Set LineMes = SPA . GetMeasurable ( CurrentPart . CreateReferenceFromObject ( NewLine )) Dim Direction ( 2 ), UpVector ( 2 ) UpVector ( 0 ) = 0 UpVector ( 1 ) = 0 UpVector ( 2 ) = 1 '*************************** DETECT CURVE ****************************** Dim Coordinates ( 2 ) Dim OffsetValue As Double OffsetValue = 10 Dim Steps As Double Steps = 100 For LoopNum = 1 To CInt ( Steps ) 'ParamSelected.Value = CDbl(0) + LoopNum * (1 / 30) CurrentPart . Update NewPt . Ratio . Value = LoopNum * ( 1 # / CInt ( Steps )) CurrentPart . UpdateObject ( NewPt ) CurrentPart . UpdateObject ( NewLine ) PtMes . GetPoint Coordinates LineMes . GetDirection Direction CATIA . ActiveWindow . ActiveViewer . Viewpoint3D . PutOrigin Coordinates CATIA . ActiveWindow . ActiveViewer . Viewpoint3D . PutSightDirection Direction CATIA . ActiveWindow . ActiveViewer . Viewpoint3D . PutUpDirection UpVector CATIA . ActiveWindow . ActiveViewer . Update CATIA . ActiveWindow . ActiveViewer . CaptureToFile catCaptureFormatJPEG , \"C:\\Temp\\img\" & \"\\MyImage\" & LoopNum & \".jpg\" Next 'MsgBox (\"Generated Frames\") End Sub Function FindSection ( SectionName ) Dim TempSection Set oSections = CATIA . ActiveDocument . Product . GetTechnologicalObject ( \"Sections\" ) For LoopNum = 1 To oSections . Count If oSections . Item ( LoopNum ). Name = SectionName Then Set TempSection = oSections . Item ( LoopNum ) End If Next Set FindSection = TempSection End Function Function ContainingPart ( ByVal CatObject ) Dim found As Boolean Set Current = CatObject found = False Do While found = False Set Current = Current . Parent If TypeName ( Current ) = \"Part\" Then found = True End If Loop Set ContainingPart = Current End Function Option Explicit Off Imports CATOpnsMeasureIDL Module GeneratateAnimation Sub Main () GenerateAnimation () End Sub Public ParamSelected , SectionSelected , CurveSelected Public SectionCoords ( 11 ) Public catia As INFITF . Application = GetObject ( \"\" , \"CATIA.Application\" ) Sub GenerateAnimation () catia . ActiveWindow . Height = 2000 catia . ActiveWindow . Width = 3000 Dim TempCoords ( 11 ) 'Set Temp = CATIA.ActiveWindow.ActiveViewer TempCrv = catia . ActiveEditor . Selection . Item ( 1 ). Value CurrentPart = ContainingPart ( TempCrv ) TempSet = CurrentPart . HybridBodies . Add () TempSet . Name = \"ANIMATION_GEOMETRY\" '*************************** CREATE REFERENCE POINT ****************************** NewPt = CurrentPart . HybridShapeFactory . AddNewPointOnCurveFromPercent ( CurrentPart . CreateReferenceFromObject ( TempCrv ), 0 , False ) Call TempSet . AppendHybridShape ( NewPt ) CurrentPart . UpdateObject ( NewPt ) NewLine = CurrentPart . HybridShapeFactory . AddNewLineTangency ( CurrentPart . CreateReferenceFromObject ( TempCrv ), CurrentPart . CreateReferenceFromObject ( NewPt ), 0 , 1000 , False ) TempSet . AppendHybridShape ( NewLine ) CurrentPart . UpdateObject ( NewLine ) 'SPA = catia.ActiveDocument.GetWorkbench(\"SPAWorkbench\") 'PtMes = SPA.GetMeasurable(CurrentPart.CreateReferenceFromObject(NewPt)) 'LineMes = SPA.GetMeasurable(CurrentPart.CreateReferenceFromObject(NewLine)) Dim oMeasurableService As MeasurableService oMeasurableService = catia . ActiveEditor . GetService ( \"MeasurableService\" ) Dim PtMes As MeasurablePoint PtMes = oMeasurableService . GetMeasurable ( NewPt , CATMeasurableType . CAAMeasurablePoint ) Dim LineMes As MeasurableLine LineMes = oMeasurableService . GetMeasurable ( NewLine , CATMeasurableType . CAAMeasurableLine ) Dim Direction ( 2 ), UpVector ( 2 ) UpVector ( 0 ) = 0 UpVector ( 1 ) = 0 UpVector ( 2 ) = 1 '*************************** DETECT CURVE ****************************** Dim Coordinates ( 2 ) Dim OffsetValue As Double OffsetValue = 1 Dim Steps As Double Steps = 10 For LoopNum = 1 To CInt ( Steps ) 'ParamSelected.Value = CDbl(0) + LoopNum * (1 / 30) CurrentPart . Update () NewPt . Ratio . Value = LoopNum * ( 1.0 # / CInt ( Steps )) CurrentPart . UpdateObject ( NewPt ) CurrentPart . UpdateObject ( NewLine ) PtMes . GetPoint ( Coordinates ( 0 ), Coordinates ( 1 ), Coordinates ( 2 )) LineMes . GetDirection ( Direction ( 0 ), Direction ( 1 ), Direction ( 2 )) catia . ActiveWindow . ActiveViewer . Viewpoint3D . PutOrigin ( Coordinates ) catia . ActiveWindow . ActiveViewer . Viewpoint3D . PutSightDirection ( Direction ) catia . ActiveWindow . ActiveViewer . Viewpoint3D . PutUpDirection ( UpVector ) catia . ActiveWindow . ActiveViewer . Update () catia . ActiveWindow . ActiveViewer . CaptureToFile ( INFITF . CatCaptureFormat . catCaptureFormatJPEG , \"C:\\Temp\\img\" & \"\\MyImage\" & LoopNum & \".jpg\" ) Next 'MsgBox (\"Generated Frames\") End Sub Function ContainingPart ( ByVal CatObject ) Dim found As Boolean Current = CatObject found = False Do While found = False Current = Current . Parent If TypeName ( Current ) = \"Part\" Then found = True End If Loop ContainingPart = Current End Function End Module","title":"GenerateAnimation"},{"location":"DS-CODE/Functions/GenerateAnimation/#generateanimation","text":"\u9009\u62e9\u4e00\u4e2a\u66f2\u7ebf\uff0c\u5373\u53ef\u57fa\u4e8e\u8fd9\u4e2a\u7ebf\u521b\u5efa\u622a\u56fe\uff0c\u9ed8\u8ba4\u4e00\u4e2a\u7ebf\u5206\u4e86 10 \u4e2a\u70b9\uff0c\u81ea\u5df1\u6839\u636e\u9700\u8981\u8c03\u8282\uff1b V5 V6 Public ParamSelected , SectionSelected , CurveSelected Public SectionCoords ( 11 ) Sub GenerateAnimation () Dim TempCoords ( 11 ) Set Temp = CATIA . ActiveWindow . ActiveViewer Set TempCrv = CATIA . ActiveDocument . Selection . Item ( 1 ). Value Set CurrentPart = ContainingPart ( TempCrv ) Set TempSet = CurrentPart . HybridBodies . Add () TempSet . Name = \"ANIMATION_GEOMETRY\" '*************************** CREATE REFERENCE POINT ****************************** Set NewPt = CurrentPart . HybridShapeFactory . AddNewPointOnCurveFromPercent ( CurrentPart . CreateReferenceFromObject ( TempCrv ), 0 , False ) Call TempSet . AppendHybridShape ( NewPt ) CurrentPart . UpdateObject ( NewPt ) Set NewLine = CurrentPart . HybridShapeFactory . AddNewLineTangency ( CurrentPart . CreateReferenceFromObject ( TempCrv ), CurrentPart . CreateReferenceFromObject ( NewPt ), 0 , 1000 , False ) TempSet . AppendHybridShape ( NewLine ) CurrentPart . UpdateObject ( NewLine ) Set SPA = CATIA . ActiveDocument . GetWorkbench ( \"SPAWorkbench\" ) Set PtMes = SPA . GetMeasurable ( CurrentPart . CreateReferenceFromObject ( NewPt )) Set LineMes = SPA . GetMeasurable ( CurrentPart . CreateReferenceFromObject ( NewLine )) Dim Direction ( 2 ), UpVector ( 2 ) UpVector ( 0 ) = 0 UpVector ( 1 ) = 0 UpVector ( 2 ) = 1 '*************************** DETECT CURVE ****************************** Dim Coordinates ( 2 ) Dim OffsetValue As Double OffsetValue = 10 Dim Steps As Double Steps = 100 For LoopNum = 1 To CInt ( Steps ) 'ParamSelected.Value = CDbl(0) + LoopNum * (1 / 30) CurrentPart . Update NewPt . Ratio . Value = LoopNum * ( 1 # / CInt ( Steps )) CurrentPart . UpdateObject ( NewPt ) CurrentPart . UpdateObject ( NewLine ) PtMes . GetPoint Coordinates LineMes . GetDirection Direction CATIA . ActiveWindow . ActiveViewer . Viewpoint3D . PutOrigin Coordinates CATIA . ActiveWindow . ActiveViewer . Viewpoint3D . PutSightDirection Direction CATIA . ActiveWindow . ActiveViewer . Viewpoint3D . PutUpDirection UpVector CATIA . ActiveWindow . ActiveViewer . Update CATIA . ActiveWindow . ActiveViewer . CaptureToFile catCaptureFormatJPEG , \"C:\\Temp\\img\" & \"\\MyImage\" & LoopNum & \".jpg\" Next 'MsgBox (\"Generated Frames\") End Sub Function FindSection ( SectionName ) Dim TempSection Set oSections = CATIA . ActiveDocument . Product . GetTechnologicalObject ( \"Sections\" ) For LoopNum = 1 To oSections . Count If oSections . Item ( LoopNum ). Name = SectionName Then Set TempSection = oSections . Item ( LoopNum ) End If Next Set FindSection = TempSection End Function Function ContainingPart ( ByVal CatObject ) Dim found As Boolean Set Current = CatObject found = False Do While found = False Set Current = Current . Parent If TypeName ( Current ) = \"Part\" Then found = True End If Loop Set ContainingPart = Current End Function Option Explicit Off Imports CATOpnsMeasureIDL Module GeneratateAnimation Sub Main () GenerateAnimation () End Sub Public ParamSelected , SectionSelected , CurveSelected Public SectionCoords ( 11 ) Public catia As INFITF . Application = GetObject ( \"\" , \"CATIA.Application\" ) Sub GenerateAnimation () catia . ActiveWindow . Height = 2000 catia . ActiveWindow . Width = 3000 Dim TempCoords ( 11 ) 'Set Temp = CATIA.ActiveWindow.ActiveViewer TempCrv = catia . ActiveEditor . Selection . Item ( 1 ). Value CurrentPart = ContainingPart ( TempCrv ) TempSet = CurrentPart . HybridBodies . Add () TempSet . Name = \"ANIMATION_GEOMETRY\" '*************************** CREATE REFERENCE POINT ****************************** NewPt = CurrentPart . HybridShapeFactory . AddNewPointOnCurveFromPercent ( CurrentPart . CreateReferenceFromObject ( TempCrv ), 0 , False ) Call TempSet . AppendHybridShape ( NewPt ) CurrentPart . UpdateObject ( NewPt ) NewLine = CurrentPart . HybridShapeFactory . AddNewLineTangency ( CurrentPart . CreateReferenceFromObject ( TempCrv ), CurrentPart . CreateReferenceFromObject ( NewPt ), 0 , 1000 , False ) TempSet . AppendHybridShape ( NewLine ) CurrentPart . UpdateObject ( NewLine ) 'SPA = catia.ActiveDocument.GetWorkbench(\"SPAWorkbench\") 'PtMes = SPA.GetMeasurable(CurrentPart.CreateReferenceFromObject(NewPt)) 'LineMes = SPA.GetMeasurable(CurrentPart.CreateReferenceFromObject(NewLine)) Dim oMeasurableService As MeasurableService oMeasurableService = catia . ActiveEditor . GetService ( \"MeasurableService\" ) Dim PtMes As MeasurablePoint PtMes = oMeasurableService . GetMeasurable ( NewPt , CATMeasurableType . CAAMeasurablePoint ) Dim LineMes As MeasurableLine LineMes = oMeasurableService . GetMeasurable ( NewLine , CATMeasurableType . CAAMeasurableLine ) Dim Direction ( 2 ), UpVector ( 2 ) UpVector ( 0 ) = 0 UpVector ( 1 ) = 0 UpVector ( 2 ) = 1 '*************************** DETECT CURVE ****************************** Dim Coordinates ( 2 ) Dim OffsetValue As Double OffsetValue = 1 Dim Steps As Double Steps = 10 For LoopNum = 1 To CInt ( Steps ) 'ParamSelected.Value = CDbl(0) + LoopNum * (1 / 30) CurrentPart . Update () NewPt . Ratio . Value = LoopNum * ( 1.0 # / CInt ( Steps )) CurrentPart . UpdateObject ( NewPt ) CurrentPart . UpdateObject ( NewLine ) PtMes . GetPoint ( Coordinates ( 0 ), Coordinates ( 1 ), Coordinates ( 2 )) LineMes . GetDirection ( Direction ( 0 ), Direction ( 1 ), Direction ( 2 )) catia . ActiveWindow . ActiveViewer . Viewpoint3D . PutOrigin ( Coordinates ) catia . ActiveWindow . ActiveViewer . Viewpoint3D . PutSightDirection ( Direction ) catia . ActiveWindow . ActiveViewer . Viewpoint3D . PutUpDirection ( UpVector ) catia . ActiveWindow . ActiveViewer . Update () catia . ActiveWindow . ActiveViewer . CaptureToFile ( INFITF . CatCaptureFormat . catCaptureFormatJPEG , \"C:\\Temp\\img\" & \"\\MyImage\" & LoopNum & \".jpg\" ) Next 'MsgBox (\"Generated Frames\") End Sub Function ContainingPart ( ByVal CatObject ) Dim found As Boolean Current = CatObject found = False Do While found = False Current = Current . Parent If TypeName ( Current ) = \"Part\" Then found = True End If Loop ContainingPart = Current End Function End Module","title":"GenerateAnimation"},{"location":"DS-CODE/Functions/GetMaxMinDisPoints/","text":"GetMaxOrMinDistancePoints VBA Sub getmax() Dim pt1 As HybridShape Set pt1 = CATIA.ActiveDocument.Selection.Item(1).Value.HybridShapes.Item(1) Dim hb2 As HybridBody Set hb2 = CATIA.ActiveDocument.Selection.Item(2).Value Dim maxpos, minpos As Integer Dim maxlength, max As Double Dim minlength, min As Double For i = 1 To hb2.HybridShapes.Count Dim pt2 As HybridShape Set pt2 = hb2.HybridShapes.Item(i) maxlength = GetDistance(pt1, pt2) If i > 1 Then If maxlength > max Then max = maxlength maxpos = i End If Else max = maxlength maxpos = i End If Next Debug.Print \"max:\" & maxpos End Sub Sub getmin() Dim pt1 As HybridShape Set pt1 = CATIA.ActiveDocument.Selection.Item(1).Value.HybridShapes.Item(1) Dim hb2 As HybridBody Set hb2 = CATIA.ActiveDocument.Selection.Item(2).Value Dim maxpos, minpos As Integer Dim maxlength, max As Double Dim minlength, min As Double For i = 1 To hb2.HybridShapes.Count Dim pt2 As HybridShape Set pt2 = hb2.HybridShapes.Item(i) minlength = GetDistance(pt1, pt2) If i > 1 Then If minlength < min Then min = minlength minpos = i End If Else min = minlength minpos = i End If Next Debug.Print \"min:\" & minpos End Sub Function GetDistance(EdgeRef1, EdgeRef2) As Double Dim TheSPAWorkbench As SPAWorkbench Set TheSPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CurrentMeasurable As Measurable Set CurrentMeasurable = TheSPAWorkbench.GetMeasurable(EdgeRef1) Dim TempDistance As Double TempDistance = CurrentMeasurable.GetMinimumDistance(EdgeRef2) GetDistance = TempDistance End Function EKL EKL /*Rule created by user 6/20/2022*/ let pt1 ( point ) let pt2 ( point ) let i ( integer ) let minpos ( integer ) let minlength , min ( length ) i = 1 set pt1 = ` GS - 1 \\ Geometrical Set .33 \\ Geometrical Set .30 \\ Intersect .21 ` for i while i <= ` GS - 1 \\ Geometrical Set .33 \\ Geometrical Set .34 \\ Parameters .10 \\ List .1 ` . Size () { set pt2 = ` GS - 1 \\ Geometrical Set .33 \\ Geometrical Set .34 \\ Parameters .10 \\ List .1 ` [ i ] minlength = distance ( pt1 , pt2 ) if ( i > 1 ) { if ( minlength < min ) { min = minlength minpos = i set ` GS - 1 \\ Geometrical Set .33 \\ Geometrical Set .35 \\ Point .2 ` = pt2 } } else { min = minlength minpos = i set ` GS - 1 \\ Geometrical Set .33 \\ Geometrical Set .35 \\ Point .2 ` = pt2 } }","title":"GetMaxOrMinDistancePoints"},{"location":"DS-CODE/Functions/GetMaxMinDisPoints/#getmaxormindistancepoints","text":"","title":"GetMaxOrMinDistancePoints"},{"location":"DS-CODE/Functions/GetMaxMinDisPoints/#vba","text":"Sub getmax() Dim pt1 As HybridShape Set pt1 = CATIA.ActiveDocument.Selection.Item(1).Value.HybridShapes.Item(1) Dim hb2 As HybridBody Set hb2 = CATIA.ActiveDocument.Selection.Item(2).Value Dim maxpos, minpos As Integer Dim maxlength, max As Double Dim minlength, min As Double For i = 1 To hb2.HybridShapes.Count Dim pt2 As HybridShape Set pt2 = hb2.HybridShapes.Item(i) maxlength = GetDistance(pt1, pt2) If i > 1 Then If maxlength > max Then max = maxlength maxpos = i End If Else max = maxlength maxpos = i End If Next Debug.Print \"max:\" & maxpos End Sub Sub getmin() Dim pt1 As HybridShape Set pt1 = CATIA.ActiveDocument.Selection.Item(1).Value.HybridShapes.Item(1) Dim hb2 As HybridBody Set hb2 = CATIA.ActiveDocument.Selection.Item(2).Value Dim maxpos, minpos As Integer Dim maxlength, max As Double Dim minlength, min As Double For i = 1 To hb2.HybridShapes.Count Dim pt2 As HybridShape Set pt2 = hb2.HybridShapes.Item(i) minlength = GetDistance(pt1, pt2) If i > 1 Then If minlength < min Then min = minlength minpos = i End If Else min = minlength minpos = i End If Next Debug.Print \"min:\" & minpos End Sub Function GetDistance(EdgeRef1, EdgeRef2) As Double Dim TheSPAWorkbench As SPAWorkbench Set TheSPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim CurrentMeasurable As Measurable Set CurrentMeasurable = TheSPAWorkbench.GetMeasurable(EdgeRef1) Dim TempDistance As Double TempDistance = CurrentMeasurable.GetMinimumDistance(EdgeRef2) GetDistance = TempDistance End Function","title":"VBA"},{"location":"DS-CODE/Functions/GetMaxMinDisPoints/#ekl","text":"EKL /*Rule created by user 6/20/2022*/ let pt1 ( point ) let pt2 ( point ) let i ( integer ) let minpos ( integer ) let minlength , min ( length ) i = 1 set pt1 = ` GS - 1 \\ Geometrical Set .33 \\ Geometrical Set .30 \\ Intersect .21 ` for i while i <= ` GS - 1 \\ Geometrical Set .33 \\ Geometrical Set .34 \\ Parameters .10 \\ List .1 ` . Size () { set pt2 = ` GS - 1 \\ Geometrical Set .33 \\ Geometrical Set .34 \\ Parameters .10 \\ List .1 ` [ i ] minlength = distance ( pt1 , pt2 ) if ( i > 1 ) { if ( minlength < min ) { min = minlength minpos = i set ` GS - 1 \\ Geometrical Set .33 \\ Geometrical Set .35 \\ Point .2 ` = pt2 } } else { min = minlength minpos = i set ` GS - 1 \\ Geometrical Set .33 \\ Geometrical Set .35 \\ Point .2 ` = pt2 } }","title":"EKL"},{"location":"DS-CODE/Functions/GetPart/","text":"Get Part Sub getpart() Dim oEditor As Editor = catapp.ActiveEditor Dim oProductRootService As PLMProductService = oEditor.GetService(\"PLMProductService\") 'VPMRootOccurrence oVPMRootOccOnRoot =(VPMRootOccurrence)sel.Item(1).Value'//oProductRootService.RootOccurrence; 'VPMReference oVPMRoot = oVPMRootOccOnRoot.ReferenceRootOccurrenceOf Dim oVPMRootOccOnRoot As VPMOccurrence = catapp.ActiveEditor.Selection.Item(1).Value Dim MyRootOccurrences As VPMOccurrences = oVPMRootOccOnRoot.Occurrences For i = 1 To MyRootOccurrences.Count Next Dim MyOccurrence As VPMOccurrence = MyRootOccurrences.Item(1) Dim MyRepInstances As VPMRepInstances = MyOccurrence.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst As VPMRepInstance = MyRepInstances.Item(1) Dim oVPMRepRef As VPMRepReference = oVPMRepInst.ReferenceInstanceOf Dim part As Part = oVPMRepRef.GetItem(\"Part\") 'MsgBox(part.Name) 'Dim hb As HybridBody = part.HybridBodies.Add() Dim hb As HybridBody = part.FindObjectByName(1) 'hb.Name = \"tesddddddtdd\" 'copy Dim obj1 As HybridShape = hb.HybridShapes.Item(1) Dim MyOccurrence1 As VPMOccurrence = MyRootOccurrences.Item(2) Dim MyRepInstances1 As VPMRepInstances = MyOccurrence1.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst1 As VPMRepInstance = MyRepInstances1.Item(1) Dim oVPMRepRef1 As VPMRepReference = oVPMRepInst1.ReferenceInstanceOf Dim part1 As Part = oVPMRepRef1.GetItem(\"Part\") Dim hb1 As HybridBody = part1.HybridBodies.Add() 'MsgBox(part1.Name) LoadExtRef(obj1, hb1) 'Dim part2 As Part = MyRootOccurrences.Item(3).ReferenceInstanceOf.Item(1).ReferenceInstanceOf.GetItem(\"Part\") Dim MyOccurrence2 As VPMOccurrence = MyRootOccurrences.Item(3) Dim MyRepInstances2 As VPMRepInstances = MyOccurrence2.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst2 As VPMRepInstance = MyRepInstances2.Item(1) Dim oVPMRepRef2 As VPMRepReference = oVPMRepInst2.ReferenceInstanceOf Dim part2 As Part = oVPMRepRef2.GetItem(\"Part\") Dim hb2 As HybridBody = part2.HybridBodies.Add() LoadExtRef(obj1, hb2) Dim MyOccurrence3 As VPMOccurrence = MyRootOccurrences.Item(3) Dim MyRepInstances3 As VPMRepInstances = MyOccurrence3.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst3 As VPMRepInstance = MyRepInstances3.Item(1) Dim oVPMRepRef3 As VPMRepReference = oVPMRepInst3.ReferenceInstanceOf Dim part3 As Part = oVPMRepRef2.GetItem(\"Part\") Dim hb3 As HybridBody = part3.HybridBodies.Add() LoadExtRef(obj1, hb3) Dim MyOccurrence4 As VPMOccurrence = MyRootOccurrences.Item(4) Dim MyRepInstances4 As VPMRepInstances = MyOccurrence4.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst4 As VPMRepInstance = MyRepInstances4.Item(1) Dim oVPMRepRef4 As VPMRepReference = oVPMRepInst4.ReferenceInstanceOf Dim part4 As Part = oVPMRepRef4.GetItem(\"Part\") Dim hb4 As HybridBody = part4.HybridBodies.Add() LoadExtRef(obj1, hb4) End Sub Function LoadExtRef(OldObj As INFITF.AnyObject, ExtRefSet As HybridBody) As AnyObject If catapp.ActiveEditor.Selection.Count <> 0 Then catapp.ActiveEditor.Selection.Clear() End If catapp.ActiveEditor.Selection.Add(OldObj) catapp.ActiveEditor.Selection.Copy() If catapp.ActiveEditor.Selection.Count <> 0 Then catapp.ActiveEditor.Selection.Clear() End If catapp.ActiveEditor.Selection.Add(ExtRefSet) 'DRVExtRefSet catapp.ActiveEditor.Selection.PasteSpecial(\"CATPrtResult\") If catapp.ActiveEditor.Selection.Count <> 0 Then catapp.ActiveEditor.Selection.Clear() End If Dim ExtRefMainSurf ExtRefMainSurf = ExtRefSet.HybridShapes.Item(ExtRefSet.HybridShapes.Count) LoadExtRef = ExtRefMainSurf End Function","title":"Get Part"},{"location":"DS-CODE/Functions/GetPart/#get-part","text":"Sub getpart() Dim oEditor As Editor = catapp.ActiveEditor Dim oProductRootService As PLMProductService = oEditor.GetService(\"PLMProductService\") 'VPMRootOccurrence oVPMRootOccOnRoot =(VPMRootOccurrence)sel.Item(1).Value'//oProductRootService.RootOccurrence; 'VPMReference oVPMRoot = oVPMRootOccOnRoot.ReferenceRootOccurrenceOf Dim oVPMRootOccOnRoot As VPMOccurrence = catapp.ActiveEditor.Selection.Item(1).Value Dim MyRootOccurrences As VPMOccurrences = oVPMRootOccOnRoot.Occurrences For i = 1 To MyRootOccurrences.Count Next Dim MyOccurrence As VPMOccurrence = MyRootOccurrences.Item(1) Dim MyRepInstances As VPMRepInstances = MyOccurrence.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst As VPMRepInstance = MyRepInstances.Item(1) Dim oVPMRepRef As VPMRepReference = oVPMRepInst.ReferenceInstanceOf Dim part As Part = oVPMRepRef.GetItem(\"Part\") 'MsgBox(part.Name) 'Dim hb As HybridBody = part.HybridBodies.Add() Dim hb As HybridBody = part.FindObjectByName(1) 'hb.Name = \"tesddddddtdd\" 'copy Dim obj1 As HybridShape = hb.HybridShapes.Item(1) Dim MyOccurrence1 As VPMOccurrence = MyRootOccurrences.Item(2) Dim MyRepInstances1 As VPMRepInstances = MyOccurrence1.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst1 As VPMRepInstance = MyRepInstances1.Item(1) Dim oVPMRepRef1 As VPMRepReference = oVPMRepInst1.ReferenceInstanceOf Dim part1 As Part = oVPMRepRef1.GetItem(\"Part\") Dim hb1 As HybridBody = part1.HybridBodies.Add() 'MsgBox(part1.Name) LoadExtRef(obj1, hb1) 'Dim part2 As Part = MyRootOccurrences.Item(3).ReferenceInstanceOf.Item(1).ReferenceInstanceOf.GetItem(\"Part\") Dim MyOccurrence2 As VPMOccurrence = MyRootOccurrences.Item(3) Dim MyRepInstances2 As VPMRepInstances = MyOccurrence2.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst2 As VPMRepInstance = MyRepInstances2.Item(1) Dim oVPMRepRef2 As VPMRepReference = oVPMRepInst2.ReferenceInstanceOf Dim part2 As Part = oVPMRepRef2.GetItem(\"Part\") Dim hb2 As HybridBody = part2.HybridBodies.Add() LoadExtRef(obj1, hb2) Dim MyOccurrence3 As VPMOccurrence = MyRootOccurrences.Item(3) Dim MyRepInstances3 As VPMRepInstances = MyOccurrence3.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst3 As VPMRepInstance = MyRepInstances3.Item(1) Dim oVPMRepRef3 As VPMRepReference = oVPMRepInst3.ReferenceInstanceOf Dim part3 As Part = oVPMRepRef2.GetItem(\"Part\") Dim hb3 As HybridBody = part3.HybridBodies.Add() LoadExtRef(obj1, hb3) Dim MyOccurrence4 As VPMOccurrence = MyRootOccurrences.Item(4) Dim MyRepInstances4 As VPMRepInstances = MyOccurrence4.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst4 As VPMRepInstance = MyRepInstances4.Item(1) Dim oVPMRepRef4 As VPMRepReference = oVPMRepInst4.ReferenceInstanceOf Dim part4 As Part = oVPMRepRef4.GetItem(\"Part\") Dim hb4 As HybridBody = part4.HybridBodies.Add() LoadExtRef(obj1, hb4) End Sub Function LoadExtRef(OldObj As INFITF.AnyObject, ExtRefSet As HybridBody) As AnyObject If catapp.ActiveEditor.Selection.Count <> 0 Then catapp.ActiveEditor.Selection.Clear() End If catapp.ActiveEditor.Selection.Add(OldObj) catapp.ActiveEditor.Selection.Copy() If catapp.ActiveEditor.Selection.Count <> 0 Then catapp.ActiveEditor.Selection.Clear() End If catapp.ActiveEditor.Selection.Add(ExtRefSet) 'DRVExtRefSet catapp.ActiveEditor.Selection.PasteSpecial(\"CATPrtResult\") If catapp.ActiveEditor.Selection.Count <> 0 Then catapp.ActiveEditor.Selection.Clear() End If Dim ExtRefMainSurf ExtRefMainSurf = ExtRefSet.HybridShapes.Item(ExtRefSet.HybridShapes.Count) LoadExtRef = ExtRefMainSurf End Function","title":"Get Part"},{"location":"DS-CODE/Functions/GetPlaneVector/","text":"GetPlaneVertor Public Type iPct X As Double Y As Double Z As Double End Type Sub main() Dim pln As Plane Set pln = CATIA.ActiveDocument.Selection.Item(1).Value Dim aa() As iPct aa = GetPlaneVectors(pln) Debug.Print aa(0).X & \"#\" & aa(0).Y & \"#\" & aa(0).Z Debug.Print aa(1).X & \"#\" & aa(1).Y & \"#\" & aa(1).Z End Sub Public Function GetPlaneVectors(MyPlane As Object) As iPct() Dim ArrRet() As iPct: ReDim ArrRet(1) Dim V1(2): Dim V2(2) MyPlane.GetFirstAxis (V1): ArrRet(0).X = V1(0): ArrRet(0).Y = V1(1): ArrRet(0).Z = V1(2) MyPlane.GetSecondAxis (V2): ArrRet(1).X = V2(0): ArrRet(1).Y = V2(1): ArrRet(1).Z = V2(2) GetPlaneVectors = ArrRet Erase ArrRet: Erase V1: Erase V2 End Function case Public Type iPct X As Double Y As Double Z As Double End Type Sub CATMain() Dim windows1 As Windows Set windows1 = CATIA.Windows Dim specsAndGeomWindow1 As SpecsAndGeomWindow Set specsAndGeomWindow1 = windows1.Item(\"Drawing1\") specsAndGeomWindow1.Activate Dim drawingDocument1 As DrawingDocument Set drawingDocument1 = CATIA.ActiveDocument Dim drawingSheets1 As DrawingSheets Set drawingSheets1 = drawingDocument1.Sheets Dim drawingSheet1 As DrawingSheet Set drawingSheet1 = drawingSheets1.Item(\"\u9875.1\") Dim drawingViews1 As DrawingViews Set drawingViews1 = drawingSheet1.Views Dim drawingView1 As DrawingView Set drawingView1 = drawingViews1.Add(\"AutomaticNaming\") Dim drawingViewGenerativeLinks1 As DrawingViewGenerativeLinks Set drawingViewGenerativeLinks1 = drawingView1.GenerativeLinks Dim drawingViewGenerativeBehavior1 As DrawingViewGenerativeBehavior Set drawingViewGenerativeBehavior1 = drawingView1.GenerativeBehavior Dim documents1 As Documents Set documents1 = CATIA.Documents Dim partDocument1 As PartDocument Set partDocument1 = documents1.Item(\"Part1.CATPart\") Dim product1 As Product Set product1 = partDocument1.GetItem(\"Part1\") Dim part1 As part Set part1 = partDocument1.part Dim hybridShapeFactory1 As HybridShapeFactory Set hybridShapeFactory1 = part1.HybridShapeFactory Dim hybridBodies1 As HybridBodies Set hybridBodies1 = part1.HybridBodies Dim hybridBody1 As HybridBody Set hybridBody1 = hybridBodies1.Item(\"\u51e0\u4f55\u56fe\u5f62\u96c6.1\") Dim hybridShapes1 As HybridShapes Set hybridShapes1 = hybridBody1.HybridShapes Dim hybridShapeRotate1 As HybridShape Set hybridShapeRotate1 = hybridShapes1.Item(\"\u5e73\u9762.1\") Dim reference1 As Reference Set reference1 = part1.CreateReferenceFromObject(hybridShapeRotate1) Dim hybridShapePointOnPlane1 As HybridShapePointOnPlane Set hybridShapePointOnPlane1 = hybridShapeFactory1.AddNewPointOnPlane(reference1, -4189.782, 1450.372) hybridBody1.AppendHybridShape hybridShapePointOnPlane1 part1.InWorkObject = hybridShapePointOnPlane1 part1.Update drawingViewGenerativeBehavior1.Document = product1 Dim aa() As iPct Dim pln As Plane Set pln = hybridShapeRotate1 aa = GetPlaneVectors(pln) Debug.Print aa(0).X & \"#\" & aa(0).Y & \"#\" & aa(0).Z Debug.Print aa(1).X & \"#\" & aa(1).Y & \"#\" & aa(1).Z drawingViewGenerativeBehavior1.DefineFrontView aa(0).X, aa(0).Y, aa(0).Z, aa(1).X, aa(1).Y, aa(1).Z ' get pln array Dim x1, y1, z1 As Double Dim x2, y2, z2 As Double 'drawingView1.GenerativeBehavior.SetProjectionPlane 0, 0, 1, 0, 1, 0 ' drawingView1.X = 2719.13759 drawingView1.Y = -313.698389 drawingView1.[Scale] = 1# Set drawingViewGenerativeBehavior1 = drawingView1.GenerativeBehavior drawingViewGenerativeBehavior1.Update drawingView1.Activate Dim specsAndGeomWindow2 As SpecsAndGeomWindow Set specsAndGeomWindow2 = windows1.Item(\"Part1\") specsAndGeomWindow2.Activate End Sub Sub main() Dim pln As Plane Set pln = CATIA.ActiveDocument.Selection.Item(1).Value Dim aa() As iPct aa = GetPlaneVectors(pln) Debug.Print aa(0).X & \"#\" & aa(0).Y & \"#\" & aa(0).Z Debug.Print aa(1).X & \"#\" & aa(1).Y & \"#\" & aa(1).Z End Sub Public Function GetPlaneVectors(MyPlane As Object) As iPct() Dim ArrRet() As iPct: ReDim ArrRet(1) Dim V1(2): Dim V2(2) MyPlane.GetFirstAxis (V1): ArrRet(0).X = V1(0): ArrRet(0).Y = V1(1): ArrRet(0).Z = V1(2) MyPlane.GetSecondAxis (V2): ArrRet(1).X = V2(0): ArrRet(1).Y = V2(1): ArrRet(1).Z = V2(2) GetPlaneVectors = ArrRet Erase ArrRet: Erase V1: Erase V2 End Function","title":"GetPlaneVertor"},{"location":"DS-CODE/Functions/GetPlaneVector/#getplanevertor","text":"Public Type iPct X As Double Y As Double Z As Double End Type Sub main() Dim pln As Plane Set pln = CATIA.ActiveDocument.Selection.Item(1).Value Dim aa() As iPct aa = GetPlaneVectors(pln) Debug.Print aa(0).X & \"#\" & aa(0).Y & \"#\" & aa(0).Z Debug.Print aa(1).X & \"#\" & aa(1).Y & \"#\" & aa(1).Z End Sub Public Function GetPlaneVectors(MyPlane As Object) As iPct() Dim ArrRet() As iPct: ReDim ArrRet(1) Dim V1(2): Dim V2(2) MyPlane.GetFirstAxis (V1): ArrRet(0).X = V1(0): ArrRet(0).Y = V1(1): ArrRet(0).Z = V1(2) MyPlane.GetSecondAxis (V2): ArrRet(1).X = V2(0): ArrRet(1).Y = V2(1): ArrRet(1).Z = V2(2) GetPlaneVectors = ArrRet Erase ArrRet: Erase V1: Erase V2 End Function","title":"GetPlaneVertor"},{"location":"DS-CODE/Functions/GetPlaneVector/#case","text":"Public Type iPct X As Double Y As Double Z As Double End Type Sub CATMain() Dim windows1 As Windows Set windows1 = CATIA.Windows Dim specsAndGeomWindow1 As SpecsAndGeomWindow Set specsAndGeomWindow1 = windows1.Item(\"Drawing1\") specsAndGeomWindow1.Activate Dim drawingDocument1 As DrawingDocument Set drawingDocument1 = CATIA.ActiveDocument Dim drawingSheets1 As DrawingSheets Set drawingSheets1 = drawingDocument1.Sheets Dim drawingSheet1 As DrawingSheet Set drawingSheet1 = drawingSheets1.Item(\"\u9875.1\") Dim drawingViews1 As DrawingViews Set drawingViews1 = drawingSheet1.Views Dim drawingView1 As DrawingView Set drawingView1 = drawingViews1.Add(\"AutomaticNaming\") Dim drawingViewGenerativeLinks1 As DrawingViewGenerativeLinks Set drawingViewGenerativeLinks1 = drawingView1.GenerativeLinks Dim drawingViewGenerativeBehavior1 As DrawingViewGenerativeBehavior Set drawingViewGenerativeBehavior1 = drawingView1.GenerativeBehavior Dim documents1 As Documents Set documents1 = CATIA.Documents Dim partDocument1 As PartDocument Set partDocument1 = documents1.Item(\"Part1.CATPart\") Dim product1 As Product Set product1 = partDocument1.GetItem(\"Part1\") Dim part1 As part Set part1 = partDocument1.part Dim hybridShapeFactory1 As HybridShapeFactory Set hybridShapeFactory1 = part1.HybridShapeFactory Dim hybridBodies1 As HybridBodies Set hybridBodies1 = part1.HybridBodies Dim hybridBody1 As HybridBody Set hybridBody1 = hybridBodies1.Item(\"\u51e0\u4f55\u56fe\u5f62\u96c6.1\") Dim hybridShapes1 As HybridShapes Set hybridShapes1 = hybridBody1.HybridShapes Dim hybridShapeRotate1 As HybridShape Set hybridShapeRotate1 = hybridShapes1.Item(\"\u5e73\u9762.1\") Dim reference1 As Reference Set reference1 = part1.CreateReferenceFromObject(hybridShapeRotate1) Dim hybridShapePointOnPlane1 As HybridShapePointOnPlane Set hybridShapePointOnPlane1 = hybridShapeFactory1.AddNewPointOnPlane(reference1, -4189.782, 1450.372) hybridBody1.AppendHybridShape hybridShapePointOnPlane1 part1.InWorkObject = hybridShapePointOnPlane1 part1.Update drawingViewGenerativeBehavior1.Document = product1 Dim aa() As iPct Dim pln As Plane Set pln = hybridShapeRotate1 aa = GetPlaneVectors(pln) Debug.Print aa(0).X & \"#\" & aa(0).Y & \"#\" & aa(0).Z Debug.Print aa(1).X & \"#\" & aa(1).Y & \"#\" & aa(1).Z drawingViewGenerativeBehavior1.DefineFrontView aa(0).X, aa(0).Y, aa(0).Z, aa(1).X, aa(1).Y, aa(1).Z ' get pln array Dim x1, y1, z1 As Double Dim x2, y2, z2 As Double 'drawingView1.GenerativeBehavior.SetProjectionPlane 0, 0, 1, 0, 1, 0 ' drawingView1.X = 2719.13759 drawingView1.Y = -313.698389 drawingView1.[Scale] = 1# Set drawingViewGenerativeBehavior1 = drawingView1.GenerativeBehavior drawingViewGenerativeBehavior1.Update drawingView1.Activate Dim specsAndGeomWindow2 As SpecsAndGeomWindow Set specsAndGeomWindow2 = windows1.Item(\"Part1\") specsAndGeomWindow2.Activate End Sub Sub main() Dim pln As Plane Set pln = CATIA.ActiveDocument.Selection.Item(1).Value Dim aa() As iPct aa = GetPlaneVectors(pln) Debug.Print aa(0).X & \"#\" & aa(0).Y & \"#\" & aa(0).Z Debug.Print aa(1).X & \"#\" & aa(1).Y & \"#\" & aa(1).Z End Sub Public Function GetPlaneVectors(MyPlane As Object) As iPct() Dim ArrRet() As iPct: ReDim ArrRet(1) Dim V1(2): Dim V2(2) MyPlane.GetFirstAxis (V1): ArrRet(0).X = V1(0): ArrRet(0).Y = V1(1): ArrRet(0).Z = V1(2) MyPlane.GetSecondAxis (V2): ArrRet(1).X = V2(0): ArrRet(1).Y = V2(1): ArrRet(1).Z = V2(2) GetPlaneVectors = ArrRet Erase ArrRet: Erase V1: Erase V2 End Function","title":"case"},{"location":"DS-CODE/Functions/OpenProductAndGetEditor/","text":"OpenProductAndGetEditor Function OpenProductAndGetEditor(oDBSearch) As INFITF.Editor 'Error handling On Error GoTo ErrorSub 'Retrieves the list of PLM Entities from the PLM Search object Dim oPLMProdRefAsEntities As PLMModelerBaseIDL.PLMEntities oPLMProdRefAsEntities = oDBSearch.Results 'Ensures the search results retrieves atleast one PLM Entity If oPLMProdRefAsEntities.Count > 1 Then MsgBox(\"Please enter a query criteria which outputs a unique PLM Component for further processing\") GoTo EndSub ElseIf oPLMProdRefAsEntities.Count = 0 Then MsgBox(\"No result for the input criteria\") GoTo EndSub End If 'Retrieves first PLM Entity from the PLMEntities collection object Dim oPLMProdRefAsPLMEntity As PLMModelerBaseIDL.PLMEntity oPLMProdRefAsPLMEntity = oPLMProdRefAsEntities.Item(1) 'Call the Open Service to open the product Dim oOpenService As CATPLMEnvBuild.PLMOpenService oOpenService = catia.GetSessionService(\"PLMOpenService\") 'Opens the PLM Component in the VPM editor Dim oProductEditor As INFITF.Editor oOpenService.PLMOpen(oPLMProdRefAsPLMEntity, oProductEditor) 'Valuates the output OpenProductAndGetEditor = oProductEditor 'Error handling GoTo EndSub ErrorSub: MsgBox(Err.Description) EndSub: End Function","title":"OpenProductAndGetEditor"},{"location":"DS-CODE/Functions/OpenProductAndGetEditor/#openproductandgeteditor","text":"Function OpenProductAndGetEditor(oDBSearch) As INFITF.Editor 'Error handling On Error GoTo ErrorSub 'Retrieves the list of PLM Entities from the PLM Search object Dim oPLMProdRefAsEntities As PLMModelerBaseIDL.PLMEntities oPLMProdRefAsEntities = oDBSearch.Results 'Ensures the search results retrieves atleast one PLM Entity If oPLMProdRefAsEntities.Count > 1 Then MsgBox(\"Please enter a query criteria which outputs a unique PLM Component for further processing\") GoTo EndSub ElseIf oPLMProdRefAsEntities.Count = 0 Then MsgBox(\"No result for the input criteria\") GoTo EndSub End If 'Retrieves first PLM Entity from the PLMEntities collection object Dim oPLMProdRefAsPLMEntity As PLMModelerBaseIDL.PLMEntity oPLMProdRefAsPLMEntity = oPLMProdRefAsEntities.Item(1) 'Call the Open Service to open the product Dim oOpenService As CATPLMEnvBuild.PLMOpenService oOpenService = catia.GetSessionService(\"PLMOpenService\") 'Opens the PLM Component in the VPM editor Dim oProductEditor As INFITF.Editor oOpenService.PLMOpen(oPLMProdRefAsPLMEntity, oProductEditor) 'Valuates the output OpenProductAndGetEditor = oProductEditor 'Error handling GoTo EndSub ErrorSub: MsgBox(Err.Description) EndSub: End Function","title":"OpenProductAndGetEditor"},{"location":"DS-CODE/Functions/Rename/","text":"RenameObject vba Sub CATMain() For i = 1 To CATIA.ActiveDocument.Selection.Count Set obj = CATIA.ActiveDocument.Selection.Item(i).Value obj.Name = \"GS-\" & CStr(i) Next End Sub","title":"RenameObject"},{"location":"DS-CODE/Functions/Rename/#renameobject","text":"","title":"RenameObject"},{"location":"DS-CODE/Functions/Rename/#vba","text":"Sub CATMain() For i = 1 To CATIA.ActiveDocument.Selection.Count Set obj = CATIA.ActiveDocument.Selection.Item(i).Value obj.Name = \"GS-\" & CStr(i) Next End Sub","title":"vba"},{"location":"DS-CODE/Functions/RetrievePart/","text":"RetrievePart Function RetrievePart(oProdRef) As Part 'Error handling On Error GoTo ErrorSub '2.1- Retrieve list of Product Representation Instance beneath Product Reference Dim oVPMRepInsts As VPMRepInstances oVPMRepInsts = oProdRef.RepInstances '2.2- Retrieve the Product Representation Instance (First element among the list of instances retrieved earlier) 'Please note that here we consider that the first element in the list of Product Representation Instance is 3DShape, 'else macro will fail in further steps Dim oVPMRepInst As VPMRepInstance oVPMRepInst = oVPMRepInsts.Item(1) '2.3- Retrieve the Representation Reference of the Representation instance (we suppose later it is a 3D Shape) Dim oVPMRepRef As VPMRepReference oVPMRepRef = oVPMRepInst.ReferenceInstanceOf MsgBox(\"Success in retrieving Representation Reference. The PLM_ExternalID value of Representation Reference :\" + oVPMRepRef.GetAttributeValue(\"PLM_ExternalID\")) '2.4- Retrieve Part object associated with the 3DShape 'Thanks to GetItem method which ensures that retrieved element is 3DShape since associated element is Part Dim oPart As Part oPart = oVPMRepRef.GetItem(\"Part\") RetrievePart = oPart 'Error handling GoTo EndSub ErrorSub: ' MsgBox Err.Description + \". Failure since no 3DShape Representation Instance aggregated under Product Root Reference. \" EndSub: End Function","title":"RetrievePart"},{"location":"DS-CODE/Functions/RetrievePart/#retrievepart","text":"Function RetrievePart(oProdRef) As Part 'Error handling On Error GoTo ErrorSub '2.1- Retrieve list of Product Representation Instance beneath Product Reference Dim oVPMRepInsts As VPMRepInstances oVPMRepInsts = oProdRef.RepInstances '2.2- Retrieve the Product Representation Instance (First element among the list of instances retrieved earlier) 'Please note that here we consider that the first element in the list of Product Representation Instance is 3DShape, 'else macro will fail in further steps Dim oVPMRepInst As VPMRepInstance oVPMRepInst = oVPMRepInsts.Item(1) '2.3- Retrieve the Representation Reference of the Representation instance (we suppose later it is a 3D Shape) Dim oVPMRepRef As VPMRepReference oVPMRepRef = oVPMRepInst.ReferenceInstanceOf MsgBox(\"Success in retrieving Representation Reference. The PLM_ExternalID value of Representation Reference :\" + oVPMRepRef.GetAttributeValue(\"PLM_ExternalID\")) '2.4- Retrieve Part object associated with the 3DShape 'Thanks to GetItem method which ensures that retrieved element is 3DShape since associated element is Part Dim oPart As Part oPart = oVPMRepRef.GetItem(\"Part\") RetrievePart = oPart 'Error handling GoTo EndSub ErrorSub: ' MsgBox Err.Description + \". Failure since no 3DShape Representation Instance aggregated under Product Root Reference. \" EndSub: End Function","title":"RetrievePart"},{"location":"DS-CODE/Functions/RetrievePartFromProdReference/","text":"RetrievePartFromProdReference Sub RetrievePartFromProdReference() 'Error handling On Error GoTo ErrorSub strTheProductReferenceType = \"VPMReference\" '1- Search and Retrieve the Product Reference (Root) from underlying database Dim oVPMRootReference As VPMReference oVPMRootReference = SearchAndRetrieveProdReference() '2- Retrieve Part Object associated with the 3DShape aggregated beneath the Root Dim oPart As Part oPart = RetrievePart(oVPMRootReference) MsgBox(\"Success in retrieving Part. Part Name : \" + oPart.Name) 'Error handling GoTo EndSub ErrorSub: 'MsgBox Err.Description EndSub: End Sub","title":"RetrievePartFromProdReference"},{"location":"DS-CODE/Functions/RetrievePartFromProdReference/#retrievepartfromprodreference","text":"Sub RetrievePartFromProdReference() 'Error handling On Error GoTo ErrorSub strTheProductReferenceType = \"VPMReference\" '1- Search and Retrieve the Product Reference (Root) from underlying database Dim oVPMRootReference As VPMReference oVPMRootReference = SearchAndRetrieveProdReference() '2- Retrieve Part Object associated with the 3DShape aggregated beneath the Root Dim oPart As Part oPart = RetrievePart(oVPMRootReference) MsgBox(\"Success in retrieving Part. Part Name : \" + oPart.Name) 'Error handling GoTo EndSub ErrorSub: 'MsgBox Err.Description EndSub: End Sub","title":"RetrievePartFromProdReference"},{"location":"DS-CODE/Functions/SearchAndRetrieveProdReference/","text":"SearchAndRetrieveProdReference Function SearchAndRetrieveProdReference() As VPMReference 'Error handling On Error GoTo ErrorSub 'Retrieves the Search service from CATIA session Dim oSearchService As PLMAccessIDLItf.SearchService oSearchService = catia.GetSessionService(\"Search\") 'Search in database for Product Reference Type Dim oDBSearch As PLMAccessIDLItf.DatabaseSearch oDBSearch = SearchProduct(oSearchService) 'Opens the Product and retrieves its Editor Dim oProdEditor As INFITF.Editor oProdEditor = OpenProductAndGetEditor(oDBSearch) 'Retrieves the \"PLMProductService\" service object that handles objects controlled by a VPM Editor Dim oProductRootService ' As PLMProductService oProductRootService = oProdEditor.GetService(\"PLMProductService\") 'Retrieve the root occurrence corresponding to the root product Dim oVPMRootOccOnRoot As VPMRootOccurrence oVPMRootOccOnRoot = oProductRootService.RootOccurrence 'Retrieve the Root Reference from the Root Occurrence Dim oVPMRoot As VPMReference oVPMRoot = oVPMRootOccOnRoot.ReferenceRootOccurrenceOf 'Return Root Product SearchAndRetrieveProdReference = oVPMRoot 'Error handling GoTo EndSub ErrorSub: MsgBox(Err.Description) EndSub: End Function","title":"SearchAndRetrieveProdReference"},{"location":"DS-CODE/Functions/SearchAndRetrieveProdReference/#searchandretrieveprodreference","text":"Function SearchAndRetrieveProdReference() As VPMReference 'Error handling On Error GoTo ErrorSub 'Retrieves the Search service from CATIA session Dim oSearchService As PLMAccessIDLItf.SearchService oSearchService = catia.GetSessionService(\"Search\") 'Search in database for Product Reference Type Dim oDBSearch As PLMAccessIDLItf.DatabaseSearch oDBSearch = SearchProduct(oSearchService) 'Opens the Product and retrieves its Editor Dim oProdEditor As INFITF.Editor oProdEditor = OpenProductAndGetEditor(oDBSearch) 'Retrieves the \"PLMProductService\" service object that handles objects controlled by a VPM Editor Dim oProductRootService ' As PLMProductService oProductRootService = oProdEditor.GetService(\"PLMProductService\") 'Retrieve the root occurrence corresponding to the root product Dim oVPMRootOccOnRoot As VPMRootOccurrence oVPMRootOccOnRoot = oProductRootService.RootOccurrence 'Retrieve the Root Reference from the Root Occurrence Dim oVPMRoot As VPMReference oVPMRoot = oVPMRootOccOnRoot.ReferenceRootOccurrenceOf 'Return Root Product SearchAndRetrieveProdReference = oVPMRoot 'Error handling GoTo EndSub ErrorSub: MsgBox(Err.Description) EndSub: End Function","title":"SearchAndRetrieveProdReference"},{"location":"DS-CODE/Functions/SearchProduct/","text":"SearchProduct Function SearchProduct(oSearchService) As PLMAccessIDLItf.DatabaseSearch 'Error handling On Error GoTo ErrorSub 'Retrieves the Database attribute from Search service Dim oDBSearch As PLMAccessIDLItf.DatabaseSearch oDBSearch = oSearchService.DatabaseSearch 'Builds the Query criteria for Search on underlying database 'Prompts the user to input the PLM_ExternalID for search purpose Dim strInputPLMIDName As String strInputPLMIDName = InputBox(\"Please enter the PLM_ExternalID to search\", \"Enter PLM_ExternalID\") 'Prompts the user to input the revision for search purpose Dim strInputRevision As String strInputRevision = InputBox(\"Please enter the revision to search\", \"Enter revision\") 'Sets the type of objects to search for oDBSearch.BaseType = strTheProductReferenceType 'Updates the PLM Search object created in the above steps with the attribute criteria provided by the user as an input oDBSearch.AddEasyCriteria(\"PLM_ExternalID\", strInputPLMIDName) oDBSearch.AddEasyCriteria(\"revision\", strInputRevision) 'Triggers the Search oSearchService.Search() 'Valuates the output SearchProduct = oDBSearch 'Error handling GoTo EndSub ErrorSub: MsgBox(Err.Description) EndSub: End Function","title":"SearchProduct"},{"location":"DS-CODE/Functions/SearchProduct/#searchproduct","text":"Function SearchProduct(oSearchService) As PLMAccessIDLItf.DatabaseSearch 'Error handling On Error GoTo ErrorSub 'Retrieves the Database attribute from Search service Dim oDBSearch As PLMAccessIDLItf.DatabaseSearch oDBSearch = oSearchService.DatabaseSearch 'Builds the Query criteria for Search on underlying database 'Prompts the user to input the PLM_ExternalID for search purpose Dim strInputPLMIDName As String strInputPLMIDName = InputBox(\"Please enter the PLM_ExternalID to search\", \"Enter PLM_ExternalID\") 'Prompts the user to input the revision for search purpose Dim strInputRevision As String strInputRevision = InputBox(\"Please enter the revision to search\", \"Enter revision\") 'Sets the type of objects to search for oDBSearch.BaseType = strTheProductReferenceType 'Updates the PLM Search object created in the above steps with the attribute criteria provided by the user as an input oDBSearch.AddEasyCriteria(\"PLM_ExternalID\", strInputPLMIDName) oDBSearch.AddEasyCriteria(\"revision\", strInputRevision) 'Triggers the Search oSearchService.Search() 'Valuates the output SearchProduct = oDBSearch 'Error handling GoTo EndSub ErrorSub: MsgBox(Err.Description) EndSub: End Function","title":"SearchProduct"},{"location":"DS-CODE/Functions/auto%20dim/","text":"auto dim Sub CATMain () Dim a , b , c , inn As String 'inn = InputBox(\"\u8f93\u5165\u7c7b\u578b\uff1a 1_TUNNEL-RING-PW-BOTTOM 2_TUNNEL-RING-PW-F 3_TUNNEL-RING-PW-L1 4_TUNNEL-RING-PW-L2 5_TUNNEL-RING-PW-MIDDLE 6_TUNNEL-RING-PW-TOP\", \"TUNNEL_TYPE\", \"1\") ' 'If inn = 1 Then ' a = \"TUNNEL-RING-PW-BOTTOM\" 'ElseIf inn = 2 Then ' a = \"TUNNEL-RING-PW-F\" 'ElseIf inn = 3 Then ' a = \"TUNNEL-RING-PW-L1\" 'ElseIf inn = 4 Then ' a = \"TUNNEL-RING-PW-L2\" 'ElseIf inn = 5 Then ' a = \"TUNNEL-RING-PW-MIDDLE\" 'ElseIf inn = 6 Then ' a = \"TUNNEL-RING-PW-TOP\" 'End If 'b = a + \".CATPart\" 'c = a + \"-DRW-PLN.CATPart\" 'D = a + \"-DRW.CATDrawing\" c = \"Part1.CATPart\" D = \"Drawing1.CATDrawing\" Debug . Print D Dim windows1 As Windows Set windows1 = CATIA . Windows On Error GoTo aaa Dim specsAndGeomWindow1 As SpecsAndGeomWindow Set specsAndGeomWindow1 = windows1 . Item ( c ) specsAndGeomWindow1 . Activate Dim prtdoc As PartDocument Set prtdoc = CATIA . ActiveDocument Dim part As part Set part = prtdoc . part Dim hb As HybridBody Set hb = part . FindObjectByName ( \"DIM_UDF\" ) 'Dim NoLabelPos1(2) As Double 'NoLabelPos1 = GetPointCoordinate(Pt1) ' 'Dim NoLabelPos2(2) As Double 'NoLabelPos2 = GetPointCoordinate(Pt2) Dim specsAndGeomWindow2 As SpecsAndGeomWindow Set specsAndGeomWindow2 = windows1 . Item ( D ) specsAndGeomWindow2 . Activate Dim drawingDocument1 As DrawingDocument Set drawingDocument1 = CATIA . ActiveDocument Dim drawingSheets1 As DrawingSheets Set drawingSheets1 = drawingDocument1 . Sheets Dim drawingSheet1 As DrawingSheet Set drawingSheet1 = drawingSheets1 . Item ( \"\u5e73\u9762\" ) Dim drawingViews1 As DrawingViews Set drawingViews1 = drawingSheet1 . Views Dim drawingView1 As DrawingView Set drawingView1 = drawingViews1 . Item ( \"V1\" ) ' drawingViews1.Add (\"AutomaticNaming\") drawingView1 . Activate 'MsgBox(drawingView1.Name) Dim drawingViewGenerativeLinks1 As DrawingViewGenerativeLinks Set drawingViewGenerativeLinks1 = drawingView1 . GenerativeLinks Dim drawingViewGenerativeBehavior1 As DrawingViewGenerativeBehavior Set drawingViewGenerativeBehavior1 = drawingView1 . GenerativeBehavior 'MsgBox hb.HybridShapes.Count For i = 1 To hb . HybridShapes . Count Dim udf As HybridShapeInstance Set udf = hb . HybridShapes . Item ( i ) Dim parms As Parameters Set parms = part . Parameters . SubList ( udf , True ) Dim pa1 As Parameter Set pa1 = parms . Item ( \"Type\" ) Dim st1 As String st1 = pa1 . ValueAsString If st1 = \"OnePT\" Then Dim pax As Parameter Set pax = parms . Item ( \"x\" ) Dim pay As Parameter Set pay = parms . Item ( \"y\" ) Dim stx As String : stx = pax . ValueAsString Dim sty As String : sty = pay . ValueAsString Dim pval1 As Parameter : Set pval1 = parms . Item ( \"Val1\" ): Dim Tval1 As String : Tval1 = pval1 . ValueAsString Call CreateTxt ( drawingView1 , Tval1 , Val ( stx ) * 1000 , Val ( sty ) * 1000 , CatTextAnchorPosition . catBaseLeft , 10 , \"str1\" ) End If If st1 = \"len\" Then Dim NoLabelPos1 () As Double : ReDim NoLabelPos1 ( 2 ) As Double Dim NoLabelPos2 () As Double : ReDim NoLabelPos2 ( 2 ) As Double NoLabelPos1 ( 0 ) = Val ( parms . Item ( \"p1-x\" ). ValueAsString ) NoLabelPos1 ( 1 ) = Val ( parms . Item ( \"p1-y\" ). ValueAsString ) NoLabelPos1 ( 2 ) = Val ( parms . Item ( \"p1-z\" ). ValueAsString ) NoLabelPos2 ( 0 ) = Val ( parms . Item ( \"p2-x\" ). ValueAsString ) NoLabelPos2 ( 1 ) = Val ( parms . Item ( \"p2-y\" ). ValueAsString ) NoLabelPos2 ( 2 ) = Val ( parms . Item ( \"p2-z\" ). ValueAsString ) 'MsgBox NoLabelPos1(0) & \"_\" & NoLabelPos1(1) & \"_\" & NoLabelPos1(2) & \"_\" & NoLabelPos2(0) & \"_\" & NoLabelPos2(1) & \"_\" & NoLabelPos2(2) Call batchdimA ( drawingView1 , NoLabelPos1 ( 0 ) * 1000 , NoLabelPos1 ( 1 ) * 1000 , NoLabelPos2 ( 0 ) * 1000 , NoLabelPos2 ( 1 ) * 1000 ) End If Next 'Call CreateTxt(drawingView1, \"test\", -876, -988, CatTextAnchorPosition.catBaseLeft, 10, \"str1\") part . Update aaa : MsgBox \"\u6807\u6ce8\u5b8c\u6210\uff0c\u8bf7\u68c0\u67e5\uff0c\u5982\u679c\u6807\u6ce8\u6ca1\u6709\u51fa\u73b0\uff0c\u8bf7\u68c0\u67e5\u6587\u4ef6\u540d\u7684\u5e8f\u53f7\u662f\u5426\u4e0e\u6253\u5f00\u7684\u6587\u4ef6\u76f8\u5bf9\u5e94.\" , vbOKOnly , \"Warning\" End Sub Function GetAnnoUDFType ( ByVal part1 As part , ByVal udf1 As HybridShapeInstance ) As String Dim parms As Parameters Set parms = part1 . Parameters . SubList ( udf1 , True ) Dim parm1 As Parameter Set parm1 = parms . Item ( \"Type\" ) Dim strType As String strType = parm1 . ValueAsString () GetAnnoUDFType = strType End Function Function CreatePoint () End Function Function CreateTxt ( drawingView1 As DrawingView , icap As String , ix As Double , iy As Double , iAnch As CatTextAnchorPosition , iFontSize As Double , iName As String ) As DrawingText Dim iTexts As DrawingTexts Set iTexts = drawingView1 . Texts Set CreateTxt = iTexts . Add ( icap , ix , iy ) CreateTxt . AnchorPosition = iAnch 'CreateTxt.FontSize(0, 0, 5) 'CreateTxt.SetFontName = \"FAWFONT\" CreateTxt . Name = \"name1\" Dim MyLeader As DrawingLeader Set MyLeader = CreateTxt . Leaders . Add ( ix , iy ) End Function Sub batchdimA ( oView , p1x , p1y , p2x , p2y ) Dim oFac2D 'As Factory2D Set oFac2D = oView . Factory2D Dim oPt1 'As Point2D Dim oPt2 'As Point2D Set oPt1 = oFac2D . CreatePoint ( p1x , p1y ) Set oPt2 = oFac2D . CreatePoint ( p2x , p2y ) Dim MyEle ( 1 ) MyEle ( 1 ) = Array ( oPt1 , oPt2 ) Dim SelPts ( 3 ) SelPts ( 3 ) = Array ( 200 , 200 , 200 , 200 ) Dim oDrwDim 'As DrawingDimension 'Set oDrawdim = oView.Dimensions.Add(catDimDistance, MyEle(1), SelPts(3), catDimHoriz) Set oDrawdim = oView . Dimensions . Add ( catDimDistance , MyEle ( 1 ), SelPts ( 3 ), catDimAuto ) End Sub","title":"auto dim"},{"location":"DS-CODE/Functions/auto%20dim/#auto-dim","text":"Sub CATMain () Dim a , b , c , inn As String 'inn = InputBox(\"\u8f93\u5165\u7c7b\u578b\uff1a 1_TUNNEL-RING-PW-BOTTOM 2_TUNNEL-RING-PW-F 3_TUNNEL-RING-PW-L1 4_TUNNEL-RING-PW-L2 5_TUNNEL-RING-PW-MIDDLE 6_TUNNEL-RING-PW-TOP\", \"TUNNEL_TYPE\", \"1\") ' 'If inn = 1 Then ' a = \"TUNNEL-RING-PW-BOTTOM\" 'ElseIf inn = 2 Then ' a = \"TUNNEL-RING-PW-F\" 'ElseIf inn = 3 Then ' a = \"TUNNEL-RING-PW-L1\" 'ElseIf inn = 4 Then ' a = \"TUNNEL-RING-PW-L2\" 'ElseIf inn = 5 Then ' a = \"TUNNEL-RING-PW-MIDDLE\" 'ElseIf inn = 6 Then ' a = \"TUNNEL-RING-PW-TOP\" 'End If 'b = a + \".CATPart\" 'c = a + \"-DRW-PLN.CATPart\" 'D = a + \"-DRW.CATDrawing\" c = \"Part1.CATPart\" D = \"Drawing1.CATDrawing\" Debug . Print D Dim windows1 As Windows Set windows1 = CATIA . Windows On Error GoTo aaa Dim specsAndGeomWindow1 As SpecsAndGeomWindow Set specsAndGeomWindow1 = windows1 . Item ( c ) specsAndGeomWindow1 . Activate Dim prtdoc As PartDocument Set prtdoc = CATIA . ActiveDocument Dim part As part Set part = prtdoc . part Dim hb As HybridBody Set hb = part . FindObjectByName ( \"DIM_UDF\" ) 'Dim NoLabelPos1(2) As Double 'NoLabelPos1 = GetPointCoordinate(Pt1) ' 'Dim NoLabelPos2(2) As Double 'NoLabelPos2 = GetPointCoordinate(Pt2) Dim specsAndGeomWindow2 As SpecsAndGeomWindow Set specsAndGeomWindow2 = windows1 . Item ( D ) specsAndGeomWindow2 . Activate Dim drawingDocument1 As DrawingDocument Set drawingDocument1 = CATIA . ActiveDocument Dim drawingSheets1 As DrawingSheets Set drawingSheets1 = drawingDocument1 . Sheets Dim drawingSheet1 As DrawingSheet Set drawingSheet1 = drawingSheets1 . Item ( \"\u5e73\u9762\" ) Dim drawingViews1 As DrawingViews Set drawingViews1 = drawingSheet1 . Views Dim drawingView1 As DrawingView Set drawingView1 = drawingViews1 . Item ( \"V1\" ) ' drawingViews1.Add (\"AutomaticNaming\") drawingView1 . Activate 'MsgBox(drawingView1.Name) Dim drawingViewGenerativeLinks1 As DrawingViewGenerativeLinks Set drawingViewGenerativeLinks1 = drawingView1 . GenerativeLinks Dim drawingViewGenerativeBehavior1 As DrawingViewGenerativeBehavior Set drawingViewGenerativeBehavior1 = drawingView1 . GenerativeBehavior 'MsgBox hb.HybridShapes.Count For i = 1 To hb . HybridShapes . Count Dim udf As HybridShapeInstance Set udf = hb . HybridShapes . Item ( i ) Dim parms As Parameters Set parms = part . Parameters . SubList ( udf , True ) Dim pa1 As Parameter Set pa1 = parms . Item ( \"Type\" ) Dim st1 As String st1 = pa1 . ValueAsString If st1 = \"OnePT\" Then Dim pax As Parameter Set pax = parms . Item ( \"x\" ) Dim pay As Parameter Set pay = parms . Item ( \"y\" ) Dim stx As String : stx = pax . ValueAsString Dim sty As String : sty = pay . ValueAsString Dim pval1 As Parameter : Set pval1 = parms . Item ( \"Val1\" ): Dim Tval1 As String : Tval1 = pval1 . ValueAsString Call CreateTxt ( drawingView1 , Tval1 , Val ( stx ) * 1000 , Val ( sty ) * 1000 , CatTextAnchorPosition . catBaseLeft , 10 , \"str1\" ) End If If st1 = \"len\" Then Dim NoLabelPos1 () As Double : ReDim NoLabelPos1 ( 2 ) As Double Dim NoLabelPos2 () As Double : ReDim NoLabelPos2 ( 2 ) As Double NoLabelPos1 ( 0 ) = Val ( parms . Item ( \"p1-x\" ). ValueAsString ) NoLabelPos1 ( 1 ) = Val ( parms . Item ( \"p1-y\" ). ValueAsString ) NoLabelPos1 ( 2 ) = Val ( parms . Item ( \"p1-z\" ). ValueAsString ) NoLabelPos2 ( 0 ) = Val ( parms . Item ( \"p2-x\" ). ValueAsString ) NoLabelPos2 ( 1 ) = Val ( parms . Item ( \"p2-y\" ). ValueAsString ) NoLabelPos2 ( 2 ) = Val ( parms . Item ( \"p2-z\" ). ValueAsString ) 'MsgBox NoLabelPos1(0) & \"_\" & NoLabelPos1(1) & \"_\" & NoLabelPos1(2) & \"_\" & NoLabelPos2(0) & \"_\" & NoLabelPos2(1) & \"_\" & NoLabelPos2(2) Call batchdimA ( drawingView1 , NoLabelPos1 ( 0 ) * 1000 , NoLabelPos1 ( 1 ) * 1000 , NoLabelPos2 ( 0 ) * 1000 , NoLabelPos2 ( 1 ) * 1000 ) End If Next 'Call CreateTxt(drawingView1, \"test\", -876, -988, CatTextAnchorPosition.catBaseLeft, 10, \"str1\") part . Update aaa : MsgBox \"\u6807\u6ce8\u5b8c\u6210\uff0c\u8bf7\u68c0\u67e5\uff0c\u5982\u679c\u6807\u6ce8\u6ca1\u6709\u51fa\u73b0\uff0c\u8bf7\u68c0\u67e5\u6587\u4ef6\u540d\u7684\u5e8f\u53f7\u662f\u5426\u4e0e\u6253\u5f00\u7684\u6587\u4ef6\u76f8\u5bf9\u5e94.\" , vbOKOnly , \"Warning\" End Sub Function GetAnnoUDFType ( ByVal part1 As part , ByVal udf1 As HybridShapeInstance ) As String Dim parms As Parameters Set parms = part1 . Parameters . SubList ( udf1 , True ) Dim parm1 As Parameter Set parm1 = parms . Item ( \"Type\" ) Dim strType As String strType = parm1 . ValueAsString () GetAnnoUDFType = strType End Function Function CreatePoint () End Function Function CreateTxt ( drawingView1 As DrawingView , icap As String , ix As Double , iy As Double , iAnch As CatTextAnchorPosition , iFontSize As Double , iName As String ) As DrawingText Dim iTexts As DrawingTexts Set iTexts = drawingView1 . Texts Set CreateTxt = iTexts . Add ( icap , ix , iy ) CreateTxt . AnchorPosition = iAnch 'CreateTxt.FontSize(0, 0, 5) 'CreateTxt.SetFontName = \"FAWFONT\" CreateTxt . Name = \"name1\" Dim MyLeader As DrawingLeader Set MyLeader = CreateTxt . Leaders . Add ( ix , iy ) End Function Sub batchdimA ( oView , p1x , p1y , p2x , p2y ) Dim oFac2D 'As Factory2D Set oFac2D = oView . Factory2D Dim oPt1 'As Point2D Dim oPt2 'As Point2D Set oPt1 = oFac2D . CreatePoint ( p1x , p1y ) Set oPt2 = oFac2D . CreatePoint ( p2x , p2y ) Dim MyEle ( 1 ) MyEle ( 1 ) = Array ( oPt1 , oPt2 ) Dim SelPts ( 3 ) SelPts ( 3 ) = Array ( 200 , 200 , 200 , 200 ) Dim oDrwDim 'As DrawingDimension 'Set oDrawdim = oView.Dimensions.Add(catDimDistance, MyEle(1), SelPts(3), catDimHoriz) Set oDrawdim = oView . Dimensions . Add ( catDimDistance , MyEle ( 1 ), SelPts ( 3 ), catDimAuto ) End Sub","title":"auto dim"},{"location":"DS-CODE/VBA/2D%E3%81%AE%E6%9B%B2%E7%B7%9A%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%97%E3%81%9F%E9%9A%9B%E3%80%81%E8%BF%91%E3%81%84%E5%81%B4%E3%81%AE%E7%AB%AF%E7%82%B9%E3%82%92%E5%8F%96%E5%BE%97/","text":"2D\u306e\u66f2\u7dda\u3092\u9078\u629e\u3057\u305f\u969b\u3001\u8fd1\u3044\u5074\u306e\u7aef\u70b9\u3092\u53d6\u5f97 CATIA_V5 VBA \u300c2D\u306e\u66f2\u7dda\u3092\u9078\u629e\u3057\u305f\u969b\u3001\u8fd1\u3044\u5074\u306e\u7aef\u70b9\u3092\u53d6\u5f97\u3057\u305f\u3044\u300d\u3068\u306e\u76f8\u8ac7\u3092 \u9802\u304d\u307e\u3057\u305f\u3002 \u901a\u5e38\u8981\u7d20\u306e\u9078\u629e\u3067\u3042\u308c\u3070\u3001Selection.SelectElement2\u304c\u6b86\u3069\u306a\u306e\u3067\u3059\u304c\u3001 \u4eca\u56de\u306e\u5834\u5408\u306f\u3001Selection.IndicateOrSelectElement2D\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u7406\u7531\u306f\u5358\u7d14\u3067\u3001\u30af\u30ea\u30c3\u30af\u3057\u305f\u4f4d\u7f6e\u306e\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b\u70ba\u3067\u3059\u3002 \u30af\u30ea\u30c3\u30af\u3057\u305f\u4f4d\u7f6e\u3055\u3048\u53d6\u5f97\u51fa\u6765\u308c\u3070\u3001\u5f8c\u306f2\u3064\u306e\u7aef\u70b9\u3068\u306e\u8ddd\u96e2\u3092\u6bd4\u8f03\u3057 \u77ed\u3044\u65b9\u304c\u8fd1\u3044\u7aef\u70b9\u3068\u5224\u65ad\u51fa\u6765\u307e\u3059\u3002 'vba 2D\u306e\u7dda\u3092\u9078\u629e\u3057\u305f\u969b\u3001\u8fd1\u3044\u5074\u306e\u7aef\u70b9\u3092\u53d6\u5f97 Option Explicit Sub CATMain() Dim doc As DrawingDocument Set doc = CATIA.ActiveDocument Dim vi As DrawingView Set vi = doc.Sheets.ActiveSheet.views.ActiveView Do '\u9078\u629e\u5f8c\u306f\u914d\u5217\u304c\u8fd4\u3063\u3066\u304d\u3066 'crv_near(0)-\u9078\u629e\u3057\u305f\u7dda 'crv_near(1)-\u8fd1\u3044\u5074\u306e\u7aef\u70b9(Point2D) Dim crv_near As Variant crv_near = GetNearPoint() If IsEmpty(crv_near) Then Exit Do End If Call initCircle(crv_near(1)) Loop vi.Activate MsgBox \"Done\" End Sub '*** 2D\u7dda\u3092\u9078\u629e - \u9078\u629e\u3057\u305f\u66f2\u7dda\u3068\u8fd1\u3044\u5074\u306e\u7aef\u70b9\u53d6\u5f97 *** 'return array(Curve2D,Point2D) Private Function GetNearPoint() As Variant Dim doc As DrawingDocument Set doc = CATIA.ActiveDocument Dim sel As Variant ' Selection Set sel = doc.selection sel.Clear '\u5ea7\u6a19\u9078\u629e Dim status As String Dim ObjectSelected Dim WindowLocation(1) Dim filter As Variant filter = Array(\"Curve2D\") 'WindowLocation\u306e\u5ea7\u6a19\u5024\u306f\uff71\uff78\uff83\uff68\uff8c\uff9e\u30d3\u30e5\u30fc\u306b\u5bfe\u3057\u3066\u306e\u5ea7\u6a19\u5024 status = \"MouseMove\" Dim pos As Variant Do While (status = \"MouseMove\") status = sel.IndicateOrSelectElement2D( _ \"\u7dda\u3092\u9078\u629e/\u30ad\u30e3\u30f3\u30bb\u30eb ESC\", _ filter, _ False, _ False, _ True, _ ObjectSelected, _ WindowLocation) If Not ObjectSelected Then pos = WindowLocation End If Loop 'ESC\u30ad\u30fc If sel.Count2 < 1 Then Exit Function End If '\u9078\u629e\u3057\u305f\u7dda Dim crv As Curve2D Set crv = sel.Item(1).Value '*** \u30af\u30ea\u30c3\u30af\u4f4d\u7f6e\u306e\u5ea7\u6a19 *** '\uff71\uff78\uff83\uff68\uff8c\uff9e\uff8b\uff9e\uff6d\uff70 Dim ac As DrawingView Set ac = doc.Sheets.ActiveSheet.views.ActiveView '\uff80\uff70\uff79\uff9e\uff6f\uff84\uff8b\uff9e\uff6d\uff70 Dim tg As DrawingView Set tg = crv.Parent.Parent '\uff8b\uff9e\uff6d\uff70\u9593\uff8d\uff9e\uff78\uff84\uff99 Dim tran_vec As Variant tran_vec = GetTransVec(ac, tg) '\u8a72\u5f53\u3059\u308b\uff8b\uff9e\uff6d\uff70\u306e\u5ea7\u6a19\u306b\u5909\u63db pos = Add2d(tran_vec, pos) '*** \u30af\u30ea\u30c3\u30af\u4f4d\u7f6e\u3068\u7aef\u70b9\u6bd4\u8f03 *** 'crv\u306eVariant Dim crvVri As Variant Set crvVri = crv '\u59cb\u70b9\u5ea7\u6a19\u5024 Dim pos1(1) As Variant Call crvVri.StartPoint.GetCoordinates(pos1) '\u7d42\u70b9\u5ea7\u6a19\u5024 Dim pos2(1) As Variant Call crvVri.EndPoint.GetCoordinates(pos2) '\u8ddd\u96e2\u6bd4\u8f03 Dim res As Variant If LengSqr(pos, pos1) > LengSqr(pos, pos2) Then res = Array(crv, crv.EndPoint) Else res = Array(crv, crv.StartPoint) End If GetNearPoint = res End Function '\uff8b\uff9e\uff6d\uff70\u9593\uff8d\uff9e\uff78\uff84\uff99 Private Function GetTransVec( _ ByVal act_v As DrawingView, _ ByVal tgt_v As DrawingView) As Variant GetTransVec = Sub2d( _ Array(act_v.xAxisData, act_v.yAxisData), _ Array(tgt_v.xAxisData, tgt_v.yAxisData)) End Function '\u548c2D Private Function Add2d( _ ByVal V1 As Variant, _ ByVal V2 As Variant) As Variant Add2d = Array(V1(0) + V2(0), V1(1) + V2(1)) End Function '\u5dee2D Private Function Sub2d( _ ByVal V1 As Variant, _ ByVal V2 As Variant) As Variant Sub2d = Array(V1(0) - V2(0), V1(1) - V2(1)) End Function '2\u70b9\u8ddd\u96e2\u306e\u5e73\u65b9\u6570 Private Function LengSqr( _ ByVal p1 As Variant, _ ByVal p2 As Variant) As Double Dim A#: A = p2(0) - p1(0) Dim B#: B = p2(1) - p1(1) LengSqr = A * A + B * B End Function '*************** '\u78ba\u8a8d\u7528\u3000\u70b9\u3092\u4e2d\u5fc3\u306b\u5186\u3092\u63cf\u304f Private Sub initCircle( _ ByVal pnt As Point2D) Dim vi As DrawingView Set vi = pnt.Parent.Parent vi.Activate '\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u3059\u308b\u5fc5\u8981\u6709\u308a Dim fact As Factory2D Set fact = vi.Factory2D Dim pntVri As Variant Set pntVri = pnt Dim pos(1) Call pntVri.GetCoordinates(pos) Dim crl As Circle2D Set crl = fact.CreateClosedCircle(pos(0), pos(1), 5#) crl.CenterPoint = pnt End Sub LengSqr\u95a2\u6570(\u4eca\u898b\u308b\u3068\u30a4\u30de\u30a4\u30c1\u306a\u540d\u79f0\u3067\u3059\u2026)\u3067\u3059\u304c\u3001\u914d\u5217\u3092\u70b9\u5ea7\u6a19\u3068 \u60f3\u5b9a\u30572\u70b9\u9593\u8ddd\u96e2\u306e\u5e73\u65b9\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 \u3053\u306e\u65b9\u6cd5\u306f\u3001C# OpenGL\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u300c\u30d2\u30b9\u30a4\u300d\u3067\u5b66\u3073\u307e\u3057\u305f\u3002 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u306f\u4eba\u306b\u6bd4\u3079\u308c\u3070\u8a08\u7b97\u306f\u9ad8\u901f\u3067\u3059\u304c\u3001\u5168\u3066\u540c\u4e00\u901f\u5ea6\u3067 \u51e6\u7406\u3055\u308c\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3082\u4e8b\u5b9f\u3067\u3059\u3002\u5e73\u65b9\u6839\u306e\u6f14\u7b97\u3082\u6642\u9593\u306e\u304b\u304b\u308b (\u30b3\u30b9\u30c8\u306e\u9ad8\u3044)\u51e6\u7406\u3089\u3057\u3044\u3067\u3059\u3002 2\u70b9\u9593\u306e\u6b63\u3057\u3044\u8ddd\u96e2\u3092\u6f14\u7b97\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u5e73\u65b9\u6839\u306e\u6f14\u7b97\u304c\u5fc5\u8981\u3068\u306a\u308a \u307e\u3059\u304c\uff08\u5e73\u65b9\u6839\u3092\u907f\u3051\u305f\u8fd1\u4f3c\u6f14\u7b97\u5f0f\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u77e5\u308a\u307e\u305b\u3093\uff09 \u4eca\u56de\u306e\u3088\u3046\u306b\u300c\u3069\u3061\u3089\u306e\u70b9\u304c\u8fd1\u3044\u306e\u304b\u306a\uff1f\u300d\u3068\u8a00\u3046\u51e6\u7406\u306b\u95a2\u3057\u3066\u8a00\u3048\u3070 \u5e73\u65b9\u6839\u3092\u6f14\u7b97\u3057\u306a\u304f\u3066\u3082\u3001\u8aa4\u3063\u305f\u7d50\u679c\u306b\u306f\u306a\u3089\u306a\u3044\u3067\u3059\u3002 \uff08\u7d50\u679c\u304c\u9006\u8ee2\u3059\u308b\u4e8b\u306f\u7121\u3044\uff09 \u3068\u306f\u8a00\u3048\u3001\u300c\u3053\u306e\u7a0b\u5ea6\u306e\u51e6\u7406\u306b\u305d\u3053\u307e\u3067\u6c17\u306b\u3059\u308b\u5fc5\u8981\u3042\u308b\u306e\uff1f\u300d\u3068\u3082 \u53d7\u3051\u53d6\u308c\u308b\u306e\u3067\u3059\u304c\u30fb\u30fb\u30fb\u3002 \u4f59\u8ac7\u3067\u3059\u304c\u3001\u300c\u30d2\u30b9\u30a4\u300d\u306e\u516c\u958b\u304c\u7121\u304f\u306a\u3063\u3066\u3044\u305f\u3093\u3067\u3059\u306d\u3002 \u682a\u5f0f\u4f1a\u793e\u30ab\u30bf\u30c3\u30c1 \u958b\u767a\u3055\u308c\u305f\u65b9\u306f\u3001\u65e2\u306b\u9000\u793e\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u4ed5\u65b9\u306a\u3044\u306e\u306f\u78ba\u304b\u3067\u3059\u304c\u3002 kandennti 2019-11-26 11:37","title":"2D\u306e\u66f2\u7dda\u3092\u9078\u629e\u3057\u305f\u969b\u3001\u8fd1\u3044\u5074\u306e\u7aef\u70b9\u3092\u53d6\u5f97"},{"location":"DS-CODE/VBA/2D%E3%81%AE%E6%9B%B2%E7%B7%9A%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%97%E3%81%9F%E9%9A%9B%E3%80%81%E8%BF%91%E3%81%84%E5%81%B4%E3%81%AE%E7%AB%AF%E7%82%B9%E3%82%92%E5%8F%96%E5%BE%97/#2d","text":"CATIA_V5 VBA \u300c2D\u306e\u66f2\u7dda\u3092\u9078\u629e\u3057\u305f\u969b\u3001\u8fd1\u3044\u5074\u306e\u7aef\u70b9\u3092\u53d6\u5f97\u3057\u305f\u3044\u300d\u3068\u306e\u76f8\u8ac7\u3092 \u9802\u304d\u307e\u3057\u305f\u3002 \u901a\u5e38\u8981\u7d20\u306e\u9078\u629e\u3067\u3042\u308c\u3070\u3001Selection.SelectElement2\u304c\u6b86\u3069\u306a\u306e\u3067\u3059\u304c\u3001 \u4eca\u56de\u306e\u5834\u5408\u306f\u3001Selection.IndicateOrSelectElement2D\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u7406\u7531\u306f\u5358\u7d14\u3067\u3001\u30af\u30ea\u30c3\u30af\u3057\u305f\u4f4d\u7f6e\u306e\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b\u70ba\u3067\u3059\u3002 \u30af\u30ea\u30c3\u30af\u3057\u305f\u4f4d\u7f6e\u3055\u3048\u53d6\u5f97\u51fa\u6765\u308c\u3070\u3001\u5f8c\u306f2\u3064\u306e\u7aef\u70b9\u3068\u306e\u8ddd\u96e2\u3092\u6bd4\u8f03\u3057 \u77ed\u3044\u65b9\u304c\u8fd1\u3044\u7aef\u70b9\u3068\u5224\u65ad\u51fa\u6765\u307e\u3059\u3002 'vba 2D\u306e\u7dda\u3092\u9078\u629e\u3057\u305f\u969b\u3001\u8fd1\u3044\u5074\u306e\u7aef\u70b9\u3092\u53d6\u5f97 Option Explicit Sub CATMain() Dim doc As DrawingDocument Set doc = CATIA.ActiveDocument Dim vi As DrawingView Set vi = doc.Sheets.ActiveSheet.views.ActiveView Do '\u9078\u629e\u5f8c\u306f\u914d\u5217\u304c\u8fd4\u3063\u3066\u304d\u3066 'crv_near(0)-\u9078\u629e\u3057\u305f\u7dda 'crv_near(1)-\u8fd1\u3044\u5074\u306e\u7aef\u70b9(Point2D) Dim crv_near As Variant crv_near = GetNearPoint() If IsEmpty(crv_near) Then Exit Do End If Call initCircle(crv_near(1)) Loop vi.Activate MsgBox \"Done\" End Sub '*** 2D\u7dda\u3092\u9078\u629e - \u9078\u629e\u3057\u305f\u66f2\u7dda\u3068\u8fd1\u3044\u5074\u306e\u7aef\u70b9\u53d6\u5f97 *** 'return array(Curve2D,Point2D) Private Function GetNearPoint() As Variant Dim doc As DrawingDocument Set doc = CATIA.ActiveDocument Dim sel As Variant ' Selection Set sel = doc.selection sel.Clear '\u5ea7\u6a19\u9078\u629e Dim status As String Dim ObjectSelected Dim WindowLocation(1) Dim filter As Variant filter = Array(\"Curve2D\") 'WindowLocation\u306e\u5ea7\u6a19\u5024\u306f\uff71\uff78\uff83\uff68\uff8c\uff9e\u30d3\u30e5\u30fc\u306b\u5bfe\u3057\u3066\u306e\u5ea7\u6a19\u5024 status = \"MouseMove\" Dim pos As Variant Do While (status = \"MouseMove\") status = sel.IndicateOrSelectElement2D( _ \"\u7dda\u3092\u9078\u629e/\u30ad\u30e3\u30f3\u30bb\u30eb ESC\", _ filter, _ False, _ False, _ True, _ ObjectSelected, _ WindowLocation) If Not ObjectSelected Then pos = WindowLocation End If Loop 'ESC\u30ad\u30fc If sel.Count2 < 1 Then Exit Function End If '\u9078\u629e\u3057\u305f\u7dda Dim crv As Curve2D Set crv = sel.Item(1).Value '*** \u30af\u30ea\u30c3\u30af\u4f4d\u7f6e\u306e\u5ea7\u6a19 *** '\uff71\uff78\uff83\uff68\uff8c\uff9e\uff8b\uff9e\uff6d\uff70 Dim ac As DrawingView Set ac = doc.Sheets.ActiveSheet.views.ActiveView '\uff80\uff70\uff79\uff9e\uff6f\uff84\uff8b\uff9e\uff6d\uff70 Dim tg As DrawingView Set tg = crv.Parent.Parent '\uff8b\uff9e\uff6d\uff70\u9593\uff8d\uff9e\uff78\uff84\uff99 Dim tran_vec As Variant tran_vec = GetTransVec(ac, tg) '\u8a72\u5f53\u3059\u308b\uff8b\uff9e\uff6d\uff70\u306e\u5ea7\u6a19\u306b\u5909\u63db pos = Add2d(tran_vec, pos) '*** \u30af\u30ea\u30c3\u30af\u4f4d\u7f6e\u3068\u7aef\u70b9\u6bd4\u8f03 *** 'crv\u306eVariant Dim crvVri As Variant Set crvVri = crv '\u59cb\u70b9\u5ea7\u6a19\u5024 Dim pos1(1) As Variant Call crvVri.StartPoint.GetCoordinates(pos1) '\u7d42\u70b9\u5ea7\u6a19\u5024 Dim pos2(1) As Variant Call crvVri.EndPoint.GetCoordinates(pos2) '\u8ddd\u96e2\u6bd4\u8f03 Dim res As Variant If LengSqr(pos, pos1) > LengSqr(pos, pos2) Then res = Array(crv, crv.EndPoint) Else res = Array(crv, crv.StartPoint) End If GetNearPoint = res End Function '\uff8b\uff9e\uff6d\uff70\u9593\uff8d\uff9e\uff78\uff84\uff99 Private Function GetTransVec( _ ByVal act_v As DrawingView, _ ByVal tgt_v As DrawingView) As Variant GetTransVec = Sub2d( _ Array(act_v.xAxisData, act_v.yAxisData), _ Array(tgt_v.xAxisData, tgt_v.yAxisData)) End Function '\u548c2D Private Function Add2d( _ ByVal V1 As Variant, _ ByVal V2 As Variant) As Variant Add2d = Array(V1(0) + V2(0), V1(1) + V2(1)) End Function '\u5dee2D Private Function Sub2d( _ ByVal V1 As Variant, _ ByVal V2 As Variant) As Variant Sub2d = Array(V1(0) - V2(0), V1(1) - V2(1)) End Function '2\u70b9\u8ddd\u96e2\u306e\u5e73\u65b9\u6570 Private Function LengSqr( _ ByVal p1 As Variant, _ ByVal p2 As Variant) As Double Dim A#: A = p2(0) - p1(0) Dim B#: B = p2(1) - p1(1) LengSqr = A * A + B * B End Function '*************** '\u78ba\u8a8d\u7528\u3000\u70b9\u3092\u4e2d\u5fc3\u306b\u5186\u3092\u63cf\u304f Private Sub initCircle( _ ByVal pnt As Point2D) Dim vi As DrawingView Set vi = pnt.Parent.Parent vi.Activate '\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u3059\u308b\u5fc5\u8981\u6709\u308a Dim fact As Factory2D Set fact = vi.Factory2D Dim pntVri As Variant Set pntVri = pnt Dim pos(1) Call pntVri.GetCoordinates(pos) Dim crl As Circle2D Set crl = fact.CreateClosedCircle(pos(0), pos(1), 5#) crl.CenterPoint = pnt End Sub LengSqr\u95a2\u6570(\u4eca\u898b\u308b\u3068\u30a4\u30de\u30a4\u30c1\u306a\u540d\u79f0\u3067\u3059\u2026)\u3067\u3059\u304c\u3001\u914d\u5217\u3092\u70b9\u5ea7\u6a19\u3068 \u60f3\u5b9a\u30572\u70b9\u9593\u8ddd\u96e2\u306e\u5e73\u65b9\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 \u3053\u306e\u65b9\u6cd5\u306f\u3001C# OpenGL\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u300c\u30d2\u30b9\u30a4\u300d\u3067\u5b66\u3073\u307e\u3057\u305f\u3002 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u306f\u4eba\u306b\u6bd4\u3079\u308c\u3070\u8a08\u7b97\u306f\u9ad8\u901f\u3067\u3059\u304c\u3001\u5168\u3066\u540c\u4e00\u901f\u5ea6\u3067 \u51e6\u7406\u3055\u308c\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3082\u4e8b\u5b9f\u3067\u3059\u3002\u5e73\u65b9\u6839\u306e\u6f14\u7b97\u3082\u6642\u9593\u306e\u304b\u304b\u308b (\u30b3\u30b9\u30c8\u306e\u9ad8\u3044)\u51e6\u7406\u3089\u3057\u3044\u3067\u3059\u3002 2\u70b9\u9593\u306e\u6b63\u3057\u3044\u8ddd\u96e2\u3092\u6f14\u7b97\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u5e73\u65b9\u6839\u306e\u6f14\u7b97\u304c\u5fc5\u8981\u3068\u306a\u308a \u307e\u3059\u304c\uff08\u5e73\u65b9\u6839\u3092\u907f\u3051\u305f\u8fd1\u4f3c\u6f14\u7b97\u5f0f\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u77e5\u308a\u307e\u305b\u3093\uff09 \u4eca\u56de\u306e\u3088\u3046\u306b\u300c\u3069\u3061\u3089\u306e\u70b9\u304c\u8fd1\u3044\u306e\u304b\u306a\uff1f\u300d\u3068\u8a00\u3046\u51e6\u7406\u306b\u95a2\u3057\u3066\u8a00\u3048\u3070 \u5e73\u65b9\u6839\u3092\u6f14\u7b97\u3057\u306a\u304f\u3066\u3082\u3001\u8aa4\u3063\u305f\u7d50\u679c\u306b\u306f\u306a\u3089\u306a\u3044\u3067\u3059\u3002 \uff08\u7d50\u679c\u304c\u9006\u8ee2\u3059\u308b\u4e8b\u306f\u7121\u3044\uff09 \u3068\u306f\u8a00\u3048\u3001\u300c\u3053\u306e\u7a0b\u5ea6\u306e\u51e6\u7406\u306b\u305d\u3053\u307e\u3067\u6c17\u306b\u3059\u308b\u5fc5\u8981\u3042\u308b\u306e\uff1f\u300d\u3068\u3082 \u53d7\u3051\u53d6\u308c\u308b\u306e\u3067\u3059\u304c\u30fb\u30fb\u30fb\u3002 \u4f59\u8ac7\u3067\u3059\u304c\u3001\u300c\u30d2\u30b9\u30a4\u300d\u306e\u516c\u958b\u304c\u7121\u304f\u306a\u3063\u3066\u3044\u305f\u3093\u3067\u3059\u306d\u3002 \u682a\u5f0f\u4f1a\u793e\u30ab\u30bf\u30c3\u30c1 \u958b\u767a\u3055\u308c\u305f\u65b9\u306f\u3001\u65e2\u306b\u9000\u793e\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u4ed5\u65b9\u306a\u3044\u306e\u306f\u78ba\u304b\u3067\u3059\u304c\u3002 kandennti 2019-11-26 11:37","title":"2D\u306e\u66f2\u7dda\u3092\u9078\u629e\u3057\u305f\u969b\u3001\u8fd1\u3044\u5074\u306e\u7aef\u70b9\u3092\u53d6\u5f97"},{"location":"DS-CODE/VBA/CreateBridgeSkeleton/","text":"Create Bridge Skeleton","title":"Create Bridge Skeleton"},{"location":"DS-CODE/VBA/CreateBridgeSkeleton/#create-bridge-skeleton","text":"","title":"Create Bridge Skeleton"},{"location":"DS-CODE/VBA/CreatePointFromExcel/","text":"CreatePointFromExcel Imports System Imports excel = Microsoft.Office.Interop.Excel Imports HybridShapeTypeLib Imports MECMOD Imports KnowledgewareTypeLib Partial Public NotInheritable Class ThisApplication Inherits ObjectModelAgentLib.CATIAEntryPoint Public Shared Sub CATMain() 'Debug entry point, not visible from the host CATIA.SystemService.PrintToStdout(\"Hello, World! VB.NET\") Dim xlsapp As Microsoft.Office.Interop.Excel.Application = GetObject(, \"Excel.Application\") Dim sheet As excel.Worksheet = xlsapp.ActiveSheet Dim part As MECMOD.Part = CATIA.ActiveEditor.ActiveObject Dim hsf As HybridShapeTypeLib.HybridShapeFactory = part.HybridShapeFactory Dim hb As HybridBody hb = part.HybridBodies.Add Dim i As Integer = 1 Dim x, y, z As Double For i = 1 To 35 x = sheet.Cells(i + 2, 11).value y = sheet.Cells(i + 2, 12).value z = sheet.Cells(i + 2, 13).value Dim pt As Point = hsf.AddNewPointCoord(x, y, z) pt.Compute() hb.AppendHybridShape(pt) Next End Sub End Class println! ( \"Hello, world!\" );","title":"CreatePointFromExcel"},{"location":"DS-CODE/VBA/CreatePointFromExcel/#createpointfromexcel","text":"Imports System Imports excel = Microsoft.Office.Interop.Excel Imports HybridShapeTypeLib Imports MECMOD Imports KnowledgewareTypeLib Partial Public NotInheritable Class ThisApplication Inherits ObjectModelAgentLib.CATIAEntryPoint Public Shared Sub CATMain() 'Debug entry point, not visible from the host CATIA.SystemService.PrintToStdout(\"Hello, World! VB.NET\") Dim xlsapp As Microsoft.Office.Interop.Excel.Application = GetObject(, \"Excel.Application\") Dim sheet As excel.Worksheet = xlsapp.ActiveSheet Dim part As MECMOD.Part = CATIA.ActiveEditor.ActiveObject Dim hsf As HybridShapeTypeLib.HybridShapeFactory = part.HybridShapeFactory Dim hb As HybridBody hb = part.HybridBodies.Add Dim i As Integer = 1 Dim x, y, z As Double For i = 1 To 35 x = sheet.Cells(i + 2, 11).value y = sheet.Cells(i + 2, 12).value z = sheet.Cells(i + 2, 13).value Dim pt As Point = hsf.AddNewPointCoord(x, y, z) pt.Compute() hb.AppendHybridShape(pt) Next End Sub End Class println! ( \"Hello, world!\" );","title":"CreatePointFromExcel"},{"location":"DS-CODE/VBA/CreateShortcut/","text":"Create Shortcut import rhinoscriptsyntax as rs import System from System.IO import Path def CreateShortcut (): \"\"\" Create a shortcut to the current document NOTE!! This function only runs on Windows \"\"\" if ( not rs . IsRunningOnWindows () ): rs . MessageBox ( \"CreateShortcut.py only runs on Windows\" , 48 , \"Script Error\" ) return # Get the document name and path name = rs . DocumentName () path = rs . DocumentPath () # Get the Windows Scripting Host's Shell object objShell = System . Activator . CreateInstance ( System . Type . GetTypeFromProgID ( \"WScript.Shell\" )) # Get the desktop folder desktop = objShell . SpecialFolders ( \"Desktop\" ) # Make a new shortcut ShellLink = objShell . CreateShortcut ( desktop + \" \\\\ \" + name + \".lnk\" ) ShellLink . TargetPath = Path . Combine ( path , name ) ShellLink . WindowStyle = 1 ShellLink . IconLocation = rs . ExeFolder () + \"Rhino4.exe, 0\" ShellLink . Description = \"Shortcut to \" + name ShellLink . WorkingDirectory = path ShellLink . Save () ########################################################################## # Check to see if this file is being executed as the \"main\" python # script instead of being used as a module by some other python script # This allows us to use the module which ever way we want. if ( __name__ == '__main__' ): #call function defined above CreateShortcut ()","title":"Create Shortcut"},{"location":"DS-CODE/VBA/CreateShortcut/#create-shortcut","text":"import rhinoscriptsyntax as rs import System from System.IO import Path def CreateShortcut (): \"\"\" Create a shortcut to the current document NOTE!! This function only runs on Windows \"\"\" if ( not rs . IsRunningOnWindows () ): rs . MessageBox ( \"CreateShortcut.py only runs on Windows\" , 48 , \"Script Error\" ) return # Get the document name and path name = rs . DocumentName () path = rs . DocumentPath () # Get the Windows Scripting Host's Shell object objShell = System . Activator . CreateInstance ( System . Type . GetTypeFromProgID ( \"WScript.Shell\" )) # Get the desktop folder desktop = objShell . SpecialFolders ( \"Desktop\" ) # Make a new shortcut ShellLink = objShell . CreateShortcut ( desktop + \" \\\\ \" + name + \".lnk\" ) ShellLink . TargetPath = Path . Combine ( path , name ) ShellLink . WindowStyle = 1 ShellLink . IconLocation = rs . ExeFolder () + \"Rhino4.exe, 0\" ShellLink . Description = \"Shortcut to \" + name ShellLink . WorkingDirectory = path ShellLink . Save () ########################################################################## # Check to see if this file is being executed as the \"main\" python # script instead of being used as a module by some other python script # This allows us to use the module which ever way we want. if ( __name__ == '__main__' ): #call function defined above CreateShortcut ()","title":"Create Shortcut"},{"location":"DS-CODE/VBA/DRW_DIME/","text":"DRW_DIME Sub CATMain() Dim oSht Set oSht = CATIA.ActiveEditor.ActiveObject.Sheets.Item(1) CATIA.ActiveEditor.ActiveObject.ActiveSheet = oSht Debug.Print oSht.Name Dim cDrawingViews As DrawingViews Set cDrawingViews = oSht.Views Debug.Print cDrawingViews.Name Dim MyView As DrawingView Set MyView = oSht.Views.ActiveView Dim Fact2D As Factory2D Set Fact2D = MyView.Factory2D 'Dim Line1 As Line2D 'Dim Line2 As Line2D 'Set Line1 = Fact2D.CreateLine(50, 10, 150, 10) 'Set Line2 = Fact2D.CreateLine(50, 10, 120, 100) ' ' 'Dim Point1 As Point2D 'Dim Point2 As Point2D ' 'Set Point1 = Fact2D.CreatePoint(-10, 190) 'Set Point2 = Fact2D.CreatePoint(-120, 90) ' 'Dim iType As CatDimType 'iType = catDimAngle ' ' Dim myElements1(1) ' myElements1(1) = Array(Line1, Line2) ' Dim selpoints(3) ' selpoints(3) = Array(150, 10, 120, 100) ' Dim MyDimension1 'As DrawingDimension ' Set MyDimension1 = MyView.Dimensions.Add(iType, myElements1(1), selpoints(3), catDimAuto) ' iType = catDimLengthCurvilinear If MyView.GeometricElements.Count >= 1 Then For i = 1 To MyView.GeometricElements.Count Debug.Print MyView.GeometricElements.Item(i).Name Next End If MsgBox MyView.Components.Count ' Gets the Part Product Parameters Dim proRootOcc 'As VPMRootOccurrence Set proRootOcc = CATIA.ActiveEditor.ActiveObject Dim prodRootRef 'As VPMReference Set prodRootRef = proRootOcc.ReferenceRootOccurrenceOf Dim PartInst 'As VPMInstance Set PartInst = prodRootRef.Instances.Item(prodRootRef.Instances.Count) Dim PartRef 'As VPMReference Set PartRef = PartInst.ReferenceInstanceOf Dim VPMRefInst 'As VPMRepInstance Set VPMRefInst = PartRef.RepInstances.Item(1) Dim VPMRefRef 'As VPMRepReference Set VPMRefRef = VPMRefInst.ReferenceInstanceOf Dim oPart 'As Part Set oPart = VPMRefRef.GetItem(\"Part\") Dim myParameters 'As Parameters Set myParameters = oPart.Parameters End Sub","title":"DRW_DIME"},{"location":"DS-CODE/VBA/DRW_DIME/#drw_dime","text":"Sub CATMain() Dim oSht Set oSht = CATIA.ActiveEditor.ActiveObject.Sheets.Item(1) CATIA.ActiveEditor.ActiveObject.ActiveSheet = oSht Debug.Print oSht.Name Dim cDrawingViews As DrawingViews Set cDrawingViews = oSht.Views Debug.Print cDrawingViews.Name Dim MyView As DrawingView Set MyView = oSht.Views.ActiveView Dim Fact2D As Factory2D Set Fact2D = MyView.Factory2D 'Dim Line1 As Line2D 'Dim Line2 As Line2D 'Set Line1 = Fact2D.CreateLine(50, 10, 150, 10) 'Set Line2 = Fact2D.CreateLine(50, 10, 120, 100) ' ' 'Dim Point1 As Point2D 'Dim Point2 As Point2D ' 'Set Point1 = Fact2D.CreatePoint(-10, 190) 'Set Point2 = Fact2D.CreatePoint(-120, 90) ' 'Dim iType As CatDimType 'iType = catDimAngle ' ' Dim myElements1(1) ' myElements1(1) = Array(Line1, Line2) ' Dim selpoints(3) ' selpoints(3) = Array(150, 10, 120, 100) ' Dim MyDimension1 'As DrawingDimension ' Set MyDimension1 = MyView.Dimensions.Add(iType, myElements1(1), selpoints(3), catDimAuto) ' iType = catDimLengthCurvilinear If MyView.GeometricElements.Count >= 1 Then For i = 1 To MyView.GeometricElements.Count Debug.Print MyView.GeometricElements.Item(i).Name Next End If MsgBox MyView.Components.Count ' Gets the Part Product Parameters Dim proRootOcc 'As VPMRootOccurrence Set proRootOcc = CATIA.ActiveEditor.ActiveObject Dim prodRootRef 'As VPMReference Set prodRootRef = proRootOcc.ReferenceRootOccurrenceOf Dim PartInst 'As VPMInstance Set PartInst = prodRootRef.Instances.Item(prodRootRef.Instances.Count) Dim PartRef 'As VPMReference Set PartRef = PartInst.ReferenceInstanceOf Dim VPMRefInst 'As VPMRepInstance Set VPMRefInst = PartRef.RepInstances.Item(1) Dim VPMRefRef 'As VPMRepReference Set VPMRefRef = VPMRefInst.ReferenceInstanceOf Dim oPart 'As Part Set oPart = VPMRefRef.GetItem(\"Part\") Dim myParameters 'As Parameters Set myParameters = oPart.Parameters End Sub","title":"DRW_DIME"},{"location":"DS-CODE/VBA/Delete2DEle/","text":"Delete2D Object Sub delete2d() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\".'2D Component Instance'\") 'catia.ActiveEditor.Selection.Selection.Search(\".'Dimension'\") ' catia.ActiveEditor.Selection.Selection.Search(\".'Text'\") 'Text For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub Sub deletetxt() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\".'Text'\") For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub Sub deletedim() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\".'Dimension'\") For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub Sub deletehatch() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\"CATDrwSearch.CATEarlyGenShape,all\") For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub","title":"Delete2D Object"},{"location":"DS-CODE/VBA/Delete2DEle/#delete2d-object","text":"Sub delete2d() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\".'2D Component Instance'\") 'catia.ActiveEditor.Selection.Selection.Search(\".'Dimension'\") ' catia.ActiveEditor.Selection.Selection.Search(\".'Text'\") 'Text For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub Sub deletetxt() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\".'Text'\") For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub Sub deletedim() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\".'Dimension'\") For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub Sub deletehatch() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\"CATDrwSearch.CATEarlyGenShape,all\") For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub","title":"Delete2D Object"},{"location":"DS-CODE/VBA/DeleteAllDimension/","text":"\u5220\u96642D\u90e8\u4ef6 Sub delete2d() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\".'2D Component Instance'\") 'catia.ActiveEditor.Selection.Selection.Search(\".'Dimension'\") ' catia.ActiveEditor.Selection.Selection.Search(\".'Text'\") 'Text For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub \u5220\u9664text Sub deletetxt() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\".'Text'\") For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub \u5220\u9664dimension Sub deletedim() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\".'Dimension'\") For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub \u5220\u9664\u586b\u5145 Sub deletehatch() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\"CATDrwSearch.CATEarlyGenShape,all\") For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub","title":"DeleteAllDimension"},{"location":"DS-CODE/VBA/DeleteAllDimension/#2d","text":"Sub delete2d() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\".'2D Component Instance'\") 'catia.ActiveEditor.Selection.Selection.Search(\".'Dimension'\") ' catia.ActiveEditor.Selection.Selection.Search(\".'Text'\") 'Text For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub","title":"\u5220\u96642D\u90e8\u4ef6"},{"location":"DS-CODE/VBA/DeleteAllDimension/#text","text":"Sub deletetxt() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\".'Text'\") For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub","title":"\u5220\u9664text"},{"location":"DS-CODE/VBA/DeleteAllDimension/#dimension","text":"Sub deletedim() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\".'Dimension'\") For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub","title":"\u5220\u9664dimension"},{"location":"DS-CODE/VBA/DeleteAllDimension/#_1","text":"Sub deletehatch() Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\") Dim KPColl As New Collection catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Selection.Search(\"CATDrwSearch.CATEarlyGenShape,all\") For LoopNum = 1 To catia.ActiveEditor.Selection.Count Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count catia.ActiveEditor.Selection.Clear() catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum)) catia.ActiveEditor.Selection.Delete() Next MsgBox(\"Finished Delete All Object.\") catia.ActiveEditor.Selection.Clear() KPColl.Clear() catia = Nothing End Sub","title":"\u5220\u9664\u586b\u5145"},{"location":"DS-CODE/VBA/Drafting-case-studies/","text":"oCatiaDoc = CATIA.ActiveDocument '\u5b9a\u4e49\u9009\u62e9\u96c6 Dim oSelection As Selection oSelection = oCatiaDoc.Selection Dim RootPart As Part RootPart = oCatiaDoc.Part Dim oHSF As HybridShapeFactory oHSF = RootPart.HybridShapeFactory Dim iRefSurface As HybridShapeSurfaceExplicit 'iRefSurface = SelSurface() Dim iHBody As HybridBody iHBody = SelHybridBody() Dim i As Integer i = 1 For Each oEle In iHBody.HybridShapes iRefSurface = oEle Dim oHbody As HybridBody oHbody = RootPart.HybridBodies.Add oHbody.Name = \"TemHBody\" oSelection.Clear() oSelection.Add(iRefSurface) oSelection.Search(\"\u62d3\u6251.\u8fb9\u7ebf,sel\") Dim iRefLine0 As Reference iRefLine0 = oSelection.Item(21).Value oSelection.Clear() oSelection.Add(iRefSurface) oSelection.Search(\"\u62d3\u6251.\u9876\u70b9,sel\") Dim oPt0_1 As Reference oPt0_1 = oSelection.Item(15).Value Dim oPt0_2 As Reference oPt0_2 = oSelection.Item(16).Value oSelection.Clear() '\u521b\u5efa\u66f2\u9762\u4f4d\u7f6e\u8f74\u7cfb '---------------------------------------------------------------- '\u8f74\u7cfb\u539f\u70b9 Dim oPt0 As HybridShapePointOnCurve oPt0 = oHSF.AddNewPointOnCurveFromPercent(iRefLine0, 0.5, True) oHbody.AppendHybridShape(oPt0) RootPart.UpdateObject(oPt0) oHSF.GSMVisibility(oPt0, 0) '\u53c2\u8003X\u65b9\u5411 Dim oRefLine0 As HybridShapeLinePtPt oRefLine0 = oHSF.AddNewLinePtPt(oPt0_1, oPt0_2) oHbody.AppendHybridShape(oRefLine0) RootPart.UpdateObject(oRefLine0) oHSF.GSMVisibility(oRefLine0, 0) Dim oAxisSystems As AxisSystems oAxisSystems = RootPart.AxisSystems RootPart.InWorkObject = oHbody '\u6dfb\u52a0\u8f74\u7cfb Dim oAxisSys1 As AxisSystem oAxisSys1 = oAxisSystems.Add oAxisSys1.OriginPoint = oPt0 oAxisSys1.XAxisDirection = oRefLine0 RootPart.UpdateObject(oAxisSys1) '---------------------------------------------------------------- '\u83b7\u53d6\u7edd\u5bf9\u8f74\u7cfb Dim oAxisSys2 As AxisSystem oAxisSys2 = oAxisSystems.Item(1) Dim oRefAxis1 As Reference oRefAxis1 = RootPart.CreateReferenceFromObject(oAxisSys1) Dim oRefAxis2 As Reference oRefAxis2 = RootPart.CreateReferenceFromObject(oAxisSys2) '\u8f74\u7cfb\u53d8\u6362 Dim oHBAxisToAxis As HybridShapeAxisToAxis oHBAxisToAxis = oHSF.AddNewAxisToAxis(iRefSurface, oRefAxis1, oRefAxis2) oHBAxisToAxis.VolumeResult = False oHbody.AppendHybridShape(oHBAxisToAxis) RootPart.UpdateObject(oHBAxisToAxis) oHSF.GSMVisibility(oHBAxisToAxis, 0) ''\u9694\u79bb\u8f74\u7cfb\u53d8\u6362 'Dim oTSurface As HybridShapeSurfaceExplicit 'oTSurface = oHSF.AddNewSurfaceDatum(oHBAxisToAxis) 'iHbody.AppendHybridShape(oTSurface) 'RootPart.UpdateObject(oTSurface) '\u5c55\u5f00\u66f2\u9762\u5143\u7d20\u83b7\u53d6 '--------------------------------------------------------------------------- oSelection.Clear() oSelection.Add(oHBAxisToAxis) oSelection.Search(\"\u62d3\u6251.\u8fb9\u7ebf,sel\") Dim iRefLine As Reference iRefLine = oSelection.Item(21).Value oSelection.Clear() oSelection.Add(oHBAxisToAxis) oSelection.Search(\"\u62d3\u6251.\u9876\u70b9,sel\") Dim oPt1_1 As Reference oPt1_1 = oSelection.Item(15).Value Dim oPt1_2 As Reference oPt1_2 = oSelection.Item(18).Value Dim oPt2_1 As Reference oPt2_1 = oSelection.Item(7).Value Dim oPt2_2 As Reference oPt2_2 = oSelection.Item(14).Value Dim oPt3_1 As Reference oPt3_1 = oSelection.Item(6).Value Dim oPt3_2 As Reference oPt3_2 = oSelection.Item(12).Value Dim oPt4_1 As Reference oPt4_1 = oSelection.Item(16).Value Dim oPt4_2 As Reference oPt4_2 = oSelection.Item(17).Value Dim oPt5_1 As Reference oPt5_1 = oSelection.Item(2).Value Dim oPt5_2 As Reference oPt5_2 = oSelection.Item(13).Value Dim oPt6_1 As Reference oPt6_1 = oSelection.Item(3).Value Dim oPt6_2 As Reference oPt6_2 = oSelection.Item(11).Value Dim oPt7_1 As Reference oPt7_1 = oSelection.Item(10).Value Dim oPt7_2 As Reference oPt7_2 = oSelection.Item(9).Value oSelection.Clear() Dim oLine1 As HybridShapeLinePtPt oLine1 = oHSF.AddNewLinePtPt(oPt1_1, oPt1_2) oHbody.AppendHybridShape(oLine1) RootPart.UpdateObject(oLine1) oHSF.GSMVisibility(oLine1, 0) Dim oLine2 As HybridShapeLinePtPt oLine2 = oHSF.AddNewLinePtPt(oPt2_1, oPt2_2) oHbody.AppendHybridShape(oLine2) RootPart.UpdateObject(oLine2) oHSF.GSMVisibility(oLine2, 0) Dim oLine3 As HybridShapeLinePtPt oLine3 = oHSF.AddNewLinePtPt(oPt3_1, oPt3_2) oHbody.AppendHybridShape(oLine3) RootPart.UpdateObject(oLine3) oHSF.GSMVisibility(oLine3, 0) Dim oLine4 As HybridShapeLinePtPt oLine4 = oHSF.AddNewLinePtPt(oPt4_1, oPt4_2) oHbody.AppendHybridShape(oLine4) RootPart.UpdateObject(oLine4) oHSF.GSMVisibility(oLine4, 0) Dim oLine5 As HybridShapeLinePtPt oLine5 = oHSF.AddNewLinePtPt(oPt5_1, oPt5_2) oHbody.AppendHybridShape(oLine5) RootPart.UpdateObject(oLine5) oHSF.GSMVisibility(oLine5, 0) Dim oLine6 As HybridShapeLinePtPt oLine6 = oHSF.AddNewLinePtPt(oPt6_1, oPt6_2) oHbody.AppendHybridShape(oLine6) RootPart.UpdateObject(oLine6) oHSF.GSMVisibility(oLine6, 0) '\u5c55\u5f00\u4f4d\u7f6e\u70b9 Dim oPt As HybridShapePointOnCurve oPt = oHSF.AddNewPointOnCurveFromPercent(iRefLine, 0.5, True) oHbody.AppendHybridShape(oPt) RootPart.UpdateObject(oPt) oHSF.GSMVisibility(oPt, 0) '\u5c55\u5f00\u65b9\u5411 Dim oRefLine As HybridShapeLinePtPt oRefLine = oHSF.AddNewLinePtPt(oPt1_1, oPt4_1) oHbody.AppendHybridShape(oRefLine) RootPart.UpdateObject(oRefLine) oHSF.GSMVisibility(oRefLine, 0) '\u5c55\u5f00\u70b9 Dim oPt1 As HybridShapePointCoord oPt1 = oHSF.AddNewPointCoord(0, 0, 0) oPt1.PtRef = oPt1_2 oPt1.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2) oHbody.AppendHybridShape(oPt1) RootPart.UpdateObject(oPt1) oHSF.GSMVisibility(oPt1, 0) Dim oPt2 As HybridShapePointCoord oPt2 = oHSF.AddNewPointCoord(0, 0, 0) oPt2.PtRef = oPt2_2 oPt2.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2) oHbody.AppendHybridShape(oPt2) RootPart.UpdateObject(oPt2) oHSF.GSMVisibility(oPt2, 0) Dim oPt3 As HybridShapePointCoord oPt3 = oHSF.AddNewPointCoord(0, 0, 0) oPt3.PtRef = oPt3_2 oPt3.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2) oHbody.AppendHybridShape(oPt3) RootPart.UpdateObject(oPt3) oHSF.GSMVisibility(oPt3, 0) Dim oPt4 As HybridShapePointCoord oPt4 = oHSF.AddNewPointCoord(0, 0, 0) oPt4.PtRef = oPt4_2 oPt4.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2) oHbody.AppendHybridShape(oPt4) RootPart.UpdateObject(oPt4) oHSF.GSMVisibility(oPt4, 0) Dim oPt5 As HybridShapePointCoord oPt5 = oHSF.AddNewPointCoord(0, 0, 0) oPt5.PtRef = oPt5_2 oPt5.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2) oHbody.AppendHybridShape(oPt5) RootPart.UpdateObject(oPt5) oHSF.GSMVisibility(oPt5, 0) Dim oPt6 As HybridShapePointCoord oPt6 = oHSF.AddNewPointCoord(0, 0, 0) oPt6.PtRef = oPt6_2 oPt6.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2) oHbody.AppendHybridShape(oPt6) RootPart.UpdateObject(oPt6) oHSF.GSMVisibility(oPt6, 0) Dim oPt7 As HybridShapePointCoord oPt7 = oHSF.AddNewPointCoord(0, 0, 0) oPt7.PtRef = oPt7_1 oPt7.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2) oHbody.AppendHybridShape(oPt7) RootPart.UpdateObject(oPt7) oHSF.GSMVisibility(oPt7, 0) Dim oPt8 As HybridShapePointCoord oPt8 = oHSF.AddNewPointCoord(0, 0, 0) oPt8.PtRef = oPt7_2 oPt8.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2) oHbody.AppendHybridShape(oPt8) RootPart.UpdateObject(oPt8) oHSF.GSMVisibility(oPt8, 0) '\u5c55\u5f00 Dim oUnfold As HybridShapeUnfold oUnfold = oHSF.AddNewUnfold() oUnfold.SurfaceToUnfold = oHBAxisToAxis '\u5c55\u5f00\u539f\u70b9\u548c\u65b9\u5411 oUnfold.OriginToUnfold = oPt oUnfold.DirectionToUnfold = oRefLine '\u652f\u6301\u9762\u548c\u65b9\u5411 oUnfold.TargetPlane = RootPart.OriginElements.PlaneZX oUnfold.TargetOrientationMode = 6 '\u5206\u5272\u5143\u7d20 oUnfold.AddEdgeToTear(oLine1) oUnfold.AddEdgeToTear(oLine2) oUnfold.AddEdgeToTear(oLine3) oUnfold.AddEdgeToTear(oLine4) oUnfold.AddEdgeToTear(oLine5) oUnfold.AddEdgeToTear(oLine6) '\u5c55\u5f00\u5143\u7d20 oUnfold.AddElementToTransfer(oPt1, 1) oUnfold.AddElementToTransfer(oPt2, 1) oUnfold.AddElementToTransfer(oPt3, 1) oUnfold.AddElementToTransfer(oPt4, 1) oUnfold.AddElementToTransfer(oPt5, 1) oUnfold.AddElementToTransfer(oPt6, 1) oUnfold.AddElementToTransfer(oPt7, 1) oUnfold.AddElementToTransfer(oPt8, 1) oHbody.AppendHybridShape(oUnfold) RootPart.UpdateObject(oUnfold) '\u5de5\u7a0b\u5236\u56fe '------------------------------------------------------------------------ Dim oDrwingDoc As DrawingDocument oDrwingDoc = CATIA.Documents.Add(\"Drawing\") oDrwingDoc.Standard = CatDrawingStandard.catISO Dim oDrwSheet As DrawingSheet oDrwSheet = oDrwingDoc.Sheets.Item(\"\u9875.1\") '\u5e38\u89c4\u8bbe\u7f6e oDrwSheet.PaperSize = DRAFTINGITF.CatPaperSize.catPaperA3 oDrwSheet.Scale = 1 oDrwSheet.Orientation = DRAFTINGITF.CatPaperOrientation.catPaperLandscape oDrwSheet = oDrwingDoc.Sheets.ActiveSheet Dim oFrontView As DrawingView oFrontView = oDrwSheet.Views.Add(\"\u6b63\u89c6\u56fe\") Dim oDrwViewGenLinks As DrawingViewGenerativeLinks oDrwViewGenLinks = oFrontView.GenerativeLinks Dim oDrwViewGenBehavior As DrawingViewGenerativeBehavior oDrwViewGenBehavior = oFrontView.GenerativeBehavior oDrwViewGenLinks.AddLink(oHbody) oDrwViewGenBehavior.DefineFrontView(-1, 0, 0, 0, 0, 1) oFrontView.Scale = 0.125 oFrontView.x = 210 oFrontView.y = 100 oDrwViewGenBehavior = oFrontView.GenerativeBehavior oDrwViewGenBehavior.Update() oFrontView.Activate() oSelection.Clear() oSelection.Add(oUnfold) oSelection.Search(\"\u521b\u6210\u5f0f\u5916\u5f62\u8bbe\u8ba1.\u70b9,sel\") '\u83b7\u53d62D\u5143\u7d20\u70b9 '------------------------------------------------- Dim oDimPt1 As Reference oDimPt1 = oSelection.Item(1).Value Dim oDimPt2 As Reference oDimPt2 = oSelection.Item(2).Value Dim oDimPt3 As Reference oDimPt3 = oSelection.Item(3).Value Dim oDimPt4 As Reference oDimPt4 = oSelection.Item(4).Value Dim oDimPt5 As Reference oDimPt5 = oSelection.Item(5).Value Dim oDimPt6 As Reference oDimPt6 = oSelection.Item(6).Value Dim oDimPt7 As Reference oDimPt7 = oSelection.Item(7).Value Dim oDimPt8 As Reference oDimPt8 = oSelection.Item(8).Value oSelection.Clear() '\u83b7\u53d62D\u5143\u7d20\u7684\u5750\u6807 '------------------------------------------------------ Dim TheSPAWorkbench As SPAWorkbench TheSPAWorkbench = oCatiaDoc.GetWorkbench(\"SPAWorkbench\") Dim oMeaTem As Measurable oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt1) Dim oCoord1(2) oMeaTem.GetPoint(oCoord1) oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt2) Dim oCoord2(2) oMeaTem.GetPoint(oCoord2) oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt3) Dim oCoord3(2) oMeaTem.GetPoint(oCoord3) oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt4) Dim oCoord4(2) oMeaTem.GetPoint(oCoord4) oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt5) Dim oCoord5(2) oMeaTem.GetPoint(oCoord5) oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt6) Dim oCoord6(2) oMeaTem.GetPoint(oCoord6) oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt7) Dim oCoord7(2) oMeaTem.GetPoint(oCoord7) oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt8) Dim oCoord8(2) oMeaTem.GetPoint(oCoord8) '\u5de5\u7a0b\u56fe\u5185\u521b\u5efa\u6807\u6ce8\u70b9 '------------------------------------------------------- oFrontView.Activate() Dim oFact2D As Factory2D oFact2D = oFrontView.Factory2D Dim oPoint1 As Point2D oPoint1 = oFact2D.CreatePoint(oCoord1(0), oCoord1(2)) Dim oPoint2 As Point2D oPoint2 = oFact2D.CreatePoint(oCoord2(0), oCoord2(2)) Dim oPoint3 As Point2D oPoint3 = oFact2D.CreatePoint(oCoord3(0), oCoord3(2)) Dim oPoint4 As Point2D oPoint4 = oFact2D.CreatePoint(oCoord4(0), oCoord4(2)) Dim oPoint5 As Point2D oPoint5 = oFact2D.CreatePoint(oCoord5(0), oCoord5(2)) Dim oPoint6 As Point2D oPoint6 = oFact2D.CreatePoint(oCoord6(0), oCoord6(2)) Dim oPoint7 As Point2D oPoint7 = oFact2D.CreatePoint(oCoord7(0), oCoord7(2)) Dim oPoint8 As Point2D oPoint8 = oFact2D.CreatePoint(oCoord8(0), oCoord8(2)) Dim oDLine1 As Line2D oDLine1 = oFact2D.CreateLine(oCoord1(0), oCoord1(2), oCoord4(0), oCoord4(2)) Dim oDLine2 As Line2D oDLine2 = oFact2D.CreateLine(oCoord2(0), oCoord2(2), oCoord5(0), oCoord5(2)) Dim oDLine3 As Line2D oDLine3 = oFact2D.CreateLine(oCoord3(0), oCoord3(2), oCoord6(0), oCoord6(2)) Dim oDLine_1 As Line2D oDLine_1 = oFact2D.CreateLine(oCoord1(0), oCoord1(2), oCoord2(0), oCoord2(2)) Dim oDLine_2 As Line2D oDLine_2 = oFact2D.CreateLine(oCoord2(0), oCoord2(2), oCoord3(0), oCoord3(2)) Dim oDLine_3 As Line2D oDLine_3 = oFact2D.CreateLine(oCoord4(0), oCoord4(2), oCoord5(0), oCoord5(2)) Dim oDLine_4 As Line2D oDLine_4 = oFact2D.CreateLine(oCoord5(0), oCoord5(2), oCoord6(0), oCoord6(2)) Dim oDLine_5 As Line2D oDLine_5 = oFact2D.CreateLine(oCoord3(0), oCoord3(2), oCoord7(0), oCoord7(2)) Dim oDLine_6 As Line2D oDLine_6 = oFact2D.CreateLine(oCoord6(0), oCoord6(2), oCoord8(0), oCoord8(2)) '\u865a\u7ebf\uff0c\u989c\u8272\u8bbe\u7f6e oSelection.Clear() oSelection.Add(oDLine1) oSelection.Add(oDLine2) oSelection.Add(oDLine3) oSelection.Add(oDLine_1) oSelection.Add(oDLine_2) oSelection.Add(oDLine_3) oSelection.Add(oDLine_4) oSelection.Add(oDLine_5) oSelection.Add(oDLine_6) Dim oVis As VisPropertySet oVis = oSelection.VisProperties '\u7d2b\u7ea2\u8272 \u865a\u7ebf \u6700\u7ec6 oVis.SetVisibleColor(255, 0, 255, 1) oVis.SetVisibleLineType(4, 1) oVis.SetVisibleWidth(1, 1) oSelection.Clear() '\u6807\u6ce8\u7684\u5143\u7d20 Dim myElement1(1) myElement1 = {oPoint1, oPoint4} Dim myElement2(1) myElement2 = {oPoint2, oPoint5} Dim myElement3(1) myElement3 = {oPoint7, oPoint8} Dim myElement4(1) myElement4 = {oDLine2, oDLine3} Dim myElement5(1) myElement5 = {oDLine2, oDLine_3} '\u5c3a\u5bf8\u4f4d\u7f6e Dim SelPoints(3) As Object SelPoints = {200, 10, 200, 10} Dim oDrwDim As DrawingDimension oDrwDim = oFrontView.Dimensions.Add(CatDimType.catDimDistance, myElement1, SelPoints, CatDimLineRep.catDimHoriz) oDrwDim = oFrontView.Dimensions.Add(CatDimType.catDimDistance, myElement2, SelPoints, CatDimLineRep.catDimHoriz) oDrwDim = oFrontView.Dimensions.Add(CatDimType.catDimDistance, myElement3, SelPoints, CatDimLineRep.catDimHoriz) oDrwDim = oFrontView.Dimensions.Add(CatDimType.catDimDistance, myElement4, SelPoints, CatDimLineRep.catDimVert) oDrwDim = oFrontView.Dimensions.Add(CatDimType.catDimAngle, myElement5, SelPoints, CatDimLineRep.catDimAuto) oDrwingDoc.ExportData(\"D:\\DrawingTest\\\" + CStr(i), \"pdf\") oDrwingDoc.Close() oSelection.Clear() oSelection.Add(oHbody) oSelection.Delete() i = i + 1 Next","title":"Drafting case studies"},{"location":"DS-CODE/VBA/Drawing/","text":"' ******************************************************************************************************************** ' AUTOMATED SECTION-VIEW GENERATION Author: Stephen Boak ' Modifications 2006-2007: Andrew Witt '********************************************************************************************************************* ' ----------------------------------------------------------- ' Script must be run from the UserForm. ' This script creates an elevation view and offset section views from the active model using a geometric set of planes as the input. ' A section cut or view is created at the level of each plane in the set, so the input plane should be at the correct orientation to work properly. ' User must specify the plane of the elevation view, usually YZ will be correct. ' User must specify a path to save DWG files. 'Options: ' Script allows user to specify a naming prefix for each saved Autocad DWG (drawings are saved using the name of the plane that created it, except elevation view which ' is saved as \"front view.dwg\". ' User can also define an offset from the selected plane (down is negative), the plane of the elevation view, the type of section to create (cut or view), and the ' rotation of the sections relative to the elevation view (looking down is +90deg, looking up is -90deg). ' The form will detect the number of planes in the geometric set, and then the user can specify the range of items to take sections for. 'Known Issues: Very complex or large files will require a LOT of RAM to run, and may result in crashes. Use the task manager to observe RAM 'usage if you are concerned about overflow. ' ----------------------------------------------------------- Public ComponentObjects As New Collection Public SelectedGS As HybridBody Sub CATMain() UserForm1.Show End Sub Sub Generate() Dim U1(2), U2(2), V1(2), V2(2), ZVector(2), Origin(2), Pt(2), TempVector(2) Dim Norm, NewTemp Dim slabOffset, viewType, sectionRotationTemp, StartPlane As Integer, EndPlane As Integer Dim oDocumentToDraw Dim MySelection Dim oCurrentPart As Part Dim oSheet Dim PlaneZPosition Dim oDrawingSource Dim oSheetSource Dim oSelectionTarget Dim oSectionView Dim oViewTarget Dim oViewSource Dim oViewSelection Dim oSheetTarget Dim oX Dim oY Dim oZ Dim viewName Dim DftManager As DftManager Dim TheXYPlane Dim oDrawing 'As DrawingDocument Dim oFrontViewGB Dim drawingDocument1 As DrawingDocument ZVector(0) = 0 ZVector(1) = 0 ZVector(2) = 1 Origin(0) = 0 Origin(1) = 0 Origin(2) = 0 ' Bring in the naming prefix entered by the user and later add it to the beginning of all saved file names. Suffix = UserForm1.F_Suffix.Text slabOffsetmm = UserForm1.F_slabOffset.Text slabOffset = CDbl(slabOffsetmm) * 25.4 StartPlane = UserForm1.F_StartPlane.Text EndPlane = UserForm1.F_EndPlane.Text viewType = UserForm1.F_viewType.Text sectionRotationTemp = UserForm1.F_sectionRotation.Text If sectionRotationTemp = \"Look Down\" Then SectionRotation = \"0\" If sectionRotationTemp = \"Look Up\" Then SectionRotation = \"1\" 'Specify the root save path TheRootPath = UserForm1.F_SavePath.Value ' Specify the active document (root part level) Set oDocumentToDraw = CATIA.ActiveDocument ' Establish hybridShape references from the current selection and count ' the number of hybridShapes in the selection Set MySelection = CATIA.ActiveDocument.Selection Set SelectedGS = CATIA.ActiveDocument.Selection.Item(1).Value NumHShapes = SelectedGS.HybridShapes.Count ' Set the active document and the part to draw, seperate entities because the plane system ' resides in a single part, but we wish to create drawings of the entire product Set oCurrentPart = GetContainingPart(MySelection.Item(1).Value) Set TheXYPlane = oCurrentPart.OriginElements.PlaneXY ReDim ZDist(NumHShapes) 'Define a reference matrix using the geometrical set of planes, used in later loops 'Use the getdistance function to measure the height that the section should be taken at ReDim refMatrix(NumHShapes) For I = 0 To NumHShapes - 1 Set refMatrix(I) = SelectedGS.HybridShapes.Item(I + 1) ZDist(I) = GetDistance(refMatrix(I), TheXYPlane) Next I ' Create an empty drawing document: it becomes the active document. Set oDrawing = CATIA.Documents.Add(\"Drawing\") Set oSheet = oDrawing.Sheets.ActiveSheet ' Create a view called \"Front View\" in this sheet Dim oFrontView Set oFrontView = oSheet.Views.Add(\"Front View\") ' Create a variable for the view's generative behavior, set below Set oFrontViewGB = oFrontView.GenerativeBehavior oFrontViewGB.RepresentationMode = catPolyhedricMode ' Declare the part to draw in this front view oFrontViewGB.Document = oDocumentToDraw.Product '*************************** GET DftManager FOR ATTRIBUTE FILTERING ******************************************** Set DftManager = oDocumentToDraw.Product.GetItem(\"GTCDftManagerVBExt\") ' Define this view as a Front View, with UserForm Specifying the projection plane 'DETECT PLAN OR SECTION 'If DetectPlanCut(MySelection.Item(1).Value.HybridShapes.Item(1)) Then 'oFrontViewGB.DefineFrontView 1, 0, 0, 0, 0, 1 'Else 'oFrontViewGB.DefineFrontView 1, 0, 0, 0, 1, 0 'End If 'Update the view, necessary at this point to get the repositioning command below to work 'oFrontViewGB.Update ' Position the View at the origin of the sheet. This keeps the drawing origin true to the part origin. 'Call Recenter(oFrontView) ' Save the Front View Set drawingDocument1 = CATIA.ActiveDocument drawingDocument1.Sheets.Item(1).Activate If TheRootPath = \"\" Then TheRootPath = \"c:\\\" End If 'If UserForm1.GenerateFrontView.Value = True Then 'drawingDocument1.ExportData CStr(TheRootPath) & Suffix & \"FrontView.dwg\", \"dwg\" 'End If ' Define a reference plane to establish the location & direction of the section views Set RefPlane = MySelection.Item(1).Value.HybridShapes.Item(1) 'Set the endpoints/boundaries of the section view (the area to draw) Dim XMin As Double Dim XMax As Double Dim ViewDims(3) 'oFrontView.Size ViewDims 'XMin = ViewDims(0) 'XMax = ViewDims(1) ' Set the active drawing sheet Dim oDrawingSheets As DrawingSheets Set oDrawingSheets = oDrawing.Sheets Dim oDrawingSheet As DrawingSheet ' These two numbers are the x-coordinates of the two points used to specify the section view Dim SectionPointArray(3) 'Loop to create the offset section views, creating a new sheet for each one and then saving the sheet as a DWG For j = CInt(StartPlane) To CInt(EndPlane) Call GetPlaneOrientation(MySelection.Item(1).Value.HybridShapes.Item(j), CurrentOrientation) Pt(0) = CurrentOrientation(0) Pt(1) = CurrentOrientation(1) Pt(2) = CurrentOrientation(2) U1(0) = CurrentOrientation(3) U1(1) = CurrentOrientation(4) U1(2) = CurrentOrientation(5) U2(0) = CurrentOrientation(6) U2(1) = CurrentOrientation(7) U2(2) = CurrentOrientation(8) Norm = CrossProduct(U1, U2) 'DETECT PLAN OR SECTION If DetectPlanCut(MySelection.Item(1).Value.HybridShapes.Item(j)) Then oFrontViewGB.DefineFrontView 1, 0, 0, 0, 1, 1 Else oFrontViewGB.DefineFrontView Norm(0), Norm(1), Norm(2), U2(0), U2(1), 0 'oFrontViewGB.DefineFrontView 1, 0, 0, 0, 1, 0 End If 'Update the view, necessary at this point to get the repositioning command below to work oFrontViewGB.Update oFrontView.Size ViewDims XMin = ViewDims(0) XMax = ViewDims(1) ' Position the View at the origin of the sheet. This keeps the drawing origin true to the part origin. Call Recenter(oFrontView) If UserForm1.GenerateFrontView.Value = True Then drawingDocument1.ExportData CStr(TheRootPath) & Suffix & \"FrontView\" & refMatrix(j - 1).Name & \".dwg\", \"dwg\" End If Dot = DotProduct(Norm, ZVector) If Abs(Dot) < 0.0001 Then PlaneZPosition = ZDist(j - 1) + slabOffset 'refMatrix(j - 1).offset.Value + slabOffset PtResult = ProjectPointToPlaneDirection(Pt, Origin, ZVector, Norm) TempVector(0) = U2(0) TempVector(1) = U2(1) TempVector(2) = 0 PtResult = ProjectPointToPlane(PtResult, Pt, CrossProduct(Norm, TempVector)) ' These two numbers are the y-coordinates of the two points used to specify the section view SectionPointArray(0) = -(2 * Abs(XMax) + Abs(XMin)) SectionPointArray(1) = PlaneZPosition SectionPointArray(2) = (2 * Abs(XMax) + Abs(XMin)) SectionPointArray(3) = PlaneZPosition Else If CurrentOrientation(3) < 0.0001 And CurrentOrientation(4) < 0.0001 Then SectionPointArray(0) = CurrentOrientation(6) * (2 * XMax - XMin) + CurrentOrientation(0) SectionPointArray(1) = CurrentOrientation(7) * (2 * XMax - XMin) + CurrentOrientation(1) SectionPointArray(2) = -CurrentOrientation(6) * (2 * XMax - XMin) + CurrentOrientation(0) SectionPointArray(3) = -CurrentOrientation(7) * (2 * XMax - XMin) + CurrentOrientation(1) ViewAngle = Atn(CurrentOrientation(7) / CurrentOrientation(6)) Else If SectionRotation = 0 Then PtResult = ProjectPointToPlaneDirection(Pt, Origin, ZVector, Norm) TempVector(0) = U2(0) TempVector(1) = U2(1) TempVector(2) = 0 PtResult = ProjectPointToPlane(PtResult, Pt, CrossProduct(Norm, TempVector)) NewTemp = ProjectPtOntoVector(Pt, Origin, ZVector) SectionPointArray(0) = PtResult(0) SectionPointArray(1) = (2 * XMax - XMin) + CurrentOrientation(1) SectionPointArray(2) = PtResult(0) SectionPointArray(3) = -(2 * XMax - XMin) + CurrentOrientation(1) Else SectionPointArray(2) = CurrentOrientation(3) * (2 * XMax - XMin) + CurrentOrientation(0) SectionPointArray(3) = CurrentOrientation(4) * (2 * XMax - XMin) + CurrentOrientation(1) SectionPointArray(0) = -CurrentOrientation(3) * (2 * XMax - XMin) + CurrentOrientation(0) SectionPointArray(1) = -CurrentOrientation(4) * (2 * XMax - XMin) + CurrentOrientation(1) End If If CurrentOrientation(3) < 0.001 Then ViewAngle = 3.1415926 / 2 Else ViewAngle = Atn(CurrentOrientation(4) / CurrentOrientation(3)) End If End If End If ' Add an empty section view to the main sheet viewName = refMatrix(j - 1).Name Set oSectionView = oSheet.Views.Add(CStr(viewName)) '********************* MEASURE CURRENT PLANE TO DETERMINE ORIENTATION ***************************************** '********************* CHECK TO DETERMINE IF ORIENTATION IS CORRECT RELATIVE TO CURRENT REF VIEW *************** ' Create the offset section view and define its GB Dim oSectionViewGB Set oSectionViewGB = oSectionView.GenerativeBehavior 'oSectionView.Angle = 1.570796327 'this equals 90 degrees, shown in radians ' Update and then reposition the view (order important, update first) If UserForm1.ComponentCheck Then '************************************** SET UP LINKS FOR COMPONENTWISE EXTRACTION ******************************* ComponentObjects.Item(j).ApplyWorkMode (DESIGN_MODE) oSectionViewGB.Document = ComponentObjects.Item(j).ReferenceProduct 'oDocumentToDraw.Product Call oSectionView.GenerativeLinks.RemoveAllLinks Call oSectionView.GenerativeLinks.AddLink(ComponentObjects.Item(j).ReferenceProduct) Else oSectionViewGB.Document = oDocumentToDraw.Product End If 'oSectionViewGB.Document = oDocumentToDraw.Product oSectionView.GenerativeBehavior.DefineSectionView SectionPointArray, CStr(viewType), Offset, SectionRotation, oFrontViewGB oSectionViewGB.Update oSectionView.xAxisData = 0# oSectionView.yAxisData = 0# 'Clear the z-position variable Set PlaneZPosition = Nothing Set oDrawingSource = CATIA.ActiveDocument Set oSheetSource = CATIA.ActiveDocument.Sheets.Item(\"Sheet.1\") Set oViewSource = oSheetSource.Views.Item(oSheetSource.Views.Count) 'Count) oViewSource.Activate '************************************** ADD BOX SECTION ******************************* If UserForm1.BoxSection.Value = True Then Call AddBoxSection(oViewSource, CurrentOrientation, UserForm1.OffsetBelow.Text) oDrawing.Update End If Set selection1 = drawingDocument1.Selection selection1.Clear selection1.Search \"CATDrwSearch.CATEarlyGenShape,all\" If selection1.Count > 0 Then Call selection1.Delete End If 'If section view, rotate If Abs(Dot) < 0.0001 And UserForm1.RotateSections.Value = True Then oViewSource.Angle = -ViewAngle End If oViewSource.xAxisData = 0# oViewSource.yAxisData = 0# 'Scale by appropriate factor Select Case UserForm1.ScaleList.Text Case \"1/16\" & Chr$(34) & \" = 1'-0\" & Chr$(34) oViewSource.Scale2 = 0.0052 Case \"3/32\" & Chr$(34) & \" = 1'-0\" & Chr$(34) oViewSource.Scale2 = 0.0078 Case \"1/8\" & Chr$(34) & \" = 1'-0\" & Chr$(34) oViewSource.Scale2 = 0.0104 Case \"3/16\" & Chr$(34) & \" = 1'-0\" & Chr$(34) oViewSource.Scale2 = 0.0156 Case \"1/4\" & Chr$(34) & \" = 1'-0\" & Chr$(34) oViewSource.Scale2 = 0.0208 Case \"3/8\" & Chr$(34) & \" = 1'-0\" & Chr$(34) oViewSource.Scale2 = 0.0313 Case \"1/2\" & Chr$(34) & \" = 1'-0\" & Chr$(34) oViewSource.Scale2 = 0.0417 Case \"3/4\" & Chr$(34) & \" = 1'-0\" & Chr$(34) oViewSource.Scale2 = 0.0625 Case \"1\" & Chr$(34) & \" = 1'-0\" & Chr$(34) oViewSource.Scale2 = 0.0833 Case \"1 1/2\" & Chr$(34) & \" = 1'-0\" & Chr$(34) oViewSource.Scale2 = 0.125 Case \"3\" & Chr$(34) & \" = 1'-0\" & Chr$(34) oViewSource.Scale2 = 0.25 Case \"6\" & Chr$(34) & \" = 1'-0\" & Chr$(34) oViewSource.Scale2 = 0.5 Case \"FULL SCALE\" oViewSource.Scale2 = 1 End Select Set oViewSelection = oDrawingSource.Selection '************************************* GENERATE LAYERS BY APPLYING RULES ************************************* If UserForm1.AttributeFilter.Value = True Then Set CurrentView = DftManager.GetDftView(oViewSource) Call CurrentView.ApplyRules End If Set oDrawingSheet = oDrawingSheets.Add(\"Sheet\") 'add a new drawing sheet oDrawingSheet.Name = refMatrix(j - 1).Name 'gets the name of the sheet from the plane name in the refmatrix oViewSelection.Clear oViewSelection.Add oViewSource oViewSelection.Copy 'Specify a paste target and paste the view Set oSheetTarget = CATIA.ActiveDocument.Sheets.Item(2) Set oSelectionTarget = oDrawingSource.Selection 'Clear the selection oSelectionTarget.Clear 'Add the sheet where the view will be pasted in the selection oSelectionTarget.Add oSheetTarget 'Paste the clipboard and remove the original view/cut after pasting. Cutting wasn't working, so instead I did copy/paste/erase original oSelectionTarget.Paste oSheetTarget.Views.Item(1).xAxisData = 0# oSheetTarget.Views.Item(1).yAxisData = 0# oSheetSource.Views.Remove (4) ' Save the section view as a DWG, getting the patt and naming prefix from the userform, and after the comma at the end of the 3rd line below ' define the format as AutoCAD DWG viewSaveName = refMatrix(j - 1).Name drawingDocument1.Sheets.Item(2).Activate If UserForm1.DrawingFormat.Text = \"DWG\" Then drawingDocument1.ExportData CStr(TheRootPath) & Suffix & CStr(viewSaveName) & \".dwg\", \"dwg\" Else drawingDocument1.SaveAs CStr(TheRootPath) & Suffix & CStr(viewSaveName) & \".CATDrawing\" End If 'Remove the saved sheet drawingDocument1.Sheets.Remove (2) If UserForm1.ComponentCheck Then '************************************** FOR COMPONENTWISE EXTRACTION REVERT TO VIS MODE ******************************* ComponentObjects.Item(j).ApplyWorkMode (VISUALIZATION_MODE) End If Next j MsgBox (\"Drawings Batch Saved.\") End End Sub Sub AddBoxSection(oCurrentView, oCurrentPosition, oOffset) Dim Components TempName = FindDocNameForPartNumber(oCurrentView.GenerativeBehavior.Document.Name) Set CurrentDoc = CATIA.Documents.Item(TempName) Dim U(2), V(2), Result ' Retrieve the Sections collection Dim cSections As Sections Set cSections = oCurrentView.GenerativeBehavior.Document.GetTechnologicalObject(\"Sections\") ' Create the master section Dim oMasterSection 'As Section Set oMasterSection = cSections.Add ' Retrieve data on master section Dim Position(11), OldPosition(11) U(0) = oCurrentPosition(3) U(1) = oCurrentPosition(4) U(2) = oCurrentPosition(5) V(0) = oCurrentPosition(6) V(1) = oCurrentPosition(7) V(2) = oCurrentPosition(8) Result = CrossProduct(U, V) Position(0) = oCurrentPosition(3) Position(1) = oCurrentPosition(4) Position(2) = oCurrentPosition(5) Position(3) = oCurrentPosition(6) Position(4) = oCurrentPosition(7) Position(5) = oCurrentPosition(8) Position(6) = Result(0) Position(7) = Result(1) Position(8) = Result(2) Position(9) = oCurrentPosition(0) Position(10) = oCurrentPosition(1) Position(11) = oCurrentPosition(2) - CDbl(oOffset) oMasterSection.GetPosition OldPosition oMasterSection.SetPosition Position oMasterSection.Type = catSectionTypeBox oMasterSection.Thickness = CDbl(oOffset) oCurrentView.GenerativeBehavior.DefineBox3DView (oMasterSection) 'Call cSections.Remove(cSections.Count) End Sub Function FindDocNameForPartNumber(PartNo) Dim TempName TempName = \"\" For LoopNum = 1 To CATIA.Documents.Count If \"ProductDocument\" = TypeName(CATIA.Documents.Item(LoopNum)) Then If CATIA.Documents.Item(LoopNum).Product.Name = PartNo Then TempName = CATIA.Documents.Item(LoopNum).Name End If End If Next FindDocNameForPartNumber = TempName End Function ' Function to access the SPA Workbench and measure distances between objects Function GetDistance(EdgeRef1, EdgeRef2) Dim CurrentMeasurable As Measurable Dim TheSPAWorkbench As Workbench Set TheSPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Dim TempDistance Set CurrentMeasurable = TheSPAWorkbench.GetMeasurable(EdgeRef1) TempDistance = CurrentMeasurable.GetMinimumDistance(EdgeRef2) GetDistance = TempDistance End Function Function GetPlaneOrientation(P1, ByRef Orientation) Dim CurrentMeasurable Dim TheSPAWorkbench Dim TempDistance(8) Set Current = P1 found = False While found = False Set Current = Current.Parent If TypeName(Current) = \"Part\" Then found = True End If Wend Set PlaneRef = Current.CreateReferenceFromObject(P1) Set TheSPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\") Set CurrentMeasurable = TheSPAWorkbench.GetMeasurable(PlaneRef) Call CurrentMeasurable.GetPlane(TempDistance) Orientation = TempDistance End Function Function DistanceToPlane(P1, P2) Current = P1 found = False While found = False Set Current = Current.Parent If TypeName(Current) = \"Part\" Then found = True End If Wend Set PlaneRef1 = Current.CreateReferenceFromObject(P1) Set PlaneRef2 = Current.CreateReferenceFromObject(P2) Set PlaneMeasure = TheSPAWorkbench.GetMeasurable(PlaneRef1) Distance = PlaneMeasure.GetMinimumDistance(PlaneRef2) DistanceToPlane = Distance End Function Function CrossProduct(U, V) Dim Result(2) Result(0) = (U(1) * V(2) - U(2) * V(1)) Result(1) = -(U(0) * V(2) - U(2) * V(0)) Result(2) = (U(0) * V(1) - U(1) * V(0)) CrossProduct = Result End Function Function DotProduct(U, V) Temp = U(0) * V(0) + U(1) * V(1) + U(2) * V(2) DotProduct = Temp End Function Function SubtractVector(U, V) Dim Result(2) Result(0) = U(0) - V(0) Result(1) = U(1) - V(1) Result(2) = U(2) - V(2) SubtractVector = Result End Function Function AddVector(U, V) Dim Result(2) Result(0) = U(0) + V(0) Result(1) = U(1) + V(1) Result(2) = U(2) + V(2) AddVector = Result End Function Function MultiplyScalar(a, V) Dim Result(2) Result(0) = a * V(0) Result(1) = a * V(1) Result(2) = a * V(2) MultiplyScalar = Result End Function Function ProjectPointToPlane(Pt, Origin, Norm) t = ((-1) * DotProduct(SubtractVector(Origin, Pt), Pt) / DotProduct(SubtractVector(Origin, Pt), Norm)) ProjectPointToPlane = AddVector(Pt, MultiplyScalar(t, Norm)) End Function Function ProjectPointToPlaneDirection(Pt, Origin, Norm, Dir) t = (DotProduct(Norm, SubtractVector(Origin, Pt)) / DotProduct(Norm, Dir)) ProjectPointToPlaneDirection = AddVector(Pt, MultiplyScalar(t, Dir)) End Function Function ProjectPtOntoVector(Pt, Origin, Norm) t = ((DotProduct(Pt, Norm) - DotProduct(Origin, Norm)) / DotProduct(Norm, Norm)) ProjectPtOntoVector = AddVector(Origin, MultiplyScalar(t, Norm)) End Function Function Project3D2D(Pt, Origin, Norm) End Function Function DetectPlanCut(SelectedPlane) Dim V1(3), V2(3) Dim U1(3), U2(3) V1(0) = 1 V1(1) = 0 V1(2) = 0 V2(0) = 0 V2(1) = 0 V2(2) = 1 CurrentOrientation = GetPlaneOrientation(SelectedPlane, U) U1(0) = U(3) U1(1) = U(4) U1(2) = U(5) U2(0) = U(6) U2(1) = U(7) U2(2) = U(8) Dim CrossProduct2(2) CrossProduct1 = CrossProduct(U1, U2) CrossProduct2(0) = 0 CrossProduct2(1) = 0 CrossProduct2(2) = 1 Dot = DotProduct(CrossProduct1, CrossProduct2) If Abs(Dot) < 0.0001 Then DetectPlanCut = True Else DetectPlanCut = False End If End Function Sub Recenter(oView) oView.xAxisData = 0# oView.yAxisData = 0# End Sub Function GetContainingPart(oObj) Set Current = oObj found = False While found = False Set Current = Current.Parent If TypeName(Current) = \"Part\" Then found = True End If Wend Set GetContainingPart = Current End Function","title":"Drawing"},{"location":"DS-CODE/VBA/GENERATE_DRW_PRD/","text":"GENERATE_DRW_PRD Sub CATMain() getPrd End Sub Sub getPrd() ' Gets the Part Product Parameters Dim proRootOcc As VPMRootOccurrence proRootOcc = CATIA.ActiveEditor.ActiveObject Dim sel As Selection Set sel = CATIA.ActiveEditor.Selection Dim prodRootRef As VPMReference prodRootRef = proRootOcc.ReferenceRootOccurrenceOf ' Console.WriteLine(prodRootRef.RepInstances.Count) Dim aa As VPMRepOccurrence Set aa = prodRootRef.RepInstances.Item(1) Dim oVPMRepRef1 As VPMRepReference Set oVPMRepRef1 = aa.ReferenceInstanceOf Dim part1 As Part Set part1 = oVPMRepRef1.GetItem(\"Part\") Debug.Print part1.Name Dim bb As VPMRepOccurrence: Set bb = prodRootRef.RepInstances.Item(2) Dim oVPMRepRef2 As VPMRepReference: Set oVPMRepRef2 = bb.ReferenceInstanceOf Dim myDrawingRoot As DrawingRoot: Set myDrawingRoot = oVPMRepRef2.GetItem(\"CATDrawingAccess\") Debug.Print oVPMRepRef2.Name Dim DrwSheet 'As DrawingSheet DrwSheet = myDrawingRoot.ActiveSheet Debug.Print myDrawingRoot.Sheets.Item(2).Name ' Delete Old dim Dim MyView 'As DrawingView MyView = DrwSheet.Views.Item(\"V1\") ' If MyView = Nothing Then ' Console.WriteLine (MyView.Name) ' getDrawing (MyView) ' ' End If '\u5220\u9664\u81ea\u52a8\u6807\u6ce8 'sel.Clear() 'Dim find As Boolean 'find = False 'If FrontView.Dimensions.Count >= 1 Then ' For i = 1 To FrontView.Dimensions.Count ' If InStr(FrontView.Dimensions.Item(i).Name, \"Dimension\") <> 0 Then ' find = True ' sel.Add(FrontView.Dimensions.Item(i)) ' End If ' Next 'End If 'If find Then sel.Delete() On Error Resume Next 'Dim DIMGeo As HybridBody = part1.FindObjectByName(\"2D-DIM-1\") 'Dim m As Integer = 0 ''--------\u5c3a\u5bf8 'For i = 1 To DIMGeo.HybridShapes.Count ' m = m + 1 'Next 'Dim oCenterPoint1(0, 0) 'Dim oCenterPoint2(0, 0) 'Dim oCenterPoint3(0, 0) 'Dim oCenterPoint4(0, 0) 'ReDim oCenterPoint1(m, 2) 'ReDim oCenterPoint2(m, 2) 'ReDim oCenterPoint3(m, 2) 'ReDim oCenterPoint4(m, 2) 'Dim oDrawingService As DrawingService 'oDrawingService = CATIA.ActiveEditor.GetService(\"CATDrawingService\") 'Dim part2 As DrawingRoot = oVPMRepRef2.GetItem(\"Drawing\") 'Console.WriteLine(part2.Name, Title:=\"INFO\") ' \u83b7\u5f97\u957f\u5ea6\u6807\u6ce8\u70b9 Dim hb1 As HybridBody: Set hb1 = part1.HybridBodies.Item(\"DRAFTING\").HybridBodies.Item(\"P1\").HybridBodies.Item(\"2D_DIM_1\") Dim pt1 As HybridShape: Set pt1 = hb1.HybridShapes.Item(2) Dim pt2 As HybridShape: Set pt2 = hb1.HybridShapes.Item(3) ' \u83b7\u5f97\u6d4b\u91cf\u670d\u52a1 Dim theMeasureService 'As MeasureService theMeasureService = CATIA.ActiveEditor.GetService(\"MeasureService\") 'theMeasureService = CATIA.ActiveEditor.GetService(\"MeasurableService\") Dim theMeasureItem1, theMeasureItem2 As MeasureItem theMeasureItem1 = theMeasureService.GetMeasureItem(pt1) theMeasureItem2 = theMeasureService.GetMeasureItem(pt2) If theMeasureItem1 Is Nothing And theMeasureItem2 Is Nothing Then MsgBox \"BIG ERROR\" Exit Sub End If '\u83b7\u5f97\u5750\u6807 Dim oCoord1(2) theMeasureItem1.GetPoint oCoord1(0), oCoord1(1), oCoord1(2) Dim oCoord2(2) theMeasureItem2.GetPoint oCoord2(0), oCoord2(1), oCoord2(2) Dim Fact2D As Factory2D Fact2D = MyView.Factory2D Dim oPoint1 As Point2D oPoint1 = Fact2D.CreatePoint(oCoord1(0), oCoord1(2)) Dim oPoint2 As Point2D oPoint2 = Fact2D.CreatePoint(oCoord2(0), oCoord2(2)) 'Dim myElements(1) 'myElements(1) = {oPoint1, oPoint2} Dim Line1 As Line2D Line1 = Fact2D.CreateLine(50, 10, 150, 10) 'Dim selpoints(3) 'selpoints(3) = Array(0, 0, 0, 0) Dim iType: Set iType = CATANNOTITF.CatDimType.catDimDistance Dim MyDimension2 As CATANNOTITF.DrawingDimension MyDimension2 = MyView.Dimensions.Add2(iType, oPoint1, oPoint1, Line1, 0) System.Threading.Thread.Sleep (12000) End Sub","title":"GENERATE DRW PRD"},{"location":"DS-CODE/VBA/GENERATE_DRW_PRD/#generate_drw_prd","text":"Sub CATMain() getPrd End Sub Sub getPrd() ' Gets the Part Product Parameters Dim proRootOcc As VPMRootOccurrence proRootOcc = CATIA.ActiveEditor.ActiveObject Dim sel As Selection Set sel = CATIA.ActiveEditor.Selection Dim prodRootRef As VPMReference prodRootRef = proRootOcc.ReferenceRootOccurrenceOf ' Console.WriteLine(prodRootRef.RepInstances.Count) Dim aa As VPMRepOccurrence Set aa = prodRootRef.RepInstances.Item(1) Dim oVPMRepRef1 As VPMRepReference Set oVPMRepRef1 = aa.ReferenceInstanceOf Dim part1 As Part Set part1 = oVPMRepRef1.GetItem(\"Part\") Debug.Print part1.Name Dim bb As VPMRepOccurrence: Set bb = prodRootRef.RepInstances.Item(2) Dim oVPMRepRef2 As VPMRepReference: Set oVPMRepRef2 = bb.ReferenceInstanceOf Dim myDrawingRoot As DrawingRoot: Set myDrawingRoot = oVPMRepRef2.GetItem(\"CATDrawingAccess\") Debug.Print oVPMRepRef2.Name Dim DrwSheet 'As DrawingSheet DrwSheet = myDrawingRoot.ActiveSheet Debug.Print myDrawingRoot.Sheets.Item(2).Name ' Delete Old dim Dim MyView 'As DrawingView MyView = DrwSheet.Views.Item(\"V1\") ' If MyView = Nothing Then ' Console.WriteLine (MyView.Name) ' getDrawing (MyView) ' ' End If '\u5220\u9664\u81ea\u52a8\u6807\u6ce8 'sel.Clear() 'Dim find As Boolean 'find = False 'If FrontView.Dimensions.Count >= 1 Then ' For i = 1 To FrontView.Dimensions.Count ' If InStr(FrontView.Dimensions.Item(i).Name, \"Dimension\") <> 0 Then ' find = True ' sel.Add(FrontView.Dimensions.Item(i)) ' End If ' Next 'End If 'If find Then sel.Delete() On Error Resume Next 'Dim DIMGeo As HybridBody = part1.FindObjectByName(\"2D-DIM-1\") 'Dim m As Integer = 0 ''--------\u5c3a\u5bf8 'For i = 1 To DIMGeo.HybridShapes.Count ' m = m + 1 'Next 'Dim oCenterPoint1(0, 0) 'Dim oCenterPoint2(0, 0) 'Dim oCenterPoint3(0, 0) 'Dim oCenterPoint4(0, 0) 'ReDim oCenterPoint1(m, 2) 'ReDim oCenterPoint2(m, 2) 'ReDim oCenterPoint3(m, 2) 'ReDim oCenterPoint4(m, 2) 'Dim oDrawingService As DrawingService 'oDrawingService = CATIA.ActiveEditor.GetService(\"CATDrawingService\") 'Dim part2 As DrawingRoot = oVPMRepRef2.GetItem(\"Drawing\") 'Console.WriteLine(part2.Name, Title:=\"INFO\") ' \u83b7\u5f97\u957f\u5ea6\u6807\u6ce8\u70b9 Dim hb1 As HybridBody: Set hb1 = part1.HybridBodies.Item(\"DRAFTING\").HybridBodies.Item(\"P1\").HybridBodies.Item(\"2D_DIM_1\") Dim pt1 As HybridShape: Set pt1 = hb1.HybridShapes.Item(2) Dim pt2 As HybridShape: Set pt2 = hb1.HybridShapes.Item(3) ' \u83b7\u5f97\u6d4b\u91cf\u670d\u52a1 Dim theMeasureService 'As MeasureService theMeasureService = CATIA.ActiveEditor.GetService(\"MeasureService\") 'theMeasureService = CATIA.ActiveEditor.GetService(\"MeasurableService\") Dim theMeasureItem1, theMeasureItem2 As MeasureItem theMeasureItem1 = theMeasureService.GetMeasureItem(pt1) theMeasureItem2 = theMeasureService.GetMeasureItem(pt2) If theMeasureItem1 Is Nothing And theMeasureItem2 Is Nothing Then MsgBox \"BIG ERROR\" Exit Sub End If '\u83b7\u5f97\u5750\u6807 Dim oCoord1(2) theMeasureItem1.GetPoint oCoord1(0), oCoord1(1), oCoord1(2) Dim oCoord2(2) theMeasureItem2.GetPoint oCoord2(0), oCoord2(1), oCoord2(2) Dim Fact2D As Factory2D Fact2D = MyView.Factory2D Dim oPoint1 As Point2D oPoint1 = Fact2D.CreatePoint(oCoord1(0), oCoord1(2)) Dim oPoint2 As Point2D oPoint2 = Fact2D.CreatePoint(oCoord2(0), oCoord2(2)) 'Dim myElements(1) 'myElements(1) = {oPoint1, oPoint2} Dim Line1 As Line2D Line1 = Fact2D.CreateLine(50, 10, 150, 10) 'Dim selpoints(3) 'selpoints(3) = Array(0, 0, 0, 0) Dim iType: Set iType = CATANNOTITF.CatDimType.catDimDistance Dim MyDimension2 As CATANNOTITF.DrawingDimension MyDimension2 = MyView.Dimensions.Add2(iType, oPoint1, oPoint1, Line1, 0) System.Threading.Thread.Sleep (12000) End Sub","title":"GENERATE_DRW_PRD"},{"location":"DS-CODE/VBA/GetPart/","text":"Get Part Sub getpart() Dim oEditor As Editor = catapp.ActiveEditor Dim oProductRootService As PLMProductService = oEditor.GetService(\"PLMProductService\") 'VPMRootOccurrence oVPMRootOccOnRoot =(VPMRootOccurrence)sel.Item(1).Value'//oProductRootService.RootOccurrence; 'VPMReference oVPMRoot = oVPMRootOccOnRoot.ReferenceRootOccurrenceOf Dim oVPMRootOccOnRoot As VPMOccurrence = catapp.ActiveEditor.Selection.Item(1).Value Dim MyRootOccurrences As VPMOccurrences = oVPMRootOccOnRoot.Occurrences For i = 1 To MyRootOccurrences.Count Next Dim MyOccurrence As VPMOccurrence = MyRootOccurrences.Item(1) Dim MyRepInstances As VPMRepInstances = MyOccurrence.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst As VPMRepInstance = MyRepInstances.Item(1) Dim oVPMRepRef As VPMRepReference = oVPMRepInst.ReferenceInstanceOf Dim part As Part = oVPMRepRef.GetItem(\"Part\") 'MsgBox(part.Name) 'Dim hb As HybridBody = part.HybridBodies.Add() Dim hb As HybridBody = part.FindObjectByName(1) 'hb.Name = \"tesddddddtdd\" 'copy Dim obj1 As HybridShape = hb.HybridShapes.Item(1) Dim MyOccurrence1 As VPMOccurrence = MyRootOccurrences.Item(2) Dim MyRepInstances1 As VPMRepInstances = MyOccurrence1.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst1 As VPMRepInstance = MyRepInstances1.Item(1) Dim oVPMRepRef1 As VPMRepReference = oVPMRepInst1.ReferenceInstanceOf Dim part1 As Part = oVPMRepRef1.GetItem(\"Part\") Dim hb1 As HybridBody = part1.HybridBodies.Add() 'MsgBox(part1.Name) LoadExtRef(obj1, hb1) 'Dim part2 As Part = MyRootOccurrences.Item(3).ReferenceInstanceOf.Item(1).ReferenceInstanceOf.GetItem(\"Part\") Dim MyOccurrence2 As VPMOccurrence = MyRootOccurrences.Item(3) Dim MyRepInstances2 As VPMRepInstances = MyOccurrence2.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst2 As VPMRepInstance = MyRepInstances2.Item(1) Dim oVPMRepRef2 As VPMRepReference = oVPMRepInst2.ReferenceInstanceOf Dim part2 As Part = oVPMRepRef2.GetItem(\"Part\") Dim hb2 As HybridBody = part2.HybridBodies.Add() LoadExtRef(obj1, hb2) Dim MyOccurrence3 As VPMOccurrence = MyRootOccurrences.Item(3) Dim MyRepInstances3 As VPMRepInstances = MyOccurrence3.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst3 As VPMRepInstance = MyRepInstances3.Item(1) Dim oVPMRepRef3 As VPMRepReference = oVPMRepInst3.ReferenceInstanceOf Dim part3 As Part = oVPMRepRef2.GetItem(\"Part\") Dim hb3 As HybridBody = part3.HybridBodies.Add() LoadExtRef(obj1, hb3) Dim MyOccurrence4 As VPMOccurrence = MyRootOccurrences.Item(4) Dim MyRepInstances4 As VPMRepInstances = MyOccurrence4.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst4 As VPMRepInstance = MyRepInstances4.Item(1) Dim oVPMRepRef4 As VPMRepReference = oVPMRepInst4.ReferenceInstanceOf Dim part4 As Part = oVPMRepRef4.GetItem(\"Part\") Dim hb4 As HybridBody = part4.HybridBodies.Add() LoadExtRef(obj1, hb4) End Sub Function LoadExtRef(OldObj As INFITF.AnyObject, ExtRefSet As HybridBody) As AnyObject If catapp.ActiveEditor.Selection.Count <> 0 Then catapp.ActiveEditor.Selection.Clear() End If catapp.ActiveEditor.Selection.Add(OldObj) catapp.ActiveEditor.Selection.Copy() If catapp.ActiveEditor.Selection.Count <> 0 Then catapp.ActiveEditor.Selection.Clear() End If catapp.ActiveEditor.Selection.Add(ExtRefSet) 'DRVExtRefSet catapp.ActiveEditor.Selection.PasteSpecial(\"CATPrtResult\") If catapp.ActiveEditor.Selection.Count <> 0 Then catapp.ActiveEditor.Selection.Clear() End If Dim ExtRefMainSurf ExtRefMainSurf = ExtRefSet.HybridShapes.Item(ExtRefSet.HybridShapes.Count) LoadExtRef = ExtRefMainSurf End Function","title":"Get Part"},{"location":"DS-CODE/VBA/GetPart/#get-part","text":"Sub getpart() Dim oEditor As Editor = catapp.ActiveEditor Dim oProductRootService As PLMProductService = oEditor.GetService(\"PLMProductService\") 'VPMRootOccurrence oVPMRootOccOnRoot =(VPMRootOccurrence)sel.Item(1).Value'//oProductRootService.RootOccurrence; 'VPMReference oVPMRoot = oVPMRootOccOnRoot.ReferenceRootOccurrenceOf Dim oVPMRootOccOnRoot As VPMOccurrence = catapp.ActiveEditor.Selection.Item(1).Value Dim MyRootOccurrences As VPMOccurrences = oVPMRootOccOnRoot.Occurrences For i = 1 To MyRootOccurrences.Count Next Dim MyOccurrence As VPMOccurrence = MyRootOccurrences.Item(1) Dim MyRepInstances As VPMRepInstances = MyOccurrence.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst As VPMRepInstance = MyRepInstances.Item(1) Dim oVPMRepRef As VPMRepReference = oVPMRepInst.ReferenceInstanceOf Dim part As Part = oVPMRepRef.GetItem(\"Part\") 'MsgBox(part.Name) 'Dim hb As HybridBody = part.HybridBodies.Add() Dim hb As HybridBody = part.FindObjectByName(1) 'hb.Name = \"tesddddddtdd\" 'copy Dim obj1 As HybridShape = hb.HybridShapes.Item(1) Dim MyOccurrence1 As VPMOccurrence = MyRootOccurrences.Item(2) Dim MyRepInstances1 As VPMRepInstances = MyOccurrence1.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst1 As VPMRepInstance = MyRepInstances1.Item(1) Dim oVPMRepRef1 As VPMRepReference = oVPMRepInst1.ReferenceInstanceOf Dim part1 As Part = oVPMRepRef1.GetItem(\"Part\") Dim hb1 As HybridBody = part1.HybridBodies.Add() 'MsgBox(part1.Name) LoadExtRef(obj1, hb1) 'Dim part2 As Part = MyRootOccurrences.Item(3).ReferenceInstanceOf.Item(1).ReferenceInstanceOf.GetItem(\"Part\") Dim MyOccurrence2 As VPMOccurrence = MyRootOccurrences.Item(3) Dim MyRepInstances2 As VPMRepInstances = MyOccurrence2.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst2 As VPMRepInstance = MyRepInstances2.Item(1) Dim oVPMRepRef2 As VPMRepReference = oVPMRepInst2.ReferenceInstanceOf Dim part2 As Part = oVPMRepRef2.GetItem(\"Part\") Dim hb2 As HybridBody = part2.HybridBodies.Add() LoadExtRef(obj1, hb2) Dim MyOccurrence3 As VPMOccurrence = MyRootOccurrences.Item(3) Dim MyRepInstances3 As VPMRepInstances = MyOccurrence3.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst3 As VPMRepInstance = MyRepInstances3.Item(1) Dim oVPMRepRef3 As VPMRepReference = oVPMRepInst3.ReferenceInstanceOf Dim part3 As Part = oVPMRepRef2.GetItem(\"Part\") Dim hb3 As HybridBody = part3.HybridBodies.Add() LoadExtRef(obj1, hb3) Dim MyOccurrence4 As VPMOccurrence = MyRootOccurrences.Item(4) Dim MyRepInstances4 As VPMRepInstances = MyOccurrence4.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst4 As VPMRepInstance = MyRepInstances4.Item(1) Dim oVPMRepRef4 As VPMRepReference = oVPMRepInst4.ReferenceInstanceOf Dim part4 As Part = oVPMRepRef4.GetItem(\"Part\") Dim hb4 As HybridBody = part4.HybridBodies.Add() LoadExtRef(obj1, hb4) End Sub Function LoadExtRef(OldObj As INFITF.AnyObject, ExtRefSet As HybridBody) As AnyObject If catapp.ActiveEditor.Selection.Count <> 0 Then catapp.ActiveEditor.Selection.Clear() End If catapp.ActiveEditor.Selection.Add(OldObj) catapp.ActiveEditor.Selection.Copy() If catapp.ActiveEditor.Selection.Count <> 0 Then catapp.ActiveEditor.Selection.Clear() End If catapp.ActiveEditor.Selection.Add(ExtRefSet) 'DRVExtRefSet catapp.ActiveEditor.Selection.PasteSpecial(\"CATPrtResult\") If catapp.ActiveEditor.Selection.Count <> 0 Then catapp.ActiveEditor.Selection.Clear() End If Dim ExtRefMainSurf ExtRefMainSurf = ExtRefSet.HybridShapes.Item(ExtRefSet.HybridShapes.Count) LoadExtRef = ExtRefMainSurf End Function","title":"Get Part"},{"location":"DS-CODE/VBA/GetProduct/","text":"Get3DPart or Drawing Sub getPrd() ' Gets the Part Product Parameters Dim proRootOcc As VPMRootOccurrence proRootOcc = CATIA.ActiveEditor.ActiveObject Dim prodRootRef As VPMReference prodRootRef = proRootOcc.ReferenceRootOccurrenceOf MsgBox(prodRootRef.RepInstances.Count) Dim aa As VPMRepOccurrence = prodRootRef.RepInstances.Item(1) Dim oVPMRepRef2 As VPMRepReference = aa.ReferenceInstanceOf Dim part2 As Part = oVPMRepRef2.GetItem(\"Part\") MsgBox(prodRootRef.Instances.Count, Title:=\"INFO\") End Sub \u4ece\u4ea7\u54c1\u7aef\u83b7\u5f97part \u548c\u56fe\u7eb8 Imports DRAFTINGITF Imports INFITF Imports MECMOD Imports ProductStructureClientIDL Imports VPMEditorContextIDL Module testDraftingDim Sub getPrd() ' Gets the Part Product Parameters Dim proRootOcc As VPMRootOccurrence proRootOcc = CATIA.ActiveEditor.ActiveObject Dim prodRootRef As VPMReference prodRootRef = proRootOcc.ReferenceRootOccurrenceOf ' MsgBox(prodRootRef.RepInstances.Count) Dim aa As VPMRepOccurrence = prodRootRef.RepInstances.Item(1) Dim oVPMRepRef1 As VPMRepReference = aa.ReferenceInstanceOf Dim part1 As Part = oVPMRepRef1.GetItem(\"Part\") MsgBox(part1.Name, Title:=\"INFO\") Dim bb As VPMRepOccurrence = prodRootRef.RepInstances.Item(2) Dim oVPMRepRef2 As VPMRepReference = bb.ReferenceInstanceOf Dim myDrawingRoot As DrawingRoot = oVPMRepRef2.GetItem(\"CATDrawingAccess\") MsgBox(oVPMRepRef2.Name) Dim DrwSheet 'As DrawingSheet DrwSheet = myDrawingRoot.ActiveSheet MsgBox(myDrawingRoot.Sheets.Count) 'Dim oDrawingService As DrawingService 'oDrawingService = CATIA.ActiveEditor.GetService(\"CATDrawingService\") 'Dim part2 As DrawingRoot = oVPMRepRef2.GetItem(\"Drawing\") 'MsgBox(part2.Name, Title:=\"INFO\") End Sub End Module","title":"GetProduct"},{"location":"DS-CODE/VBA/GetProduct/#get3dpart-or-drawing","text":"Sub getPrd() ' Gets the Part Product Parameters Dim proRootOcc As VPMRootOccurrence proRootOcc = CATIA.ActiveEditor.ActiveObject Dim prodRootRef As VPMReference prodRootRef = proRootOcc.ReferenceRootOccurrenceOf MsgBox(prodRootRef.RepInstances.Count) Dim aa As VPMRepOccurrence = prodRootRef.RepInstances.Item(1) Dim oVPMRepRef2 As VPMRepReference = aa.ReferenceInstanceOf Dim part2 As Part = oVPMRepRef2.GetItem(\"Part\") MsgBox(prodRootRef.Instances.Count, Title:=\"INFO\") End Sub \u4ece\u4ea7\u54c1\u7aef\u83b7\u5f97part \u548c\u56fe\u7eb8 Imports DRAFTINGITF Imports INFITF Imports MECMOD Imports ProductStructureClientIDL Imports VPMEditorContextIDL Module testDraftingDim Sub getPrd() ' Gets the Part Product Parameters Dim proRootOcc As VPMRootOccurrence proRootOcc = CATIA.ActiveEditor.ActiveObject Dim prodRootRef As VPMReference prodRootRef = proRootOcc.ReferenceRootOccurrenceOf ' MsgBox(prodRootRef.RepInstances.Count) Dim aa As VPMRepOccurrence = prodRootRef.RepInstances.Item(1) Dim oVPMRepRef1 As VPMRepReference = aa.ReferenceInstanceOf Dim part1 As Part = oVPMRepRef1.GetItem(\"Part\") MsgBox(part1.Name, Title:=\"INFO\") Dim bb As VPMRepOccurrence = prodRootRef.RepInstances.Item(2) Dim oVPMRepRef2 As VPMRepReference = bb.ReferenceInstanceOf Dim myDrawingRoot As DrawingRoot = oVPMRepRef2.GetItem(\"CATDrawingAccess\") MsgBox(oVPMRepRef2.Name) Dim DrwSheet 'As DrawingSheet DrwSheet = myDrawingRoot.ActiveSheet MsgBox(myDrawingRoot.Sheets.Count) 'Dim oDrawingService As DrawingService 'oDrawingService = CATIA.ActiveEditor.GetService(\"CATDrawingService\") 'Dim part2 As DrawingRoot = oVPMRepRef2.GetItem(\"Drawing\") 'MsgBox(part2.Name, Title:=\"INFO\") End Sub End Module","title":"Get3DPart or Drawing"},{"location":"DS-CODE/VBA/InstanciatePowerCopy/","text":"InstanciatePowerCopy PW ' Instanciation of a PowerCopy Reference \"MyPowerCopy1\" ' MyPowerCopy1 is stored in the CATPart \"e:\\tmp\\PowerCopyReference.CATPart\" ' It has ' 3 inputs: FirstHole, Support,and SecondHole ' 2 published parameters: Radius1 and Radius2 '------------------------------------------------------------------ '------------------------------------------------------------------ Dim PartDocumentDest As PartDocument Set PartDocumentDest = CATIA.ActiveDocument Dim PartDest As Part Set PartDest = PartDocumentDest.Part '------------------------------------------------------------------ Dim factory As InstanceFactory Set factory = PartDest.GetCustomerFactory(\"InstanceFactory\") '------------------------------------------------------------------ factory.BeginInstanceFactory \"TwoSurfacicHole\", \"e:\\tmp\\PowerCopyReference.CATPart\" '------------------------------------------------------------------ factory.BeginInstantiate '------------------------------------------------------------------ Dim FirstHole As Object Set FirstHole = PartDest.FindObjectByName(\"Point.1\") Dim Support As Object Set Support = PartDest.FindObjectByName(\"Extrude.1\") Dim SecondHole As Object Set SecondHole = PartDest.FindObjectByName(\"Point.2\") factory.PutInputData \"FirstHole\", FirstHole factory.PutInputData \"Support\", Support factory.PutInputData \"SecondHole\", SecondHole '------------------------------------------------------------------ Dim param1 As Parameter Set param1 = factory.GetParameter(\"Radius1\") param1.ValuateFromString(\"25mm\") Dim param2 As Parameter Set param2 = factory.GetParameter(\"Radius2\") param2.ValuateFromString(\"15mm\") '------------------------------------------------------------------ Dim Instance As ShapeInstance Set Instance = factory.Instantiate '------------------------------------------------------------------ factory.EndInstantiate '------------------------------------------------------------------ factory.EndInstanceFactory '------------------------------------------------------------------ PartDest.Update UDF ' Instanciation of a User Feature Reference \"MyUserFeature2\" ' MyUserFeature2 is stored in the CATPart \"e:\\tmp\\UserFeature_001_StartSweep.CATPart\" ' It has ' 2 inputs: Centre and Surface ' 2 published parameters: Hauteur and Rayon ' 1 output: Direction '------------------------------------------------------------------ '------------------------------------------------------------------ Catia.SystemService.Print \"Retrieve the current part\" Dim PartDocumentDest As PartDocument Set PartDocumentDest = CATIA.ActiveDocument Dim PartDest As Part Set PartDest = PartDocumentDest.Part '------------------------------------------------------------------ Catia.SystemService.Print \"Retrieve the factory of the current part\" Dim factory As InstanceFactory Set factory = PartDest.GetCustomerFactory(\"InstanceFactory\") '------------------------------------------------------------------ Catia.SystemService.Print \"BeginInstanceFactory\" factory.BeginInstanceFactory \"MyUserFeature2\", \"e:\\tmp\\UserFeature_001_StartSweep.CATPart\" '------------------------------------------------------------------ Catia.SystemService.Print \"Begin Instantiation\" factory.BeginInstantiate '------------------------------------------------------------------ Catia.SystemService.Print \"Set Inputs\" Dim Centre As Object Set Centre = PartDest.FindObjectByName(\"Point.1\") Dim Surface As Object Set Surface = PartDest.FindObjectByName(\"Surface.1\") factory.PutInputData \"Centre\", Centre factory.PutInputData \"Surface\", Surface '------------------------------------------------------------------ Catia.SystemService.Print \"Modify Parameters\" Dim param1 As Parameter Set param1 = factory.GetParameter(\"Hauteur\") param1.ValuateFromString(\"40mm\") Dim param2 As Parameter Set param2 = factory.GetParameter(\"Rayon\") param2.ValuateFromString(\"30mm\") '------------------------------------------------------------------ Catia.SystemService.Print \"Instantiate\" Dim Instance As ShapeInstance Set Instance = factory.Instantiate '------------------------------------------------------------------ Catia.SystemService.Print \"End of Instantiation\" factory.EndInstantiate '------------------------------------------------------------------ Catia.SystemService.Print \"Release the reference document\" factory.EndInstanceFactory '------------------------------------------------------------------ Catia.SystemService.Print \"Update\" PartDest.Update","title":"InstanciatePowerCopy"},{"location":"DS-CODE/VBA/InstanciatePowerCopy/#instanciatepowercopy","text":"","title":"InstanciatePowerCopy"},{"location":"DS-CODE/VBA/InstanciatePowerCopy/#pw","text":"' Instanciation of a PowerCopy Reference \"MyPowerCopy1\" ' MyPowerCopy1 is stored in the CATPart \"e:\\tmp\\PowerCopyReference.CATPart\" ' It has ' 3 inputs: FirstHole, Support,and SecondHole ' 2 published parameters: Radius1 and Radius2 '------------------------------------------------------------------ '------------------------------------------------------------------ Dim PartDocumentDest As PartDocument Set PartDocumentDest = CATIA.ActiveDocument Dim PartDest As Part Set PartDest = PartDocumentDest.Part '------------------------------------------------------------------ Dim factory As InstanceFactory Set factory = PartDest.GetCustomerFactory(\"InstanceFactory\") '------------------------------------------------------------------ factory.BeginInstanceFactory \"TwoSurfacicHole\", \"e:\\tmp\\PowerCopyReference.CATPart\" '------------------------------------------------------------------ factory.BeginInstantiate '------------------------------------------------------------------ Dim FirstHole As Object Set FirstHole = PartDest.FindObjectByName(\"Point.1\") Dim Support As Object Set Support = PartDest.FindObjectByName(\"Extrude.1\") Dim SecondHole As Object Set SecondHole = PartDest.FindObjectByName(\"Point.2\") factory.PutInputData \"FirstHole\", FirstHole factory.PutInputData \"Support\", Support factory.PutInputData \"SecondHole\", SecondHole '------------------------------------------------------------------ Dim param1 As Parameter Set param1 = factory.GetParameter(\"Radius1\") param1.ValuateFromString(\"25mm\") Dim param2 As Parameter Set param2 = factory.GetParameter(\"Radius2\") param2.ValuateFromString(\"15mm\") '------------------------------------------------------------------ Dim Instance As ShapeInstance Set Instance = factory.Instantiate '------------------------------------------------------------------ factory.EndInstantiate '------------------------------------------------------------------ factory.EndInstanceFactory '------------------------------------------------------------------ PartDest.Update","title":"PW"},{"location":"DS-CODE/VBA/InstanciatePowerCopy/#udf","text":"' Instanciation of a User Feature Reference \"MyUserFeature2\" ' MyUserFeature2 is stored in the CATPart \"e:\\tmp\\UserFeature_001_StartSweep.CATPart\" ' It has ' 2 inputs: Centre and Surface ' 2 published parameters: Hauteur and Rayon ' 1 output: Direction '------------------------------------------------------------------ '------------------------------------------------------------------ Catia.SystemService.Print \"Retrieve the current part\" Dim PartDocumentDest As PartDocument Set PartDocumentDest = CATIA.ActiveDocument Dim PartDest As Part Set PartDest = PartDocumentDest.Part '------------------------------------------------------------------ Catia.SystemService.Print \"Retrieve the factory of the current part\" Dim factory As InstanceFactory Set factory = PartDest.GetCustomerFactory(\"InstanceFactory\") '------------------------------------------------------------------ Catia.SystemService.Print \"BeginInstanceFactory\" factory.BeginInstanceFactory \"MyUserFeature2\", \"e:\\tmp\\UserFeature_001_StartSweep.CATPart\" '------------------------------------------------------------------ Catia.SystemService.Print \"Begin Instantiation\" factory.BeginInstantiate '------------------------------------------------------------------ Catia.SystemService.Print \"Set Inputs\" Dim Centre As Object Set Centre = PartDest.FindObjectByName(\"Point.1\") Dim Surface As Object Set Surface = PartDest.FindObjectByName(\"Surface.1\") factory.PutInputData \"Centre\", Centre factory.PutInputData \"Surface\", Surface '------------------------------------------------------------------ Catia.SystemService.Print \"Modify Parameters\" Dim param1 As Parameter Set param1 = factory.GetParameter(\"Hauteur\") param1.ValuateFromString(\"40mm\") Dim param2 As Parameter Set param2 = factory.GetParameter(\"Rayon\") param2.ValuateFromString(\"30mm\") '------------------------------------------------------------------ Catia.SystemService.Print \"Instantiate\" Dim Instance As ShapeInstance Set Instance = factory.Instantiate '------------------------------------------------------------------ Catia.SystemService.Print \"End of Instantiation\" factory.EndInstantiate '------------------------------------------------------------------ Catia.SystemService.Print \"Release the reference document\" factory.EndInstanceFactory '------------------------------------------------------------------ Catia.SystemService.Print \"Update\" PartDest.Update","title":"UDF"},{"location":"DS-CODE/VBA/ModifyUDFParamaters/","text":"\u7b2c\u4e8c\u4e2aUDF\u7684\u53c2\u6570\u53d6\u503c\u4e3a\u4e0a\u4e00\u4e2aUDF\u7684\u67d0\u4e2a\u503c python importwin32com fromicecreamimportic fromwin32com . clientimportDispatch catia = win32com . client . Dispatch ( \"CATIA.Application\" ) part = catia . ActiveEditor . activeobject obj = catia . ActiveEditor . Selection . Item ( 1 ) . Value ic ( \"type:\" , obj . Name ) ic ( \"PartName:\" , part . name ) icount = obj . hybridshapes . count For I in range ( 1 , icount ): udf1 = obj . hybridshapes . item ( i ) udf2 = obj . hybridshapes . item ( i + 1 ) parms1 = part . parameters . sublist ( udf1 , True ) parms2 = part . parameters . sublist ( udf2 , True ) parm1 = parms1 . item ( 3 ) parm2 = parms2 . item ( 4 ) s1 = parm1 . valueasstring () parm2 . ValuateFromString ( s1 ) ic ( udf1 . name , parm1 . valueasstring (), udf2 . name , parm2 . valueasstring ()) if__name__ == '__main__' : print () VB Sub main() Set Part = CATIA.ActiveDocument.Part Set obj = CATIA.ActiveDocument.Selection.Item(1).Value icount = obj.HybridShapes.Count For i = 1 To 9 Set udf1 = obj.HybridShapes.Item(i) Set udf2 = obj.HybridShapes.Item(i + 1) Set parms1 = Part.Parameters.SubList(udf1, True) Set parms2 = Part.Parameters.SubList(udf2, True) Dim parm1 As Parameter Dim parm2 As Parameter Set parm1 = parms1.Item(5) Set parm2 = parms2.Item(4) Dim s1 As String s1 = parm1.ValueAsString() parm2.ValuateFromString s1 Part.Update Next End Sub","title":"\u7b2c\u4e8c\u4e2aUDF\u7684\u53c2\u6570\u53d6\u503c\u4e3a\u4e0a\u4e00\u4e2aUDF\u7684\u67d0\u4e2a\u503c"},{"location":"DS-CODE/VBA/ModifyUDFParamaters/#udfudf","text":"","title":"\u7b2c\u4e8c\u4e2aUDF\u7684\u53c2\u6570\u53d6\u503c\u4e3a\u4e0a\u4e00\u4e2aUDF\u7684\u67d0\u4e2a\u503c"},{"location":"DS-CODE/VBA/ModifyUDFParamaters/#python","text":"importwin32com fromicecreamimportic fromwin32com . clientimportDispatch catia = win32com . client . Dispatch ( \"CATIA.Application\" ) part = catia . ActiveEditor . activeobject obj = catia . ActiveEditor . Selection . Item ( 1 ) . Value ic ( \"type:\" , obj . Name ) ic ( \"PartName:\" , part . name ) icount = obj . hybridshapes . count For I in range ( 1 , icount ): udf1 = obj . hybridshapes . item ( i ) udf2 = obj . hybridshapes . item ( i + 1 ) parms1 = part . parameters . sublist ( udf1 , True ) parms2 = part . parameters . sublist ( udf2 , True ) parm1 = parms1 . item ( 3 ) parm2 = parms2 . item ( 4 ) s1 = parm1 . valueasstring () parm2 . ValuateFromString ( s1 ) ic ( udf1 . name , parm1 . valueasstring (), udf2 . name , parm2 . valueasstring ()) if__name__ == '__main__' : print ()","title":"python"},{"location":"DS-CODE/VBA/ModifyUDFParamaters/#vb","text":"Sub main() Set Part = CATIA.ActiveDocument.Part Set obj = CATIA.ActiveDocument.Selection.Item(1).Value icount = obj.HybridShapes.Count For i = 1 To 9 Set udf1 = obj.HybridShapes.Item(i) Set udf2 = obj.HybridShapes.Item(i + 1) Set parms1 = Part.Parameters.SubList(udf1, True) Set parms2 = Part.Parameters.SubList(udf2, True) Dim parm1 As Parameter Dim parm2 As Parameter Set parm1 = parms1.Item(5) Set parm2 = parms2.Item(4) Dim s1 As String s1 = parm1.ValueAsString() parm2.ValuateFromString s1 Part.Update Next End Sub","title":"VB"},{"location":"DS-CODE/VBA/Reactions/","text":"Dim LoopNum as Integer set current = MechanicalFeature found = false While found = false set Current = Current.parent If TypeName(Current) = \"Part\" then found = true end if wend set CurrentParams = Current.Parameters.Sublist(MechanicalFeature,true) For LoopNum = 1 to CurrentParams.count If instr(CurrentParams.item(LoopNum).name,\"PowerCopyName\") then CurrentName = CurrentParams.item(LoopNum).value end if next dim EndLoopNum as Integer EndLoopNum = Current.HybridBodies.Count dim MySel as Selection set MySel = CATIA.ActiveDocument.Selection if MySel.Count <0 then MySel.Clear end if '---- Delete MULLIONPREFIX SETS FIRST For LoopNum = 1 to EndLoopNum If instr(Current.HybridBodies.Item(LoopNum).Name, \"MULLIONPREFIX_\") <0 then set Mn = Current.HybridBodies.Item(LoopNum) MySel.Add Mn end if next If MySel.Count <0 then MySel.Delete end if Set CurrentSURFACE = MechanicalFeature.HybridBodies.Item(\"TRANSITION\").HybridShapes.Item(\"DRIVER_SURFACE\") Set ShapeFact = Current.HybridShapeFactory Dim InstFact as InstanceFactory Set InstFact = Current.GetCustomerFactory(\"InstanceFactory\") InstFact.EndInstanceFactory InstFact.BeginInstanceFactory \"SUB_BEAM_SURFACE\", (\"C:\\PowerCopies\\\" & CurrentName & \".CATPart\") For LoopNum = 1 To MechanicalFeature.HybridBodies.Item(\"PERM_CURVESET\").HybridShapes.Count 'CurrentNum Set CurrentCURVE = MechanicalFeature.HybridBodies.Item(\"PERM_CURVESET\").HybridShapes.Item(LoopNum) Set CrvCURVERef = Current.CreateReferenceFromObject(CurrentCURVE ) InstFact.BeginInstantiate InstFact.PutInputData \"MULLION_wireframe\", CurrentCURVE 'CrvCURVERef InstFact.PutInputData \"GLASS_surface\", CurrentSURFACE 'CrvSURFACERef Dim instance as ShapeInstance Set instance = InstFact.Instantiate InstFact.EndInstantiate Next InstFact.EndInstanceFactory For CX = 1 to Current.HybridBodies.Count If instr(Current.HybridBodies.Item(LoopNum).Name, \"MULLIONPREFIX_\") <0 then set Mn2 = Current.HybridBodies.Item(LoopNum).HybridBodies.Item(\"OUTPUT\").HybridShapes.Item(1) Current.UpdateObject Mn2 end if next End sub \u6765\u81ea <http://www.gtwiki.org/mwiki/index.php?title=Reactions_that_Instantiate_Powercopies","title":"Reactions"},{"location":"DS-CODE/VBA/RenameTheDrawing/","text":"RenameTheDrawing Sub CATMain() Dim oSht Set oSht = CATIA.ActiveEditor.ActiveObject.Sheets.Item(1) CATIA.ActiveEditor.ActiveObject.ActiveSheet = oSht For i = 1 To CATIA.ActiveEditor.ActiveObject.Sheets.Count 'CATIA.ActiveEditor.ActiveObject.Sheets.Item(I).Name = \"DPG-SHEET-\" + CStr(I) Dim cDrawingViews As DrawingViews Set cDrawingViews = oSht.Views For j = 1 To oSht.Views.Count Dim MyView As DrawingView Set MyView = oSht.Views.ActiveView 'MyView.Scale Next Next End Sub","title":"RenameTheDrawing"},{"location":"DS-CODE/VBA/RenameTheDrawing/#renamethedrawing","text":"Sub CATMain() Dim oSht Set oSht = CATIA.ActiveEditor.ActiveObject.Sheets.Item(1) CATIA.ActiveEditor.ActiveObject.ActiveSheet = oSht For i = 1 To CATIA.ActiveEditor.ActiveObject.Sheets.Count 'CATIA.ActiveEditor.ActiveObject.Sheets.Item(I).Name = \"DPG-SHEET-\" + CStr(I) Dim cDrawingViews As DrawingViews Set cDrawingViews = oSht.Views For j = 1 To oSht.Views.Count Dim MyView As DrawingView Set MyView = oSht.Views.ActiveView 'MyView.Scale Next Next End Sub","title":"RenameTheDrawing"},{"location":"DS-CODE/VBA/SUMMARY/","text":"Summary CAA Tool list Create Bridge Skeleton CreatePointFromExcel vba call exe Python Tools \u81ea\u52a8\u7ffb\u9875\u622a\u56fe","title":"Summary"},{"location":"DS-CODE/VBA/SUMMARY/#summary","text":"CAA Tool list Create Bridge Skeleton CreatePointFromExcel vba call exe Python Tools \u81ea\u52a8\u7ffb\u9875\u622a\u56fe","title":"Summary"},{"location":"DS-CODE/VBA/SelectElement3%20Values/","text":"Values to use as selection filter. Role: Values which can be given as filter to Selection.SelectElement2, Selection.SelectElement3, Selection.IndicateOrSelectElement2D or Selection.IndicateOrSelectElement3D, beside the automation object names. Values: ZeroDim Topological 0-D entity (such as a Point2D ) MonoDim Topological 1-D entity which cannot be infinite (such as a HybridShapeSpline) MonoDimInfinite Topological 1-D entity which may be infinite, such as a HybridShapeSpline (not infinite) or a HybridShapeLinePtDir for which a call to HybridShapeLinePtDir.GetLengthType would give 1, 2 or 3 (infinite) RectilinearMonoDim 1-D entity which cannot be infinite, the entity having a rectilinear geometry RectilinearMonoDimInfinite 1-D entity which may be infinite, the entity having a rectilinear geometry BiDim Topological 2-D entity which cannot be infinite (such as a HybridShapeCylinder ) BiDimInfinite Topological 2-D entity which may be infinite, such as a HybridShapeCylinder (non infinite) or a HybridShapePlaneOffsetPt (infinite) PlanarBiDim 2-D entity which cannot be infinite, the entity having a planar geometry PlanarBiDimInfinite 2-D entity having a planar geometry CylindricalBiDim 2-D entity which cannot be infinite, the entity having a cylindrical geometry TriDim Topological 3-D entity (such as a Pad )","title":"SelectElement3 Values"},{"location":"DS-CODE/VBA/VB%20create%20formula/","text":"VB\u521b\u5efa\u516c\u5f0f Sub CATMain() Dim Edit As Editor Set Edit = CATIA.ActiveEditor Dim part1 As Part Set part1 = Edit.ActiveObject Dim p1 As HybridShape Set p1 = part1.MainBody.HybridShapes.Item(2)//\u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u7279\u5f81\u5373\u53ef\u521b\u5efa\u516c\u5f0f Dim parameters1 As Parameters Set parameters1 = part1.Parameters.SubList(p1, True) Dim strParam1 As Parameter Set strParam1 = parameters1.Item(2)//\u83b7\u53d6\u7279\u5f81\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570 Dim strParam2 As Parameter Set strParam2 = part1.Parameters.RootParameterSet.DirectParameters.Item(1)//\u83b7\u53d6\u9700\u8981\u5173\u8054\u7684\u53c2\u6570,\u6839\u53c2\u6570\u96c6 Dim str As String str = part1.Parameters.GetNameToUseInRelation(strParam2) MsgBox str Dim Rel As Relations Set Rel = part1.Relations Dim massFormula As Formula Set massFormula = Rel.CreateFormula(\"Test\", \"\", strParam1, str)//\u521b\u5efa\u516c\u5f0f part1.Update End Sub","title":"VB create formula"},{"location":"DS-CODE/VBA/VB%20create%20formula/#vb","text":"Sub CATMain() Dim Edit As Editor Set Edit = CATIA.ActiveEditor Dim part1 As Part Set part1 = Edit.ActiveObject Dim p1 As HybridShape Set p1 = part1.MainBody.HybridShapes.Item(2)//\u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u7279\u5f81\u5373\u53ef\u521b\u5efa\u516c\u5f0f Dim parameters1 As Parameters Set parameters1 = part1.Parameters.SubList(p1, True) Dim strParam1 As Parameter Set strParam1 = parameters1.Item(2)//\u83b7\u53d6\u7279\u5f81\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570 Dim strParam2 As Parameter Set strParam2 = part1.Parameters.RootParameterSet.DirectParameters.Item(1)//\u83b7\u53d6\u9700\u8981\u5173\u8054\u7684\u53c2\u6570,\u6839\u53c2\u6570\u96c6 Dim str As String str = part1.Parameters.GetNameToUseInRelation(strParam2) MsgBox str Dim Rel As Relations Set Rel = part1.Relations Dim massFormula As Formula Set massFormula = Rel.CreateFormula(\"Test\", \"\", strParam1, str)//\u521b\u5efa\u516c\u5f0f part1.Update End Sub","title":"VB\u521b\u5efa\u516c\u5f0f"},{"location":"DS-CODE/VBA/VBACallExE/","text":"vba call exe Sub CATMain() Dim strProgramName As String strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\100-\u7acb\u9762\u56fe\u81ea\u52a8\u6807\u6ce82.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\101-\u5e73\u9762\u56fe\u81ea\u52a8\u6807\u6ce82.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\200-\u76d6\u6881\u9876\u90e8\u94a2\u7b4b\u6807\u6ce8.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\201-\u76d6\u6881\u5e95\u90e8\u94a2\u7b4b\u6807\u6ce8.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\202-\u76d6\u6881\u540e\u4fa7\u94a2\u7b4b\u6807\u6ce832.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\203-\u76d6\u6881\u4fa7\u94a2\u7b4b\u6807\u6ce831.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\204-\u5c01\u951a\u7aef\u90e8\u94a2\u7b4b\u6807\u6ce8.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\300-\u6750\u6599\u7edf\u8ba1_\u4e2d\u6587\u73af\u5883.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\301-\u6750\u6599\u7edf\u8ba1.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\400-\u652f\u5ea7\u5206\u5e03\u56fe2.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\500-\u5206\u677f\u56fe\u81ea\u52a8\u6807\u6ce8.exe\" Call Shell(\"\"\"\" & strProgramName & \"\"\"\", vbNormalFocus) End Sub","title":"vba call exe"},{"location":"DS-CODE/VBA/VBACallExE/#vba-call-exe","text":"Sub CATMain() Dim strProgramName As String strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\100-\u7acb\u9762\u56fe\u81ea\u52a8\u6807\u6ce82.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\101-\u5e73\u9762\u56fe\u81ea\u52a8\u6807\u6ce82.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\200-\u76d6\u6881\u9876\u90e8\u94a2\u7b4b\u6807\u6ce8.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\201-\u76d6\u6881\u5e95\u90e8\u94a2\u7b4b\u6807\u6ce8.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\202-\u76d6\u6881\u540e\u4fa7\u94a2\u7b4b\u6807\u6ce832.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\203-\u76d6\u6881\u4fa7\u94a2\u7b4b\u6807\u6ce831.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\204-\u5c01\u951a\u7aef\u90e8\u94a2\u7b4b\u6807\u6ce8.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\300-\u6750\u6599\u7edf\u8ba1_\u4e2d\u6587\u73af\u5883.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\301-\u6750\u6599\u7edf\u8ba1.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\400-\u652f\u5ea7\u5206\u5e03\u56fe2.exe\" strProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\500-\u5206\u677f\u56fe\u81ea\u52a8\u6807\u6ce8.exe\" Call Shell(\"\"\"\" & strProgramName & \"\"\"\", vbNormalFocus) End Sub","title":"vba call exe"},{"location":"DS-CODE/VBA/VBS%20Start%20CATIA/","text":"VBS Start CATIA VBS JavaScript Html Dim CATIA 'As Object 'Get CATIA or Launch it if necessary. On Error Resume Next Set CATIA = Wscript.GetObject(,\"CATIA.Application\") If Err.Number <> 0 Then Set CATIA = Wscript.CreateObject(\"CATIA.Application\") CATIA.Visible = True End If On Error GoTo 0 ' Add a new Part Set MyDocument = CATIA.Documents.Add(\"Part\") Set PartFactory = MyDocument.Part.ShapeFactory ' Retrieve the Part Factory. Set MyBody1 = MyDocument.Part.Bodies.Item(\"\u96f6\u4ef6\u51e0\u4f55\u4f53\") CATIA.ActiveDocument.Part.InWorkObject = MyBody1 ' Activate \"PartDesign\" ' Creating the Shaft Set ReferencePlane1 = MyDocument.Part.CreateReferenceFromGeometry(MyDocument.Part.OriginElements.PlaneYZ) ' Create the sketch1 on ReferencePlane1 Set Sketch1 = MyBody1.Sketches.Add(ReferencePlane1) Set MyFactory1 = Sketch1.OpenEdition() ' Define the sketch h1 = 80 ' height of the bolt h2 = 300 ' total height r1 = 120 ' external radius r2 = 60 ' Internal radius s1 = 20 ' Size of the chamfer Set l101 = MyFactory1.CreateLine(0, 0, r1 - 20, 0) Set l102 = MyFactory1.CreateLine(r1 - 20, 0, r1, -20) Set l103 = MyFactory1.CreateLine(r1, -20, r1, -h1 + 20) Set l104 = MyFactory1.CreateLine(r1, -h1 + 20, r1 - 20, -h1) Set l105 = MyFactory1.CreateLine(r1 - 20, -h1, r2, -h1) Set l106 = MyFactory1.CreateLine(r2, -h1, r2, -h2 + s1) Set l107 = MyFactory1.CreateLine(r2, -h2 + s1, r2 - s1, -h2) Set l108 = MyFactory1.CreateLine(r2 - s1, -h2, 0, -h2) Set l109 = MyFactory1.CreateLine(0, -h2, 0, 0) Sketch1.CenterLine = l109 Sketch1.CloseEdition Set AxisPad1 = PartFactory.AddNewShaft(Sketch1) ' Creating the Pocket Set ReferencePlane2 = MyDocument.Part.CreateReferenceFromGeometry(MyDocument.Part.OriginElements.PlaneXY) ' Create the sketch2 on ReferencePlane2 Set Sketch2 = MyBody1.Sketches.Add(ReferencePlane2) Set MyFactory2 = Sketch2.OpenEdition() ' Define the sketch D = 1 / 0.866 Set l201 = MyFactory2.CreateLine(D * 100, 0, D * 50, D * 86.6) Set l202 = MyFactory2.CreateLine(D * 50, D * 86.6, D * -50, D * 86.6) Set l203 = MyFactory2.CreateLine(D * -50, D * 86.6, D * -100, 0) Set l204 = MyFactory2.CreateLine(D * -100, 0, D * -50, D * -86.6) Set l205 = MyFactory2.CreateLine(D * -50, D * -86.6, D * 50, D * -86.6) Set l206 = MyFactory2.CreateLine(D * 50, D * -86.6, D * 100, 0) ' Create a big circle around the form to get a Hole Set c2 = MyFactory2.CreateClosedCircle(0, 0, 300) Sketch2.CloseEdition Set AxisHole2 = PartFactory.AddNewPocket(Sketch2, h1) MyDocument.Part.Update var CATIA CATIA = WScript . GetObject ( \"\" , \"CATIA.Application\" ); if ( CATIA == null ) { CATIA = WScript . CreateObject ( \"CATIA.Application\" ); } CATIA . Visible = true ; // Add a new Part MyDocument = CATIA . Documents . Add ( \"Part\" ); PartFactory = MyDocument . Part . ShapeFactory ; // Retrieve the Part Factory. MyBody1 = MyDocument . Part . Bodies . Item ( \"\u96f6\u4ef6\u51e0\u4f55\u4f53\" ); CATIA . ActiveDocument . Part . InWorkObject = MyBody1 ; // Activate \"PartDesign\" // Creating the Shaft ReferencePlane1 = MyDocument . Part . CreateReferenceFromGeometry ( MyDocument . Part . OriginElements . PlaneYZ ); // Create the sketch1 on ReferencePlane1 Sketch1 = MyBody1 . Sketches . Add ( ReferencePlane1 ); MyFactory1 = Sketch1 . OpenEdition (); // Define the sketch h1 = 80 ; // height of the bolt h2 = 300 ; // total height r1 = 120 ; // external radius r2 = 60 ; // Internal radius s1 = 20 ; // Size of the chamfer l101 = MyFactory1 . CreateLine ( 0 , 0 , r1 - 20 , 0 ); l102 = MyFactory1 . CreateLine ( r1 - 20 , 0 , r1 , - 20 ); l103 = MyFactory1 . CreateLine ( r1 , - 20 , r1 , - h1 + 20 ); l104 = MyFactory1 . CreateLine ( r1 , - h1 + 20 , r1 - 20 , - h1 ); l105 = MyFactory1 . CreateLine ( r1 - 20 , - h1 , r2 , - h1 ); l106 = MyFactory1 . CreateLine ( r2 , - h1 , r2 , - h2 + s1 ); l107 = MyFactory1 . CreateLine ( r2 , - h2 + s1 , r2 - s1 , - h2 ); l108 = MyFactory1 . CreateLine ( r2 - s1 , - h2 , 0 , - h2 ); l109 = MyFactory1 . CreateLine ( 0 , - h2 , 0 , 0 ); Sketch1 . CenterLine = l109 ; Sketch1 . CloseEdition (); AxisPad1 = PartFactory . AddNewShaft ( Sketch1 ); // Creating the Pocket ReferencePlane2 = MyDocument . Part . CreateReferenceFromGeometry ( MyDocument . Part . OriginElements . PlaneXY ); // Create the sketch2 on ReferencePlane2 Sketch2 = MyBody1 . Sketches . Add ( ReferencePlane2 ); MyFactory2 = Sketch2 . OpenEdition (); // Define the sketch D = 1 / 0.866 ; l201 = MyFactory2 . CreateLine ( D * 100 , 0 , D * 50 , D * 86.6 ); l202 = MyFactory2 . CreateLine ( D * 50 , D * 86.6 , D * - 50 , D * 86.6 ); l203 = MyFactory2 . CreateLine ( D * - 50 , D * 86.6 , D * - 100 , 0 ); l204 = MyFactory2 . CreateLine ( D * - 100 , 0 , D * - 50 , D * - 86.6 ); l205 = MyFactory2 . CreateLine ( D * - 50 , D * - 86.6 , D * 50 , D * - 86.6 ); l206 = MyFactory2 . CreateLine ( D * 50 , D * - 86.6 , D * 100 , 0 ); // Create a big circle around the form to get a Hole c2 = MyFactory2 . CreateClosedCircle ( 0 , 0 , 300 ); Sketch2 . CloseEdition (); AxisHole2 = PartFactory . AddNewPocket ( Sketch2 , h1 ); MyDocument . Part . Update (); < html > < head > < title > JavaScript </ title > </ head > < body > < h1 > Creating a BOLT in CATIA V5 from HTML with Javascript </ h1 > < FORM > < INPUT TYPE = \"button\" VALUE = \"BOLT\" ONCLICK = \"LaunchCATIAV5()\" > </ FORM > < script language = \"Javascript\" > function LaunchCATIAV5 () { var CATIA CATIA = new ActiveXObject ( \"CATIA.Application\" ); CATIA . Visible = true ; // Add a new Part MyDocument = CATIA . Documents . Add ( \"Part\" ); PartFactory = MyDocument . Part . ShapeFactory ; // Retrieve the Part Factory. MyBody1 = MyDocument . Part . Bodies . Item ( \"PartBody\" ); CATIA . ActiveDocument . Part . InWorkObject = MyBody1 ; // Activate \"PartDesign\" // Creating the Shaft ReferencePlane1 = MyDocument . Part . CreateReferenceFromGeometry ( MyDocument . Part . OriginElements . PlaneYZ ); // Create the sketch1 on ReferencePlane1 Sketch1 = MyBody1 . Sketches . Add ( ReferencePlane1 ); MyFactory1 = Sketch1 . OpenEdition (); // Define the sketch h1 = 80 ; // height of the bolt h2 = 300 ; // total height r1 = 120 ; // external radius r2 = 60 ; // Internal radius s1 = 20 ; // Size of the chamfer l101 = MyFactory1 . CreateLine ( 0 , 0 , r1 - 20 , 0 ); l102 = MyFactory1 . CreateLine ( r1 - 20 , 0 , r1 , - 20 ); l103 = MyFactory1 . CreateLine ( r1 , - 20 , r1 , - h1 + 20 ); l104 = MyFactory1 . CreateLine ( r1 , - h1 + 20 , r1 - 20 , - h1 ); l105 = MyFactory1 . CreateLine ( r1 - 20 , - h1 , r2 , - h1 ); l106 = MyFactory1 . CreateLine ( r2 , - h1 , r2 , - h2 + s1 ); l107 = MyFactory1 . CreateLine ( r2 , - h2 + s1 , r2 - s1 , - h2 ); l108 = MyFactory1 . CreateLine ( r2 - s1 , - h2 , 0 , - h2 ); l109 = MyFactory1 . CreateLine ( 0 , - h2 , 0 , 0 ); Sketch1 . CenterLine = l109 ; Sketch1 . CloseEdition (); AxisPad1 = PartFactory . AddNewShaft ( Sketch1 ); // Creating the Pocket ReferencePlane2 = MyDocument . Part . CreateReferenceFromGeometry ( MyDocument . Part . OriginElements . PlaneXY ); // Create the sketch2 on ReferencePlane2 Sketch2 = MyBody1 . Sketches . Add ( ReferencePlane2 ); MyFactory2 = Sketch2 . OpenEdition (); // Define the sketch D = 1 / 0.866 ; l201 = MyFactory2 . CreateLine ( D * 100 , 0 , D * 50 , D * 86.6 ); l202 = MyFactory2 . CreateLine ( D * 50 , D * 86.6 , D * - 50 , D * 86.6 ); l203 = MyFactory2 . CreateLine ( D * - 50 , D * 86.6 , D * - 100 , 0 ); l204 = MyFactory2 . CreateLine ( D * - 100 , 0 , D * - 50 , D * - 86.6 ); l205 = MyFactory2 . CreateLine ( D * - 50 , D * - 86.6 , D * 50 , D * - 86.6 ); l206 = MyFactory2 . CreateLine ( D * 50 , D * - 86.6 , D * 100 , 0 ); // Create a big circle around the form to get a Hole c2 = MyFactory2 . CreateClosedCircle ( 0 , 0 , 300 ); Sketch2 . CloseEdition (); AxisHole2 = PartFactory . AddNewPocket ( Sketch2 , h1 ); MyDocument . Part . Update (); } </ script > </ html >","title":"VBS Start CATIA"},{"location":"DS-CODE/VBA/VBS%20Start%20CATIA/#vbs-start-catia","text":"VBS JavaScript Html Dim CATIA 'As Object 'Get CATIA or Launch it if necessary. On Error Resume Next Set CATIA = Wscript.GetObject(,\"CATIA.Application\") If Err.Number <> 0 Then Set CATIA = Wscript.CreateObject(\"CATIA.Application\") CATIA.Visible = True End If On Error GoTo 0 ' Add a new Part Set MyDocument = CATIA.Documents.Add(\"Part\") Set PartFactory = MyDocument.Part.ShapeFactory ' Retrieve the Part Factory. Set MyBody1 = MyDocument.Part.Bodies.Item(\"\u96f6\u4ef6\u51e0\u4f55\u4f53\") CATIA.ActiveDocument.Part.InWorkObject = MyBody1 ' Activate \"PartDesign\" ' Creating the Shaft Set ReferencePlane1 = MyDocument.Part.CreateReferenceFromGeometry(MyDocument.Part.OriginElements.PlaneYZ) ' Create the sketch1 on ReferencePlane1 Set Sketch1 = MyBody1.Sketches.Add(ReferencePlane1) Set MyFactory1 = Sketch1.OpenEdition() ' Define the sketch h1 = 80 ' height of the bolt h2 = 300 ' total height r1 = 120 ' external radius r2 = 60 ' Internal radius s1 = 20 ' Size of the chamfer Set l101 = MyFactory1.CreateLine(0, 0, r1 - 20, 0) Set l102 = MyFactory1.CreateLine(r1 - 20, 0, r1, -20) Set l103 = MyFactory1.CreateLine(r1, -20, r1, -h1 + 20) Set l104 = MyFactory1.CreateLine(r1, -h1 + 20, r1 - 20, -h1) Set l105 = MyFactory1.CreateLine(r1 - 20, -h1, r2, -h1) Set l106 = MyFactory1.CreateLine(r2, -h1, r2, -h2 + s1) Set l107 = MyFactory1.CreateLine(r2, -h2 + s1, r2 - s1, -h2) Set l108 = MyFactory1.CreateLine(r2 - s1, -h2, 0, -h2) Set l109 = MyFactory1.CreateLine(0, -h2, 0, 0) Sketch1.CenterLine = l109 Sketch1.CloseEdition Set AxisPad1 = PartFactory.AddNewShaft(Sketch1) ' Creating the Pocket Set ReferencePlane2 = MyDocument.Part.CreateReferenceFromGeometry(MyDocument.Part.OriginElements.PlaneXY) ' Create the sketch2 on ReferencePlane2 Set Sketch2 = MyBody1.Sketches.Add(ReferencePlane2) Set MyFactory2 = Sketch2.OpenEdition() ' Define the sketch D = 1 / 0.866 Set l201 = MyFactory2.CreateLine(D * 100, 0, D * 50, D * 86.6) Set l202 = MyFactory2.CreateLine(D * 50, D * 86.6, D * -50, D * 86.6) Set l203 = MyFactory2.CreateLine(D * -50, D * 86.6, D * -100, 0) Set l204 = MyFactory2.CreateLine(D * -100, 0, D * -50, D * -86.6) Set l205 = MyFactory2.CreateLine(D * -50, D * -86.6, D * 50, D * -86.6) Set l206 = MyFactory2.CreateLine(D * 50, D * -86.6, D * 100, 0) ' Create a big circle around the form to get a Hole Set c2 = MyFactory2.CreateClosedCircle(0, 0, 300) Sketch2.CloseEdition Set AxisHole2 = PartFactory.AddNewPocket(Sketch2, h1) MyDocument.Part.Update var CATIA CATIA = WScript . GetObject ( \"\" , \"CATIA.Application\" ); if ( CATIA == null ) { CATIA = WScript . CreateObject ( \"CATIA.Application\" ); } CATIA . Visible = true ; // Add a new Part MyDocument = CATIA . Documents . Add ( \"Part\" ); PartFactory = MyDocument . Part . ShapeFactory ; // Retrieve the Part Factory. MyBody1 = MyDocument . Part . Bodies . Item ( \"\u96f6\u4ef6\u51e0\u4f55\u4f53\" ); CATIA . ActiveDocument . Part . InWorkObject = MyBody1 ; // Activate \"PartDesign\" // Creating the Shaft ReferencePlane1 = MyDocument . Part . CreateReferenceFromGeometry ( MyDocument . Part . OriginElements . PlaneYZ ); // Create the sketch1 on ReferencePlane1 Sketch1 = MyBody1 . Sketches . Add ( ReferencePlane1 ); MyFactory1 = Sketch1 . OpenEdition (); // Define the sketch h1 = 80 ; // height of the bolt h2 = 300 ; // total height r1 = 120 ; // external radius r2 = 60 ; // Internal radius s1 = 20 ; // Size of the chamfer l101 = MyFactory1 . CreateLine ( 0 , 0 , r1 - 20 , 0 ); l102 = MyFactory1 . CreateLine ( r1 - 20 , 0 , r1 , - 20 ); l103 = MyFactory1 . CreateLine ( r1 , - 20 , r1 , - h1 + 20 ); l104 = MyFactory1 . CreateLine ( r1 , - h1 + 20 , r1 - 20 , - h1 ); l105 = MyFactory1 . CreateLine ( r1 - 20 , - h1 , r2 , - h1 ); l106 = MyFactory1 . CreateLine ( r2 , - h1 , r2 , - h2 + s1 ); l107 = MyFactory1 . CreateLine ( r2 , - h2 + s1 , r2 - s1 , - h2 ); l108 = MyFactory1 . CreateLine ( r2 - s1 , - h2 , 0 , - h2 ); l109 = MyFactory1 . CreateLine ( 0 , - h2 , 0 , 0 ); Sketch1 . CenterLine = l109 ; Sketch1 . CloseEdition (); AxisPad1 = PartFactory . AddNewShaft ( Sketch1 ); // Creating the Pocket ReferencePlane2 = MyDocument . Part . CreateReferenceFromGeometry ( MyDocument . Part . OriginElements . PlaneXY ); // Create the sketch2 on ReferencePlane2 Sketch2 = MyBody1 . Sketches . Add ( ReferencePlane2 ); MyFactory2 = Sketch2 . OpenEdition (); // Define the sketch D = 1 / 0.866 ; l201 = MyFactory2 . CreateLine ( D * 100 , 0 , D * 50 , D * 86.6 ); l202 = MyFactory2 . CreateLine ( D * 50 , D * 86.6 , D * - 50 , D * 86.6 ); l203 = MyFactory2 . CreateLine ( D * - 50 , D * 86.6 , D * - 100 , 0 ); l204 = MyFactory2 . CreateLine ( D * - 100 , 0 , D * - 50 , D * - 86.6 ); l205 = MyFactory2 . CreateLine ( D * - 50 , D * - 86.6 , D * 50 , D * - 86.6 ); l206 = MyFactory2 . CreateLine ( D * 50 , D * - 86.6 , D * 100 , 0 ); // Create a big circle around the form to get a Hole c2 = MyFactory2 . CreateClosedCircle ( 0 , 0 , 300 ); Sketch2 . CloseEdition (); AxisHole2 = PartFactory . AddNewPocket ( Sketch2 , h1 ); MyDocument . Part . Update (); < html > < head > < title > JavaScript </ title > </ head > < body > < h1 > Creating a BOLT in CATIA V5 from HTML with Javascript </ h1 > < FORM > < INPUT TYPE = \"button\" VALUE = \"BOLT\" ONCLICK = \"LaunchCATIAV5()\" > </ FORM > < script language = \"Javascript\" > function LaunchCATIAV5 () { var CATIA CATIA = new ActiveXObject ( \"CATIA.Application\" ); CATIA . Visible = true ; // Add a new Part MyDocument = CATIA . Documents . Add ( \"Part\" ); PartFactory = MyDocument . Part . ShapeFactory ; // Retrieve the Part Factory. MyBody1 = MyDocument . Part . Bodies . Item ( \"PartBody\" ); CATIA . ActiveDocument . Part . InWorkObject = MyBody1 ; // Activate \"PartDesign\" // Creating the Shaft ReferencePlane1 = MyDocument . Part . CreateReferenceFromGeometry ( MyDocument . Part . OriginElements . PlaneYZ ); // Create the sketch1 on ReferencePlane1 Sketch1 = MyBody1 . Sketches . Add ( ReferencePlane1 ); MyFactory1 = Sketch1 . OpenEdition (); // Define the sketch h1 = 80 ; // height of the bolt h2 = 300 ; // total height r1 = 120 ; // external radius r2 = 60 ; // Internal radius s1 = 20 ; // Size of the chamfer l101 = MyFactory1 . CreateLine ( 0 , 0 , r1 - 20 , 0 ); l102 = MyFactory1 . CreateLine ( r1 - 20 , 0 , r1 , - 20 ); l103 = MyFactory1 . CreateLine ( r1 , - 20 , r1 , - h1 + 20 ); l104 = MyFactory1 . CreateLine ( r1 , - h1 + 20 , r1 - 20 , - h1 ); l105 = MyFactory1 . CreateLine ( r1 - 20 , - h1 , r2 , - h1 ); l106 = MyFactory1 . CreateLine ( r2 , - h1 , r2 , - h2 + s1 ); l107 = MyFactory1 . CreateLine ( r2 , - h2 + s1 , r2 - s1 , - h2 ); l108 = MyFactory1 . CreateLine ( r2 - s1 , - h2 , 0 , - h2 ); l109 = MyFactory1 . CreateLine ( 0 , - h2 , 0 , 0 ); Sketch1 . CenterLine = l109 ; Sketch1 . CloseEdition (); AxisPad1 = PartFactory . AddNewShaft ( Sketch1 ); // Creating the Pocket ReferencePlane2 = MyDocument . Part . CreateReferenceFromGeometry ( MyDocument . Part . OriginElements . PlaneXY ); // Create the sketch2 on ReferencePlane2 Sketch2 = MyBody1 . Sketches . Add ( ReferencePlane2 ); MyFactory2 = Sketch2 . OpenEdition (); // Define the sketch D = 1 / 0.866 ; l201 = MyFactory2 . CreateLine ( D * 100 , 0 , D * 50 , D * 86.6 ); l202 = MyFactory2 . CreateLine ( D * 50 , D * 86.6 , D * - 50 , D * 86.6 ); l203 = MyFactory2 . CreateLine ( D * - 50 , D * 86.6 , D * - 100 , 0 ); l204 = MyFactory2 . CreateLine ( D * - 100 , 0 , D * - 50 , D * - 86.6 ); l205 = MyFactory2 . CreateLine ( D * - 50 , D * - 86.6 , D * 50 , D * - 86.6 ); l206 = MyFactory2 . CreateLine ( D * 50 , D * - 86.6 , D * 100 , 0 ); // Create a big circle around the form to get a Hole c2 = MyFactory2 . CreateClosedCircle ( 0 , 0 , 300 ); Sketch2 . CloseEdition (); AxisHole2 = PartFactory . AddNewPocket ( Sketch2 , h1 ); MyDocument . Part . Update (); } </ script > </ html >","title":"VBS Start CATIA"},{"location":"DS-CODE/VBA/chapter_1/","text":"\u524d\u8a00","title":"\u524d\u8a00"},{"location":"DS-CODE/VBA/chapter_1/#_1","text":"","title":"\u524d\u8a00"},{"location":"DS-CODE/VBA/%E5%9B%BE%E7%BA%B8%E6%A0%87%E6%B3%A8/","text":"case1 The following example creates a drawing angle dimension between two lines and a partial curvilinear length dimension on an ellipse and retrieved in MyDimension1 and MyDimension2 in the drawing view collection of the MyView drawing view. This view belongs to the drawing view collection of the drawing sheet Dim MyView As DrawingView Set MyView = MySheet.Views.ActiveView Dim Fact2D As Factory2D Set Fact2D = MyView.Factory2D Dim Line1 As Line2D Dim Line2 As Line2D Set Line1 = Fact2D.CreateLine(50, 10, 150, 10) Set Line2 = Fact2D.CreateLine(50, 10, 120, 100) Dim Ellipse1 As Ellipse2D Set Ellipse1 = Fact2D.CreateEllipse(-40, 100, 120, 180,120,90,0, 3) Dim Point1 As Point2D Dim Point2 As Point2D Set Point1 = Fact2D.CreatePoint(-10,190) Set Point2 = Fact2D.CreatePoint(-120,90) Dim iType As catDimType iType = catDimAngle Dim myElements1(1) myElements1(1) = Array(Line1,Line2) Dim selpoints(3) selpoints(3) = Array(150, 10, 120, 100) Dim MyDimension1 As DrawingDimension Set MyDimension1 = MyView.Dimensions.Add(iType, myElements1(1), selpoints(3),catDimAuto) iType = catDimLengthCurvilinear Dim myElements2(2) myElements2(2) = Array(Point1,Point2,Ellipse1) selpoints(3) = Array(0, 0, 0, 0) Dim MyDimension2 As DrawingDimension Set MyDimension2 = MyView.Dimensions.Add(iType, myElements2(1), selpoints(3),catDimOffset) case2 Dim MyView As DrawingView Set MyView = MySheet.Views.ActiveView Dim Fact2D As Factory2D Set Fact2D = MyView.Factory2D Dim Point1 As Point2D Dim Point2 As Point2D Set Point1 = Fact2D.CreatePoint(40, 230) Set Point2 = Fact2D.CreatePoint(80, 210) Dim Line1 As Line2D Set Line1 = Fact2D.CreateLine(50, 10, 150, 10) Dim iType As catDimType iType = catDimDistance Dim myElements(1) myElements(1) = Array(Point1,Point2) Dim selpoints(3) selpoints(3) = Array(0, 0, 0, 0) Dim MyDimension As DrawingDimension Set MyDimension = MyView.Dimensions.Add2(iType, myElements(1), selpoints(3), Line1, 0)","title":"\u56fe\u7eb8\u6807\u6ce8"},{"location":"DS-CODE/VBA/%E5%9B%BE%E7%BA%B8%E6%A0%87%E6%B3%A8/#case1","text":"The following example creates a drawing angle dimension between two lines and a partial curvilinear length dimension on an ellipse and retrieved in MyDimension1 and MyDimension2 in the drawing view collection of the MyView drawing view. This view belongs to the drawing view collection of the drawing sheet Dim MyView As DrawingView Set MyView = MySheet.Views.ActiveView Dim Fact2D As Factory2D Set Fact2D = MyView.Factory2D Dim Line1 As Line2D Dim Line2 As Line2D Set Line1 = Fact2D.CreateLine(50, 10, 150, 10) Set Line2 = Fact2D.CreateLine(50, 10, 120, 100) Dim Ellipse1 As Ellipse2D Set Ellipse1 = Fact2D.CreateEllipse(-40, 100, 120, 180,120,90,0, 3) Dim Point1 As Point2D Dim Point2 As Point2D Set Point1 = Fact2D.CreatePoint(-10,190) Set Point2 = Fact2D.CreatePoint(-120,90) Dim iType As catDimType iType = catDimAngle Dim myElements1(1) myElements1(1) = Array(Line1,Line2) Dim selpoints(3) selpoints(3) = Array(150, 10, 120, 100) Dim MyDimension1 As DrawingDimension Set MyDimension1 = MyView.Dimensions.Add(iType, myElements1(1), selpoints(3),catDimAuto) iType = catDimLengthCurvilinear Dim myElements2(2) myElements2(2) = Array(Point1,Point2,Ellipse1) selpoints(3) = Array(0, 0, 0, 0) Dim MyDimension2 As DrawingDimension Set MyDimension2 = MyView.Dimensions.Add(iType, myElements2(1), selpoints(3),catDimOffset)","title":"case1"},{"location":"DS-CODE/VBA/%E5%9B%BE%E7%BA%B8%E6%A0%87%E6%B3%A8/#case2","text":"Dim MyView As DrawingView Set MyView = MySheet.Views.ActiveView Dim Fact2D As Factory2D Set Fact2D = MyView.Factory2D Dim Point1 As Point2D Dim Point2 As Point2D Set Point1 = Fact2D.CreatePoint(40, 230) Set Point2 = Fact2D.CreatePoint(80, 210) Dim Line1 As Line2D Set Line1 = Fact2D.CreateLine(50, 10, 150, 10) Dim iType As catDimType iType = catDimDistance Dim myElements(1) myElements(1) = Array(Point1,Point2) Dim selpoints(3) selpoints(3) = Array(0, 0, 0, 0) Dim MyDimension As DrawingDimension Set MyDimension = MyView.Dimensions.Add2(iType, myElements(1), selpoints(3), Line1, 0)","title":"case2"},{"location":"DS-CODE/VBA/%E6%9B%B4%E6%96%B0%E5%8F%82%E6%95%B0%E5%AF%BC%E5%87%BA%E6%88%AA%E5%9B%BE/","text":"\u66f4\u65b0\u53c2\u6570\u5bfc\u51fa\u622a\u56fe Sub CATMain() Dim partDocument1 As PartDocument Set partDocument1 = CATIA.ActiveDocument Dim part1 As Part Set part1 = partDocument1.Part Dim parm1 As Parameter Set parm1 = part1.Parameters.Item(\"Angle.1\") MsgBox parm1.ValueAsString() For i = 1 To 360 Dim str As String str = CStr(i) & \"deg\" parm1.ValuateFromString (str) CATIA.ActiveWindow.ActiveViewer.CaptureToFile catCaptureFormatJPEG, \"C:\\temp\\cc\\\" & \"\\MyImage\" & i & \".jpg\" part1.Update Next End Sub","title":"\u66f4\u65b0\u53c2\u6570\u5bfc\u51fa\u622a\u56fe"},{"location":"DS-CODE/VBA/%E6%9B%B4%E6%96%B0%E5%8F%82%E6%95%B0%E5%AF%BC%E5%87%BA%E6%88%AA%E5%9B%BE/#_1","text":"Sub CATMain() Dim partDocument1 As PartDocument Set partDocument1 = CATIA.ActiveDocument Dim part1 As Part Set part1 = partDocument1.Part Dim parm1 As Parameter Set parm1 = part1.Parameters.Item(\"Angle.1\") MsgBox parm1.ValueAsString() For i = 1 To 360 Dim str As String str = CStr(i) & \"deg\" parm1.ValuateFromString (str) CATIA.ActiveWindow.ActiveViewer.CaptureToFile catCaptureFormatJPEG, \"C:\\temp\\cc\\\" & \"\\MyImage\" & i & \".jpg\" part1.Update Next End Sub","title":"\u66f4\u65b0\u53c2\u6570\u5bfc\u51fa\u622a\u56fe"},{"location":"DS-CODE/VBA/%E6%A0%87%E6%B3%A8%E8%87%AA%E5%8A%A8%E5%8C%96/","text":"drafting Sub CATMain() Dim partDocument1 As PartDocument Set partDocument1 = CATIA.ActiveDocument Dim part1 As part Set part1 = partDocument1.part Dim hybridShapeFactory1 As HybridShapeFactory Set hybridShapeFactory1 = part1.HybridShapeFactory Dim hb1 As HybridBody Set hb1 = part1.HybridBodies.Item(\"DIM_UDF\") For i = 1 To hb1.HybridShapes.Count Dim udf1 As HybridShapeInstance Set udf1 = hb1.HybridShapes.Item(i) Dim tt As String tt = GetAnnoUDFType(part1, udf1) Next part1.Update End Sub Function GetAnnoUDFType(ByVal part1 As part, ByVal udf1 As HybridShapeInstance) As String Dim parms As Parameters Set parms = part1.Parameters.SubList(udf1, True) Dim parm1 As Parameter Set parm1 = parms.Item(\"Type\") Dim strType As String strType = parm1.ValueAsString() GetAnnoUDFType = strType End Function","title":"drafting"},{"location":"DS-CODE/VBA/%E6%A0%87%E6%B3%A8%E8%87%AA%E5%8A%A8%E5%8C%96/#drafting","text":"Sub CATMain() Dim partDocument1 As PartDocument Set partDocument1 = CATIA.ActiveDocument Dim part1 As part Set part1 = partDocument1.part Dim hybridShapeFactory1 As HybridShapeFactory Set hybridShapeFactory1 = part1.HybridShapeFactory Dim hb1 As HybridBody Set hb1 = part1.HybridBodies.Item(\"DIM_UDF\") For i = 1 To hb1.HybridShapes.Count Dim udf1 As HybridShapeInstance Set udf1 = hb1.HybridShapes.Item(i) Dim tt As String tt = GetAnnoUDFType(part1, udf1) Next part1.Update End Sub Function GetAnnoUDFType(ByVal part1 As part, ByVal udf1 As HybridShapeInstance) As String Dim parms As Parameters Set parms = part1.Parameters.SubList(udf1, True) Dim parm1 As Parameter Set parm1 = parms.Item(\"Type\") Dim strType As String strType = parm1.ValueAsString() GetAnnoUDFType = strType End Function","title":"drafting"},{"location":"DS-CODE/VBA/%E8%87%AA%E5%8A%A8%E6%A0%87%E6%B3%A8%E7%89%B9%E5%BE%81/","text":"\u81ea\u52a8\u6807\u6ce8\u7279\u5f81 CATAECAnnOnePoint Sub CATMain() Dim PartDocumentDest As PartDocument Set PartDocumentDest = CATIA.ActiveDocument Dim PartDest As part Set PartDest = PartDocumentDest.part For i = 1 To CATIA.ActiveDocument.Selection.Count Dim hb1 As HybridBody Set hb1 = CATIA.ActiveDocument.Selection.Item(i).Value For j = 1 To hb1.HybridShapes.Count Dim factory As InstanceFactory Set factory = PartDest.GetCustomerFactory(\"InstanceFactory\") factory.BeginInstanceFactory \"CATAECAnnOnePoint\", \"D:\\project\\2211-ZJIC-TUNNEL\\MODEL\\V5-MODEL\\Template\\knowledgeResources\\DimTemp\\CATAECAnnOnePoint.CATPart\" factory.BeginInstantiate Dim Input1 As Object Set Input1 = hb1.HybridShapes.Item(j) Dim Input2 As Object Set Input2 = PartDest.FindObjectByName(\"Axis System.1\") factory.PutInputData \"pt\", Input1 factory.PutInputData \"axis\", Input2 ' Dim param1 As Parameter ' Set param1 = factory.GetParameter(\"Radius1\") ' param1.ValuateFromString (\"25mm\") ' ' Dim param2 As Parameter ' Set param2 = factory.GetParameter(\"Radius2\") ' param2.ValuateFromString (\"15mm\") Dim Instance As HybridShapeInstance Set Instance = factory.Instantiate factory.EndInstantiate factory.EndInstanceFactory Next Next PartDest.Update End Sub","title":"\u81ea\u52a8\u6807\u6ce8\u7279\u5f81"},{"location":"DS-CODE/VBA/%E8%87%AA%E5%8A%A8%E6%A0%87%E6%B3%A8%E7%89%B9%E5%BE%81/#_1","text":"CATAECAnnOnePoint Sub CATMain() Dim PartDocumentDest As PartDocument Set PartDocumentDest = CATIA.ActiveDocument Dim PartDest As part Set PartDest = PartDocumentDest.part For i = 1 To CATIA.ActiveDocument.Selection.Count Dim hb1 As HybridBody Set hb1 = CATIA.ActiveDocument.Selection.Item(i).Value For j = 1 To hb1.HybridShapes.Count Dim factory As InstanceFactory Set factory = PartDest.GetCustomerFactory(\"InstanceFactory\") factory.BeginInstanceFactory \"CATAECAnnOnePoint\", \"D:\\project\\2211-ZJIC-TUNNEL\\MODEL\\V5-MODEL\\Template\\knowledgeResources\\DimTemp\\CATAECAnnOnePoint.CATPart\" factory.BeginInstantiate Dim Input1 As Object Set Input1 = hb1.HybridShapes.Item(j) Dim Input2 As Object Set Input2 = PartDest.FindObjectByName(\"Axis System.1\") factory.PutInputData \"pt\", Input1 factory.PutInputData \"axis\", Input2 ' Dim param1 As Parameter ' Set param1 = factory.GetParameter(\"Radius1\") ' param1.ValuateFromString (\"25mm\") ' ' Dim param2 As Parameter ' Set param2 = factory.GetParameter(\"Radius2\") ' param2.ValuateFromString (\"15mm\") Dim Instance As HybridShapeInstance Set Instance = factory.Instantiate factory.EndInstantiate factory.EndInstanceFactory Next Next PartDest.Update End Sub","title":"\u81ea\u52a8\u6807\u6ce8\u7279\u5f81"},{"location":"DS-CODE/VBA/%E9%81%8D%E5%8E%86V6%20product%20Tree/","text":"V6\u904d\u5386\u7ed3\u6784\u6811 Sub CATMain() Dim oEditor As INFITF.Editor Set oEditor = CATIA.ActiveEditor Dim oProductRootService As PLMProductService Set oProductRootService = oEditor.GetService(\"PLMProductService\") Dim sel As Selection Set sel = CATIA.ActiveEditor.Selection 'VPMRootOccurrence oVPMRootOccOnRoot =(VPMRootOccurrence)sel.Item(1).Value;//oProductRootService.RootOccurrence; 'VPMReference oVPMRoot = oVPMRootOccOnRoot.ReferenceRootOccurrenceOf; Dim oVPMRootOccOnRoot As VPMOccurrence Set oVPMRootOccOnRoot = sel.Item(1).Value Dim MyRootOccurrences As VPMOccurrences Set MyRootOccurrences = oVPMRootOccOnRoot.Occurrences For i = 1 To MyRootOccurrences.Count Dim MyOccurrence As VPMOccurrence Set MyOccurrence = MyRootOccurrences.Item(i) Dim MyRepInstances As VPMRepInstances Set MyRepInstances = MyOccurrence.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst As VPMRepInstance Set oVPMRepInst = MyRepInstances.Item(1) Dim oVPMRepRef As VPMRepReference Set oVPMRepRef = oVPMRepInst.ReferenceInstanceOf Dim part As part Set part = oVPMRepRef.GetItem(\"Part\") Debug.Print part.Name ' Dim hb As HybridBody ' Set hb = part.HybridBodies.Add() ' hb.Name = \"tesddddddtdd\" Next End Sub","title":"\u904d\u5386V6 product Tree"},{"location":"DS-CODE/VBA/%E9%81%8D%E5%8E%86V6%20product%20Tree/#v6","text":"Sub CATMain() Dim oEditor As INFITF.Editor Set oEditor = CATIA.ActiveEditor Dim oProductRootService As PLMProductService Set oProductRootService = oEditor.GetService(\"PLMProductService\") Dim sel As Selection Set sel = CATIA.ActiveEditor.Selection 'VPMRootOccurrence oVPMRootOccOnRoot =(VPMRootOccurrence)sel.Item(1).Value;//oProductRootService.RootOccurrence; 'VPMReference oVPMRoot = oVPMRootOccOnRoot.ReferenceRootOccurrenceOf; Dim oVPMRootOccOnRoot As VPMOccurrence Set oVPMRootOccOnRoot = sel.Item(1).Value Dim MyRootOccurrences As VPMOccurrences Set MyRootOccurrences = oVPMRootOccOnRoot.Occurrences For i = 1 To MyRootOccurrences.Count Dim MyOccurrence As VPMOccurrence Set MyOccurrence = MyRootOccurrences.Item(i) Dim MyRepInstances As VPMRepInstances Set MyRepInstances = MyOccurrence.InstanceOccurrenceOf.ReferenceInstanceOf Dim oVPMRepInst As VPMRepInstance Set oVPMRepInst = MyRepInstances.Item(1) Dim oVPMRepRef As VPMRepReference Set oVPMRepRef = oVPMRepInst.ReferenceInstanceOf Dim part As part Set part = oVPMRepRef.GetItem(\"Part\") Debug.Print part.Name ' Dim hb As HybridBody ' Set hb = part.HybridBodies.Add() ' hb.Name = \"tesddddddtdd\" Next End Sub","title":"V6\u904d\u5386\u7ed3\u6784\u6811"},{"location":"DS-CODE/VBA/CATIA%E5%87%BA%E5%9B%BE/DRAFTING-VBA%E5%87%BA%E5%9B%BE/","text":"Drafting \u83b7\u5f97\u5f53\u524d\u6587\u6863 Sub CATMain() 'Dim oDrwRoot As DrawingRootSet 'oDrwRoot = CATIA.ActiveEditor.ActiveObject Dim oSht Set oSht = CATIA.ActiveEditor.ActiveObject.Sheets.Item(1) CATIA.ActiveEditor.ActiveObject.ActiveSheet = oSht MsgBox oSht.Name End Sub \u521b\u5efa\u89d2\u5ea6\u6807\u6ce8 Imports CATANNOTITF Imports DRAFTINGITF Imports MECMOD Module Module1 Sub Main() CATMain() End Sub Sub CATMain() Dim CATIA As INFITF.Application CATIA = GetObject(, \"CATIA.Application\") 'Dim oDrwRoot As DrawingRoot 'oDrwRoot = CATIA.ActiveEditor.ActiveObject Dim oSht oSht = CATIA.ActiveEditor.ActiveObject.Sheets.Item(2) 'CATIA.ActiveEditor.ActiveObject.ActiveSheet = oSht MsgBox(oSht.Name, Title:=\"Warning\") Dim cDrawingViews As DrawingViews cDrawingViews = oSht.Views ' Debug.Print(cDrawingViews.Name) Dim MyView As DrawingView MyView = oSht.Views.ActiveView Dim Fact2D As Factory2D Fact2D = MyView.Factory2D Dim Line1 As Line2D Dim Line2 As Line2D Line1 = Fact2D.CreateLine(50, 10, 150, 10) Line2 = Fact2D.CreateLine(50, 10, 120, 100) Dim Ellipse1 As Ellipse2D Ellipse1 = Fact2D.CreateEllipse(-40, 100, 120, 180, 120, 90, 0, 3) Dim Point1 As Point2D Dim Point2 As Point2D Point1 = Fact2D.CreatePoint(-10, 190) Point2 = Fact2D.CreatePoint(-120, 90) Dim iType As CatDimType iType = CatDimType.catDimAngle 'Dim myElements1(1) 'myElements1(1) = Array{Line1, Line2} 'Dim selpoints(3) 'selpoints(3) = Array(150, 10, 120, 100) Dim myElements1() ReDim myElements1(1) myElements1(0) = Line1 myElements1(1) = Line2 Dim selpoints() ReDim selpoints(3) selpoints(0) = 150 selpoints(1) = 10 selpoints(2) = 120 selpoints(3) = 100 Dim MyDimension1 'As DrawingDimension MyDimension1 = MyView.Dimensions.Add(iType, myElements1, selpoints, CatDimLineRep.catDimAuto) iType = CatDimType.catDimLengthCurvilinear 'Dim myElements2(2) 'myElements2(2) = Array(Point1, Point2, Ellipse1) 'selpoints(3) = Array(0, 0, 0, 0) 'Dim MyDimension2 As DrawingDimension 'MyDimension2 = MyView.Dimensions.Add(iType, myElements2(1), selpoints(3), CatDimLineRep.catDimOffset) Console.ReadKey() End Sub End Module SHEET \u6279\u91cf\u8be5\u540d\u79f0 -RenameTheDrawing.bas Sub CATMain() Dim oSht Set oSht = CATIA.ActiveEditor.ActiveObject.Sheets.Item(1) CATIA.ActiveEditor.ActiveObject.ActiveSheet = oSht For I = 1 To CATIA.ActiveEditor.ActiveObject.Sheets.Count CATIA.ActiveEditor.ActiveObject.Sheets.Item(I).Name = \"DPG-SHEET-\" + CStr(I) Next End Sub","title":"Drafting"},{"location":"DS-CODE/VBA/CATIA%E5%87%BA%E5%9B%BE/DRAFTING-VBA%E5%87%BA%E5%9B%BE/#drafting","text":"","title":"Drafting"},{"location":"DS-CODE/VBA/CATIA%E5%87%BA%E5%9B%BE/DRAFTING-VBA%E5%87%BA%E5%9B%BE/#_1","text":"Sub CATMain() 'Dim oDrwRoot As DrawingRootSet 'oDrwRoot = CATIA.ActiveEditor.ActiveObject Dim oSht Set oSht = CATIA.ActiveEditor.ActiveObject.Sheets.Item(1) CATIA.ActiveEditor.ActiveObject.ActiveSheet = oSht MsgBox oSht.Name End Sub \u521b\u5efa\u89d2\u5ea6\u6807\u6ce8 Imports CATANNOTITF Imports DRAFTINGITF Imports MECMOD Module Module1 Sub Main() CATMain() End Sub Sub CATMain() Dim CATIA As INFITF.Application CATIA = GetObject(, \"CATIA.Application\") 'Dim oDrwRoot As DrawingRoot 'oDrwRoot = CATIA.ActiveEditor.ActiveObject Dim oSht oSht = CATIA.ActiveEditor.ActiveObject.Sheets.Item(2) 'CATIA.ActiveEditor.ActiveObject.ActiveSheet = oSht MsgBox(oSht.Name, Title:=\"Warning\") Dim cDrawingViews As DrawingViews cDrawingViews = oSht.Views ' Debug.Print(cDrawingViews.Name) Dim MyView As DrawingView MyView = oSht.Views.ActiveView Dim Fact2D As Factory2D Fact2D = MyView.Factory2D Dim Line1 As Line2D Dim Line2 As Line2D Line1 = Fact2D.CreateLine(50, 10, 150, 10) Line2 = Fact2D.CreateLine(50, 10, 120, 100) Dim Ellipse1 As Ellipse2D Ellipse1 = Fact2D.CreateEllipse(-40, 100, 120, 180, 120, 90, 0, 3) Dim Point1 As Point2D Dim Point2 As Point2D Point1 = Fact2D.CreatePoint(-10, 190) Point2 = Fact2D.CreatePoint(-120, 90) Dim iType As CatDimType iType = CatDimType.catDimAngle 'Dim myElements1(1) 'myElements1(1) = Array{Line1, Line2} 'Dim selpoints(3) 'selpoints(3) = Array(150, 10, 120, 100) Dim myElements1() ReDim myElements1(1) myElements1(0) = Line1 myElements1(1) = Line2 Dim selpoints() ReDim selpoints(3) selpoints(0) = 150 selpoints(1) = 10 selpoints(2) = 120 selpoints(3) = 100 Dim MyDimension1 'As DrawingDimension MyDimension1 = MyView.Dimensions.Add(iType, myElements1, selpoints, CatDimLineRep.catDimAuto) iType = CatDimType.catDimLengthCurvilinear 'Dim myElements2(2) 'myElements2(2) = Array(Point1, Point2, Ellipse1) 'selpoints(3) = Array(0, 0, 0, 0) 'Dim MyDimension2 As DrawingDimension 'MyDimension2 = MyView.Dimensions.Add(iType, myElements2(1), selpoints(3), CatDimLineRep.catDimOffset) Console.ReadKey() End Sub End Module","title":"\u83b7\u5f97\u5f53\u524d\u6587\u6863"},{"location":"DS-CODE/VBA/CATIA%E5%87%BA%E5%9B%BE/DRAFTING-VBA%E5%87%BA%E5%9B%BE/#sheet-renamethedrawingbas","text":"Sub CATMain() Dim oSht Set oSht = CATIA.ActiveEditor.ActiveObject.Sheets.Item(1) CATIA.ActiveEditor.ActiveObject.ActiveSheet = oSht For I = 1 To CATIA.ActiveEditor.ActiveObject.Sheets.Count CATIA.ActiveEditor.ActiveObject.Sheets.Item(I).Name = \"DPG-SHEET-\" + CStr(I) Next End Sub","title":"SHEET \u6279\u91cf\u8be5\u540d\u79f0 -RenameTheDrawing.bas"},{"location":"DS-CODE/VBA/Draw%E3%81%A7%E9%80%A3%E7%95%AA%E3%81%AE%E6%96%87%E5%AD%97%E3%82%92%E4%BD%9C%E3%82%8B.md/Draw%E3%81%A7%E9%80%A3%E7%95%AA%E3%81%AE%E6%96%87%E5%AD%97%E3%82%92%E4%BD%9C%E3%82%8B/","text":"Draw\u3067\u9023\u756a\u306e\u6587\u5b57\u3092\u4f5c\u308b CATIA_V5VBAKCL CATIA\u30cd\u30bf\u306e\u5ea6\u306b \"\u4e45\u3005\" \u3063\u3066\u66f8\u3044\u3061\u3083\u3046\u306e\u3067\u3059\u304c\u3001\u4e45\u3005\u306bCATIA\u306e\u30de\u30af\u30ed\u3067\u3059\u3002 Draw\u306e\u4f5c\u696d\u3057\u3066\u3044\u308b\u3068\u3001\u7570\u69d8\u306b\u9023\u756a\u306e\u6587\u5b57\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u3059\u304c\u3001 \u4e16\u306e\u4e2d\u306e\u7686\u69d8\u306f\u3069\u306e\u69d8\u306b\u5bfe\u51e6\u3057\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b? \u76f8\u5909\u308f\u3089\u305a\u7a81\u8cab\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\u5fc5\u8981\u3060\u3063\u305f\u305f\u3081\u3002 'vba Draw_RenBanMoji_ver0.0.1 using-'KCL0.0.12' by Kantoku ':\u9023\u756a\u306e\u6587\u5b57\u3092\u65b0\u305f\u306a\u30d3\u30e5\u30fc\u306b\u4f5c\u6210\u3057\u307e\u3059 Option Explicit Private Const X_OFFSET = -30# Private Const Y_PICH = 10# Sub CATMain() '\uff84\uff9e\uff77\uff6d\uff92\uff9d\uff84\u306e\uff81\uff6a\uff6f\uff78 If Not CanExecute(Array(\"DrawingDocument\")) Then Exit Sub Dim info As String info = InputBox(\"\u30d8\u30c3\u30c0\u30fc,\u958b\u59cb\u306e\u6570,\u7d42\u4e86\u306e\u6570 (\u4f8b: T,5,10)\") Dim ary As Variant ary = getRange(info) Dim msg As String If IsEmpty(ary) Then msg = \"\u5165\u529b\u5024\u3092\u518d\u5ea6\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\" & vbCrLf & info MsgBox msg Exit Sub End If Dim header As String header = ary(0) Dim s As Long s = ary(1) Dim e As Long e = ary(2) msg = \"[\" & header & str(s) & \"] \u304b\u3089 [\" & _ header & str(e) & \"] \u307e\u3067\u306e\u6587\u5b57\u3092\u4f5c\u308a\u307e\u3059\u304b\uff1f\" If MsgBox(msg, vbOKCancel) = vbCancel Then Exit Sub End If ' exec Call initRenban(header, s, e) End Sub Private Sub initRenban( _ ByVal header As String, _ ByVal s As Long, _ ByVal e As Long) Dim vw As DrawingView Set vw = initView Dim txts As DrawingTexts Set txts = vw.Texts Dim i As Long For i = s To e Call txts.Add(header & Trim(str(i)), X_OFFSET, (i - s) * Y_PICH) Next End Sub Private Function initView() As DrawingView Dim doc As DrawingDocument Set doc = CATIA.ActiveDocument Dim views As DrawingViews Set views = doc.Sheets.ActiveSheet.views Set initView = views.Add(\"\") End Function Private Function getRange( _ ByVal txt As String) As Variant getRange = Empty Dim ary As Variant ary = Split(txt, \",\") If Not UBound(ary) = 2 Then Exit Function If Not IsNumeric(ary(1)) Or Not IsNumeric(ary(2)) Then Exit Function ary(1) = CLng(ary(1)) ary(2) = CLng(ary(2)) getRange = ary End Function \"CSV\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6587\u5b57\u3092\u4f5c\u308b\" \u3068\u304b \"\u30af\u30ea\u30c3\u30af\u3057\u305f\u4f4d\u7f6e\u306b\u4f5c\u308b\" \u3068\u304b\u3082\u8003\u3048\u305f\u306e\u3067\u3059\u304c \u76f4\u3050\u306b\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u7c21\u5358\u306b\u3057\u307e\u3057\u305f\u3002(\"s\" \u3068\u304b \"e\" \u306a\u3093\u3066\u5909\u6570\u3001\u7d42\u308f\u3063\u3066\u308b) \u3053\u3093\u306a\u611f\u3058\u306e\u3082\u306e\u3092\u4f5c\u308b\u3060\u3051\u3067\u3059\u3002 \u6700\u521d\u306b\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4e16\u306e\u4e2d\u306e\u7686\u69d8\u306f\u3069\u3046\u3057\u3066\u3044\u308b\u306e\u3060\u308d\u3046\u3002 \u5fc5\u8981\u7121\u3044\u306e\u304b\u306a\u30fb\u30fb\u30fb\u3002","title":"Draw\u3067\u9023\u756a\u306e\u6587\u5b57\u3092\u4f5c\u308b"},{"location":"DS-CODE/VBA/Draw%E3%81%A7%E9%80%A3%E7%95%AA%E3%81%AE%E6%96%87%E5%AD%97%E3%82%92%E4%BD%9C%E3%82%8B.md/Draw%E3%81%A7%E9%80%A3%E7%95%AA%E3%81%AE%E6%96%87%E5%AD%97%E3%82%92%E4%BD%9C%E3%82%8B/#draw","text":"CATIA_V5VBAKCL CATIA\u30cd\u30bf\u306e\u5ea6\u306b \"\u4e45\u3005\" \u3063\u3066\u66f8\u3044\u3061\u3083\u3046\u306e\u3067\u3059\u304c\u3001\u4e45\u3005\u306bCATIA\u306e\u30de\u30af\u30ed\u3067\u3059\u3002 Draw\u306e\u4f5c\u696d\u3057\u3066\u3044\u308b\u3068\u3001\u7570\u69d8\u306b\u9023\u756a\u306e\u6587\u5b57\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u3059\u304c\u3001 \u4e16\u306e\u4e2d\u306e\u7686\u69d8\u306f\u3069\u306e\u69d8\u306b\u5bfe\u51e6\u3057\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b? \u76f8\u5909\u308f\u3089\u305a\u7a81\u8cab\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\u5fc5\u8981\u3060\u3063\u305f\u305f\u3081\u3002 'vba Draw_RenBanMoji_ver0.0.1 using-'KCL0.0.12' by Kantoku ':\u9023\u756a\u306e\u6587\u5b57\u3092\u65b0\u305f\u306a\u30d3\u30e5\u30fc\u306b\u4f5c\u6210\u3057\u307e\u3059 Option Explicit Private Const X_OFFSET = -30# Private Const Y_PICH = 10# Sub CATMain() '\uff84\uff9e\uff77\uff6d\uff92\uff9d\uff84\u306e\uff81\uff6a\uff6f\uff78 If Not CanExecute(Array(\"DrawingDocument\")) Then Exit Sub Dim info As String info = InputBox(\"\u30d8\u30c3\u30c0\u30fc,\u958b\u59cb\u306e\u6570,\u7d42\u4e86\u306e\u6570 (\u4f8b: T,5,10)\") Dim ary As Variant ary = getRange(info) Dim msg As String If IsEmpty(ary) Then msg = \"\u5165\u529b\u5024\u3092\u518d\u5ea6\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\" & vbCrLf & info MsgBox msg Exit Sub End If Dim header As String header = ary(0) Dim s As Long s = ary(1) Dim e As Long e = ary(2) msg = \"[\" & header & str(s) & \"] \u304b\u3089 [\" & _ header & str(e) & \"] \u307e\u3067\u306e\u6587\u5b57\u3092\u4f5c\u308a\u307e\u3059\u304b\uff1f\" If MsgBox(msg, vbOKCancel) = vbCancel Then Exit Sub End If ' exec Call initRenban(header, s, e) End Sub Private Sub initRenban( _ ByVal header As String, _ ByVal s As Long, _ ByVal e As Long) Dim vw As DrawingView Set vw = initView Dim txts As DrawingTexts Set txts = vw.Texts Dim i As Long For i = s To e Call txts.Add(header & Trim(str(i)), X_OFFSET, (i - s) * Y_PICH) Next End Sub Private Function initView() As DrawingView Dim doc As DrawingDocument Set doc = CATIA.ActiveDocument Dim views As DrawingViews Set views = doc.Sheets.ActiveSheet.views Set initView = views.Add(\"\") End Function Private Function getRange( _ ByVal txt As String) As Variant getRange = Empty Dim ary As Variant ary = Split(txt, \",\") If Not UBound(ary) = 2 Then Exit Function If Not IsNumeric(ary(1)) Or Not IsNumeric(ary(2)) Then Exit Function ary(1) = CLng(ary(1)) ary(2) = CLng(ary(2)) getRange = ary End Function \"CSV\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6587\u5b57\u3092\u4f5c\u308b\" \u3068\u304b \"\u30af\u30ea\u30c3\u30af\u3057\u305f\u4f4d\u7f6e\u306b\u4f5c\u308b\" \u3068\u304b\u3082\u8003\u3048\u305f\u306e\u3067\u3059\u304c \u76f4\u3050\u306b\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u7c21\u5358\u306b\u3057\u307e\u3057\u305f\u3002(\"s\" \u3068\u304b \"e\" \u306a\u3093\u3066\u5909\u6570\u3001\u7d42\u308f\u3063\u3066\u308b) \u3053\u3093\u306a\u611f\u3058\u306e\u3082\u306e\u3092\u4f5c\u308b\u3060\u3051\u3067\u3059\u3002 \u6700\u521d\u306b\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4e16\u306e\u4e2d\u306e\u7686\u69d8\u306f\u3069\u3046\u3057\u3066\u3044\u308b\u306e\u3060\u308d\u3046\u3002 \u5fc5\u8981\u7121\u3044\u306e\u304b\u306a\u30fb\u30fb\u30fb\u3002","title":"Draw\u3067\u9023\u756a\u306e\u6587\u5b57\u3092\u4f5c\u308b"},{"location":"DS-CODE/VBA/GetParameterOnSubString%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/GetParameterOnSubString%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/","text":"GetParameterOnSubString\u30e1\u30bd\u30c3\u30c9 CATIA_V5VBA CATIA\u306eDrawingTxt\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eGetParameterOnSubString\u30e1\u30bd\u30c3\u30c9\u3092 \u4f7f\u3063\u305f\u3053\u3068\u304c\u7121\u3044\u306e\u3067\u3001\u6238\u60d1\u3063\u3066\u307e\u3059\u3002 \u5fa1\u5b58\u77e5\u306e\u65b9\u3044\u3089\u3063\u3057\u3083\u3044\u307e\u3057\u305f\u3089\u30a2\u30c9\u30d0\u30a4\u30b9\u9802\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002 GetParameterOnSubString\u30e1\u30bd\u30c3\u30c9\u306fDrawingTxt\u306e\u90e8\u5206\u7684\u306a\u6587\u5b57\u306e\u60c5\u5831\u3092 \u53d6\u5f97\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3060\u3068\u601d\u3063\u3066\u307e\u3059\u3002 r1 DrawingText (Object) \u3053\u3093\u306a\u96d1\u306a\u30b3\u30fc\u30c9\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002 'vba Sub test() Dim doc As Document Set doc = CATIA.ActiveDocument Dim sel As Object 'selection Set sel = doc.selection Dim msg$: msg = \"\u9078\u629e\u3057\u3066\u4e0b\u3055\u3044 : ESC\uff77\uff70 \u7d42\u4e86\" Dim txt As Variant 'DrawingText Do Select Case sel.SelectElement2(Array(\"DrawingText\"), msg, False) Case \"Cancel\", \"Undo\", \"Redo\" Exit Sub End Select Set txt = sel.Item(1).value iParam = CatTextProperty.catFontSize iFirst = 0 inbCharacter = 0 oval = txt.GetParameterOnSubString(iParam, iFirst, inbCharacter) Debug.Print \"oval: \" & oval Stop Loop End Sub DrawingText\u3092\u9078\u629e\u3057\u3001GetParameterOnSubString\u306e\u7d50\u679c\u3092\u30a4\u30df\u30c7\u30a3\u30a8\u30a4\u30c8\u30a6\u30a3\u30f3\u30c9\u30a6\u306b \u5782\u308c\u6d41\u3057\u3066\u307e\u3059\u3002 \u7b2c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3053\u3061\u3089\u3067\u3059\u3002 r1 Enumeration CatTextProperty \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3057\u305f\u3044\u306e\u3067\u3059\u3002 \u3053\u3093\u306a\u30c7\u30fc\u30bf\u3067\u8a66\u3057\u307e\u3057\u305f\u3002 \u4f8b\u3048\u3070\u300ca11\u300d\u306f\u5168\u3066\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba3\u3067\u3059\u3002\u3053\u308c\u3092\u9078\u629e\u3059\u308b\u3068 oval: 3000 \u3093\uff1f\u5358\u4f4dmm\u3067\u8fd4\u3059\u3063\u3066Help\u306b\u66f8\u3044\u3066\u3042\u308b\u306e\u306b\u3002 \u7d9a\u3044\u3066\u300ca8\u300d\u3092\u9078\u629e\u3002\u3053\u3061\u3089\u306f\u5168\u3066\u30b5\u30a4\u30ba10\u3067\u3059\u3002 oval: 10000 \u3093\uff5e\u5358\u4f4d\u306e\u9593\u9055\u3044\u3060\u3051\u306a\u306e\u3060\u308d\u3046\u3002 \u6b21\u306f\u300ca12\u300d\u3067\u3059\u3002\u300ca\u300d\u304c\u30b5\u30a4\u30ba5\u3067\u300c12\u300d\u306f\u30b5\u30a4\u30ba3\u3067\u3059\u3002 oval: 0 \u306a\u308b\u307b\u3069\u30010\u306f\u6587\u5b57\u5217\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\u304c\u7d71\u4e00\u3055\u308c\u3066\u3044\u306a\u3044\u3063\u3066\u89e3\u91c8\u3067 \u826f\u3044\u3093\u3067\u3059\u304b\u306d\uff1f \u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u304c \u3001\u4e0a\u8a18\u306e\u300c iFirst \u300d\u300c inbCharacter \u300d\u3002 \u8a66\u3059\u3068\u3001\u300c iFirst \u300d\u3067\u6307\u5b9a\u3059\u308b\u6587\u5b57\u5217\u306e\u5148\u982d\u306f1\u306e\u69d8\u3067\u3001\u5168\u3066\u306e\u5834\u5408\u306f0\u304b\u306a\uff1f \u6587\u5b57\u6570\u306e\u300c inbCharacter \u300d\u306f\u300c iFirst \u300d\u304b\u3089\u306e\u6587\u5b57\u6570\u3067\u3001\u300c iFirst \u300d\u4ee5\u964d\u5168\u3066\u306e \u5834\u5408\u306f0\u3067\u826f\u3044\u3088\u3046\u306a\u30fb\u30fb\u30fb\u3002 \u89e3\u91c8\u5408\u3063\u3066\u307e\u3059\u304b\u306d\uff1f","title":"GetParameterOnSubString\u30e1\u30bd\u30c3\u30c9"},{"location":"DS-CODE/VBA/GetParameterOnSubString%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/GetParameterOnSubString%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/#getparameteronsubstring","text":"CATIA_V5VBA CATIA\u306eDrawingTxt\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eGetParameterOnSubString\u30e1\u30bd\u30c3\u30c9\u3092 \u4f7f\u3063\u305f\u3053\u3068\u304c\u7121\u3044\u306e\u3067\u3001\u6238\u60d1\u3063\u3066\u307e\u3059\u3002 \u5fa1\u5b58\u77e5\u306e\u65b9\u3044\u3089\u3063\u3057\u3083\u3044\u307e\u3057\u305f\u3089\u30a2\u30c9\u30d0\u30a4\u30b9\u9802\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002 GetParameterOnSubString\u30e1\u30bd\u30c3\u30c9\u306fDrawingTxt\u306e\u90e8\u5206\u7684\u306a\u6587\u5b57\u306e\u60c5\u5831\u3092 \u53d6\u5f97\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3060\u3068\u601d\u3063\u3066\u307e\u3059\u3002 r1 DrawingText (Object) \u3053\u3093\u306a\u96d1\u306a\u30b3\u30fc\u30c9\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002 'vba Sub test() Dim doc As Document Set doc = CATIA.ActiveDocument Dim sel As Object 'selection Set sel = doc.selection Dim msg$: msg = \"\u9078\u629e\u3057\u3066\u4e0b\u3055\u3044 : ESC\uff77\uff70 \u7d42\u4e86\" Dim txt As Variant 'DrawingText Do Select Case sel.SelectElement2(Array(\"DrawingText\"), msg, False) Case \"Cancel\", \"Undo\", \"Redo\" Exit Sub End Select Set txt = sel.Item(1).value iParam = CatTextProperty.catFontSize iFirst = 0 inbCharacter = 0 oval = txt.GetParameterOnSubString(iParam, iFirst, inbCharacter) Debug.Print \"oval: \" & oval Stop Loop End Sub DrawingText\u3092\u9078\u629e\u3057\u3001GetParameterOnSubString\u306e\u7d50\u679c\u3092\u30a4\u30df\u30c7\u30a3\u30a8\u30a4\u30c8\u30a6\u30a3\u30f3\u30c9\u30a6\u306b \u5782\u308c\u6d41\u3057\u3066\u307e\u3059\u3002 \u7b2c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3053\u3061\u3089\u3067\u3059\u3002 r1 Enumeration CatTextProperty \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3057\u305f\u3044\u306e\u3067\u3059\u3002 \u3053\u3093\u306a\u30c7\u30fc\u30bf\u3067\u8a66\u3057\u307e\u3057\u305f\u3002 \u4f8b\u3048\u3070\u300ca11\u300d\u306f\u5168\u3066\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba3\u3067\u3059\u3002\u3053\u308c\u3092\u9078\u629e\u3059\u308b\u3068 oval: 3000 \u3093\uff1f\u5358\u4f4dmm\u3067\u8fd4\u3059\u3063\u3066Help\u306b\u66f8\u3044\u3066\u3042\u308b\u306e\u306b\u3002 \u7d9a\u3044\u3066\u300ca8\u300d\u3092\u9078\u629e\u3002\u3053\u3061\u3089\u306f\u5168\u3066\u30b5\u30a4\u30ba10\u3067\u3059\u3002 oval: 10000 \u3093\uff5e\u5358\u4f4d\u306e\u9593\u9055\u3044\u3060\u3051\u306a\u306e\u3060\u308d\u3046\u3002 \u6b21\u306f\u300ca12\u300d\u3067\u3059\u3002\u300ca\u300d\u304c\u30b5\u30a4\u30ba5\u3067\u300c12\u300d\u306f\u30b5\u30a4\u30ba3\u3067\u3059\u3002 oval: 0 \u306a\u308b\u307b\u3069\u30010\u306f\u6587\u5b57\u5217\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\u304c\u7d71\u4e00\u3055\u308c\u3066\u3044\u306a\u3044\u3063\u3066\u89e3\u91c8\u3067 \u826f\u3044\u3093\u3067\u3059\u304b\u306d\uff1f \u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u304c \u3001\u4e0a\u8a18\u306e\u300c iFirst \u300d\u300c inbCharacter \u300d\u3002 \u8a66\u3059\u3068\u3001\u300c iFirst \u300d\u3067\u6307\u5b9a\u3059\u308b\u6587\u5b57\u5217\u306e\u5148\u982d\u306f1\u306e\u69d8\u3067\u3001\u5168\u3066\u306e\u5834\u5408\u306f0\u304b\u306a\uff1f \u6587\u5b57\u6570\u306e\u300c inbCharacter \u300d\u306f\u300c iFirst \u300d\u304b\u3089\u306e\u6587\u5b57\u6570\u3067\u3001\u300c iFirst \u300d\u4ee5\u964d\u5168\u3066\u306e \u5834\u5408\u306f0\u3067\u826f\u3044\u3088\u3046\u306a\u30fb\u30fb\u30fb\u3002 \u89e3\u91c8\u5408\u3063\u3066\u307e\u3059\u304b\u306d\uff1f","title":"GetParameterOnSubString\u30e1\u30bd\u30c3\u30c9"},{"location":"DS-CODE/VBA/How%20to%20get%20UDF%20sublist/%E8%8E%B7%E5%8F%96UDF%20%E5%AD%90%E9%9B%86/","text":"Well, you can retrieve currently selected object by calling CATIA.ActiveDocument.Selection.Item(1).Value. I also guess that features inside the UDF are exposed as parameters so you can get desired feature with Item method. Below code goes right from my head, I'm unable to test it, sorry: ' retrieve UDF from selection Dim oUDF as AnyObject Set oUDF = CATIA.ActiveDocument.Selection.Item(1).Value ' filter Parameters collection of the part leaving only those that are related to the UDF Dim oUDFParams as Parameters Set oUDFParams = CATIA.ActiveDocument.Part.Parameters.SubList(oUDF, true) ' get Center_Point on Parameter and on Point interfaces Dim parPoint as Parameter Dim pntPoint as Point Set parPoint = oUDFParams.Item(\"Center_Point\") Set pntPoint = parPoint ' retrieve point coordinates Dim varPoint Dim aCoords(2) Set varPoint = pntPoint varPoint.GetCoordinates aCoords RE: Getting x,y,z from a udf March 29, 2012 05:24 PM (in response to Little Cthulhu) I don't think that will work because a point as an output feature of a UDF is not a parameter. Even if it made with a datum and a formula. But I think you should be able to get the point by searching inside the UDF like this: Catia.ActiveDocument.Selection.Add(myUDF) Catia.ActiveDocument.Selection.Search(\"(Name=Center_Point & 'Generative Shape Design'.Point).sel\") It is also pretty easy to get at an output feature of a UDF using KWA. Here is an Action that queries for UDFs in a PartBody and writes the coordinates of output points named COG to a list: Inputs: pb : BodyFeature,cogList : List Body of Action: ```cs let udf (UserFeature) let udfs (List) let cog (Point) udfs = pb ->Query(\"UserFeature\",\"\") cogList->RemoveAll() for udf inside udfs { if udf->HasAttribute(\"COG\") == true { set cog = udf->Find(\"Point\",\"x.Name==\\\"COG\\\"\",true) cogList->Append(udf->Name + \":\" + ToString(cog->coord(1)) + \",\" + ToString( cog->coord(2)) + \",\" + ToString( cog->coord(3))) } } ``` March 29, 2012 11:42 PM (in response to Cliff Johnson, Cliff) As far as I remember when UDF gets instantiated via script it is exposed to Automation as ShapeInstance class object. Investigate if following works: Set pntPoint = CATIA.ActiveDocument.Selection.Item(1).Value.GetOutput(\"Center_Point\") UPD Here's what I came up to. I wasn't able to cast HybridShapeInstance to a Point directly so I had to create temporary point: ```vb ' retrieve UDF from selection Dim oUDF As HybridShapeInstance Set oUDF = CATIA.ActiveDocument.Selection.Item(1).Value ' get UDF output feature by it's name Dim hsiPoint As HybridShapeInstance Set hsiPoint = oUDF.GetOutput(\"Point.5\") ' create a Reference for output element Dim prtPart As Part Set prtPart = CATIA.ActiveDocument.Part Dim refPoint As Reference Set refPoint = prtPart.CreateReferenceFromObject(hsiPoint) ' create temp point using output element as a reference Dim pntTempPoint As Point Set pntTempPoint = prtPart.HybridShapeFactory.AddNewPointCoordWithReference(0, 0, 0, refPoint) pntTempPoint.Compute ' retrieve coordinates Dim varPoint Dim aCoord(2) Set varPoint = pntTempPoint varPoint.GetCoordinates aCoord ' delete temp point prtPart.HybridShapeFactory.DeleteObjectForDatum pntTempPoint ```","title":"\u83b7\u53d6UDF \u5b50\u96c6"},{"location":"DS-CODE/VBA/KP/kp/","text":"Sub CATMain() Dim KPColl As New Collection Dim KPColl02 As New Collection Dim KPColl03 As New Collection CATIA.ActiveDocument.Selection.Clear CATIA.ActiveDocument.Selection.Search \"Name=INSTANTIATE_TRUSS_KP* & Knowledgeware.'Knowledge Pattern';all\" For LoopNum = 1 To CATIA.ActiveDocument.Selection.Count Call KPColl.Add(CATIA.ActiveDocument.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl.Count CATIA.ActiveDocument.Selection.Clear CATIA.ActiveDocument.Selection.Add (KPColl.Item(LoopNum)) CATIA.StartCommand (\"Execute\") 'CATIA.ActiveDocument.Part.Update Next 'MsgBox (\"Finished knowledge pattern execution.\") CATIA.ActiveDocument.Selection.Clear CATIA.ActiveDocument.Selection.Search \"Name=TRUSS* & Knowledgeware.'Knowledge Pattern';all\" For LoopNum = 1 To CATIA.ActiveDocument.Selection.Count Call KPColl02.Add(CATIA.ActiveDocument.Selection.Item(LoopNum).Value) Next For LoopNum = 1 To KPColl02.Count CATIA.ActiveDocument.Selection.Clear CATIA.ActiveDocument.Selection.Add (KPColl02.Item(LoopNum)) CATIA.StartCommand (\"Execute\") 'CATIA.ActiveDocument.Part.Update Next End Sub","title":"Kp"},{"location":"DS-CODE/VBA/MinimumBox/MinimumBox/","text":"\u5c11\u3057\u524d\u306bMinimumBox\u3067\u691c\u7d22\u3055\u308c\u305f\u65b9\u304c\u3044\u3089\u3063\u3057\u3083\u3063\u305f\u306e\u3067 ???\u7248\u3068\u3057\u3066\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002 \"Unofficial CATIA User Forum\" \u3067\u3053\u3053\u306a\u3055\u3093\u304c????????\u306e ?????\u3068\u3057\u3066Up\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3057\u3001\u78ba\u304by4yama\u3055\u3093\u304c???\u7248\u3068\u3057\u3066 Up\u3057\u3066\u3044\u307e\u3057\u305f\u3002(\u4e2d\u8eab\u306f\u898b\u306a\u304b\u3063\u305f\u3067\u3059???) \u6298\u89d2\u4f5c\u308b\u306e\u3067\u3042\u308c\u3070\u3001\"\u305d\u306e\u9803\u306e\u3082\u306e\u3068\u9055\u3044\u306e\u3042\u308b\u3082\u306e\u3092\" \u3068\u601d\u3044 ???? + ?????\u3067\u4f5c\u3089\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002 (\u3042\u306e\u9803\u306e\u3082\u306e\u306f\u6050\u3089\u304f\u3001????? + \u539a\u307f????? \u3060\u3068\u601d\u3044\u307e\u3059\u3002) \u51e6\u7406\u304c\u5927\u3057\u305f\u4e8b\u7121\u3044\u306e\u306b\u3001\u76f8\u5909\u308f\u3089\u305a\u5927\u3052\u3055\u306a????\u306f\u3053\u3061\u3089\u3067\u3059\u3002 'vba GetMinimumBox Option Explicit Private Const MacroName = \"GetMinimumBox\" Private Const DmyLng = 1000000# '????\u9762\u8ddd\u96e2 Private Enum MinMax '\u6e2c\u5b9a\u5024\u914d\u5217???????\u7528 MinX = 0 MaxX = 1 MinY = 2 MaxY = 3 MinZ = 4 MaxZ = 5 End Enum Sub CATMain() '\u521d\u671f\u8a2d\u5b9a '\u6e2c\u5b9a\u65b9\u5411\u7528?????\u3000???????\u306fEnum MinMax Dim Vec As Variant Vec = Array(Array(-1#, 0#, 0#), Array(1#, 0#, 0#), Array(0#, -1#, 0#), _ Array(0#, 1#, 0#), Array(0#, 0#, -1#), Array(0#, 0#, 1#)) Dim Msg$ 'PartDocument???? If Not TypeName(CATIA.ActiveDocument) = \"PartDocument\" Then Msg = \"Part????\u3092??????\u306b\u3057\u3066\u4e0b\u3055\u3044!\" MsgBox Msg, vbOKOnly + vbCritical, MacroName Exit Sub End If Dim Actdoc As PartDocument: Set Actdoc = CATIA.ActiveDocument '?????\u306e\u9078\u629e Dim SelFilter As Variant: SelFilter = Array(\"BiDim\") Dim TargetBody As AnyObject Msg = \"\u5bfe\u8c61\u306e?????\u3092\u9078\u629e\u3057\u3066\u4e0b\u3055\u3044 : [Esc]=?????\" Set TargetBody = SelectBody(Msg, SelFilter, Actdoc) If IsNothing(TargetBody) Then Msg = \"\u4e2d\u6b62\u3057\u307e\u3059\" MsgBox Msg, vbOKOnly + vbExclamation, MacroName Exit Sub End If '\u6307\u5b9a?????\u306e????\u3092\u53d6\u5f97 Dim WorkPart As Part: Set WorkPart = GetParent_Of_T(TargetBody, \"Part\") If IsNothing(WorkPart) Then Msg = \"\u6307\u5b9a?????\u304b\u3089????\u304c\u53d6\u5f97\u3067\u304d\u306a\u3044\u70ba\u3001\u4e2d\u6b62\u3057\u307e\u3059\" MsgBox Msg, vbOKOnly + vbCritical, MacroName Exit Sub End If '\u5ea7\u6a19\u7cfb\u9078\u629e SelFilter = Array(\"AxisSystem\") Dim Ax As AxisSystem Do Msg = \"\u53d6\u5f97\u3059\u308b\u65b9\u5411\u306e\u5ea7\u6a19\u7cfb\u3092\u9078\u629e\u3057\u3066\u4e0b\u3055\u3044\" + _ \"[Esc]=????? \u53c8\u306f \u7d76\u5bfe\u5ea7\u6a19\" Set Ax = SelectItem(Msg, SelFilter, Actdoc) If IsNothing(Ax) Then Msg = \"\u7d76\u5bfe\u5ea7\u6a19\u7cfb\u3067\u53d6\u5f97\u3057\u307e\u3059\u304b?\" + vbNewLine + _ \"\u300c\u306f\u3044\u300d- \u7d76\u5bfe\u5ea7\u6a19\" + vbNewLine + _ \"\u300c\u3044\u3044\u3048\u300d- ?????\" If MsgBox(Msg, vbYesNo + vbQuestion, MacroName) = vbNo Then Exit Sub Else Exit Do End If Else If WorkPart.Name = GetParent_Of_T(Ax, \"Part\").Name Then Exit Do Msg = \"\u6307\u5b9a?????\u3068\u540c\u4e00\u306e\u5ea7\u6a19\u7cfb\u3092\u9078\u629e\u3057\u3066\u4e0b\u3055\u3044!\" MsgBox Msg, vbOKOnly + vbExclamation, MacroName End If Loop '\u8ddd\u96e2\u6e2c\u5b9a Dim MaxLeng As Variant: MaxLeng = GetMaxSize_Body(WorkPart, TargetBody, Ax, Vec) '?????\u4f5c\u6210 Dim MinBody As Body: Set MinBody = WorkPart.Bodies.Add MinBody.Name = \"MinimumBox\" Call ChangeColor(MinBody) '???? Dim SupportRef As Reference If IsNothing(Ax) Then Set SupportRef = WorkPart.CreateReferenceFromGeometry(WorkPart.OriginElements.PlaneXY) Else Dim AxPlnRefs As Variant: AxPlnRefs = GetAxisPlaneRefs(Ax) Set SupportRef = AxPlnRefs(0) End If Dim Skt As Sketch: Set Skt = InitSketch(MinBody.Sketches, SupportRef, Ax) Call InitBox2D(Skt, MaxLeng) '????? Call InitPad(MinBody, Skt, MaxLeng) WorkPart.Update End Sub ' * PartDocument\u95a2\u9023 *** '\u5168\u65b9\u5411\u8ddd\u96e2\u53d6\u5f97-????? Private Function GetMaxSize_Body(ByVal Pt As Part, ByVal Body As AnyObject, _ ByVal Ax As AxisSystem, Vec As Variant) As Variant Dim AxRef As Reference If Not IsNothing(Ax) Then Set AxRef = Pt.CreateReferenceFromObject(Ax) End If Dim Max#(): ReDim Max(UBound(Vec)) Dim I& For I = 0 To UBound(Vec) Max(I) = (DmyLng - GetMaximumLength(Pt, Body, AxRef, Vec(I))) * IIf(I Mod 2 = 0, -1, 1) Next GetMaxSize_Body = Max End Function '\u8ddd\u96e2\u53d6\u5f97 Private Function GetMaximumLength#(ByVal Pt As Part, ByVal Body As AnyObject, _ ByVal AxRef As Reference, Vec As Variant) Dim Pln As HybridShapePlaneEquation Set Pln = CreatePlane(Pt, AxRef, Vec(0), Vec(1), Vec(2)) GetMaximumLength = Pt.Parent.GetWorkbench(\"SPAWorkbench\") _ .GetMeasurable(Pt.CreateReferenceFromObject(Body)) _ .GetMinimumDistance(Pt.CreateReferenceFromObject(Pln)) Call Pt.HybridShapeFactory.DeleteObjectForDatum(Pln) End Function '\u5e73\u9762\u4f5c\u6210 Private Function CreatePlane(ByVal Pt As Part, _ ByVal AxRef As Reference, _ ByVal A As Double, _ ByVal B As Double, _ ByVal C As Double) _ As HybridShapePlaneEquation Dim Fact As HybridShapeFactory: Set Fact = Pt.HybridShapeFactory Set CreatePlane = Fact.AddNewPlaneEquation(A, B, C, DmyLng) If Not AxRef Is Nothing Then CreatePlane.RefAxisSystem = AxRef End If Call Pt.UpdateObject(CreatePlane) Set Fact = Nothing End Function 'T\u578b\u306eParent\u53d6\u5f97 Name\u3067\u306e????\u3082\u5fc5\u8981 Private Function GetParent_Of_T(ByVal AnyOj As AnyObject, ByVal t$) As AnyObject If TypeName(AnyOj) = TypeName(AnyOj.Parent) And _ AnyOj.Name = AnyOj.Parent.Name Then Set GetParent_Of_T = Nothing Exit Function End If If TypeName(AnyOj) = t Then Set GetParent_Of_T = AnyOj Else Set GetParent_Of_T = GetParent_Of_T(AnyOj.Parent, t) End If End Function '?????\u9078\u629e Private Function SelectBody(ByVal SelMsg$, ByVal Filter As Variant, _ ByVal Doc As PartDocument) As AnyObject Dim SelItem As AnyObject, Msg$ Dim Pt As Part: Set Pt = Doc.Part Dim LeafBody As Body, LastFuture As AnyObject Do Set SelItem = SelectItem(SelMsg, Filter, Doc) If IsNothing(SelItem) Then Set SelectBody = SelItem: Exit Function '\u4e2d\u6b62 Set LeafBody = GetLeafBody(SelItem) If Not IsNothing(LeafBody) Then Set LastFuture = GetLastFuture(LeafBody, Pt) If LastFuture Is Nothing Then Msg = \"\u7a7a\u306e?????\u306f\u6e2c\u5b9a\u3067\u304d\u307e\u305b\u3093!\" MsgBox Msg, vbOKOnly + vbExclamation, MacroName Else Exit Do End If Msg = \"?????\u306e\u8981\u7d20\u3092\u9078\u629e\u3057\u3066\u4e0b\u3055\u3044!\" MsgBox Msg, vbOKOnly + vbExclamation, MacroName End If Loop Set SelectBody = LastFuture End Function '\u9078\u629e Private Function SelectItem(ByVal Msg$, ByVal Filter As Variant, _ ByVal Doc As Document) As AnyObject Dim Sel As Variant: Set Sel = Doc.Selection Sel.Clear Select Case Sel.SelectElement2(Filter, Msg, False) Case \"Cancel\", \"Undo\", \"Redo\" Set SelectItem = Nothing Exit Function End Select Set SelectItem = Sel.Item(1).Value Sel.Clear End Function 'Tree\u306b\u76f4\u63a5\u3076\u3089\u4e0b\u304c\u3063\u3066\u3044\u308b?????\u306e\u53d6\u5f97 Private Function GetLeafBody(AnyOj As AnyObject) As Body If TypeName(AnyOj) = TypeName(AnyOj.Parent) Then Set GetLeafBody = Nothing Exit Function End If If TypeName(AnyOj.Parent) = \"Bodies\" Then If AnyOj.InBooleanOperation Then Set GetLeafBody = GetLeafBody(AnyOj.Parent) Else Set GetLeafBody = AnyOj End If Else Set GetLeafBody = GetLeafBody(AnyOj.Parent) End If End Function 'Shapes\u304b\u3089\u6700\u5f8c\u306e\u6d3b\u52d5\u5316\u3055\u308c\u305f??????\u3092\u53d6\u5f97 Private Function GetLastFuture(ByVal Shs As Shapes, ByVal Pt As Part) As AnyObject Dim I As Long For I = Shs.Count To 1 Step -1 If Not IsEmpty(Shs.Item(I)) Then If False = Pt.IsInactive(Shs.Item(I)) Then '\u2190Not\u3058\u3083\u4e0a\u624b\u304f\u884c\u304b\u306a\u3044 Set GetLastFuture = Shs.Item(I) Exit Function End If End If Next End Function '\u5ea7\u6a19\u7cfb\u306e\u5404\u5e73\u9762\u306e??????\u306e\u53d6\u5f97 'Return : 0-XY,1-YZ,2-ZY \u306e?????? Private Function GetAxisPlaneRefs(ByVal Ax As AxisSystem) As Variant ' Reference() Dim Pt As Part: Set Pt = GetParent_Of_T(Ax, \"Part\") Dim PlaneRef(2) As Reference Dim I& For I = 0 To UBound(PlaneRef) Set PlaneRef(I) = Pt.CreateReferenceFromBRepName(GetAxisPlaneBrepName(Ax, I), Ax) Next GetAxisPlaneRefs = PlaneRef End Function '\u5ea7\u6a19\u7cfbBrepName\u306e\u53d6\u5f97 - InternalName\u7248 ' PlaneN0 : 0-XY,1-YZ,2-ZY\u306e\u4f55\u308c\u304b Private Function GetAxisPlaneBrepName$(ByVal Ax As AxisSystem, ByVal PlaneNo&) Dim IntName$: IntName = Ax.GetItem(\"ModelElement\").InternalName GetAxisPlaneBrepName = \"RSur:(Face:(Brp:(\" + IntName + \";\" + CStr(PlaneNo + 1) + \");None:();Cf11:());\" + _ \"WithPermanentBody;WithoutBuildError;WithSelectingFeatureSupport;MFBRepVersion_CXR15)\" End Function '\u5ea7\u6a19\u7cfb\u306e\u539f\u70b9XY?????\u53d6\u5f97 Private Function GetAxisOriVec(ByVal Ax As AxisSystem) As Variant Dim AxVri As Variant: Set AxVri = Ax Dim AryAxOri(2): Call AxVri.GetOrigin(AryAxOri) Dim AryAxXVec(2), AryAxYVec(2) Call AxVri.GetVectors(AryAxXVec, AryAxYVec) Dim Ary As Variant: Ary = Array_Join(AryAxOri, AryAxXVec) GetAxisOriVec = Array_Join(Ary, AryAxYVec) End Function '\u578b???? Private Function IsType_Of_T(ByVal AnyOj As AnyObject, ByVal t$) As Boolean IsType_Of_T = IIf(TypeName(AnyOj) = t, True, False) End Function ' * Sketch\u95a2\u9023 *** '????\u4f5c\u6210 Private Function InitSketch(ByVal Skts As Sketches, _ ByVal SupportRef As Reference, _ ByVal Ax As AxisSystem) As Sketch Dim Skt As Sketch: Set Skt = Skts.Add(SupportRef) Set InitSketch = Skt If IsNothing(Ax) Then Exit Function Dim AxVar As Variant: Set AxVar = Ax Dim Ori(2) As Variant: Call AxVar.GetOrigin(Ori) Dim VecX(2) As Variant, VecY(2) As Variant Call AxVar.GetVectors(VecX, VecY) Dim SettingAbsData As Variant SettingAbsData = Array_Join(Ori, VecX) SettingAbsData = Array_Join(SettingAbsData, VecY) Dim SktVar As Variant: Set SktVar = Skt Call SktVar.SetAbsoluteAxisData(SettingAbsData) End Function '\u56db\u89d2\u4f5c\u6210 Private Sub InitBox2D(ByVal Skt As Sketch, ByVal Poss As Variant) If Not UBound(Poss) = 5 Then Exit Sub Dim Fact2D As Factory2D: Set Fact2D = Skt.OpenEdition() Dim Pnt2D(3) As Point2D Set Pnt2D(0) = Fact2D.CreatePoint(Poss(MinMax.MinX), Poss(MinMax.MinY)) Set Pnt2D(1) = Fact2D.CreatePoint(Poss(MinMax.MinX), Poss(MinMax.MaxY)) Set Pnt2D(2) = Fact2D.CreatePoint(Poss(MinMax.MaxX), Poss(MinMax.MaxY)) Set Pnt2D(3) = Fact2D.CreatePoint(Poss(MinMax.MaxX), Poss(MinMax.MinY)) Dim Consts As Constraints: Set Consts = Skt.Constraints Call InitLine2D(Fact2D, Consts, Pnt2D(0), Pnt2D(1)) Call InitLine2D(Fact2D, Consts, Pnt2D(1), Pnt2D(2)) Call InitLine2D(Fact2D, Consts, Pnt2D(2), Pnt2D(3)) Call InitLine2D(Fact2D, Consts, Pnt2D(3), Pnt2D(0)) Skt.CloseEdition End Sub '\u7dda\u4f5c\u6210 - \u53ef\u80fd\u306a\u3089\u5782\u76f4\u6c34\u5e73\u62d8\u675f Private Sub InitLine2D(ByVal Fact2D As Factory2D, ByVal Csts As Constraints, _ ByVal PntSt As Point2D, ByVal PntEd As Point2D) Dim PntStVri As Variant: Set PntStVri = PntSt Dim PosSt(1) As Variant: Call PntStVri.GetCoordinates(PosSt) Dim PntEdVri As Variant: Set PntEdVri = PntEd Dim PosEd(1) As Variant: Call PntEdVri.GetCoordinates(PosEd) If Dist2D_Ary2Ary(PosSt, PosEd) < 0.001 Then Exit Sub Dim Line As Line2D Set Line = Fact2D.CreateLine(PosSt(0), PosSt(1), PosEd(0), PosEd(1)) With Line .StartPoint = PntSt .EndPoint = PntEd End With Dim Ax2D As Axis2D Set Ax2D = GetParent_Of_T(Csts, \"Sketch\").GeometricElements.Item(1) Select Case True Case Abs(PosSt(0) - PosEd(0)) < 0.001 Call InitConstraint(Csts, catCstTypeVerticality, Line, Ax2D.VerticalReference) '\u5f1f3,4\u9006NG Call InitConstraint(Csts, catCstTypeDistance, Ax2D.VerticalReference, Line, PosSt(0)) Case Abs(PosSt(1) - PosEd(1)) < 0.001 Call InitConstraint(Csts, catCstTypeHorizontality, Line, Ax2D.HorizontalReference) '\u5f1f3,4\u9006NG Call InitConstraint(Csts, catCstTypeDistance, Ax2D.HorizontalReference, Line, PosSt(1)) End Select End Sub '\u62d8\u675f Private Sub InitConstraint(ByVal Csts As Constraints, ByVal CstType As CatConstraintType, _ ByVal Itm1 As AnyObject, ByVal Itm2 As AnyObject, Optional ByVal Dist# = -1) Dim Pt As Part: Set Pt = GetParent_Of_T(Csts, \"Part\") Dim Cst As Constraint: Set Cst = Csts.AddBiEltCst(CstType, _ Pt.CreateReferenceFromObject(Itm1), _ Pt.CreateReferenceFromObject(Itm2)) Cst.ModE = catCstModeDrivingDimension If Dist < 0.001 Then Exit Sub 'IsMissing(Dist)???? Dim Leng As Length: Set Leng = Cst.Dimension Leng.Value = Dist End Sub ' * Body\u95a2\u9023 *** '????? Private Sub InitPad(ByVal Bdy As Body, ByVal Skt As Sketch, ByVal Poss As Variant) If Not UBound(Poss) = 5 Then Exit Sub Dim Pt As Part: Set Pt = GetParent_Of_T(Bdy, \"Part\") Dim Fact As ShapeFactory: Set Fact = Pt.ShapeFactory Dim Pad As Pad: Set Pad = Fact.AddNewPad(Skt, Poss(MinMax.MaxZ)) Pad.DirectionOrientation = catRegularOrientation Dim MinZ As Length: Set MinZ = Pad.SecondLimit.Dimension MinZ.Value = Poss(MinMax.MinZ) * -1 End Sub '\u8272\u7b49\u5909\u66f4 Private Sub ChangeColor(ByVal Itm As AnyObject) Dim Doc As PartDocument: Set Doc = GetParent_Of_T(Itm, \"PartDocument\") Dim Sel As Selection: Set Sel = Doc.Selection Sel.Clear Sel.Add Itm Dim Vis As VisPropertySet: Set Vis = Sel.VisProperties Call Vis.SetRealColor(128, 64, 64, 1) Call Vis.SetRealOpacity(128, 1) Call Vis.SetRealWidth(1, 1) Call Vis.SetRealLineType(4, 1) Sel.Clear End Sub ' * Array\u95a2\u9023 *** '\u8ddd\u96e2-\u914d\u5217\u540c\u58eb Private Function Dist2D_Ary2Ary(ByVal XY1 As Variant, ByVal XY2 As Variant) Dist2D_Ary2Ary = Sqr((XY2(0) - XY1(0)) * (XY2(0) - XY1(0)) + (XY2(1) - XY1(1)) * (XY2(1) - XY1(1))) End Function '\u914d\u5217\u306e\u5024\u304c\u4e00\u81f4\u3059\u308b\u304b? Private Function isArrayEqual(ByVal Ary1 As Variant, ByVal Ary2 As Variant) As Boolean isArrayEqual = False If Not IsArray(Ary1) Or Not IsArray(Ary2) Then Exit Function If Not UBound(Ary1) = UBound(Ary2) Then Exit Function Dim I& For I = 0 To UBound(Ary1) If Not Ary1(I) = Ary2(I) Then Exit Function Next isArrayEqual = True End Function '\u914d\u5217\u306e\u9023\u7d50 Private Function Array_Join(ByVal Ary1 As Variant, ByVal Ary2 As Variant) If Not IsArray(Ary1) Or Not IsArray(Ary2) Then Exit Function Dim StCount&: StCount = UBound(Ary1) ReDim Preserve Ary1(UBound(Ary1) + UBound(Ary2) + 1) Dim I& For I = StCount + 1 To UBound(Ary1) Ary1(I) = Ary2(I - StCount - 1) Next Array_Join = Ary1 End Function ' * \u305d\u306e\u4ed6 *** 'Nothing \u66f8\u304d\u65b9\u306b\u7d71\u4e00\u611f\u304c\u7121\u3044\u70ba Private Function IsNothing(ByVal OJ As Variant) As Boolean IsNothing = OJ Is Nothing End Function \u500b\u4eba\u7684\u306b\u306f\u3001\u6750\u6599\u53d6\u308a\u7528\u3068\u3057\u3066\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u51fa\u6765\u4e0a\u304c\u308a\u304c\u7aef\u6570\u306b \u306a\u3089\u306a\u3044\u3088\u3046\u306b\u51e6\u7406\u3057\u3088\u3046\u3068\u3082\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3084\u3084\u3053\u3057\u304f\u306a\u3063\u305f\u306e\u3067 \u6b62\u3081\u307e\u3057\u305f\u3002 (GetMaxSize_Body\u95a2\u6570\u3067\u53d6\u5f97\u3057\u305f\u6570\u5024\u3092\u3001\u4e0a\u624b\u304f\u5207\u308a\u4e0a\u3052\u51e6\u7406\u3059\u308c\u3070 \u53ef\u80fd\u3067\u3059) \u307e\u305f\u3001\u3053\u3061\u3089\u306e\u65b9\u6cd5\u3092\u6d41\u7528\u3059\u308c\u3070","title":"MinimumBox"},{"location":"DS-CODE/VBA/%E3%83%87%E3%82%A3%E3%83%86%E3%83%BC%E3%83%AB%E3%82%B7%E3%83%BC%E3%83%88%E3%81%AE%E6%9C%AA%E4%BD%BF%E7%94%A8%E3%81%AE%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E5%89%8A%E9%99%A4/%E3%83%87%E3%82%A3%E3%83%86%E3%83%BC%E3%83%AB%E3%82%B7%E3%83%BC%E3%83%88%E3%81%AE%E6%9C%AA%E4%BD%BF%E7%94%A8%E3%81%AE%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E5%89%8A%E9%99%A4/","text":"\u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306e\u672a\u4f7f\u7528\u306e\u30d3\u30e5\u30fc\u3092\u524a\u9664 CATIA_V5VBAKCL \u56f3\u9762\u3092\u4f5c\u6210\u3059\u308b\u969b\u3001\u9762\u5012\u306a\u306e\u3067\u65b0\u898f\u306eDraw\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u3067\u306f\u7121\u304f\u3066 \u4ed6\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6d41\u7528\u3057\u3066\u4f5c\u308a\u307e\u3059\u3088\u306d\uff1f\uff08\u30fb\u30fb\u30fb\u9055\u3046\u304b\u306a\uff09 \u6700\u5927\u306e\u7406\u7531\u306f\u30ab\u30bf\u30ed\u30b0\u304b\u3089\u547c\u3073\u51fa\u3057\u305f\u969b\u3001\u5206\u96e2\u3057\u3066\u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306b \u6b8b\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u518d\u5ea6\u540c\u3058\u3082\u306e\u3092\u30ab\u30bf\u30ed\u30b0\u304b\u3089\u547c\u3073\u51fa\u3059\u306e\u304c\u9762\u5012\u3060\u304b\u3089\u3067\u3059\u3002 \u5dee\u3057\u66ff\u3048\u304c\u4e0a\u624b\u304f\u3044\u3051\u3070\u554f\u984c\u7121\u3044\u3067\u3059\u3057\u3001UUID\u9055\u3044\u3082\u3053\u3061\u3089\u306e\u30de\u30af\u30ed\u3067 \u305d\u308c\u306a\u308a\u306e\u4e8b\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u7570\u306a\u308bUUID\u306eDraw\u53c2\u7167\u5143\u30d5\u30a1\u30a4\u30eb\u3092\u5dee\u3057\u66ff\u3048\u308b3 - C#ATIA \uff08\u77e5\u308a\u5408\u3044\u306e\u65b9\u304b\u3089\u3001\u65b0\u898f\u306b\u4f5c\u6210\u3057\u305f\u65b9\u304c\u65e9\u3044\u3093\u3058\u3083\u306a\u3044\uff1f\u3000\u3068 \u30a2\u30c9\u30d0\u30a4\u30b9\u3092\u9802\u304d\u307e\u3057\u305f\u3002\u3000\u30fb\u30fb\u30fb\u78ba\u304b\u306b\u305d\u3046\u3067\u3059\u3002\uff09 \u30d3\u30e5\u30fc\u306e\u539f\u70b9\u3082\uff08\uff72\uff9b\uff72\uff9b\u554f\u984c\u306f\u6709\u308a\u307e\u3059\u304c\uff09\u3053\u3061\u3089\u3067\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 Draw\uff8b\uff9e\uff6d\uff70\u306e\u539f\u70b9\u3092\u5909\u66f4\u3059\u308b1 - C#ATIA \u3053\u3093\u306a\u611f\u3058\u3067\u6d41\u7528\u3057\u3066\u3044\u308b\u3068\u3001\u3064\u307e\u3089\u306a\u3044\u610f\u5730\u3068\u8a00\u3044\u307e\u3059\u304b\u3001\u898b\u6804\u3068\u8a00\u3044\u307e\u3059\u304b \u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306b\u672a\u4f7f\u7528\u306e\u30d3\u30e5\u30fc\u304c\u5e7e\u3064\u304b\u6b8b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u5acc\u306a\u3093\u3067\u3059\u3002 \u4f7f\u7528\u3057\u3066\u3044\u308b\u7269\u3092\u524a\u9664\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u8b66\u544a\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u624b\u52d5\u3067\u3082\u51fa\u6765\u306a\u3044 \u3053\u3068\u306f\u7121\u3044\u306e\u3067\u3059\u304c\u3001\u3001\u3001\u9762\u5012\u306a\u3093\u3067\u3059\u3002 \u305d\u3053\u3067Draw\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u30012D\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044 \u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306e\u30d3\u30e5\u30fc\u3092\u524a\u9664\u3059\u308b\u30de\u30af\u30ed\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002 'vba DetailSheetCleaner_ver0.0.1 using-'KCL0.0.13' by Kantoku Option Explicit Sub CATMain() Dim msg As String '\uff84\uff9e\uff77\uff6d\uff92\uff9d\uff84\u306e\uff81\uff6a\uff6f\uff78 If Not CanExecute(Array(\"DrawingDocument\")) Then Exit Sub Dim doc As DrawingDocument Set doc = CATIA.ActiveDocument '\uff83\uff9e\uff68\uff83\uff70\uff99\uff7c\uff70\uff84 Dim dets As Collection Set dets = GetDetailSheet(doc) If dets.Count < 1 Then MsgBox \"\uff83\uff9e\uff68\uff83\uff70\uff99\uff7c\uff70\uff84\u304c\u6709\u308a\u307e\u305b\u3093!\" Exit Sub End If '\u5168\uff7a\uff9d\uff8e\uff9f\uff70\uff88\uff9d\uff84 \u7a7a\u306e\u53ef\u80fd\u6027\u3082\u6709\u308a Dim cmps As Collection Set cmps = GetComps(doc.Sheets) '\uff83\uff9e\uff68\uff83\uff70\uff99\uff7c\uff70\uff84\uff8b\uff9e\uff6d\uff70\u8f9e\u66f8 Dim compDic As Object Set compDic = InitDetailDic(dets) '\u672a\u4f7f\u7528\uff83\uff9e\uff68\uff83\uff70\uff99\uff7c\uff70\uff84\uff8b\uff9e\uff6d\uff70 Dim UnuseComps As Collection Set UnuseComps = GetUnuseCompsList(compDic, cmps) If UnuseComps.Count < 1 Then MsgBox \"\u524a\u9664\u5bfe\u8c61\u306e\uff8b\uff9e\uff6d\uff70\u304c\u6709\u308a\u307e\u305b\u3093!\" Exit Sub End If '\u78ba\u8a8d msg = UnuseComps.Count & _ \"\u500b\u306e\u672a\u4f7f\u7528\uff83\uff9e\uff68\uff83\uff70\uff99\uff7c\uff70\uff84\u306e\uff8b\uff9e\uff6d\uff70\u304c\u6709\u308a\u307e\u3059\u3002\" & vbCrLf & _ \"\u5168\u3066\u524a\u9664\u3057\u307e\u3059\u304b?\" If MsgBox(msg, vbQuestion + vbYesNo) = vbNo Then Exit Sub End If '\u524a\u9664 Call RemoveComps(UnuseComps) MsgBox \"Done\" End Sub Private Sub RemoveComps( _ ByVal lst As Collection) Dim sel As selection Set sel = CATIA.ActiveDocument.selection CATIA.HSOSynchronized = False Dim vi As DrawingView With sel .Clear For Each vi In lst .Add vi Next .Delete End With CATIA.HSOSynchronized = True End Sub Private Function GetComps( _ ByVal shts As DrawingSheets) As Collection Dim cmps As Collection Set cmps = New Collection Dim st As DrawingSheet Dim vi As DrawingView Dim i As Long For Each st In shts For Each vi In st.views For i = 1 To vi.Components.Count cmps.Add vi.Components.Item(i) Next Next Next Set GetComps = cmps End Function Private Function GetUnuseCompsList( _ ByVal compDic As Object, ByVal cmps As Collection) _ As Collection Dim cmp As DrawingComponent Dim key As String For Each cmp In cmps key = GetKeyString(cmp.CompRef) If compDic.Exists(key) Then compDic(key) = Array(True, compDic(key)(1)) End If Next Dim lst As Collection Set lst = New Collection Dim ary As Variant For Each ary In compDic.Items If ary(0) = False Then lst.Add ary(1) End If Next Set GetUnuseCompsList = lst End Function Private Function GetKeyString( _ ByVal vi As DrawingView) As String GetKeyString = vi.Parent.Parent.Name & \"@\" & _ KCL.GetInternalName(vi) End Function Private Function InitDetailDic( _ ByVal dets As Collection) As Object Dim dic As Object Set dic = KCL.InitDic() Dim st As DrawingSheet Dim i As Long Dim vi As DrawingView For Each st In dets For i = 3 To st.views.Count Set vi = st.views.Item(i) dic.Add GetKeyString(vi), Array(False, vi) Next Next Set InitDetailDic = dic End Function Private Function GetDetailSheet( _ ByVal doc As DrawingDocument) As Collection Dim dets As Collection Set dets = New Collection Dim st As DrawingSheet For Each st In doc.Sheets If st.IsDetail Then dets.Add st End If Next Set GetDetailSheet = dets End Function \u8a00\u8449\u3060\u3051\u3067\u306f\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002 \u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306b\u300cmaru\u300d\u3068\u300cshikaku\u300d\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 f:id:kandennti:20190410172837p:plain \u3048\u3047\u30cd\u30fc\u30df\u30f3\u30b0\u30bb\u30f3\u30b90\u3067\u3059\u3002 \u30b7\u30fc\u30c8\u3067\u300cmaru\u300d\u3060\u3051\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3066\u8cbc\u308a\u4ed8\u3051\u307e\u3059\u3002 f:id:kandennti:20190410172850p:plain \u3053\u306e\u72b6\u614b\u3067\u30de\u30af\u30ed\u3092\u5b9f\u884c\u3059\u308b\u3068 f:id:kandennti:20190410172901p:plain \u300cshikaku\u300d\u306f\u672a\u4f7f\u7528\u306a\u306e\u3067\u524a\u9664\u3057\u307e\u3059\u3002","title":"\u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306e\u672a\u4f7f\u7528\u306e\u30d3\u30e5\u30fc\u3092\u524a\u9664"},{"location":"DS-CODE/VBA/%E3%83%87%E3%82%A3%E3%83%86%E3%83%BC%E3%83%AB%E3%82%B7%E3%83%BC%E3%83%88%E3%81%AE%E6%9C%AA%E4%BD%BF%E7%94%A8%E3%81%AE%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E5%89%8A%E9%99%A4/%E3%83%87%E3%82%A3%E3%83%86%E3%83%BC%E3%83%AB%E3%82%B7%E3%83%BC%E3%83%88%E3%81%AE%E6%9C%AA%E4%BD%BF%E7%94%A8%E3%81%AE%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E5%89%8A%E9%99%A4/#_1","text":"CATIA_V5VBAKCL \u56f3\u9762\u3092\u4f5c\u6210\u3059\u308b\u969b\u3001\u9762\u5012\u306a\u306e\u3067\u65b0\u898f\u306eDraw\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u3067\u306f\u7121\u304f\u3066 \u4ed6\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6d41\u7528\u3057\u3066\u4f5c\u308a\u307e\u3059\u3088\u306d\uff1f\uff08\u30fb\u30fb\u30fb\u9055\u3046\u304b\u306a\uff09 \u6700\u5927\u306e\u7406\u7531\u306f\u30ab\u30bf\u30ed\u30b0\u304b\u3089\u547c\u3073\u51fa\u3057\u305f\u969b\u3001\u5206\u96e2\u3057\u3066\u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306b \u6b8b\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u518d\u5ea6\u540c\u3058\u3082\u306e\u3092\u30ab\u30bf\u30ed\u30b0\u304b\u3089\u547c\u3073\u51fa\u3059\u306e\u304c\u9762\u5012\u3060\u304b\u3089\u3067\u3059\u3002 \u5dee\u3057\u66ff\u3048\u304c\u4e0a\u624b\u304f\u3044\u3051\u3070\u554f\u984c\u7121\u3044\u3067\u3059\u3057\u3001UUID\u9055\u3044\u3082\u3053\u3061\u3089\u306e\u30de\u30af\u30ed\u3067 \u305d\u308c\u306a\u308a\u306e\u4e8b\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u7570\u306a\u308bUUID\u306eDraw\u53c2\u7167\u5143\u30d5\u30a1\u30a4\u30eb\u3092\u5dee\u3057\u66ff\u3048\u308b3 - C#ATIA \uff08\u77e5\u308a\u5408\u3044\u306e\u65b9\u304b\u3089\u3001\u65b0\u898f\u306b\u4f5c\u6210\u3057\u305f\u65b9\u304c\u65e9\u3044\u3093\u3058\u3083\u306a\u3044\uff1f\u3000\u3068 \u30a2\u30c9\u30d0\u30a4\u30b9\u3092\u9802\u304d\u307e\u3057\u305f\u3002\u3000\u30fb\u30fb\u30fb\u78ba\u304b\u306b\u305d\u3046\u3067\u3059\u3002\uff09 \u30d3\u30e5\u30fc\u306e\u539f\u70b9\u3082\uff08\uff72\uff9b\uff72\uff9b\u554f\u984c\u306f\u6709\u308a\u307e\u3059\u304c\uff09\u3053\u3061\u3089\u3067\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 Draw\uff8b\uff9e\uff6d\uff70\u306e\u539f\u70b9\u3092\u5909\u66f4\u3059\u308b1 - C#ATIA \u3053\u3093\u306a\u611f\u3058\u3067\u6d41\u7528\u3057\u3066\u3044\u308b\u3068\u3001\u3064\u307e\u3089\u306a\u3044\u610f\u5730\u3068\u8a00\u3044\u307e\u3059\u304b\u3001\u898b\u6804\u3068\u8a00\u3044\u307e\u3059\u304b \u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306b\u672a\u4f7f\u7528\u306e\u30d3\u30e5\u30fc\u304c\u5e7e\u3064\u304b\u6b8b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u5acc\u306a\u3093\u3067\u3059\u3002 \u4f7f\u7528\u3057\u3066\u3044\u308b\u7269\u3092\u524a\u9664\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u8b66\u544a\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u624b\u52d5\u3067\u3082\u51fa\u6765\u306a\u3044 \u3053\u3068\u306f\u7121\u3044\u306e\u3067\u3059\u304c\u3001\u3001\u3001\u9762\u5012\u306a\u3093\u3067\u3059\u3002 \u305d\u3053\u3067Draw\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u30012D\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044 \u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306e\u30d3\u30e5\u30fc\u3092\u524a\u9664\u3059\u308b\u30de\u30af\u30ed\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002 'vba DetailSheetCleaner_ver0.0.1 using-'KCL0.0.13' by Kantoku Option Explicit Sub CATMain() Dim msg As String '\uff84\uff9e\uff77\uff6d\uff92\uff9d\uff84\u306e\uff81\uff6a\uff6f\uff78 If Not CanExecute(Array(\"DrawingDocument\")) Then Exit Sub Dim doc As DrawingDocument Set doc = CATIA.ActiveDocument '\uff83\uff9e\uff68\uff83\uff70\uff99\uff7c\uff70\uff84 Dim dets As Collection Set dets = GetDetailSheet(doc) If dets.Count < 1 Then MsgBox \"\uff83\uff9e\uff68\uff83\uff70\uff99\uff7c\uff70\uff84\u304c\u6709\u308a\u307e\u305b\u3093!\" Exit Sub End If '\u5168\uff7a\uff9d\uff8e\uff9f\uff70\uff88\uff9d\uff84 \u7a7a\u306e\u53ef\u80fd\u6027\u3082\u6709\u308a Dim cmps As Collection Set cmps = GetComps(doc.Sheets) '\uff83\uff9e\uff68\uff83\uff70\uff99\uff7c\uff70\uff84\uff8b\uff9e\uff6d\uff70\u8f9e\u66f8 Dim compDic As Object Set compDic = InitDetailDic(dets) '\u672a\u4f7f\u7528\uff83\uff9e\uff68\uff83\uff70\uff99\uff7c\uff70\uff84\uff8b\uff9e\uff6d\uff70 Dim UnuseComps As Collection Set UnuseComps = GetUnuseCompsList(compDic, cmps) If UnuseComps.Count < 1 Then MsgBox \"\u524a\u9664\u5bfe\u8c61\u306e\uff8b\uff9e\uff6d\uff70\u304c\u6709\u308a\u307e\u305b\u3093!\" Exit Sub End If '\u78ba\u8a8d msg = UnuseComps.Count & _ \"\u500b\u306e\u672a\u4f7f\u7528\uff83\uff9e\uff68\uff83\uff70\uff99\uff7c\uff70\uff84\u306e\uff8b\uff9e\uff6d\uff70\u304c\u6709\u308a\u307e\u3059\u3002\" & vbCrLf & _ \"\u5168\u3066\u524a\u9664\u3057\u307e\u3059\u304b?\" If MsgBox(msg, vbQuestion + vbYesNo) = vbNo Then Exit Sub End If '\u524a\u9664 Call RemoveComps(UnuseComps) MsgBox \"Done\" End Sub Private Sub RemoveComps( _ ByVal lst As Collection) Dim sel As selection Set sel = CATIA.ActiveDocument.selection CATIA.HSOSynchronized = False Dim vi As DrawingView With sel .Clear For Each vi In lst .Add vi Next .Delete End With CATIA.HSOSynchronized = True End Sub Private Function GetComps( _ ByVal shts As DrawingSheets) As Collection Dim cmps As Collection Set cmps = New Collection Dim st As DrawingSheet Dim vi As DrawingView Dim i As Long For Each st In shts For Each vi In st.views For i = 1 To vi.Components.Count cmps.Add vi.Components.Item(i) Next Next Next Set GetComps = cmps End Function Private Function GetUnuseCompsList( _ ByVal compDic As Object, ByVal cmps As Collection) _ As Collection Dim cmp As DrawingComponent Dim key As String For Each cmp In cmps key = GetKeyString(cmp.CompRef) If compDic.Exists(key) Then compDic(key) = Array(True, compDic(key)(1)) End If Next Dim lst As Collection Set lst = New Collection Dim ary As Variant For Each ary In compDic.Items If ary(0) = False Then lst.Add ary(1) End If Next Set GetUnuseCompsList = lst End Function Private Function GetKeyString( _ ByVal vi As DrawingView) As String GetKeyString = vi.Parent.Parent.Name & \"@\" & _ KCL.GetInternalName(vi) End Function Private Function InitDetailDic( _ ByVal dets As Collection) As Object Dim dic As Object Set dic = KCL.InitDic() Dim st As DrawingSheet Dim i As Long Dim vi As DrawingView For Each st In dets For i = 3 To st.views.Count Set vi = st.views.Item(i) dic.Add GetKeyString(vi), Array(False, vi) Next Next Set InitDetailDic = dic End Function Private Function GetDetailSheet( _ ByVal doc As DrawingDocument) As Collection Dim dets As Collection Set dets = New Collection Dim st As DrawingSheet For Each st In doc.Sheets If st.IsDetail Then dets.Add st End If Next Set GetDetailSheet = dets End Function \u8a00\u8449\u3060\u3051\u3067\u306f\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002 \u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306b\u300cmaru\u300d\u3068\u300cshikaku\u300d\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 f:id:kandennti:20190410172837p:plain \u3048\u3047\u30cd\u30fc\u30df\u30f3\u30b0\u30bb\u30f3\u30b90\u3067\u3059\u3002 \u30b7\u30fc\u30c8\u3067\u300cmaru\u300d\u3060\u3051\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3066\u8cbc\u308a\u4ed8\u3051\u307e\u3059\u3002 f:id:kandennti:20190410172850p:plain \u3053\u306e\u72b6\u614b\u3067\u30de\u30af\u30ed\u3092\u5b9f\u884c\u3059\u308b\u3068 f:id:kandennti:20190410172901p:plain \u300cshikaku\u300d\u306f\u672a\u4f7f\u7528\u306a\u306e\u3067\u524a\u9664\u3057\u307e\u3059\u3002","title":"\u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306e\u672a\u4f7f\u7528\u306e\u30d3\u30e5\u30fc\u3092\u524a\u9664"},{"location":"DS-CODE/VBA/%E5%90%8C%E4%B8%80UUID%E3%81%AEDraw%E5%8F%82%E7%85%A7%E5%85%83%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%B7%AE%E3%81%97%E6%9B%BF%E3%81%88%E3%82%8B3/%E5%90%8C%E4%B8%80UUID%E3%81%AEDraw%E5%8F%82%E7%85%A7%E5%85%83%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%B7%AE%E3%81%97%E6%9B%BF%E3%81%88%E3%82%8B3/","text":"\u3053\u3061\u3089\u306e\u7d9a\u304d\u3067\u3059\u3002 \u540c\u4e00UUID\u306eDraw\u53c2\u7167\u5143\u30d5\u30a1\u30a4\u30eb\u3092\u5dee\u3057\u66ff\u3048\u308b3 - C#ATIA \u307e\u3060\u3061\u3087\u3063\u3068\u4e0d\u5b89\u5b9a\u306a\u6c17\u3082\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u624b\u5143\u306e\u30c7\u30fc\u30bf\u3067\u306f \u4e0a\u624b\u304f\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u516c\u958b\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u5148\u65e5\u306e\u7d44\u5408\u305b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307e\u305b\u3001Part\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u4e00\u540d\u306e Drawing\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 'vba ReplaceDrawLink ver0.0.3 using-'KCL0.0.12' by Kantoku '\uff8d\uff9e\uff70\uff7d\u3068\u306a\u308b\uff8c\uff67\uff72\uff99\u540d\u306fCATPart\u3068CATDrawing\u3067\u4e00\u81f4\u3057\u3066\u3044\u308b\u4e8b\u304c\u524d\u63d0 'UUID\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u4e8b\u524d\u63d0\u3067\u3059\uff08\u9055\u3046\u3068\u7f6e\u63db\u3055\u308c\u306a\u3044\u3067\u3059\uff09 'ver0.0.1:\u5b8c\u6210(\uff83\uff7d\uff84\uff7a\uff70\uff84\uff9e) 'ver0.0.2:\uff8a\uff9e\uff6f\uff81\u51e6\u7406\u3067\u8907\u6570\u5909\u63db\u5bfe\u5fdc 'ver0.0.3:Update\u6539\u5584(LockView\u306b\u3088\u308b\uff8f\uff78\uff9b\u505c\u6b62) ' \uff80\uff70\uff79\uff9e\uff6f\uff84Part\uff8c\uff67\uff72\uff99\u4e00\u6642\u7684\u306b\uff8a\uff9e\uff6f\uff78\uff71\uff6f\uff8c\uff9f Option Explicit '*********** Private Const EXP_EXTENSION = \"comb\" Private Const SelectionType = \"*.\" & EXP_EXTENSION Private Const BAT_CATVBS = \"ReplaceDrawLinkBat.catvbs\" Private Const BAT_SCRIPT = \"ReplaceDrawLink\" '\u91cd\u8981!\uff93\uff7c\uff9e\uff6d\uff70\uff99\u540d Private Const BAT_FUNCTION = \"ExecReplaceLink\" '\u91cd\u8981!\uff8a\uff9e\uff6f\uff81\uff93\uff70\uff84\uff9e\u306e\uff74\uff9d\uff84\uff98\uff70\uff8e\uff9f\uff72\uff9d\uff84\u95a2\u6570\u540d Private\u306fNG Private Const EVACUATION_NAME = \"EVAC\" Private Const DELIMTER = \"@\" Private Const DELIMTER_COMB = \"|\" Private Const DEBUGMODE = False Sub CATMain() '\uff98\uff9d\uff78\u4fee\u6b63\uff98\uff7d\uff84\uff8c\uff67\uff72\uff99\u9078\u629e Dim msg As String msg = \"Draw\uff98\uff9d\uff78\u3092\u4fee\u6b63\u3059\u308b\u70ba\u306e\uff98\uff7d\uff84\uff8c\uff67\uff72\uff99(\" & EXP_EXTENSION & \")\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\" Dim lst_path As String lst_path = CATIA.FileSelectionBox( _ msg, _ SelectionType, _ CatFileSelectionModeOpen) If lst_path = vbNullString Then Exit Sub '\uff98\uff9d\uff78\u4fee\u6b63\uff98\uff7d\uff84\uff8c\uff67\uff72\uff99\u8aad\u307f\u8fbc\u307f Dim paths As Variant paths = KCL.ReadFile(lst_path) '\u78ba\u8a8d msg = UBound(paths) + 1 & \"\u500b\u306e\uff8a\uff9e\uff6f\uff81\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\u5b9c\u3057\u3044\u3067\u3059\u304b?\" If MsgBox(msg, vbYesNo + vbQuestion) = vbNo Then Exit Sub End If 'catia\u306e\u5b9f\u884c\uff8c\uff67\uff72\uff99\uff8a\uff9f\uff7d\u53d6\u5f97 Dim catPathtmp As Variant catPathtmp = Split(CATIA.SystemService.Environ(\"CATDLLPath\"), \";\") Dim catPath As String catPath = catPathtmp(0) '\u74b0\u5883\uff8c\uff67\uff72\uff99\uff8a\uff9f\uff7d\u53d6\u5f97 Dim environmentPath As Variant environmentPath = SplitPathName(CATIA.SystemService.Environ(\"CATEnvName\")) 'CATTemp\uff8a\uff9f\uff7d\u53d6\u5f97 Dim catTmp As Variant catTmp = CATIA.SystemService.Environ(\"CATTemp\") '\uff8a\uff9e\uff6f\uff81\u7528catvbs Dim macroPath As String macroPath = catTmp & \"\\\" & BAT_CATVBS Dim code As String code = GetCatvbsCode(Join(paths, DELIMTER), macroPath) KCL.WriteFile macroPath, code '\uff8a\uff9e\uff6f\uff81\uff7a\uff8f\uff9d\uff84\uff9e Dim cmd As String cmd = catPath & \"\\CNEXT.exe -direnv \" & _ environmentPath(0) & \" -env \" & _ environmentPath(1) & \" -batch -macro \" & _ Chr(34) & macroPath & Chr(34) '\uff8a\uff9e\uff6f\uff81\uff7d\uff80\uff70\uff84 Call CreateObject(\"Wscript.Shell\").exec(cmd) MsgBox \"\uff8a\uff9e\uff6f\uff81\u51e6\u7406\u3092\uff7d\uff80\uff70\uff84\u3057\u307e\u3057\u305f\" End Sub '******* \uff8a\uff9e\uff6f\uff81\u51e6\u7406\u524d ********* '\uff8a\uff9e\uff6f\uff81\u7528\uff7d\uff8c\uff9f\uff98\uff78\uff84\uff7f\uff70\uff7d Private Function GetCatvbsCode( _ ByVal path As String, _ ByVal me_path As String) As String 'VBProject\uff8a\uff9f\uff7d\u53d6\u5f97 Dim apc As Object Set apc = GetApc() Dim execPjt As Object Set execPjt = apc.ExecutingProject Dim pjtPath As String pjtPath = execPjt.DisplayName Dim code As String code = _ \"Set SS = CATIA.SystemService\" & vbCrLf & _ \"VBAProjectPath = \" & Chr(34) & CStr(pjtPath) & Chr(34) & vbCrLf & _ \"LibraryType = catScriptLibraryTypeVBAProject\" & vbCrLf & _ \"ScriptName = \" & Chr(34) & BAT_SCRIPT & Chr(34) & vbCrLf & _ \"FunctionName = \" & Chr(34) & BAT_FUNCTION & Chr(34) & vbCrLf & _ \"Dim Params(0)\" & vbCrLf & _ \"Params(0) = \" & Chr(34) & path & Chr(34) & vbCrLf & _ \"Call SS.ExecuteScript(VBAProjectPath, LibraryType, ScriptName, FunctionName, Params)\" & vbCrLf If Not DEBUGMODE Then code = code & _ \"CreateObject(\" & Chr(34) & \"Scripting.FileSystemObject\" & Chr(34) & \").DeleteFile(\" & _ Chr(34) & me_path & Chr(34) & \")\" & vbCrLf End If code = code & _ \"CreateObject(\" & Chr(34) & \"WScript.Shell\" & Chr(34) & \").Popup \" & Chr(34) & \"Done\" & _ Chr(34) & \", 0 , \" & Chr(34) & \"ReplaceDrawLink\" & Chr(34) & \" , 0\" GetCatvbsCode = code End Function '\uff8a\uff9f\uff7d\u3068\uff8c\uff67\uff72\uff99\u540d\u5206\u5272 'Return: 0-Path 1-BaseName Private Function SplitPathName(ByVal FullPath) As Variant Dim path(1) As String With CreateObject(\"Scripting.FileSystemObject\") path(0) = .GetParentFolderName(FullPath) path(1) = .GetBaseName(FullPath) End With SplitPathName = path End Function 'Apc\u53d6\u5f97 Private Function GetApc() As Object Set GetApc = Nothing 'VBA\uff8a\uff9e\uff70\uff7c\uff9e\uff6e\uff9d\uff81\uff6a\uff6f\uff78 Dim COMObjectName$ #If VBA7 Then COMObjectName = \"MSAPC.Apc.7.1\" #ElseIf VBA6 Then COMObjectName = \"MSAPC.Apc.6.2\" #Else MsgBox \"VBA\u306e\uff8a\uff9e\uff70\uff7c\uff9e\uff6e\uff9d\u304c\u672a\u5bfe\u5fdc\u3067\u3059\" Exit Function #End If 'APC\u53d6\u5f97 Dim apc As Object: Set apc = Nothing On Error Resume Next Set apc = CreateObject(COMObjectName) On Error GoTo 0 If apc Is Nothing Then MsgBox \"MSAPC.Apc\u304c\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\" Exit Function End If Set GetApc = apc End Function '******* \uff8a\uff9e\uff6f\uff81\u51e6\u7406\u7528 ********* '\u5dee\u3057\u66ff\u3048\u51e6\u7406 Sub ExecReplaceLink(ByVal all_path As String) Dim paths As Variant paths = Split(all_path, DELIMTER) Dim i As Long Dim path As Variant For i = 0 To UBound(paths) path = Split(paths(i), DELIMTER_COMB) If UBound(path) < 1 Then GoTo continue If IsExistsFiles(path) Then Call ReplaceLink(path(0), path(1)) End If continue: Next If Not DEBUGMODE Then CATIA.Quit End If End Sub '\u5dee\u3057\u66ff\u3048\u305fDraw\uff8c\uff67\uff72\uff99\u4f5c\u6210 Private Sub ReplaceLink( _ ByVal tgtPartPath As String, _ ByVal refDrawPath As String) '\u907f\u96e3\u5148\uff8c\uff6b\uff99\uff80\uff9e Dim evac As String evac = GetEvacuationPath(refDrawPath) 'refPart\u306e\u907f\u96e3 Dim refPartAry As Variant refPartAry = KCL.SplitPathName(refDrawPath) refPartAry(2) = \"CATPart\" Dim refPart As String refPart = refPartAry(0) & \"\\\" & _ refPartAry(1) & \".\" & _ refPartAry(2) Dim fso As Object Set fso = KCL.GetFSO() If KCL.IsExists(refPart) Then fso.MoveFile refPart, evac & \"\\\" refPart = evac & \"\\\" & _ refPartAry(1) & \".\" & _ refPartAry(2) Else refPart = vbNullString End If 'tgtPart\u306e\uff8a\uff9e\uff6f\uff78\uff71\uff6f\uff8c\uff9f Dim tgtBackup As String tgtBackup = tgtPartPath & \".backup\" fso.CopyFile tgtPartPath, tgtBackup 'tgtPart\u306e\uff98\uff88\uff70\uff91 Dim tgtPartAry As Variant tgtPartAry = KCL.SplitPathName(tgtPartPath) Dim tmpPart As String tmpPart = refPartAry(1) & \".\" & _ tgtPartAry(2) fso.GetFile(tgtPartPath).name = tmpPart tmpPart = tgtPartAry(0) & \"\\\" & _ tmpPart 'tgt(tmp)Part\u306e\uff75\uff70\uff8c\uff9f\uff9d Dim tgtDoc As PartDocument Set tgtDoc = CATIA.Documents.Open(tmpPart) 'refDraw\u306e\uff75\uff70\uff8c\uff9f\uff9d Dim refDoc As DrawingDocument Set refDoc = CATIA.Documents.Open(refDrawPath) 'refDraw\u306eUpdate Call UpdateUnlockViews(refDoc) 'SaveAs Call SaveAs(tgtDoc, tgtPartPath) Dim tgtDraw As String tgtDraw = tgtPartAry(0) & \"\\\" & _ tgtPartAry(1) & \".CATDrawing\" Call SaveAs(refDoc, tgtDraw) 'tgtPart\u306e\uff8a\uff9e\uff6f\uff78\uff71\uff6f\uff8c\uff9f\u524a\u9664 fso.DeleteFile tgtBackup 'refPart\u623b\u3057 If Not refPart = vbNullString Then fso.MoveFile refPart, refPartAry(0) & \"\\\" End If '\u907f\u96e3\u5148\uff8c\uff6b\uff99\uff80\uff9e\u524a\u9664 fso.DeleteFolder evac '\uff98\uff88\uff70\uff91\uff8c\uff67\uff72\uff99\u524a\u9664 fso.DeleteFile tmpPart '\uff8c\uff67\uff72\uff99\u3092\u9589\u3058\u308b tgtDoc.Close refDoc.Close End Sub '\uff9b\uff6f\uff78\u3057\u3066\u3044\u306a\u3044\uff98\uff9d\uff78\u4ed8\u304d\uff8b\uff9e\uff6d\uff70\u306e\u66f4\u65b0 Private Sub UpdateUnlockViews( _ ByVal doc As DrawingDocument) Dim sht As DrawingSheet Dim v As DrawingView For Each sht In doc.Sheets If sht.IsDetail Then GoTo continue_sheet For Each v In sht.Views If v.LockStatus Then GoTo continue_view If Not HasLink(v) Then GoTo continue_view v.GenerativeBehavior.Update continue_view: Next continue_sheet: Next End Sub '\uff98\uff9d\uff78\u4ed8\u304d\uff8b\uff9e\uff6d\uff70\u304b? Private Function HasLink( _ ByVal view As DrawingView) As Boolean HasLink = False On Error Resume Next Dim behv As DrawingViewGenerativeBehavior Set behv = view.GenerativeBehavior Dim v As Document Set v = behv.Document.Parent On Error GoTo 0 If v Is Nothing Then Exit Function HasLink = True End Function '\u907f\u96e3\uff8c\uff6b\uff99\uff80\uff9e Private Function GetEvacuationPath( _ ByVal path As String) As String Dim evac As String evac = KCL.GetFSO.GetParentFolderName(path) & \"\\\" & _ EVACUATION_NAME evac = GetNewFolderName(evac) GetEvacuationPath = evac KCL.GetFSO.CreateFolder evac End Function '\u91cd\u8907\u3057\u306a\u3044\uff8c\uff6b\uff99\uff80\uff9e\u540d Private Function GetNewFolderName$(ByVal oldPath$) Dim newPath As String newPath = oldPath If Not KCL.IsExists(newPath) Then GetNewFolderName = newPath Exit Function End If Dim TempName$, i&: i = 0 Do i = i + 1 TempName = newPath + \"_\" + CStr(i) If Not KCL.IsExists(TempName) Then GetNewFolderName = TempName Exit Function End If Loop End Function '\u8907\u6570\uff8c\uff67\uff72\uff99\u6709\u7121\uff81\uff6a\uff6f\uff78 Private Function IsExistsFiles( _ ByVal ary As Variant) As Boolean IsExistsFiles = False Dim i As Long For i = 0 To UBound(ary) If Not KCL.IsExists(ary(i)) Then Exit Function Next IsExistsFiles = True End Function '\uff80\uff9e\uff72\uff71\uff9b\uff78\uff9e\u3092\uff8c\uff9e\uff9b\uff6f\uff78\u3057\u305fSaveAs Private Sub SaveAs( _ ByVal doc As Document, _ ByVal path As String) CATIA.DisplayFileAlerts = False doc.SaveAs path CATIA.DisplayFileAlerts = True End Sub \u6700\u5927\u306e\u7279\u5fb4\u306f\u3001\uff8f\uff78\uff9b\u306e\u5b9f\u884c\u306f\uff8a\uff9e\uff6f\uff81\uff93\uff70\uff84\uff9e\u3067\u8d77\u52d5\u3055\u305b\u305fCATIA\u5074\u306b \u51e6\u7406\u3055\u305b\u308b\u70b9\u3067\u3059\u3002\u305d\u306e\u70ba\u3001\u4f5c\u696d\u3092\u884c\u3063\u3066\u3044\u308bCATIA\u306e\uff75\uff8d\uff9f\uff9a\uff70\uff7c\uff6e\uff9d\u306f \uff8f\uff78\uff9b\u306e\u8d77\u52d5\u307e\u3067\u3057\u304b\u596a\u308f\u308c\u307e\u305b\u3093\u3002 \uff72\uff9b\uff72\uff9b\u3068\u6ce8\u610f\u3059\u3079\u304d\u70b9\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u6050\u3089\u304f\u4e16\u9593\u7684\u306b\u306f \u300c\u4eca\u66f4\u30fb\u30fb\u30fb\u300d\u306a\uff8f\uff78\uff9b\u3060\u308d\u3046\u3068\u306f\u601d\u3063\u3066\u307e\u3059\u3002 \u5148\u65e5\u5ba2\u5148\u3088\u308a\u652f\u7d66\u3055\u308c\u305fDraw\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u30ea\u30f3\u30af\u5143\u306e\u5dee\u3057\u66ff\u3048\u306f \u884c\u308f\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001Update\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \u6050\u3089\u304f\u3001\u30ea\u30f3\u30af\u5143\u3092\u5dee\u3057\u66ff\u3048\u308b\u30de\u30af\u30ed\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u6301\u3063\u3066\u3044\u308b \u306e\u3067\u306f\u306a\u3044\u304b\u306a\uff1f\u3000\u3068\u52dd\u624b\u306b\u601d\u3063\u3066\u3044\u307e\u3059\u3002 \u5b9f\u306f\u5358\u7d14\u306bUpdate\u3057\u305f\u969b\u3001\u30c7\u30fc\u30bf\u306e\u72b6\u614b\u306b\u3088\u3063\u3066\u306f\u30c0\u30a4\u30a2\u30ed\u30b0\u304c \u51fa\u73fe\u3057\u30de\u30af\u30ed\u304c\u505c\u6b62\u3057\u3066\u3057\u307e\u3046\u72b6\u6cc1\u306b\u906d\u9047\u3057\u307e\u3057\u305f\u3002 Update\u3057\u305f\u304f\u306a\u304f\u306a\u308b\u6c17\u6301\u3061\u3082\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u4e0a\u8a18\u306e\u30de\u30af\u30ed\u3067\u306f \u5bfe\u5fdc\u51fa\u6765\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002 \u307e\u3060\u3001\u3061\u3087\u3063\u3068\u6a5f\u80fd\u4e0d\u8db3\u306a\u306e\u3067\u3059\u304c\u3001\u7d44\u5408\u305b\u30ea\u30b9\u30c8\u3092\u4f5c\u308b\u65b9\u306e \u30de\u30af\u30ed\u304c\u7570\u5e38\u306a\u307b\u3069\u4f7f\u3044\u306b\u304f\u3044\uff65\uff65\uff65\u3002","title":"\u540c\u4e00UUID\u306eDraw\u53c2\u7167\u5143\u30d5\u30a1\u30a4\u30eb\u3092\u5dee\u3057\u66ff\u3048\u308b3"},{"location":"DS-CODE/VBA/%E5%90%8C%E4%B8%80UUID%E3%81%AEDraw%E5%8F%82%E7%85%A7%E5%85%83%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%B7%AE%E3%81%97%E6%9B%BF%E3%81%88%E3%82%8B3/%E5%90%8C%E4%B8%80UUID%E3%81%AEDraw%E5%8F%82%E7%85%A7%E5%85%83%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%B7%AE%E3%81%97%E6%9B%BF%E3%81%88%E3%82%8B3/#uuiddraw3-catia","text":"\u307e\u3060\u3061\u3087\u3063\u3068\u4e0d\u5b89\u5b9a\u306a\u6c17\u3082\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u624b\u5143\u306e\u30c7\u30fc\u30bf\u3067\u306f \u4e0a\u624b\u304f\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u516c\u958b\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u5148\u65e5\u306e\u7d44\u5408\u305b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307e\u305b\u3001Part\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u4e00\u540d\u306e Drawing\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 'vba ReplaceDrawLink ver0.0.3 using-'KCL0.0.12' by Kantoku '\uff8d\uff9e\uff70\uff7d\u3068\u306a\u308b\uff8c\uff67\uff72\uff99\u540d\u306fCATPart\u3068CATDrawing\u3067\u4e00\u81f4\u3057\u3066\u3044\u308b\u4e8b\u304c\u524d\u63d0 'UUID\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u4e8b\u524d\u63d0\u3067\u3059\uff08\u9055\u3046\u3068\u7f6e\u63db\u3055\u308c\u306a\u3044\u3067\u3059\uff09 'ver0.0.1:\u5b8c\u6210(\uff83\uff7d\uff84\uff7a\uff70\uff84\uff9e) 'ver0.0.2:\uff8a\uff9e\uff6f\uff81\u51e6\u7406\u3067\u8907\u6570\u5909\u63db\u5bfe\u5fdc 'ver0.0.3:Update\u6539\u5584(LockView\u306b\u3088\u308b\uff8f\uff78\uff9b\u505c\u6b62) ' \uff80\uff70\uff79\uff9e\uff6f\uff84Part\uff8c\uff67\uff72\uff99\u4e00\u6642\u7684\u306b\uff8a\uff9e\uff6f\uff78\uff71\uff6f\uff8c\uff9f Option Explicit '*********** Private Const EXP_EXTENSION = \"comb\" Private Const SelectionType = \"*.\" & EXP_EXTENSION Private Const BAT_CATVBS = \"ReplaceDrawLinkBat.catvbs\" Private Const BAT_SCRIPT = \"ReplaceDrawLink\" '\u91cd\u8981!\uff93\uff7c\uff9e\uff6d\uff70\uff99\u540d Private Const BAT_FUNCTION = \"ExecReplaceLink\" '\u91cd\u8981!\uff8a\uff9e\uff6f\uff81\uff93\uff70\uff84\uff9e\u306e\uff74\uff9d\uff84\uff98\uff70\uff8e\uff9f\uff72\uff9d\uff84\u95a2\u6570\u540d Private\u306fNG Private Const EVACUATION_NAME = \"EVAC\" Private Const DELIMTER = \"@\" Private Const DELIMTER_COMB = \"|\" Private Const DEBUGMODE = False Sub CATMain() '\uff98\uff9d\uff78\u4fee\u6b63\uff98\uff7d\uff84\uff8c\uff67\uff72\uff99\u9078\u629e Dim msg As String msg = \"Draw\uff98\uff9d\uff78\u3092\u4fee\u6b63\u3059\u308b\u70ba\u306e\uff98\uff7d\uff84\uff8c\uff67\uff72\uff99(\" & EXP_EXTENSION & \")\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\" Dim lst_path As String lst_path = CATIA.FileSelectionBox( _ msg, _ SelectionType, _ CatFileSelectionModeOpen) If lst_path = vbNullString Then Exit Sub '\uff98\uff9d\uff78\u4fee\u6b63\uff98\uff7d\uff84\uff8c\uff67\uff72\uff99\u8aad\u307f\u8fbc\u307f Dim paths As Variant paths = KCL.ReadFile(lst_path) '\u78ba\u8a8d msg = UBound(paths) + 1 & \"\u500b\u306e\uff8a\uff9e\uff6f\uff81\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\u5b9c\u3057\u3044\u3067\u3059\u304b?\" If MsgBox(msg, vbYesNo + vbQuestion) = vbNo Then Exit Sub End If 'catia\u306e\u5b9f\u884c\uff8c\uff67\uff72\uff99\uff8a\uff9f\uff7d\u53d6\u5f97 Dim catPathtmp As Variant catPathtmp = Split(CATIA.SystemService.Environ(\"CATDLLPath\"), \";\") Dim catPath As String catPath = catPathtmp(0) '\u74b0\u5883\uff8c\uff67\uff72\uff99\uff8a\uff9f\uff7d\u53d6\u5f97 Dim environmentPath As Variant environmentPath = SplitPathName(CATIA.SystemService.Environ(\"CATEnvName\")) 'CATTemp\uff8a\uff9f\uff7d\u53d6\u5f97 Dim catTmp As Variant catTmp = CATIA.SystemService.Environ(\"CATTemp\") '\uff8a\uff9e\uff6f\uff81\u7528catvbs Dim macroPath As String macroPath = catTmp & \"\\\" & BAT_CATVBS Dim code As String code = GetCatvbsCode(Join(paths, DELIMTER), macroPath) KCL.WriteFile macroPath, code '\uff8a\uff9e\uff6f\uff81\uff7a\uff8f\uff9d\uff84\uff9e Dim cmd As String cmd = catPath & \"\\CNEXT.exe -direnv \" & _ environmentPath(0) & \" -env \" & _ environmentPath(1) & \" -batch -macro \" & _ Chr(34) & macroPath & Chr(34) '\uff8a\uff9e\uff6f\uff81\uff7d\uff80\uff70\uff84 Call CreateObject(\"Wscript.Shell\").exec(cmd) MsgBox \"\uff8a\uff9e\uff6f\uff81\u51e6\u7406\u3092\uff7d\uff80\uff70\uff84\u3057\u307e\u3057\u305f\" End Sub '******* \uff8a\uff9e\uff6f\uff81\u51e6\u7406\u524d ********* '\uff8a\uff9e\uff6f\uff81\u7528\uff7d\uff8c\uff9f\uff98\uff78\uff84\uff7f\uff70\uff7d Private Function GetCatvbsCode( _ ByVal path As String, _ ByVal me_path As String) As String 'VBProject\uff8a\uff9f\uff7d\u53d6\u5f97 Dim apc As Object Set apc = GetApc() Dim execPjt As Object Set execPjt = apc.ExecutingProject Dim pjtPath As String pjtPath = execPjt.DisplayName Dim code As String code = _ \"Set SS = CATIA.SystemService\" & vbCrLf & _ \"VBAProjectPath = \" & Chr(34) & CStr(pjtPath) & Chr(34) & vbCrLf & _ \"LibraryType = catScriptLibraryTypeVBAProject\" & vbCrLf & _ \"ScriptName = \" & Chr(34) & BAT_SCRIPT & Chr(34) & vbCrLf & _ \"FunctionName = \" & Chr(34) & BAT_FUNCTION & Chr(34) & vbCrLf & _ \"Dim Params(0)\" & vbCrLf & _ \"Params(0) = \" & Chr(34) & path & Chr(34) & vbCrLf & _ \"Call SS.ExecuteScript(VBAProjectPath, LibraryType, ScriptName, FunctionName, Params)\" & vbCrLf If Not DEBUGMODE Then code = code & _ \"CreateObject(\" & Chr(34) & \"Scripting.FileSystemObject\" & Chr(34) & \").DeleteFile(\" & _ Chr(34) & me_path & Chr(34) & \")\" & vbCrLf End If code = code & _ \"CreateObject(\" & Chr(34) & \"WScript.Shell\" & Chr(34) & \").Popup \" & Chr(34) & \"Done\" & _ Chr(34) & \", 0 , \" & Chr(34) & \"ReplaceDrawLink\" & Chr(34) & \" , 0\" GetCatvbsCode = code End Function '\uff8a\uff9f\uff7d\u3068\uff8c\uff67\uff72\uff99\u540d\u5206\u5272 'Return: 0-Path 1-BaseName Private Function SplitPathName(ByVal FullPath) As Variant Dim path(1) As String With CreateObject(\"Scripting.FileSystemObject\") path(0) = .GetParentFolderName(FullPath) path(1) = .GetBaseName(FullPath) End With SplitPathName = path End Function 'Apc\u53d6\u5f97 Private Function GetApc() As Object Set GetApc = Nothing 'VBA\uff8a\uff9e\uff70\uff7c\uff9e\uff6e\uff9d\uff81\uff6a\uff6f\uff78 Dim COMObjectName$ #If VBA7 Then COMObjectName = \"MSAPC.Apc.7.1\" #ElseIf VBA6 Then COMObjectName = \"MSAPC.Apc.6.2\" #Else MsgBox \"VBA\u306e\uff8a\uff9e\uff70\uff7c\uff9e\uff6e\uff9d\u304c\u672a\u5bfe\u5fdc\u3067\u3059\" Exit Function #End If 'APC\u53d6\u5f97 Dim apc As Object: Set apc = Nothing On Error Resume Next Set apc = CreateObject(COMObjectName) On Error GoTo 0 If apc Is Nothing Then MsgBox \"MSAPC.Apc\u304c\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\" Exit Function End If Set GetApc = apc End Function '******* \uff8a\uff9e\uff6f\uff81\u51e6\u7406\u7528 ********* '\u5dee\u3057\u66ff\u3048\u51e6\u7406 Sub ExecReplaceLink(ByVal all_path As String) Dim paths As Variant paths = Split(all_path, DELIMTER) Dim i As Long Dim path As Variant For i = 0 To UBound(paths) path = Split(paths(i), DELIMTER_COMB) If UBound(path) < 1 Then GoTo continue If IsExistsFiles(path) Then Call ReplaceLink(path(0), path(1)) End If continue: Next If Not DEBUGMODE Then CATIA.Quit End If End Sub '\u5dee\u3057\u66ff\u3048\u305fDraw\uff8c\uff67\uff72\uff99\u4f5c\u6210 Private Sub ReplaceLink( _ ByVal tgtPartPath As String, _ ByVal refDrawPath As String) '\u907f\u96e3\u5148\uff8c\uff6b\uff99\uff80\uff9e Dim evac As String evac = GetEvacuationPath(refDrawPath) 'refPart\u306e\u907f\u96e3 Dim refPartAry As Variant refPartAry = KCL.SplitPathName(refDrawPath) refPartAry(2) = \"CATPart\" Dim refPart As String refPart = refPartAry(0) & \"\\\" & _ refPartAry(1) & \".\" & _ refPartAry(2) Dim fso As Object Set fso = KCL.GetFSO() If KCL.IsExists(refPart) Then fso.MoveFile refPart, evac & \"\\\" refPart = evac & \"\\\" & _ refPartAry(1) & \".\" & _ refPartAry(2) Else refPart = vbNullString End If 'tgtPart\u306e\uff8a\uff9e\uff6f\uff78\uff71\uff6f\uff8c\uff9f Dim tgtBackup As String tgtBackup = tgtPartPath & \".backup\" fso.CopyFile tgtPartPath, tgtBackup 'tgtPart\u306e\uff98\uff88\uff70\uff91 Dim tgtPartAry As Variant tgtPartAry = KCL.SplitPathName(tgtPartPath) Dim tmpPart As String tmpPart = refPartAry(1) & \".\" & _ tgtPartAry(2) fso.GetFile(tgtPartPath).name = tmpPart tmpPart = tgtPartAry(0) & \"\\\" & _ tmpPart 'tgt(tmp)Part\u306e\uff75\uff70\uff8c\uff9f\uff9d Dim tgtDoc As PartDocument Set tgtDoc = CATIA.Documents.Open(tmpPart) 'refDraw\u306e\uff75\uff70\uff8c\uff9f\uff9d Dim refDoc As DrawingDocument Set refDoc = CATIA.Documents.Open(refDrawPath) 'refDraw\u306eUpdate Call UpdateUnlockViews(refDoc) 'SaveAs Call SaveAs(tgtDoc, tgtPartPath) Dim tgtDraw As String tgtDraw = tgtPartAry(0) & \"\\\" & _ tgtPartAry(1) & \".CATDrawing\" Call SaveAs(refDoc, tgtDraw) 'tgtPart\u306e\uff8a\uff9e\uff6f\uff78\uff71\uff6f\uff8c\uff9f\u524a\u9664 fso.DeleteFile tgtBackup 'refPart\u623b\u3057 If Not refPart = vbNullString Then fso.MoveFile refPart, refPartAry(0) & \"\\\" End If '\u907f\u96e3\u5148\uff8c\uff6b\uff99\uff80\uff9e\u524a\u9664 fso.DeleteFolder evac '\uff98\uff88\uff70\uff91\uff8c\uff67\uff72\uff99\u524a\u9664 fso.DeleteFile tmpPart '\uff8c\uff67\uff72\uff99\u3092\u9589\u3058\u308b tgtDoc.Close refDoc.Close End Sub '\uff9b\uff6f\uff78\u3057\u3066\u3044\u306a\u3044\uff98\uff9d\uff78\u4ed8\u304d\uff8b\uff9e\uff6d\uff70\u306e\u66f4\u65b0 Private Sub UpdateUnlockViews( _ ByVal doc As DrawingDocument) Dim sht As DrawingSheet Dim v As DrawingView For Each sht In doc.Sheets If sht.IsDetail Then GoTo continue_sheet For Each v In sht.Views If v.LockStatus Then GoTo continue_view If Not HasLink(v) Then GoTo continue_view v.GenerativeBehavior.Update continue_view: Next continue_sheet: Next End Sub '\uff98\uff9d\uff78\u4ed8\u304d\uff8b\uff9e\uff6d\uff70\u304b? Private Function HasLink( _ ByVal view As DrawingView) As Boolean HasLink = False On Error Resume Next Dim behv As DrawingViewGenerativeBehavior Set behv = view.GenerativeBehavior Dim v As Document Set v = behv.Document.Parent On Error GoTo 0 If v Is Nothing Then Exit Function HasLink = True End Function '\u907f\u96e3\uff8c\uff6b\uff99\uff80\uff9e Private Function GetEvacuationPath( _ ByVal path As String) As String Dim evac As String evac = KCL.GetFSO.GetParentFolderName(path) & \"\\\" & _ EVACUATION_NAME evac = GetNewFolderName(evac) GetEvacuationPath = evac KCL.GetFSO.CreateFolder evac End Function '\u91cd\u8907\u3057\u306a\u3044\uff8c\uff6b\uff99\uff80\uff9e\u540d Private Function GetNewFolderName$(ByVal oldPath$) Dim newPath As String newPath = oldPath If Not KCL.IsExists(newPath) Then GetNewFolderName = newPath Exit Function End If Dim TempName$, i&: i = 0 Do i = i + 1 TempName = newPath + \"_\" + CStr(i) If Not KCL.IsExists(TempName) Then GetNewFolderName = TempName Exit Function End If Loop End Function '\u8907\u6570\uff8c\uff67\uff72\uff99\u6709\u7121\uff81\uff6a\uff6f\uff78 Private Function IsExistsFiles( _ ByVal ary As Variant) As Boolean IsExistsFiles = False Dim i As Long For i = 0 To UBound(ary) If Not KCL.IsExists(ary(i)) Then Exit Function Next IsExistsFiles = True End Function '\uff80\uff9e\uff72\uff71\uff9b\uff78\uff9e\u3092\uff8c\uff9e\uff9b\uff6f\uff78\u3057\u305fSaveAs Private Sub SaveAs( _ ByVal doc As Document, _ ByVal path As String) CATIA.DisplayFileAlerts = False doc.SaveAs path CATIA.DisplayFileAlerts = True End Sub \u6700\u5927\u306e\u7279\u5fb4\u306f\u3001\uff8f\uff78\uff9b\u306e\u5b9f\u884c\u306f\uff8a\uff9e\uff6f\uff81\uff93\uff70\uff84\uff9e\u3067\u8d77\u52d5\u3055\u305b\u305fCATIA\u5074\u306b \u51e6\u7406\u3055\u305b\u308b\u70b9\u3067\u3059\u3002\u305d\u306e\u70ba\u3001\u4f5c\u696d\u3092\u884c\u3063\u3066\u3044\u308bCATIA\u306e\uff75\uff8d\uff9f\uff9a\uff70\uff7c\uff6e\uff9d\u306f \uff8f\uff78\uff9b\u306e\u8d77\u52d5\u307e\u3067\u3057\u304b\u596a\u308f\u308c\u307e\u305b\u3093\u3002 \uff72\uff9b\uff72\uff9b\u3068\u6ce8\u610f\u3059\u3079\u304d\u70b9\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u6050\u3089\u304f\u4e16\u9593\u7684\u306b\u306f \u300c\u4eca\u66f4\u30fb\u30fb\u30fb\u300d\u306a\uff8f\uff78\uff9b\u3060\u308d\u3046\u3068\u306f\u601d\u3063\u3066\u307e\u3059\u3002 \u5148\u65e5\u5ba2\u5148\u3088\u308a\u652f\u7d66\u3055\u308c\u305fDraw\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u30ea\u30f3\u30af\u5143\u306e\u5dee\u3057\u66ff\u3048\u306f \u884c\u308f\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001Update\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \u6050\u3089\u304f\u3001\u30ea\u30f3\u30af\u5143\u3092\u5dee\u3057\u66ff\u3048\u308b\u30de\u30af\u30ed\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u6301\u3063\u3066\u3044\u308b \u306e\u3067\u306f\u306a\u3044\u304b\u306a\uff1f\u3000\u3068\u52dd\u624b\u306b\u601d\u3063\u3066\u3044\u307e\u3059\u3002 \u5b9f\u306f\u5358\u7d14\u306bUpdate\u3057\u305f\u969b\u3001\u30c7\u30fc\u30bf\u306e\u72b6\u614b\u306b\u3088\u3063\u3066\u306f\u30c0\u30a4\u30a2\u30ed\u30b0\u304c \u51fa\u73fe\u3057\u30de\u30af\u30ed\u304c\u505c\u6b62\u3057\u3066\u3057\u307e\u3046\u72b6\u6cc1\u306b\u906d\u9047\u3057\u307e\u3057\u305f\u3002 Update\u3057\u305f\u304f\u306a\u304f\u306a\u308b\u6c17\u6301\u3061\u3082\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u4e0a\u8a18\u306e\u30de\u30af\u30ed\u3067\u306f \u5bfe\u5fdc\u51fa\u6765\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002 \u307e\u3060\u3001\u3061\u3087\u3063\u3068\u6a5f\u80fd\u4e0d\u8db3\u306a\u306e\u3067\u3059\u304c\u3001\u7d44\u5408\u305b\u30ea\u30b9\u30c8\u3092\u4f5c\u308b\u65b9\u306e \u30de\u30af\u30ed\u304c\u7570\u5e38\u306a\u307b\u3069\u4f7f\u3044\u306b\u304f\u3044\uff65\uff65\uff65\u3002","title":"\u540c\u4e00UUID\u306eDraw\u53c2\u7167\u5143\u30d5\u30a1\u30a4\u30eb\u3092\u5dee\u3057\u66ff\u3048\u308b3 - C#ATIA"},{"location":"DS-CODE/VBA/%E5%BD%A2%E7%8A%B6%E3%82%BB%E3%83%83%E3%83%88%E5%86%85%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%95%E3%82%A7%E3%82%B9%E3%81%A8%E7%B7%9A%E9%A1%9E%E3%82%92%E5%88%A5%E3%81%AE%E8%89%B2%E3%81%AB%E3%81%99%E3%82%8B/a/","text":"\u5f62\u72b6\u30bb\u30c3\u30c8\u5185\u306e\u30b5\u30fc\u30d5\u30a7\u30b9\u3068\u7dda\u985e\u3092\u5225\u306e\u8272\u306b\u3059\u308b \u30b5\u30fc\u30d5\u30a7\u30b9\u3068\u7dda\u985e\u304c\u6df7\u5728\u3057\u9078\u629e\u3055\u308c\u305f\u72b6\u614b\u3067\u5225\u3005\u306e\u8272\u3092\u4ed8\u3051\u305f\u3044\u3000\u3068 \u6628\u5e74\u672b\u8fba\u308a\u3067\u3054\u76f8\u8ac7\u9802\u3044\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u9045\u304f\u306a\u308a\u307e\u3057\u305f\u3002 CATIA\u306e\u5834\u5408\u306f\u8272\u3092\u5909\u66f4\u3059\u308b\u70ba\u306b\u306f\u4e00\u5ea6\u9078\u629e\u72b6\u614b\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001 \u4e00\u8fba\u306b\u30b5\u30fc\u30d5\u30a7\u30b9\u3068\u7dda\u985e\u3092\u5225\u3005\u306b\u8272\u4ed8\u3051\u3059\u308b\u4e8b\u306f\u51fa\u6765\u307e\u305b\u3093\u3002 \u305d\u306e\u70ba\u3001\u30b5\u30fc\u30d5\u30a7\u30b9\u306e\u307f\u3000\u7dda\u985e\u306e\u307f\u3000\u306e\u9078\u629e\u72b6\u614b\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 'catvba Option Explicit Sub CATMain() '\u6e96\u5099 Dim doc As PartDocument Set doc = CATIA.ActiveDocument Dim sel As Selection Set sel = doc.Selection sel.Clear Dim pt As Part Set pt = doc.Part '\u4e00\u500b\u76ee\u306e\u5f62\u72b6\u30bb\u30c3\u30c8 Dim hyBdy As HybridBody Set hyBdy = pt.HybridBodies.Item(1) '\u9078\u629e\u51e6\u7406\u3092\u8efd\u304f\u3059\u308b\u305f\u3081\u306e\u9b54\u6cd5 'http://catiadoc.free.fr/online/interfaces/interface_Application.htm#HSOSynchronized CATIA.HSOSynchronized = False '\u610f\u56f3\u7684\u306b\u5f62\u72b6\u30bb\u30c3\u30c8\u5185\u306e\u5168GSD\u8981\u7d20\u3092\u9078\u629e Dim entity As AnyObject For Each entity In hyBdy.HybridShapes sel.Add entity Next '---\u672c\u984c\u306f\u3053\u3053\u304b\u3089--- 'HybridShapeFactory\u53d6\u5f97 'http://catiadoc.free.fr/online/interfaces/interface_HybridShapeFactory.htm#GetGeometricalFeatureType Dim hyFact As HybridShapeFactory Set hyFact = pt.HybridShapeFactory '\u9078\u629e\u8981\u7d20\u304b\u3089HybridShapeFactory\u3067\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u30bf\u30a4\u30d7\u3092 '\u5224\u65ad\u3057\u9078\u629e\u304b\u3089\u5916\u3059 'For\u6587\u306f\u9006\u9806\u306b\u884c\u308f\u306a\u3044\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u30ba\u30ec\u307e\u3059 'Surface\u306f5\u3067\u3059 Dim idx As Long Dim geoType As Long For idx = sel.Count2 To 1 Step -1 'idx\u756a\u76ee\u306e\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u30bf\u30a4\u30d7\u3092\u53d6\u5f97 geoType = hyFact.GetGeometricalFeatureType(sel.Item(idx).Reference) '\u30b5\u30fc\u30d5\u30a7\u30b9\u4ee5\u5916\u306f\u9078\u629e\u3092\u89e3\u9664\u3059\u308b If Not geoType = 5 Then Call sel.Remove(idx) End If Next '\u3053\u306e\u6642\u70b9\u3067\u30b5\u30fc\u30d5\u30a7\u30b9\u306e\u307f\u304c\u9078\u629e\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b '\u8272\u3092\u5909\u66f4\u3059\u308b\u70ba\u306eVisPropertySet\u3092\u53d6\u5f97 'http://catiadoc.free.fr/online/interfaces/interface_VisPropertySet.htm Dim vis As VisPropertySet Set vis = sel.VisProperties 'SetRealColor\u306e\u5f15\u6570\u306fR,G,B\u3067 '4\u756a\u76ee\u306f\u826f\u304f\u5206\u304b\u3063\u3066\u307e\u305b\u3093(\u4ee5\u524d\u6559\u308f\u3063\u305f\u3088\u3046\u306a\u6c17\u306f\u3057\u3066\u307e\u3059) '\u8d64\u8272\u306b\u5909\u66f4\u3057\u3066\u307e\u3059 Call vis.SetRealColor(255, 0, 0, 1) sel.Clear '\u7121\u99c4\u3067\u3059\u304c\u3001\u3082\u3046\u4e00\u5ea6\u5f62\u72b6\u30bb\u30c3\u30c8\u5185\u306e\u5168GSD\u8981\u7d20\u3092\u9078\u629e For Each entity In hyBdy.HybridShapes sel.Add entity Next '\u9078\u629e\u8981\u7d20\u304b\u3089HybridShapeFactory\u3067\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u30bf\u30a4\u30d7\u3092 '\u5224\u65ad\u3057\u9078\u629e\u304b\u3089\u5916\u3059 'Curve\u306f2 Line\u306f3 Circle\u306f4\u3067\u3059 For idx = sel.Count2 To 1 Step -1 'idx\u756a\u76ee\u306e\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u30bf\u30a4\u30d7\u3092\u53d6\u5f97 geoType = hyFact.GetGeometricalFeatureType(sel.Item(idx).Reference) '\u30b5\u30fc\u30d5\u30a7\u30b9\u4ee5\u5916\u306f\u9078\u629e\u3092\u89e3\u9664\u3059\u308b Select Case geoType Case 2, 3, 4 '\u4f55\u3082\u3057\u306a\u3044 Case Else Call sel.Remove(idx) End Select Next '\u3053\u306e\u6642\u70b9\u3067\u7dda\u306e\u307f\u304c\u9078\u629e\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b '\u7dd1\u8272\u306b\u5909\u66f4\u3057\u3066\u307e\u3059 Call vis.SetRealColor(0, 255, 0, 1) sel.Clear End Sub \u5f62\u72b6\u30bb\u30c3\u30c8\u5185\u306b\u306f\u30b5\u30fc\u30d5\u30a7\u30b9\u3068\u7dda\u304c1\u500b\u3065\u3064\u3067\u3059\u304c\u3001\u5168\u3066\u306e\u8272\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 \u5b9f\u884c\u524d\u306f\u5de6\u3067\u5b9f\u884c\u5f8c\u306f\u53f3\u3067\u3059\u3002 \u4e0a\u8a18\u306bSetRealColor\u30674\u756a\u76ee\u306e\u5f15\u6570\u306b\u3064\u3044\u3066 'SetRealColor\u306e\u5f15\u6570\u306fR,G,B\u3067 '4\u756a\u76ee\u306f\u826f\u304f\u5206\u304b\u3063\u3066\u307e\u305b\u3093(\u4ee5\u524d\u6559\u308f\u3063\u305f\u3088\u3046\u306a\u6c17\u306f\u3057\u3066\u307e\u3059) \u3068\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u3061\u3089\u306e\u30b5\u30a4\u30c8\u3067\u306f\u3088\u308a\u8a73\u3057\u304f\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002 VisPropertySet\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff5cCATIA\u30de\u30af\u30ed\u306e\u4f5c\u6210\u65b9\u6cd5 | LiCLOG \u52a9\u304b\u308a\u307e\u3059\u3002","title":"\u5f62\u72b6\u30bb\u30c3\u30c8\u5185\u306e\u30b5\u30fc\u30d5\u30a7\u30b9\u3068\u7dda\u985e\u3092\u5225\u306e\u8272\u306b\u3059\u308b"},{"location":"DS-CODE/VBA/%E5%BD%A2%E7%8A%B6%E3%82%BB%E3%83%83%E3%83%88%E5%86%85%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%95%E3%82%A7%E3%82%B9%E3%81%A8%E7%B7%9A%E9%A1%9E%E3%82%92%E5%88%A5%E3%81%AE%E8%89%B2%E3%81%AB%E3%81%99%E3%82%8B/a/#_1","text":"\u30b5\u30fc\u30d5\u30a7\u30b9\u3068\u7dda\u985e\u304c\u6df7\u5728\u3057\u9078\u629e\u3055\u308c\u305f\u72b6\u614b\u3067\u5225\u3005\u306e\u8272\u3092\u4ed8\u3051\u305f\u3044\u3000\u3068 \u6628\u5e74\u672b\u8fba\u308a\u3067\u3054\u76f8\u8ac7\u9802\u3044\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u9045\u304f\u306a\u308a\u307e\u3057\u305f\u3002 CATIA\u306e\u5834\u5408\u306f\u8272\u3092\u5909\u66f4\u3059\u308b\u70ba\u306b\u306f\u4e00\u5ea6\u9078\u629e\u72b6\u614b\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001 \u4e00\u8fba\u306b\u30b5\u30fc\u30d5\u30a7\u30b9\u3068\u7dda\u985e\u3092\u5225\u3005\u306b\u8272\u4ed8\u3051\u3059\u308b\u4e8b\u306f\u51fa\u6765\u307e\u305b\u3093\u3002 \u305d\u306e\u70ba\u3001\u30b5\u30fc\u30d5\u30a7\u30b9\u306e\u307f\u3000\u7dda\u985e\u306e\u307f\u3000\u306e\u9078\u629e\u72b6\u614b\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 'catvba Option Explicit Sub CATMain() '\u6e96\u5099 Dim doc As PartDocument Set doc = CATIA.ActiveDocument Dim sel As Selection Set sel = doc.Selection sel.Clear Dim pt As Part Set pt = doc.Part '\u4e00\u500b\u76ee\u306e\u5f62\u72b6\u30bb\u30c3\u30c8 Dim hyBdy As HybridBody Set hyBdy = pt.HybridBodies.Item(1) '\u9078\u629e\u51e6\u7406\u3092\u8efd\u304f\u3059\u308b\u305f\u3081\u306e\u9b54\u6cd5 'http://catiadoc.free.fr/online/interfaces/interface_Application.htm#HSOSynchronized CATIA.HSOSynchronized = False '\u610f\u56f3\u7684\u306b\u5f62\u72b6\u30bb\u30c3\u30c8\u5185\u306e\u5168GSD\u8981\u7d20\u3092\u9078\u629e Dim entity As AnyObject For Each entity In hyBdy.HybridShapes sel.Add entity Next '---\u672c\u984c\u306f\u3053\u3053\u304b\u3089--- 'HybridShapeFactory\u53d6\u5f97 'http://catiadoc.free.fr/online/interfaces/interface_HybridShapeFactory.htm#GetGeometricalFeatureType Dim hyFact As HybridShapeFactory Set hyFact = pt.HybridShapeFactory '\u9078\u629e\u8981\u7d20\u304b\u3089HybridShapeFactory\u3067\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u30bf\u30a4\u30d7\u3092 '\u5224\u65ad\u3057\u9078\u629e\u304b\u3089\u5916\u3059 'For\u6587\u306f\u9006\u9806\u306b\u884c\u308f\u306a\u3044\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u30ba\u30ec\u307e\u3059 'Surface\u306f5\u3067\u3059 Dim idx As Long Dim geoType As Long For idx = sel.Count2 To 1 Step -1 'idx\u756a\u76ee\u306e\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u30bf\u30a4\u30d7\u3092\u53d6\u5f97 geoType = hyFact.GetGeometricalFeatureType(sel.Item(idx).Reference) '\u30b5\u30fc\u30d5\u30a7\u30b9\u4ee5\u5916\u306f\u9078\u629e\u3092\u89e3\u9664\u3059\u308b If Not geoType = 5 Then Call sel.Remove(idx) End If Next '\u3053\u306e\u6642\u70b9\u3067\u30b5\u30fc\u30d5\u30a7\u30b9\u306e\u307f\u304c\u9078\u629e\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b '\u8272\u3092\u5909\u66f4\u3059\u308b\u70ba\u306eVisPropertySet\u3092\u53d6\u5f97 'http://catiadoc.free.fr/online/interfaces/interface_VisPropertySet.htm Dim vis As VisPropertySet Set vis = sel.VisProperties 'SetRealColor\u306e\u5f15\u6570\u306fR,G,B\u3067 '4\u756a\u76ee\u306f\u826f\u304f\u5206\u304b\u3063\u3066\u307e\u305b\u3093(\u4ee5\u524d\u6559\u308f\u3063\u305f\u3088\u3046\u306a\u6c17\u306f\u3057\u3066\u307e\u3059) '\u8d64\u8272\u306b\u5909\u66f4\u3057\u3066\u307e\u3059 Call vis.SetRealColor(255, 0, 0, 1) sel.Clear '\u7121\u99c4\u3067\u3059\u304c\u3001\u3082\u3046\u4e00\u5ea6\u5f62\u72b6\u30bb\u30c3\u30c8\u5185\u306e\u5168GSD\u8981\u7d20\u3092\u9078\u629e For Each entity In hyBdy.HybridShapes sel.Add entity Next '\u9078\u629e\u8981\u7d20\u304b\u3089HybridShapeFactory\u3067\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u30bf\u30a4\u30d7\u3092 '\u5224\u65ad\u3057\u9078\u629e\u304b\u3089\u5916\u3059 'Curve\u306f2 Line\u306f3 Circle\u306f4\u3067\u3059 For idx = sel.Count2 To 1 Step -1 'idx\u756a\u76ee\u306e\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u30bf\u30a4\u30d7\u3092\u53d6\u5f97 geoType = hyFact.GetGeometricalFeatureType(sel.Item(idx).Reference) '\u30b5\u30fc\u30d5\u30a7\u30b9\u4ee5\u5916\u306f\u9078\u629e\u3092\u89e3\u9664\u3059\u308b Select Case geoType Case 2, 3, 4 '\u4f55\u3082\u3057\u306a\u3044 Case Else Call sel.Remove(idx) End Select Next '\u3053\u306e\u6642\u70b9\u3067\u7dda\u306e\u307f\u304c\u9078\u629e\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b '\u7dd1\u8272\u306b\u5909\u66f4\u3057\u3066\u307e\u3059 Call vis.SetRealColor(0, 255, 0, 1) sel.Clear End Sub \u5f62\u72b6\u30bb\u30c3\u30c8\u5185\u306b\u306f\u30b5\u30fc\u30d5\u30a7\u30b9\u3068\u7dda\u304c1\u500b\u3065\u3064\u3067\u3059\u304c\u3001\u5168\u3066\u306e\u8272\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 \u5b9f\u884c\u524d\u306f\u5de6\u3067\u5b9f\u884c\u5f8c\u306f\u53f3\u3067\u3059\u3002 \u4e0a\u8a18\u306bSetRealColor\u30674\u756a\u76ee\u306e\u5f15\u6570\u306b\u3064\u3044\u3066 'SetRealColor\u306e\u5f15\u6570\u306fR,G,B\u3067 '4\u756a\u76ee\u306f\u826f\u304f\u5206\u304b\u3063\u3066\u307e\u305b\u3093(\u4ee5\u524d\u6559\u308f\u3063\u305f\u3088\u3046\u306a\u6c17\u306f\u3057\u3066\u307e\u3059) \u3068\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u3061\u3089\u306e\u30b5\u30a4\u30c8\u3067\u306f\u3088\u308a\u8a73\u3057\u304f\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002 VisPropertySet\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff5cCATIA\u30de\u30af\u30ed\u306e\u4f5c\u6210\u65b9\u6cd5 | LiCLOG \u52a9\u304b\u308a\u307e\u3059\u3002","title":"\u5f62\u72b6\u30bb\u30c3\u30c8\u5185\u306e\u30b5\u30fc\u30d5\u30a7\u30b9\u3068\u7dda\u985e\u3092\u5225\u306e\u8272\u306b\u3059\u308b"},{"location":"DS-CODE/VBA/%E6%B3%A8%E8%A8%98%E3%81%AE%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A32/%E6%B3%A8%E8%A8%98%E3%81%AE%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A32/","text":"\u6ce8\u8a18\u306e\u30c6\u30ad\u30b9\u30c8\u30d7\u30ed\u30d1\u30c6\u30a32 \u3053\u3061\u3089\u306e\u7d9a\u304d\u3067\u3059\u3002 \u6ce8\u8a18\u306e\u30c6\u30ad\u30b9\u30c8\u30d7\u30ed\u30d1\u30c6\u30a31 - C#ATIA DrawingTextProperties\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u6050\u3089\u304f\u8aad\u307f\u66f8\u304d\u53ef\u80fd\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u3060\u308d\u3046 \u3068\u601d\u3044\u3001\u7d20\u76f4\u306b\u4ee3\u5165\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3068\u3053\u308d\u4e0a\u624b\u304f\u884c\u304d\u307e\u3057\u305f\u3002 \uff08Help\u306bSetFontSize\u3067\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u305d\u308c\u3092\u4f7f\u3044\u307e\u305b\u3093\u3067\u3057\u305f\uff09 Sub CATMain() 'Doc Dim actdoc As PartDocument Set actdoc = CATIA.ActiveDocument 'part Dim pt As part Set pt = actdoc.part 'Annotation Dim annoSet As AnnotationSet Set annoSet = pt.AnnotationSets.Item(1) Dim anno As Annotation Set anno = annoSet.Annotations.Item(1) 'TextProperties Dim txtProp As DrawingTextProperties Set txtProp = anno.Text.Get2dAnnot '\u30d5\u30a9\u30f3\u30c8\u3068\u30b5\u30a4\u30ba\u5909\u66f4 txtProp.FONTNAME = \"Arial (TrueType)\" txtProp.FONTSIZE = 10 '\u66f4\u65b0 'txtProp.Update '\u52b9\u679c\u306a\u3057 '\u7121\u99c4\u3067\u3059\u304c\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u6587\u5b57\u3092\u540c\u3058\u6587\u5b57\u3067 '\u4e0a\u66f8\u304d\u3059\u308b\u3053\u3068\u3067\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f anno.Text.Text = anno.Text.Text End Sub \u5b9f\u884c\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002 \u6700\u5f8c\u306e '\u66f4\u65b0 'txtProp.Update '\u52b9\u679c\u306a\u3057 '\u7121\u99c4\u3067\u3059\u304c\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u6587\u5b57\u3092\u540c\u3058\u6587\u5b57\u3067 '\u4e0a\u66f8\u304d\u3059\u308b\u3053\u3068\u3067\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f anno.Text.Text = anno.Text.Text \u3060\u3051\u3001\u3059\u3093\u306a\u308a\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3054\u8aac\u660e\u3092\u3002 \u6700\u521d\u306f\u30d5\u30a9\u30f3\u30c8\u3084\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3057\u3066\u3082\u53cd\u5fdc\u304c\u7121\u304f\u3001GUI(\u624b\u52d5)\u3067\u30c6\u30ad\u30b9\u30c8\u3092 \u5909\u66f4\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u4fee\u6b63\u304c\u53cd\u6620\u3055\u308c\u307e\u3057\u305f\u3002 \u2019txtProp.Update' 'part.Update' \u3067\u5bfe\u5fdc\u51fa\u6765\u308b\u3060\u308d\u3046\u3068\u8003\u3048\u305f\u306e\u3067\u3059\u304c\u52b9\u679c\u304c\u7121\u304f\u3001 \u7d50\u679c\u7684\u306bGUI\u306e\u64cd\u4f5c\u540c\u69d8\u306e\u6587\u5b57\u3092\u4e0a\u66f8\u304d\u3059\u308b\u5f62\u3067\u3001\u5909\u66f4\u304c\u53cd\u6620\u3055\u308c\u307e\u3057\u305f\u3002 \u3072\u3087\u3063\u3068\u3057\u305f\u3089\u3001\u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3001\u3001\u3002","title":"\u6ce8\u8a18\u306e\u30c6\u30ad\u30b9\u30c8\u30d7\u30ed\u30d1\u30c6\u30a32"},{"location":"DS-CODE/VBA/%E6%B3%A8%E8%A8%98%E3%81%AE%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A32/%E6%B3%A8%E8%A8%98%E3%81%AE%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A32/#2","text":"\u3053\u3061\u3089\u306e\u7d9a\u304d\u3067\u3059\u3002 \u6ce8\u8a18\u306e\u30c6\u30ad\u30b9\u30c8\u30d7\u30ed\u30d1\u30c6\u30a31 - C#ATIA DrawingTextProperties\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u6050\u3089\u304f\u8aad\u307f\u66f8\u304d\u53ef\u80fd\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u3060\u308d\u3046 \u3068\u601d\u3044\u3001\u7d20\u76f4\u306b\u4ee3\u5165\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3068\u3053\u308d\u4e0a\u624b\u304f\u884c\u304d\u307e\u3057\u305f\u3002 \uff08Help\u306bSetFontSize\u3067\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u305d\u308c\u3092\u4f7f\u3044\u307e\u305b\u3093\u3067\u3057\u305f\uff09 Sub CATMain() 'Doc Dim actdoc As PartDocument Set actdoc = CATIA.ActiveDocument 'part Dim pt As part Set pt = actdoc.part 'Annotation Dim annoSet As AnnotationSet Set annoSet = pt.AnnotationSets.Item(1) Dim anno As Annotation Set anno = annoSet.Annotations.Item(1) 'TextProperties Dim txtProp As DrawingTextProperties Set txtProp = anno.Text.Get2dAnnot '\u30d5\u30a9\u30f3\u30c8\u3068\u30b5\u30a4\u30ba\u5909\u66f4 txtProp.FONTNAME = \"Arial (TrueType)\" txtProp.FONTSIZE = 10 '\u66f4\u65b0 'txtProp.Update '\u52b9\u679c\u306a\u3057 '\u7121\u99c4\u3067\u3059\u304c\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u6587\u5b57\u3092\u540c\u3058\u6587\u5b57\u3067 '\u4e0a\u66f8\u304d\u3059\u308b\u3053\u3068\u3067\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f anno.Text.Text = anno.Text.Text End Sub \u5b9f\u884c\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002 \u6700\u5f8c\u306e '\u66f4\u65b0 'txtProp.Update '\u52b9\u679c\u306a\u3057 '\u7121\u99c4\u3067\u3059\u304c\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u6587\u5b57\u3092\u540c\u3058\u6587\u5b57\u3067 '\u4e0a\u66f8\u304d\u3059\u308b\u3053\u3068\u3067\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f anno.Text.Text = anno.Text.Text \u3060\u3051\u3001\u3059\u3093\u306a\u308a\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3054\u8aac\u660e\u3092\u3002 \u6700\u521d\u306f\u30d5\u30a9\u30f3\u30c8\u3084\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3057\u3066\u3082\u53cd\u5fdc\u304c\u7121\u304f\u3001GUI(\u624b\u52d5)\u3067\u30c6\u30ad\u30b9\u30c8\u3092 \u5909\u66f4\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u4fee\u6b63\u304c\u53cd\u6620\u3055\u308c\u307e\u3057\u305f\u3002 \u2019txtProp.Update' 'part.Update' \u3067\u5bfe\u5fdc\u51fa\u6765\u308b\u3060\u308d\u3046\u3068\u8003\u3048\u305f\u306e\u3067\u3059\u304c\u52b9\u679c\u304c\u7121\u304f\u3001 \u7d50\u679c\u7684\u306bGUI\u306e\u64cd\u4f5c\u540c\u69d8\u306e\u6587\u5b57\u3092\u4e0a\u66f8\u304d\u3059\u308b\u5f62\u3067\u3001\u5909\u66f4\u304c\u53cd\u6620\u3055\u308c\u307e\u3057\u305f\u3002 \u3072\u3087\u3063\u3068\u3057\u305f\u3089\u3001\u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3001\u3001\u3002","title":"\u6ce8\u8a18\u306e\u30c6\u30ad\u30b9\u30c8\u30d7\u30ed\u30d1\u30c6\u30a32"},{"location":"ISE-AEC/","text":"Welcome to Knowledge For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to Knowledge"},{"location":"ISE-AEC/#welcome-to-knowledge","text":"For full documentation visit mkdocs.org .","title":"Welcome to Knowledge"},{"location":"ISE-AEC/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"ISE-AEC/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"ISE-AEC/ARC-FacadeDesign/GT-%E5%B9%95%E5%A2%99%E6%A1%88%E4%BE%8B2/","text":"ekl let i ( Integer ) let Int ( Curve ) let lvlPl ( Plane ) let L ( List ) let Item ( Plane ) let S ( Surface ) let Ln ( Line ) let j ( Integer ) let Pt ( Point ) let stPl ( Plane ) let offPl ( Plane ) let intCount ( Integer ) let ptCount ( Integer ) let pnlCount ( Integer ) let extrCount ( Integer ) let Extr ( Surface ) let dirPt ( Point ) let Dir ( Direction ) let Dist ( Length ) let maxDist ( Length ) let jmax ( Integer ) let endPt ( Point ) let tngPt ( Point ) let Pnl ( Surface ) let prjB ( Curve ) let Count ( Integer ) let Lng ( Length ) let maxLng ( Length ) let gridLn ( Line ) let Width ( Length ) let cumWidth ( Length ) let Found ( Boolean ) let pnlClr ( String ) let pnlType ( String ) let Twr ( String ) let fType ( String ) let Face ( String ) let lvlNum ( Integer ) let unitNum ( Integer ) let sType ( String ) let floorType ( String ) let lvlSt ( String ) let unitSt ( String ) let lvlMin ( Integer ) let lvlMax ( Integer ) let n ( Integer ) let horDist ( Length ) let nxtPt ( Point ) let remDist ( Length ) let G1 ( Surface ) let G2 ( Surface ) L = SORTED_LIST_PLANES S = INPUT \\ SURFACE i = 1 j = 1 pnlCount = 1 ptCount = 1 extrCount = 1 Count = 1 maxDist = 0 m lvlMin = 1 lvlMax = 1 sType = \"G\" Twr = S . GetAttributeString ( \"TOWER\" ) fType = S . GetAttributeString ( \"FACADE_TYPE\" ) Face = S . GetAttributeString ( \"FACE\" ) GLASS \\ PARAMETERS \\ LEVEL_COUNT = L -> Size () - 1 for i while i <= L -> Size () { Item = L -> GetItem ( i ) lvlNum = Item . GetAttributeInteger ( \"LEVEL\" ) floorType = Item . GetAttributeString ( \"FLOOR_TYPE\" ) if lvlNum <= lvlMin { lvlMin = lvlNum GLASS \\ PARAMETERS \\ MIN_LEVEL = lvlMin } if lvlNum >= lvlMax { lvlMax = lvlNum GLASS \\ PARAMETERS \\ MAX_LEVEL = lvlMax - 1 } if ToString ( lvlNum ) -> Length () == 1 { lvlSt = \"0\" + ToString ( lvlNum ) } else { lvlSt = ToString ( lvlNum ) } Int = intersect ( INPUT \\ SURFACE , Item ) Set stPl = CreateOrModifyDatum ( \"Plane\" , GLASS \\ START_PLANE , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ START_PLANES , i ) stPl = planenormal ( Int , intersect ( GLASS \\ CONSTRUCTION \\ STAGER_LINE , Item ) ) stPl . Name = \"STPL_\" + lvlSt endPt = pointoncurveRatio ( Int , NULL , 1 , true ) maxLng = distance ( stPl , GLASS \\ CONSTRUCTION \\ LIMIT_PLANE ) Set gridLn = CreateOrModifyDatum ( \"Line\" , GLASS \\ LINE_GRID , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ GRID_LINE , i ) gridLn = linenormal ( stPl , project ( endPt , stPl ), 0 m , maxLng , true ) gridLn . SetAttributeString ( \"TOWER\" , Twr ) gridLn . SetAttributeString ( \"FACADE_TYPE\" , fType ) gridLn . SetAttributeString ( \"FACE\" , Face ) gridLn . SetAttributeInteger ( \"LEVEL\" , lvlNum ) gridLn . Name = \"GRID_\" + Twr + fType + Face + lvlSt if GLASS \\ PARAMETERS \\ TESSELATION_TYPE == \"BY_UNIFORM_GRID\" { if i > 1 { j = 1 Count = ceil ( maxLng / GLASS \\ PARAMETERS \\ GLS_WIDTH ) + 1 for j while j <= Count { pnlType = \"G\" pnlClr = \"130,170,215\" if ToString ( lvlNum - 1 ) -> Length () == 1 { lvlSt = \"0\" + ToString ( lvlNum - 1 ) } else { lvlSt = ToString ( lvlNum - 1 ) } offPl = planeoffset ( stPl , GLASS \\ PARAMETERS \\ GLS_WIDTH * ( j - 1 ), true ) if ToString ( j ) -> Length () == 1 { unitSt = \"0\" + ToString ( j ) } else { unitSt = ToString ( j ) } if distance ( offPl , gridLn ) <= 0.1 mm { Set Pt = CreateOrModifyDatum ( \"Point\" , GLASS \\ POINTS , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ POINTS , ptCount ) Pt = intersect ( gridLn , offPl ) Pt . Name = \"PT_\" + lvlSt + \"_\" + unitSt ptCount = ptCount + 1 dirPt = intersect ( GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ GRID_LINE -> GetItem ( i - 1 ), offPl ) Dir = direction ( line ( Pt , dirPt )) Dist = distance ( Pt , dirPt ) if Dist >= maxDist { maxDist = Dist GLASS \\ PARAMETERS \\ MAX_HEIGHT = maxDist } Ln = linetangent ( gridLn , Pt , 0 m , GLASS \\ PARAMETERS \\ GLS_WIDTH , true ) Extr = extrude ( Ln , Dir , 0 m , Dist , true ) if distance ( Extr , INPUT \\ SURFACE ) <= 0.1 mm { if distance ( GLASS \\ CONSTRUCTION \\ SRF_BOUNDARY_EXTRUDE , Extr ) <= 0.1 mm { Set Pnl = CreateOrModifyDatum ( \"Surface\" , GLASS \\ PANEL , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ PANEL , pnlCount ) Set prjB = project ( GLASS \\ CONSTRUCTION \\ SURFACE_BOUNDARY , Extr ) Pnl = split ( Extr , prjB , true ) if area ( Pnl ) < ( Dist * GLASS \\ PARAMETERS \\ GLS_WIDTH ) { sType = pnlType + \"E\" } else { sType = pnlType + \"R\" } pnlCount = pnlCount + 1 } else { Set Pnl = CreateOrModifyDatum ( \"Surface\" , GLASS \\ PANEL , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ PANEL , pnlCount ) Pnl = extrude ( Ln , Dir , 0 m , Dist , true ) sType = pnlType + \"R\" pnlCount = pnlCount + 1 } Pnl . Name = Twr + fType + Face + lvlSt + unitSt Pnl . SetAttributeString ( \"TOWER\" , Twr ) Pnl . SetAttributeString ( \"FACADE_TYPE\" , fType ) Pnl . SetAttributeString ( \"FACE\" , Face ) Pnl . SetAttributeInteger ( \"LEVEL\" , lvlNum - 1 ) Pnl . SetAttributeInteger ( \"UNIT_NUMBER\" , j ) Pnl . SetAttributeString ( \"SUB_TYPE\" , sType ) Pnl . SetAttributeString ( \"FLOOR_TYPE\" , floorType ) Pnl . SetAttributeDimension ( \"AREA\" , area ( Pnl ), \"Area\" ) Pnl . SetAttributeDimension ( \"LENGTH\" , Dist , \"Length\" ) Pnl . Color = pnlClr } } } } } if GLASS \\ PARAMETERS \\ TESSELATION_TYPE == \"BY_MODULAR_GRID\" { if i > 1 { j = 1 Found = false Width = GLASS \\ PARAMETERS \\ GLS_WIDTH cumWidth = 0 m for j while Found == false { if mod ( j , 3 ) == 0 { Width = GLASS \\ PARAMETERS \\ VENT_WIDTH pnlClr = \"150,150,150\" pnlType = \"V\" } else { Width = GLASS \\ PARAMETERS \\ GLS_WIDTH pnlClr = \"130,170,215\" pnlType = \"G\" } if j == 1 { cumWidth = 0 m } offPl = planeoffset ( stPl , cumWidth , true ) cumWidth = cumWidth + Width if distance ( offPl , pointoncurveRatio ( gridLn , NULL , 1 , true )) < Width { Found = true } if ToString ( lvlNum - 1 ) -> Length () == 1 { lvlSt = \"0\" + ToString ( lvlNum - 1 ) } else { lvlSt = ToString ( lvlNum - 1 ) } if ToString ( j ) -> Length () == 1 { unitSt = \"0\" + ToString ( j ) } else { unitSt = ToString ( j ) } if distance ( offPl , gridLn ) <= 0.1 mm { Set Pt = CreateOrModifyDatum ( \"Point\" , GLASS \\ POINTS , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ POINTS , ptCount ) Pt = intersect ( gridLn , offPl ) Pt . Name = \"PT_\" + lvlSt + \"_\" + unitSt ptCount = ptCount + 1 dirPt = intersect ( GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ GRID_LINE -> GetItem ( i - 1 ), offPl ) Dir = direction ( line ( Pt , dirPt )) Dist = distance ( Pt , dirPt ) if Dist >= maxDist { maxDist = Dist GLASS \\ PARAMETERS \\ MAX_HEIGHT = maxDist } Ln = linetangent ( gridLn , Pt , 0 m , Width , true ) Extr = extrude ( Ln , Dir , 0 m , Dist , true ) if distance ( Extr , INPUT \\ SURFACE ) <= 0.1 mm { if distance ( GLASS \\ CONSTRUCTION \\ SRF_BOUNDARY_EXTRUDE , Extr ) <= 0.1 mm { Set Pnl = CreateOrModifyDatum ( \"Surface\" , GLASS \\ PANEL , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ PANEL , pnlCount ) Set prjB = project ( GLASS \\ CONSTRUCTION \\ SURFACE_BOUNDARY , Extr ) Pnl = split ( Extr , prjB , true ) if area ( Pnl ) < ( Dist * Width ) { sType = pnlType + \"E\" } else { sType = pnlType + \"R\" } pnlCount = pnlCount + 1 } else { Set Pnl = CreateOrModifyDatum ( \"Surface\" , GLASS \\ PANEL , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ PANEL , pnlCount ) Pnl = extrude ( Ln , Dir , 0 m , Dist , true ) sType = pnlType + \"R\" pnlCount = pnlCount + 1 } Pnl . Name = Twr + fType + Face + lvlSt + unitSt Pnl . SetAttributeString ( \"TOWER\" , Twr ) Pnl . SetAttributeString ( \"FACADE_TYPE\" , fType ) Pnl . SetAttributeString ( \"FACE\" , Face ) Pnl . SetAttributeInteger ( \"LEVEL\" , lvlNum - 1 ) Pnl . SetAttributeInteger ( \"UNIT_NUMBER\" , j ) Pnl . SetAttributeString ( \"SUB_TYPE\" , sType ) Pnl . SetAttributeString ( \"FLOOR_TYPE\" , floorType ) Pnl . SetAttributeDimension ( \"AREA\" , area ( Pnl ), \"Area\" ) Pnl . SetAttributeDimension ( \"LENGTH\" , Dist , \"Length\" ) Pnl . Color = pnlClr } } } } } if GLASS \\ PARAMETERS \\ TESSELATION_TYPE == \"BY_ISOCURVES\" { if i > 1 { j = 1 for j while j <= SORTED_LIST_ISOCURVES_STEPPED -> Size () { if ToString ( lvlNum - 1 ) -> Length () == 1 { lvlSt = \"0\" + ToString ( lvlNum - 1 ) } else { lvlSt = ToString ( lvlNum - 1 ) } if ToString ( j ) -> Length () == 1 { unitSt = \"0\" + ToString ( j ) } else { unitSt = ToString ( j ) } if distance ( gridLn , SORTED_LIST_ISOCURVES_STEPPED -> GetItem ( j ) ) <= 0.1 mm { if j <= SORTED_LIST_ISOCURVES_STEPPED -> Size () - 1 { Set Pt = CreateOrModifyDatum ( \"Point\" , GLASS \\ POINTS , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ POINTS , ptCount ) Pt = intersect ( gridLn , SORTED_LIST_ISOCURVES_STEPPED -> GetItem ( j ) ) Pt . Name = \"PT_\" + lvlSt + \"_\" + unitSt ptCount = ptCount + 1 if distance ( gridLn , SORTED_LIST_ISOCURVES_STEPPED -> GetItem ( j + 1 )) >= 0.1 mm { if distance ( gridLn , SORTED_LIST_ISOCURVES_STEPPED -> GetItem ( j + 2 )) <= 0.1 mm { nxtPt = intersect ( gridLn , SORTED_LIST_ISOCURVES_STEPPED -> GetItem ( j + 2 )) } else { nxtPt = intersect ( gridLn , SORTED_LIST_ISOCURVES_STEPPED -> GetItem ( j + 4 )) } } else { nxtPt = intersect ( gridLn , SORTED_LIST_ISOCURVES_STEPPED -> GetItem ( j + 1 )) } horDist = distance ( Pt , nxtPt ) remDist = horDist - GLASS \\ PARAMETERS \\ GLS_WIDTH - GLASS \\ PARAMETERS \\ VENT_WIDTH offPl = planenormal ( gridLn , Pt ) if distance ( GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ GRID_LINE -> GetItem ( i - 1 ), offPl ) <= 0.1 mm { dirPt = intersect ( GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ GRID_LINE -> GetItem ( i - 1 ), offPl ) Dir = direction ( line ( Pt , dirPt )) Dist = distance ( Pt , dirPt ) if Dist >= maxDist { maxDist = Dist GLASS \\ PARAMETERS \\ MAX_HEIGHT = maxDist } Ln = linetangent ( gridLn , Pt , 0 m , GLASS \\ PARAMETERS \\ VENT_WIDTH , true ) Set Pnl = CreateOrModifyDatum ( \"Surface\" , GLASS \\ PANEL , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ PANEL , pnlCount ) Pnl = extrude ( Ln , Dir , 0 m , Dist , true ) Pnl . Name = Twr + fType + Face + lvlSt + unitSt + \"V\" Pnl . SetAttributeString ( \"TOWER\" , Twr ) Pnl . SetAttributeString ( \"FACADE_TYPE\" , fType ) Pnl . SetAttributeString ( \"FACE\" , Face ) Pnl . SetAttributeInteger ( \"LEVEL\" , lvlNum - 1 ) Pnl . SetAttributeInteger ( \"UNIT_NUMBER\" , j ) Pnl . SetAttributeString ( \"SUB_TYPE\" , \"V\" ) Pnl . SetAttributeString ( \"FLOOR_TYPE\" , floorType ) Pnl . SetAttributeDimension ( \"AREA\" , area ( Pnl ), \"Area\" ) Pnl . SetAttributeDimension ( \"LENGTH\" , GLASS \\ PARAMETERS \\ VENT_WIDTH , \"Length\" ) Pnl . Color = \"150,150,150\" pnlCount = pnlCount + 1 Ln = linetangent ( gridLn , Pt , GLASS \\ PARAMETERS \\ VENT_WIDTH , GLASS \\ PARAMETERS \\ GLS_WIDTH + GLASS \\ PARAMETERS \\ VENT_WIDTH , true ) Set Pnl = CreateOrModifyDatum ( \"Surface\" , GLASS \\ PANEL , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ PANEL , pnlCount ) Pnl = extrude ( Ln , Dir , 0 m , Dist , true ) Pnl . Name = Twr + fType + Face + lvlSt + unitSt + \"A\" Pnl . Color = \"130,170,215\" Pnl . SetAttributeString ( \"TOWER\" , Twr ) Pnl . SetAttributeString ( \"FACADE_TYPE\" , fType ) Pnl . SetAttributeString ( \"FACE\" , Face ) Pnl . SetAttributeInteger ( \"LEVEL\" , lvlNum - 1 ) Pnl . SetAttributeInteger ( \"UNIT_NUMBER\" , j ) Pnl . SetAttributeString ( \"SUB_TYPE\" , \"A\" ) Pnl . SetAttributeString ( \"FLOOR_TYPE\" , floorType ) Pnl . SetAttributeDimension ( \"AREA\" , area ( Pnl ), \"Area\" ) Pnl . SetAttributeDimension ( \"LENGTH\" , GLASS \\ PARAMETERS \\ GLS_WIDTH , \"Length\" ) pnlCount = pnlCount + 1 Ln = linetangent ( gridLn , Pt , GLASS \\ PARAMETERS \\ VENT_WIDTH + GLASS \\ PARAMETERS \\ GLS_WIDTH , horDist , true ) Set Pnl = CreateOrModifyDatum ( \"Surface\" , GLASS \\ PANEL , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ PANEL , pnlCount ) Pnl = extrude ( Ln , Dir , 0 m , Dist , true ) Pnl . Name = Twr + fType + Face + lvlSt + unitSt + \"B\" Pnl . Color = \"130,170,215\" Pnl . SetAttributeString ( \"TOWER\" , Twr ) Pnl . SetAttributeString ( \"FACADE_TYPE\" , fType ) Pnl . SetAttributeString ( \"FACE\" , Face ) Pnl . SetAttributeInteger ( \"LEVEL\" , lvlNum - 1 ) Pnl . SetAttributeInteger ( \"UNIT_NUMBER\" , j ) Pnl . SetAttributeString ( \"SUB_TYPE\" , \"B\" ) Pnl . SetAttributeString ( \"FLOOR_TYPE\" , floorType ) Pnl . SetAttributeDimension ( \"AREA\" , area ( Pnl ), \"Area\" ) Pnl . SetAttributeDimension ( \"LENGTH\" , remDist , \"Length\" ) pnlCount = pnlCount + 1 } } } } } } }","title":"GT \u5e55\u5899\u6848\u4f8b2"},{"location":"ISE-AEC/ARC-FacadeDesign/GT-%E5%B9%95%E5%A2%99%E6%A1%88%E4%BE%8B2/#ekl","text":"let i ( Integer ) let Int ( Curve ) let lvlPl ( Plane ) let L ( List ) let Item ( Plane ) let S ( Surface ) let Ln ( Line ) let j ( Integer ) let Pt ( Point ) let stPl ( Plane ) let offPl ( Plane ) let intCount ( Integer ) let ptCount ( Integer ) let pnlCount ( Integer ) let extrCount ( Integer ) let Extr ( Surface ) let dirPt ( Point ) let Dir ( Direction ) let Dist ( Length ) let maxDist ( Length ) let jmax ( Integer ) let endPt ( Point ) let tngPt ( Point ) let Pnl ( Surface ) let prjB ( Curve ) let Count ( Integer ) let Lng ( Length ) let maxLng ( Length ) let gridLn ( Line ) let Width ( Length ) let cumWidth ( Length ) let Found ( Boolean ) let pnlClr ( String ) let pnlType ( String ) let Twr ( String ) let fType ( String ) let Face ( String ) let lvlNum ( Integer ) let unitNum ( Integer ) let sType ( String ) let floorType ( String ) let lvlSt ( String ) let unitSt ( String ) let lvlMin ( Integer ) let lvlMax ( Integer ) let n ( Integer ) let horDist ( Length ) let nxtPt ( Point ) let remDist ( Length ) let G1 ( Surface ) let G2 ( Surface ) L = SORTED_LIST_PLANES S = INPUT \\ SURFACE i = 1 j = 1 pnlCount = 1 ptCount = 1 extrCount = 1 Count = 1 maxDist = 0 m lvlMin = 1 lvlMax = 1 sType = \"G\" Twr = S . GetAttributeString ( \"TOWER\" ) fType = S . GetAttributeString ( \"FACADE_TYPE\" ) Face = S . GetAttributeString ( \"FACE\" ) GLASS \\ PARAMETERS \\ LEVEL_COUNT = L -> Size () - 1 for i while i <= L -> Size () { Item = L -> GetItem ( i ) lvlNum = Item . GetAttributeInteger ( \"LEVEL\" ) floorType = Item . GetAttributeString ( \"FLOOR_TYPE\" ) if lvlNum <= lvlMin { lvlMin = lvlNum GLASS \\ PARAMETERS \\ MIN_LEVEL = lvlMin } if lvlNum >= lvlMax { lvlMax = lvlNum GLASS \\ PARAMETERS \\ MAX_LEVEL = lvlMax - 1 } if ToString ( lvlNum ) -> Length () == 1 { lvlSt = \"0\" + ToString ( lvlNum ) } else { lvlSt = ToString ( lvlNum ) } Int = intersect ( INPUT \\ SURFACE , Item ) Set stPl = CreateOrModifyDatum ( \"Plane\" , GLASS \\ START_PLANE , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ START_PLANES , i ) stPl = planenormal ( Int , intersect ( GLASS \\ CONSTRUCTION \\ STAGER_LINE , Item ) ) stPl . Name = \"STPL_\" + lvlSt endPt = pointoncurveRatio ( Int , NULL , 1 , true ) maxLng = distance ( stPl , GLASS \\ CONSTRUCTION \\ LIMIT_PLANE ) Set gridLn = CreateOrModifyDatum ( \"Line\" , GLASS \\ LINE_GRID , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ GRID_LINE , i ) gridLn = linenormal ( stPl , project ( endPt , stPl ), 0 m , maxLng , true ) gridLn . SetAttributeString ( \"TOWER\" , Twr ) gridLn . SetAttributeString ( \"FACADE_TYPE\" , fType ) gridLn . SetAttributeString ( \"FACE\" , Face ) gridLn . SetAttributeInteger ( \"LEVEL\" , lvlNum ) gridLn . Name = \"GRID_\" + Twr + fType + Face + lvlSt if GLASS \\ PARAMETERS \\ TESSELATION_TYPE == \"BY_UNIFORM_GRID\" { if i > 1 { j = 1 Count = ceil ( maxLng / GLASS \\ PARAMETERS \\ GLS_WIDTH ) + 1 for j while j <= Count { pnlType = \"G\" pnlClr = \"130,170,215\" if ToString ( lvlNum - 1 ) -> Length () == 1 { lvlSt = \"0\" + ToString ( lvlNum - 1 ) } else { lvlSt = ToString ( lvlNum - 1 ) } offPl = planeoffset ( stPl , GLASS \\ PARAMETERS \\ GLS_WIDTH * ( j - 1 ), true ) if ToString ( j ) -> Length () == 1 { unitSt = \"0\" + ToString ( j ) } else { unitSt = ToString ( j ) } if distance ( offPl , gridLn ) <= 0.1 mm { Set Pt = CreateOrModifyDatum ( \"Point\" , GLASS \\ POINTS , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ POINTS , ptCount ) Pt = intersect ( gridLn , offPl ) Pt . Name = \"PT_\" + lvlSt + \"_\" + unitSt ptCount = ptCount + 1 dirPt = intersect ( GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ GRID_LINE -> GetItem ( i - 1 ), offPl ) Dir = direction ( line ( Pt , dirPt )) Dist = distance ( Pt , dirPt ) if Dist >= maxDist { maxDist = Dist GLASS \\ PARAMETERS \\ MAX_HEIGHT = maxDist } Ln = linetangent ( gridLn , Pt , 0 m , GLASS \\ PARAMETERS \\ GLS_WIDTH , true ) Extr = extrude ( Ln , Dir , 0 m , Dist , true ) if distance ( Extr , INPUT \\ SURFACE ) <= 0.1 mm { if distance ( GLASS \\ CONSTRUCTION \\ SRF_BOUNDARY_EXTRUDE , Extr ) <= 0.1 mm { Set Pnl = CreateOrModifyDatum ( \"Surface\" , GLASS \\ PANEL , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ PANEL , pnlCount ) Set prjB = project ( GLASS \\ CONSTRUCTION \\ SURFACE_BOUNDARY , Extr ) Pnl = split ( Extr , prjB , true ) if area ( Pnl ) < ( Dist * GLASS \\ PARAMETERS \\ GLS_WIDTH ) { sType = pnlType + \"E\" } else { sType = pnlType + \"R\" } pnlCount = pnlCount + 1 } else { Set Pnl = CreateOrModifyDatum ( \"Surface\" , GLASS \\ PANEL , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ PANEL , pnlCount ) Pnl = extrude ( Ln , Dir , 0 m , Dist , true ) sType = pnlType + \"R\" pnlCount = pnlCount + 1 } Pnl . Name = Twr + fType + Face + lvlSt + unitSt Pnl . SetAttributeString ( \"TOWER\" , Twr ) Pnl . SetAttributeString ( \"FACADE_TYPE\" , fType ) Pnl . SetAttributeString ( \"FACE\" , Face ) Pnl . SetAttributeInteger ( \"LEVEL\" , lvlNum - 1 ) Pnl . SetAttributeInteger ( \"UNIT_NUMBER\" , j ) Pnl . SetAttributeString ( \"SUB_TYPE\" , sType ) Pnl . SetAttributeString ( \"FLOOR_TYPE\" , floorType ) Pnl . SetAttributeDimension ( \"AREA\" , area ( Pnl ), \"Area\" ) Pnl . SetAttributeDimension ( \"LENGTH\" , Dist , \"Length\" ) Pnl . Color = pnlClr } } } } } if GLASS \\ PARAMETERS \\ TESSELATION_TYPE == \"BY_MODULAR_GRID\" { if i > 1 { j = 1 Found = false Width = GLASS \\ PARAMETERS \\ GLS_WIDTH cumWidth = 0 m for j while Found == false { if mod ( j , 3 ) == 0 { Width = GLASS \\ PARAMETERS \\ VENT_WIDTH pnlClr = \"150,150,150\" pnlType = \"V\" } else { Width = GLASS \\ PARAMETERS \\ GLS_WIDTH pnlClr = \"130,170,215\" pnlType = \"G\" } if j == 1 { cumWidth = 0 m } offPl = planeoffset ( stPl , cumWidth , true ) cumWidth = cumWidth + Width if distance ( offPl , pointoncurveRatio ( gridLn , NULL , 1 , true )) < Width { Found = true } if ToString ( lvlNum - 1 ) -> Length () == 1 { lvlSt = \"0\" + ToString ( lvlNum - 1 ) } else { lvlSt = ToString ( lvlNum - 1 ) } if ToString ( j ) -> Length () == 1 { unitSt = \"0\" + ToString ( j ) } else { unitSt = ToString ( j ) } if distance ( offPl , gridLn ) <= 0.1 mm { Set Pt = CreateOrModifyDatum ( \"Point\" , GLASS \\ POINTS , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ POINTS , ptCount ) Pt = intersect ( gridLn , offPl ) Pt . Name = \"PT_\" + lvlSt + \"_\" + unitSt ptCount = ptCount + 1 dirPt = intersect ( GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ GRID_LINE -> GetItem ( i - 1 ), offPl ) Dir = direction ( line ( Pt , dirPt )) Dist = distance ( Pt , dirPt ) if Dist >= maxDist { maxDist = Dist GLASS \\ PARAMETERS \\ MAX_HEIGHT = maxDist } Ln = linetangent ( gridLn , Pt , 0 m , Width , true ) Extr = extrude ( Ln , Dir , 0 m , Dist , true ) if distance ( Extr , INPUT \\ SURFACE ) <= 0.1 mm { if distance ( GLASS \\ CONSTRUCTION \\ SRF_BOUNDARY_EXTRUDE , Extr ) <= 0.1 mm { Set Pnl = CreateOrModifyDatum ( \"Surface\" , GLASS \\ PANEL , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ PANEL , pnlCount ) Set prjB = project ( GLASS \\ CONSTRUCTION \\ SURFACE_BOUNDARY , Extr ) Pnl = split ( Extr , prjB , true ) if area ( Pnl ) < ( Dist * Width ) { sType = pnlType + \"E\" } else { sType = pnlType + \"R\" } pnlCount = pnlCount + 1 } else { Set Pnl = CreateOrModifyDatum ( \"Surface\" , GLASS \\ PANEL , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ PANEL , pnlCount ) Pnl = extrude ( Ln , Dir , 0 m , Dist , true ) sType = pnlType + \"R\" pnlCount = pnlCount + 1 } Pnl . Name = Twr + fType + Face + lvlSt + unitSt Pnl . SetAttributeString ( \"TOWER\" , Twr ) Pnl . SetAttributeString ( \"FACADE_TYPE\" , fType ) Pnl . SetAttributeString ( \"FACE\" , Face ) Pnl . SetAttributeInteger ( \"LEVEL\" , lvlNum - 1 ) Pnl . SetAttributeInteger ( \"UNIT_NUMBER\" , j ) Pnl . SetAttributeString ( \"SUB_TYPE\" , sType ) Pnl . SetAttributeString ( \"FLOOR_TYPE\" , floorType ) Pnl . SetAttributeDimension ( \"AREA\" , area ( Pnl ), \"Area\" ) Pnl . SetAttributeDimension ( \"LENGTH\" , Dist , \"Length\" ) Pnl . Color = pnlClr } } } } } if GLASS \\ PARAMETERS \\ TESSELATION_TYPE == \"BY_ISOCURVES\" { if i > 1 { j = 1 for j while j <= SORTED_LIST_ISOCURVES_STEPPED -> Size () { if ToString ( lvlNum - 1 ) -> Length () == 1 { lvlSt = \"0\" + ToString ( lvlNum - 1 ) } else { lvlSt = ToString ( lvlNum - 1 ) } if ToString ( j ) -> Length () == 1 { unitSt = \"0\" + ToString ( j ) } else { unitSt = ToString ( j ) } if distance ( gridLn , SORTED_LIST_ISOCURVES_STEPPED -> GetItem ( j ) ) <= 0.1 mm { if j <= SORTED_LIST_ISOCURVES_STEPPED -> Size () - 1 { Set Pt = CreateOrModifyDatum ( \"Point\" , GLASS \\ POINTS , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ POINTS , ptCount ) Pt = intersect ( gridLn , SORTED_LIST_ISOCURVES_STEPPED -> GetItem ( j ) ) Pt . Name = \"PT_\" + lvlSt + \"_\" + unitSt ptCount = ptCount + 1 if distance ( gridLn , SORTED_LIST_ISOCURVES_STEPPED -> GetItem ( j + 1 )) >= 0.1 mm { if distance ( gridLn , SORTED_LIST_ISOCURVES_STEPPED -> GetItem ( j + 2 )) <= 0.1 mm { nxtPt = intersect ( gridLn , SORTED_LIST_ISOCURVES_STEPPED -> GetItem ( j + 2 )) } else { nxtPt = intersect ( gridLn , SORTED_LIST_ISOCURVES_STEPPED -> GetItem ( j + 4 )) } } else { nxtPt = intersect ( gridLn , SORTED_LIST_ISOCURVES_STEPPED -> GetItem ( j + 1 )) } horDist = distance ( Pt , nxtPt ) remDist = horDist - GLASS \\ PARAMETERS \\ GLS_WIDTH - GLASS \\ PARAMETERS \\ VENT_WIDTH offPl = planenormal ( gridLn , Pt ) if distance ( GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ GRID_LINE -> GetItem ( i - 1 ), offPl ) <= 0.1 mm { dirPt = intersect ( GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ GRID_LINE -> GetItem ( i - 1 ), offPl ) Dir = direction ( line ( Pt , dirPt )) Dist = distance ( Pt , dirPt ) if Dist >= maxDist { maxDist = Dist GLASS \\ PARAMETERS \\ MAX_HEIGHT = maxDist } Ln = linetangent ( gridLn , Pt , 0 m , GLASS \\ PARAMETERS \\ VENT_WIDTH , true ) Set Pnl = CreateOrModifyDatum ( \"Surface\" , GLASS \\ PANEL , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ PANEL , pnlCount ) Pnl = extrude ( Ln , Dir , 0 m , Dist , true ) Pnl . Name = Twr + fType + Face + lvlSt + unitSt + \"V\" Pnl . SetAttributeString ( \"TOWER\" , Twr ) Pnl . SetAttributeString ( \"FACADE_TYPE\" , fType ) Pnl . SetAttributeString ( \"FACE\" , Face ) Pnl . SetAttributeInteger ( \"LEVEL\" , lvlNum - 1 ) Pnl . SetAttributeInteger ( \"UNIT_NUMBER\" , j ) Pnl . SetAttributeString ( \"SUB_TYPE\" , \"V\" ) Pnl . SetAttributeString ( \"FLOOR_TYPE\" , floorType ) Pnl . SetAttributeDimension ( \"AREA\" , area ( Pnl ), \"Area\" ) Pnl . SetAttributeDimension ( \"LENGTH\" , GLASS \\ PARAMETERS \\ VENT_WIDTH , \"Length\" ) Pnl . Color = \"150,150,150\" pnlCount = pnlCount + 1 Ln = linetangent ( gridLn , Pt , GLASS \\ PARAMETERS \\ VENT_WIDTH , GLASS \\ PARAMETERS \\ GLS_WIDTH + GLASS \\ PARAMETERS \\ VENT_WIDTH , true ) Set Pnl = CreateOrModifyDatum ( \"Surface\" , GLASS \\ PANEL , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ PANEL , pnlCount ) Pnl = extrude ( Ln , Dir , 0 m , Dist , true ) Pnl . Name = Twr + fType + Face + lvlSt + unitSt + \"A\" Pnl . Color = \"130,170,215\" Pnl . SetAttributeString ( \"TOWER\" , Twr ) Pnl . SetAttributeString ( \"FACADE_TYPE\" , fType ) Pnl . SetAttributeString ( \"FACE\" , Face ) Pnl . SetAttributeInteger ( \"LEVEL\" , lvlNum - 1 ) Pnl . SetAttributeInteger ( \"UNIT_NUMBER\" , j ) Pnl . SetAttributeString ( \"SUB_TYPE\" , \"A\" ) Pnl . SetAttributeString ( \"FLOOR_TYPE\" , floorType ) Pnl . SetAttributeDimension ( \"AREA\" , area ( Pnl ), \"Area\" ) Pnl . SetAttributeDimension ( \"LENGTH\" , GLASS \\ PARAMETERS \\ GLS_WIDTH , \"Length\" ) pnlCount = pnlCount + 1 Ln = linetangent ( gridLn , Pt , GLASS \\ PARAMETERS \\ VENT_WIDTH + GLASS \\ PARAMETERS \\ GLS_WIDTH , horDist , true ) Set Pnl = CreateOrModifyDatum ( \"Surface\" , GLASS \\ PANEL , GLASS \\ RELATIONS \\ KP_LANDSCAPE_GLASS \\ PANEL , pnlCount ) Pnl = extrude ( Ln , Dir , 0 m , Dist , true ) Pnl . Name = Twr + fType + Face + lvlSt + unitSt + \"B\" Pnl . Color = \"130,170,215\" Pnl . SetAttributeString ( \"TOWER\" , Twr ) Pnl . SetAttributeString ( \"FACADE_TYPE\" , fType ) Pnl . SetAttributeString ( \"FACE\" , Face ) Pnl . SetAttributeInteger ( \"LEVEL\" , lvlNum - 1 ) Pnl . SetAttributeInteger ( \"UNIT_NUMBER\" , j ) Pnl . SetAttributeString ( \"SUB_TYPE\" , \"B\" ) Pnl . SetAttributeString ( \"FLOOR_TYPE\" , floorType ) Pnl . SetAttributeDimension ( \"AREA\" , area ( Pnl ), \"Area\" ) Pnl . SetAttributeDimension ( \"LENGTH\" , remDist , \"Length\" ) pnlCount = pnlCount + 1 } } } } } } }","title":"ekl"},{"location":"ISE-AEC/ARC-FacadeDesign/KP%E5%88%86%E6%A0%BC%E9%98%B5%E5%88%97/","text":"let i ( Integer ) let L ( List ) let S ( Surface ) let j ( Integer ) let Count ( Integer ) let pnlType ( String ) let F ( Feature ) let PW ( Feature ) let Twr ( String ) let fType ( String ) let Face ( String ) let lvlNum ( Integer ) let unitNum ( Integer ) let sType ( String ) let floorType ( String ) let lvlSt ( String ) let unitSt ( String ) let subSt ( String ) let Count ( Integer ) let tPl ( Plane ) let bPl ( Plane ) let tLn ( Line ) let bLn ( Line ) let CrvR ( Curve ) let CrvM ( Curve ) let CrvL ( Curve ) let vTypeR ( String ) let vTypeL ( String ) let vLimitR ( Integer ) let vLimitL ( Integer ) let vType ( String ) let vLimit ( Integer ) let PtR ( Point ) let PtL ( Point ) let Dist ( Length ) let Limit5 ( Length ) let Limit4 ( Length ) let Limit3 ( Length ) let Limit2 ( Length ) let Limit1 ( Length ) let glsW1 ( Length ) let glsW2 ( Length ) let ventW ( Length ) let aR ( Length ) let aL ( Length ) let ListT ( List ) let ListL ( List ) let NPla ( Plane ) let NPlb ( Plane ) let PtA ( Point ) let PtB ( Point ) let PtC ( Point ) let PtD ( Point ) let PtM ( Point ) let Pt ( Point ) let Pnl ( Surface ) let Bdry ( Curve ) let ptCount ( Integer ) let pnlCount ( Integer ) let intCount ( Integer ) let vCount ( Integer ) let tempPl ( Plane ) let PtV ( Point ) let PtG ( Point ) let tempW ( Length ) let refPt ( Point ) let pnlClr1 ( String ) let pnlClr2 ( String ) let pnlType ( String ) let clrS ( String ) let clrR ( String ) let clrV ( String ) let pltType ( String ) let pltCrv ( Curve ) let pltPt ( Point ) let pltIndex ( Integer ) let ptList ( List ) let Item ( Point ) let Found ( Boolean ) let topLn ( Line ) let Dist1 ( Length ) let prevDist ( Length ) let unitType ( String ) let unitCount ( Integer ) let subCount ( Integer ) let unitTypeL ( List ) let unitCountL ( List ) let subCountL ( List ) let unitClr ( String ) let unitType1 ( String ) let unitType2 ( String ) let AB ( Line ) let BC ( Line ) let CD ( Line ) let DA ( Line ) let lvlReal ( Real ) let rowIndex ( Integer ) let Case ( Real ) let Dist1 ( Length ) let Dist2 ( Length ) let caseL ( List ) let ptLCount ( Integer ) let ptRCount ( Integer ) let vType ( String ) let tempL ( List ) let vSheet ( DTSheet ) let sSheet ( DTSheet ) let PlA ( Plane ) let PlB ( Plane ) let plCount ( Integer ) let PlR ( Plane ) let PlL ( Plane ) let PlM ( Plane ) let Count1 ( Integer ) let minOff ( Real ) let Found ( Boolean ) let pltRef ( Point ) let pltOp ( Integer ) let B ( Boolean ) let pltFound ( Boolean ) if GENERATE_GEOMETRY == true { `Relations\\VB Script\\VB_DELETE` . Run ( Relations \\ KP_UNIT_INSTANTIATE \\ PANELS , PANELS ) clrS = \"131,170,214\" clrR = \"129,192,232\" clrV = \"110,110,110\" Twr = `RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\TOWER` fType = `RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\FACADE_TYPE` Face = `RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\FACE` lvlNum = `RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\LEVEL` floorType = `RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\FLOOR_TYPE` pltType = `RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\LFC_PLT_TYPE_ABOVE` tPl = CONSTRUCTION \\ PL_DATUM_TOP bPl = CONSTRUCTION \\ PL_DATUM_BOT tLn = CONSTRUCTION \\ LINE_TOP bLn = CONSTRUCTION \\ LINE_BOT Limit3 = LIMIT_SUBDIVISION_03 Limit2 = LIMIT_SUBDIVISION_02 glsW1 = GLS_WIDTH_01 glsW2 = GLS_WIDTH_02 ventW = VENT_WIDTH if floorType == \"M\" { lvlReal = lvlNum + 0.5 } else { lvlReal = lvlNum } if Twr == \"1\" { vSheet = Relations \\ DESIGN_TABLE \\ T01_LFC_VENT_TYPES \\ Sheet sSheet = Relations \\ DESIGN_TABLE \\ T01_LFC_SUBDIVISION_TYPES \\ Sheet } if Twr == \"2\" { vSheet = Relations \\ DESIGN_TABLE \\ T02_LFC_VENT_TYPES \\ Sheet sSheet = Relations \\ DESIGN_TABLE \\ T02_LFC_SUBDIVISION_TYPES \\ Sheet } rowIndex = sSheet -> LocateInColumn ( 14 , lvlReal ) L = LIST_CRV Count = L -> Size () unitTypeL -> RemoveAll () unitCountL -> RemoveAll () subCountL -> RemoveAll () LIST_CASES -> RemoveAll () ptList -> RemoveAll () i = 1 if ToString ( lvlNum ) -> Length () == 1 { lvlSt = \"0\" + ToString ( lvlNum ) } else { lvlSt = ToString ( lvlNum ) } pltFound = false vCount = 1 ptCount = 1 plCount = 1 i = 1 for i while i <= Count { if mod ( i , 2 ) == 1 { if ToString ( i ) -> Length () == 1 { unitSt = \"0\" + ToString ( i ) } else { unitSt = ToString ( i ) } if i >= 3 and i <= 13 { Case = sSheet -> CellAsReal ( rowIndex , i ) LIST_CASES -> Append ( Case ) B = false if Case == 0 { Case = sSheet -> CellAsReal ( rowIndex , i + 2 ) LIST_CASES -> Append ( Case ) CrvR = L -> GetItem ( i + 2 ) CrvM = L -> GetItem ( i ) CrvL = L -> GetItem ( i - 2 ) vTypeR = vSheet -> CellAsString ( rowIndex , i + 2 ) vTypeL = vSheet -> CellAsString ( rowIndex , i - 2 ) i = i + 2 B = true } else { CrvR = L -> GetItem ( i ) CrvM = L -> GetItem ( i - 1 ) CrvL = L -> GetItem ( i - 2 ) vTypeR = vSheet -> CellAsString ( rowIndex , i ) vTypeL = vSheet -> CellAsString ( rowIndex , i - 2 ) } if vTypeR == \"N\" { aR = 0 mm } if vTypeR == \"R\" { aR = 0 mm } if vTypeR == \"M\" { aR = - ( ventW / 2 ) } if vTypeR == \"L\" { aR = - ventW } if vTypeL == \"N\" { aL = 0 m } if vTypeL == \"R\" { aL = ventW } if vTypeL == \"M\" { aL = ventW / 2 } if vTypeL == \"L\" { aL = 0 m } Set PtR = CreateOrModifyDatum ( \"Point\" , POINTS_R , Relations \\ KP_UNIT_INSTANTIATE \\ POINTS_R , ptCount ) Set PtR = translate ( intersect ( CrvR , tPl ), direction ( tLn ), aR ) PtR . Name = \"PtR_\" + ToString ( i ) PlR = planenormal ( tLn , PtR ) PtM = intersect ( CrvM , tPl ) PlM = planenormal ( tLn , PtM ) Set PtL = CreateOrModifyDatum ( \"Point\" , POINTS_L , Relations \\ KP_UNIT_INSTANTIATE \\ POINTS_L , ptCount ) Set PtL = translate ( intersect ( CrvL , tPl ), direction ( tLn ), aL ) PtL . Name = \"PtL_\" + ToString ( i ) PlL = planenormal ( tLn , PtL ) ptCount = ptCount + 1 /*CASE 04 - 4 Panels */ intCount = 1 if Case == 4 { Dist1 = distance ( PtL , PtM ) Dist2 = distance ( PtM , PtR ) if Dist1 >= Limit2 { /*S1*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planenormal ( tLn , PtL ) unitTypeL -> Append ( \"S1\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 /*X*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planeoffset ( PlL , glsW1 , true ) unitTypeL -> Append ( \"R\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 } if Dist1 <= Limit2 { /*X*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planenormal ( tLn , PtL ) unitTypeL -> Append ( \"R\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 /*S2*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planeoffset ( PlM , - glsW2 , true ) unitTypeL -> Append ( \"S2\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 } if Dist2 >= Limit2 { /*X*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 \u3002 PlA = planenormal ( tLn , PtM ) unitTypeL -> Append ( \"R\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 /*S1*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planeoffset ( PlR , - glsW1 , true ) unitTypeL -> Append ( \"S1\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 } if Dist2 <= Limit2 { /*S2*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planenormal ( tLn , PtM ) unitTypeL -> Append ( \"S2\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 /*X*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planeoffset ( PlM , glsW2 , true ) unitTypeL -> Append ( \"R\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 } /*VENT*/ if vTypeR <> \"N\" { Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planenormal ( tLn , PtR ) unitTypeL -> Append ( \"V\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 } } /*CASE 03 - 3 Panels */ intCount = 1 if Case == 3 { Dist = distance ( PtL , PtR ) if Dist >= Limit3 { /*S1*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planenormal ( tLn , PtL ) unitTypeL -> Append ( \"S1\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 /*X*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planeoffset ( PlL , glsW1 , true ) unitTypeL -> Append ( \"R\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 /*S1*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planeoffset ( PlR , - glsW1 , true ) unitTypeL -> Append ( \"S1\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 /*VENT*/ if vTypeR <> \"N\" { Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planenormal ( tLn , PtR ) unitTypeL -> Append ( \"V\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 } } if Dist <= Limit3 { /*R*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planenormal ( tLn , PtL ) unitTypeL -> Append ( \"R\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 /*S2*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planeoffset ( PlM , - ( glsW2 / 2 ), true ) unitTypeL -> Append ( \"S2\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 /*R*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planeoffset ( PlM , glsW2 / 2 , true ) unitTypeL -> Append ( \"R\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 /*VENT*/ if vTypeR <> \"N\" { Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planenormal ( tLn , PtR ) unitTypeL -> Append ( \"V\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 } } } /*CASE 02 - 2 Panels */ intCount = 1 if Case == 2 { Dist = distance ( PtR , PtL ) if Dist > Limit2 { if vTypeR <> \"N\" { refPt = PtR tempW = - glsW1 unitType1 = \"R\" unitType2 = \"S1\" } else { refPt = PtL tempW = glsW1 unitType1 = \"S1\" unitType2 = \"R\" } } if Dist < Limit2 { if vTypeR <> \"N\" { refPt = PtL tempW = glsW2 unitType1 = \"S2\" unitType2 = \"R\" } else { refPt = PtR tempW = - glsW2 unitType1 = \"R\" unitType2 = \"S2\" } } Set PtM = translate ( refPt , direction ( tLn ), tempW ) PlM = planenormal ( tLn , PtM ) /*PANEL 01*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planenormal ( tLn , PtL ) unitTypeL -> Append ( unitType1 ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 /*PANEL 02*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planenormal ( tLn , PtM ) unitTypeL -> Append ( unitType2 ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 /*VENT*/ if vTypeR <> \"N\" { Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planenormal ( tLn , PtR ) unitTypeL -> Append ( \"V\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 } } /*CASE 04 - 1 Panel*/ intCount = 1 if Case == 1 { /*REST 01*/ Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planenormal ( tLn , PtL ) unitTypeL -> Append ( \"R\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 /*VENT*/ if vTypeR <> \"N\" { Set PlA = CreateOrModifyDatum ( \"Plane\" , PLANES , Relations \\ KP_UNIT_INSTANTIATE \\ PLANES , plCount ) PlA . Name = \"PlaneA_\" + ToString ( i ) + \"_\" + ToString ( intCount ) plCount = plCount + 1 PlA = planenormal ( tLn , PtR ) unitTypeL -> Append ( \"V\" ) unitCountL -> Append ( i ) subCountL -> Append ( intCount ) intCount = intCount + 1 } } if pltType == \"LEFT\" { if `RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\LEVEL` == 5 or `RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\LEVEL` == 6 { pltIndex = 12 } else { pltIndex = 10 } topLn = CONSTRUCTION \\ LINE_SPN Found = true minOff = - 0.01 pltRef = PtL pltOp = 1 } if pltType == \"RIGHT\" { pltIndex = 4 topLn = CONSTRUCTION \\ LINE_TOP Found = false minOff = 0.03 pltRef = PtR pltOp = - 1 } if pltType == \"NONE\" { pltIndex = 12 topLn = CONSTRUCTION \\ LINE_TOP Found = false minOff = 0.03 pltRef = PtR pltOp = - 1 } if pltFound == false { if i > pltIndex { Dist = distance ( PtR , PtL ) Dist1 = distance ( pltRef , PtM ) if Case == 4 { Set pltPt = CreateOrModifyDatum ( \"Point\" , POINT_PLT , Relations \\ KP_UNIT_INSTANTIATE \\ POINT_PLT , 1 ) pltPt = intersect ( tLn , L -> GetItem ( pltIndex )) } if Case == 3 { if Dist >= Limit3 { Set pltPt = CreateOrModifyDatum ( \"Point\" , POINT_PLT , Relations \\ KP_UNIT_INSTANTIATE \\ POINT_PLT , 1 ) Set pltPt = translate ( pltRef , direction ( tLn ), glsW1 * pltOp ) } if Dist < Limit3 { Set pltPt = CreateOrModifyDatum ( \"Point\" , POINT_PLT , Relations \\ KP_UNIT_INSTANTIATE \\ POINT_PLT , 1 ) Set pltPt = translate ( pltRef , direction ( tLn ), ( Dist1 - ( glsW2 / 2 )) * pltOp ) } } if Case == 2 { Set pltPt = CreateOrModifyDatum ( \"Point\" , POINT_PLT , Relations \\ KP_UNIT_INSTANTIATE \\ POINT_PLT , 1 ) pltPt = intersect ( tLn , L -> GetItem ( pltIndex - pltOp )) } if Case == 1 { Set pltPt = CreateOrModifyDatum ( \"Point\" , POINT_PLT , Relations \\ KP_UNIT_INSTANTIATE \\ POINT_PLT , 1 ) pltPt = intersect ( tLn , L -> GetItem ( pltIndex - pltOp )) } if Case == 0 { Set pltPt = CreateOrModifyDatum ( \"Point\" , POINT_PLT , Relations \\ KP_UNIT_INSTANTIATE \\ POINT_PLT , 1 ) pltPt = intersect ( tLn , L -> GetItem ( pltIndex - pltOp )) } pltPt . Name = \"POINT_PLT_START\" pltFound = true } } if B == true { i = i + 2 } } } } LIST_UNIT_TYPES = unitTypeL LIST_UNITS = unitCountL LIST_SUB_UNITS = subCountL LIST_PLANES = ptList Dist = 500 m prevDist = 1000 m intCount = 1 pnlCount = 1 j = 1 Count1 = Relations \\ KP_UNIT_INSTANTIATE \\ PLANES -> Size () for j while j <= Count1 { PlA = Relations \\ KP_UNIT_INSTANTIATE \\ PLANES -> GetItem ( j ) if j == Count1 { PlB = planenormal ( tLn , CONSTRUCTION \\ PT_TOP_END ) } else { PlB = Relations \\ KP_UNIT_INSTANTIATE \\ PLANES -> GetItem ( j + 1 ) } unitType = unitTypeL -> GetItem ( j ) unitCount = unitCountL -> GetItem ( j ) subCount = subCountL -> GetItem ( j ) if unitType == \"V\" { unitClr = clrV } if unitType == \"S1\" { unitClr = clrS } if unitType == \"S2\" { unitClr = clrS } if unitType == \"R\" { unitClr = clrR } if ToString ( unitCount ) -> Length () == 1 { unitSt = \"0\" + ToString ( unitCount ) } else { unitSt = ToString ( unitCount ) } subSt = \"0\" + ToString ( subCount ) Dist1 = distance ( pltPt , PlA ) if pltType == \"LEFT\" { if Dist1 == 0 m { topLn = CONSTRUCTION \\ LINE_TOP Found = false minOff = 0.03 } } else { if Dist1 == 0 m { topLn = CONSTRUCTION \\ LINE_SPN Found = true minOff = - 0.01 } } if j == 1 { Set PtA = CreateOrModifyDatum ( \"Point\" , POINTS , Relations \\ KP_UNIT_INSTANTIATE \\ POINTS , intCount ) PtA = intersect ( topLn , L -> GetItem ( 1 )) } else { Set PtA = CreateOrModifyDatum ( \"Point\" , POINTS , Relations \\ KP_UNIT_INSTANTIATE \\ POINTS , intCount ) PtA = intersect ( topLn , PlA ) } PtA . Name = \"PT_\" + unitSt + \"_\" + subSt + \"_\" + \"A\" intCount = intCount + 1 if j == Count1 { Set PtB = CreateOrModifyDatum ( \"Point\" , POINTS , Relations \\ KP_UNIT_INSTANTIATE \\ POINTS , intCount ) PtB = intersect ( topLn , L -> GetItem ( Count )) } else { Set PtB = CreateOrModifyDatum ( \"Point\" , POINTS , Relations \\ KP_UNIT_INSTANTIATE \\ POINTS , intCount ) PtB = intersect ( topLn , PlB ) } PtB . Name = \"PT_\" + unitSt + \"_\" + subSt + \"_\" + \"B\" intCount = intCount + 1 if j == Count1 { Set PtC = CreateOrModifyDatum ( \"Point\" , POINTS , Relations \\ KP_UNIT_INSTANTIATE \\ POINTS , intCount ) PtC = intersect ( bLn , L -> GetItem ( Count )) } else { Set PtC = CreateOrModifyDatum ( \"Point\" , POINTS , Relations \\ KP_UNIT_INSTANTIATE \\ POINTS , intCount ) PtC = intersect ( bLn , PlB ) } PtC . Name = \"PT_\" + unitSt + \"_\" + subSt + \"_\" + \"C\" intCount = intCount + 1 if j == 1 { Set PtD = CreateOrModifyDatum ( \"Point\" , POINTS , Relations \\ KP_UNIT_INSTANTIATE \\ POINTS , intCount ) PtD = intersect ( bLn , L -> GetItem ( 1 ) ) } else { Set PtD = CreateOrModifyDatum ( \"Point\" , POINTS , Relations \\ KP_UNIT_INSTANTIATE \\ POINTS , intCount ) PtD = intersect ( bLn , PlA ) } PtD . Name = \"PT_\" + unitSt + \"_\" + subSt + \"_\" + \"D\" intCount = intCount + 1 if GEOMETRY_TYPE == \"SURFACES\" { Bdry = assemble ( line ( PtA , PtB ), line ( PtB , PtC ), line ( PtC , PtD ), line ( PtD , PtA )) Set Pnl = CreateOrModifyDatum ( \"Surface\" , SURFACES , Relations \\ KP_UNIT_INSTANTIATE \\ SURFACES , pnlCount ) Pnl = fill ( Bdry ) if floorType == \"M\" { Pnl . Name = Twr + fType + Face + lvlSt + floorType + unitSt + \"-\" + subSt + \"-\" + unitType } else { Pnl . Name = Twr + fType + Face + lvlSt + unitSt + \"-\" + subSt + \"-\" + unitType } Pnl . Color = unitClr pnlCount = pnlCount + 1 Pnl . SetAttributeString ( \"TOWER\" , Twr ) Pnl . SetAttributeString ( \"FACADE_TYPE\" , fType ) Pnl . SetAttributeString ( \"FACE\" , Face ) Pnl . SetAttributeString ( \"FLOOR_TYPE\" , floorType ) Pnl . SetAttributeInteger ( \"LEVEL\" , lvlNum ) Pnl . SetAttributeInteger ( \"UNIT\" , unitCount ) Pnl . SetAttributeInteger ( \"SUB_UNIT\" , subCount ) Pnl . SetAttributeString ( \"SUB_TYPE\" , unitType ) } /*else { if unitType<>\"V\" { F=InstantiateTemplate(\"UNS_RFL_CATALOG|LFC_STD_GLS_UNIT\",PANELS ) F->SetAttributeObject(\"PT_A\",PtA) F->SetAttributeObject(\"PT_B\",PtB) F->SetAttributeObject(\"PT_C\",PtC) F->SetAttributeObject(\"PT_D\",PtD) F->SetAttributeObject(\"PL_DATUM_TOP\",CONSTRUCTION\\PL_DATUM_TOP ) F->SetAttributeObject(\"PL_DATUM_BOT\",CONSTRUCTION\\PL_DATUM_BOT ) F->SetAttributeObject(\"PL_SPANDREL\",CONSTRUCTION\\PL_SPANDREL ) EndModifyTemplate(F) Relations\\KP_UNIT_INSTANTIATE\\PANELS ->SetItem( F->GetAttributeObject(\"LFC\"),pnlCount) pnlCount = pnlCount+1 } else { if Found ==true { F=InstantiateTemplate(\"UNS_RFL_CATALOG|LFC_STD_VNT_UNIT_OP\",PANELS ) F->SetAttributeObject(\"PT_A\",PtA) F->SetAttributeObject(\"PT_B\",PtB) F->SetAttributeObject(\"PT_C\",PtC) F->SetAttributeObject(\"PT_D\",PtD) F->SetAttributeObject(\"PL_DATUM_TOP\",CONSTRUCTION\\PL_DATUM_TOP ) F->SetAttributeObject(\"PL_DATUM_BOT\",CONSTRUCTION\\PL_DATUM_BOT ) F->SetAttributeObject(\"BOT_PLANE\", `External References\\LVL_T1_8` ) EndModifyTemplate(F) Relations\\KP_UNIT_INSTANTIATE\\PANELS ->SetItem( F->GetAttributeObject(\"LFC\"),pnlCount) pnlCount = pnlCount+1 } if Found ==false { F=InstantiateTemplate(\"UNS_RFL_CATALOG|LFC_STD_VNT_UNIT\",PANELS ) F->SetAttributeObject(\"PT_A\",PtA) F->SetAttributeObject(\"PT_B\",PtB) F->SetAttributeObject(\"PT_C\",PtC) F->SetAttributeObject(\"PT_D\",PtD) F->SetAttributeObject(\"PL_DATUM_TOP\",CONSTRUCTION\\PL_DATUM_TOP ) F->SetAttributeObject(\"PL_DATUM_BOT\",CONSTRUCTION\\PL_DATUM_BOT ) F->SetAttributeObject(\"PL_SPANDREL\",CONSTRUCTION\\PL_SPANDREL ) F->SetAttributeObject(\"BOT_PLANE\", `External References\\LVL_T1_8` ) EndModifyTemplate(F) Relations\\KP_UNIT_INSTANTIATE\\PANELS ->SetItem( F->GetAttributeObject(\"LFC\"),pnlCount) pnlCount = pnlCount+1 } } PW=F->GetAttributeObject(\"LFC\") PW->SetAttributeString(\"TOWER\",Twr) PW->SetAttributeString(\"FACADE_TYPE\",fType) PW->SetAttributeString(\"FACE\",Face) PW->SetAttributeInteger(\"LEVEL\",lvlNum) PW->SetAttributeInteger(\"UNIT\",unitCount) PW->SetAttributeString(\"FLOOR_TYPE\",floorType) PW->SetAttributeString(\"SUB_TYPE\",unitType) PW->SetAttributeInteger(\"SUB_UNIT\",subCount) PW->SetAttributeReal(\"MIN_OFFSET_L2\",minOff) if floorType==\"M\" { PW.Name = Twr+fType+Face+lvlSt+floorType+unitSt+\"-\"+subSt+\"-\"+unitType } else { PW.Name = Twr+fType+Face+lvlSt+unitSt+\"-\"+subSt+\"-\"+unitType } */ } } else { `Relations\\VB Script\\VB_DELETE` . Run ( Relations \\ KP_UNIT_INSTANTIATE \\ PANELS , PANELS ) }","title":"KP\u5206\u683c\u9635\u5217"},{"location":"ISE-AEC/ARC-FacadeDesign/facade1/","text":"case let i ( integer ) let j ( integer ) let k ( integer ) let P1 ( point ) let P2 ( point ) let P0 ( point ) let midpt ( point ) let jList ( list ) let pList ( list ) let mList ( list ) midpt = pointoncurveRatio ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 , NULL , 0.5 , true ) midpt . Name = \"Mid_Point\" jList -> RemoveAll () pList -> RemoveAll () mList -> RemoveAll () i = 1 for i while length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 >= ( i * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length ) + REF_PTS_01 \\ TOP_02 \\ Parameters \\ MinLength { if ( ( length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 - i * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length < REF_PTS_01 \\ TOP_02 \\ Parameters \\ MinLength + REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length ) and ( ( length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 - i * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length >= REF_PTS_01 \\ TOP_02 \\ Parameters \\ MinLength )) ) { P1 = pointoncurve ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 , midpt , i * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length , true ) P1 . Name = \"Point_\" + ToString ( i ) jList -> AddItem ( P1 , i ) P1 = pointoncurve ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 , midpt , length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 , true ) P1 . Name = \"Point_\" + ToString ( i + 1 ) jList -> AddItem ( P1 , i + 1 ) } else { P1 = pointoncurve ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 , midpt , i * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length , true ) P1 . Name = \"Point_\" + ToString ( i ) jList -> AddItem ( P1 , i ) } i = i + 1 } j = 1 for j while length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 >= ( j * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length ) + REF_PTS_01 \\ TOP_02 \\ Parameters \\ MinLength { if ( ( length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 - j * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length < REF_PTS_01 \\ TOP_02 \\ Parameters \\ MinLength + REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length ) and ( ( length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 - j * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length >= REF_PTS_01 \\ TOP_02 \\ Parameters \\ MinLength )) ) { P2 = pointoncurve ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 , midpt , j * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length , false ) P2 . Name = \"Point_\" + ToString ( j ) pList -> AddItem ( P2 , j ) P2 = pointoncurve ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 , midpt , length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 , false ) P2 . Name = \"Point_\" + ToString ( j + 1 ) pList -> AddItem ( P2 , j + 1 ) } else { P2 = pointoncurve ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 , midpt , j * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length , false ) P2 . Name = \"Point_\" + ToString ( j ) pList -> AddItem ( P2 , j ) } j = j + 1 } /*\u91cd\u65b0\u6392\u5e8f\u7f16\u7ec4*/ k = 1 i = 1 j = 1 for k while k <= ( jList . Size () + pList . Size () + 1 ) { for i while i <= jList . Size () { P0 = CreateOrModifyDatum ( \"Point\" , REF_PTS_01 \\ TOP_02 \\ PTS , REF_PTS_01 \\ TOP_02 \\ Relations \\ GeneratePoint \\ POINTS , k ) P0 = jList -> GetItem ( jList . Size () + 1 - i ) P0 . Name = \"Point_\" + ToString ( k ) i = i + 1 k = k + 1 } /*\u5c06\u4e2d\u70b9\u52a0\u5165\u5e8f\u5217*/ P0 = CreateOrModifyDatum ( \"Point\" , REF_PTS_01 \\ TOP_02 \\ PTS , REF_PTS_01 \\ TOP_02 \\ Relations \\ GeneratePoint \\ POINTS , k ) P0 = midpt P0 . Name = \"Point_\" + ToString ( k ) k = k + 1 for j while j <= pList . Size () { P0 = CreateOrModifyDatum ( \"Point\" , REF_PTS_01 \\ TOP_02 \\ PTS , REF_PTS_01 \\ TOP_02 \\ Relations \\ GeneratePoint \\ POINTS , k ) P0 = pList -> GetItem ( j ) P0 . Name = \"Point_\" + ToString ( k ) j = j + 1 k = k + 1 } }","title":"Facade1"},{"location":"ISE-AEC/ARC-FacadeDesign/facade1/#case","text":"let i ( integer ) let j ( integer ) let k ( integer ) let P1 ( point ) let P2 ( point ) let P0 ( point ) let midpt ( point ) let jList ( list ) let pList ( list ) let mList ( list ) midpt = pointoncurveRatio ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 , NULL , 0.5 , true ) midpt . Name = \"Mid_Point\" jList -> RemoveAll () pList -> RemoveAll () mList -> RemoveAll () i = 1 for i while length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 >= ( i * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length ) + REF_PTS_01 \\ TOP_02 \\ Parameters \\ MinLength { if ( ( length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 - i * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length < REF_PTS_01 \\ TOP_02 \\ Parameters \\ MinLength + REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length ) and ( ( length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 - i * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length >= REF_PTS_01 \\ TOP_02 \\ Parameters \\ MinLength )) ) { P1 = pointoncurve ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 , midpt , i * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length , true ) P1 . Name = \"Point_\" + ToString ( i ) jList -> AddItem ( P1 , i ) P1 = pointoncurve ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 , midpt , length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 , true ) P1 . Name = \"Point_\" + ToString ( i + 1 ) jList -> AddItem ( P1 , i + 1 ) } else { P1 = pointoncurve ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 , midpt , i * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length , true ) P1 . Name = \"Point_\" + ToString ( i ) jList -> AddItem ( P1 , i ) } i = i + 1 } j = 1 for j while length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 >= ( j * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length ) + REF_PTS_01 \\ TOP_02 \\ Parameters \\ MinLength { if ( ( length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 - j * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length < REF_PTS_01 \\ TOP_02 \\ Parameters \\ MinLength + REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length ) and ( ( length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 - j * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length >= REF_PTS_01 \\ TOP_02 \\ Parameters \\ MinLength )) ) { P2 = pointoncurve ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 , midpt , j * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length , false ) P2 . Name = \"Point_\" + ToString ( j ) pList -> AddItem ( P2 , j ) P2 = pointoncurve ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 , midpt , length ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 ) / 2 , false ) P2 . Name = \"Point_\" + ToString ( j + 1 ) pList -> AddItem ( P2 , j + 1 ) } else { P2 = pointoncurve ( REF_PTS_01 \\ TOP_02 \\ CURVE \\ Curve .2 , midpt , j * REF_PTS_01 \\ TOP_02 \\ Parameters \\ Length , false ) P2 . Name = \"Point_\" + ToString ( j ) pList -> AddItem ( P2 , j ) } j = j + 1 } /*\u91cd\u65b0\u6392\u5e8f\u7f16\u7ec4*/ k = 1 i = 1 j = 1 for k while k <= ( jList . Size () + pList . Size () + 1 ) { for i while i <= jList . Size () { P0 = CreateOrModifyDatum ( \"Point\" , REF_PTS_01 \\ TOP_02 \\ PTS , REF_PTS_01 \\ TOP_02 \\ Relations \\ GeneratePoint \\ POINTS , k ) P0 = jList -> GetItem ( jList . Size () + 1 - i ) P0 . Name = \"Point_\" + ToString ( k ) i = i + 1 k = k + 1 } /*\u5c06\u4e2d\u70b9\u52a0\u5165\u5e8f\u5217*/ P0 = CreateOrModifyDatum ( \"Point\" , REF_PTS_01 \\ TOP_02 \\ PTS , REF_PTS_01 \\ TOP_02 \\ Relations \\ GeneratePoint \\ POINTS , k ) P0 = midpt P0 . Name = \"Point_\" + ToString ( k ) k = k + 1 for j while j <= pList . Size () { P0 = CreateOrModifyDatum ( \"Point\" , REF_PTS_01 \\ TOP_02 \\ PTS , REF_PTS_01 \\ TOP_02 \\ Relations \\ GeneratePoint \\ POINTS , k ) P0 = pList -> GetItem ( j ) P0 . Name = \"Point_\" + ToString ( k ) j = j + 1 k = k + 1 } }","title":"case"},{"location":"ISE-AEC/ARC-FacadeResearch/facade%20research/","text":"Facade Research","title":"Facade Research"},{"location":"ISE-AEC/ARC-FacadeResearch/facade%20research/#facade-research","text":"","title":"Facade Research"},{"location":"ISE-AEC/ARC-Generali%20Tower/GenerailTower/","text":"","title":"GenerailTower"},{"location":"ISE-AEC/ARC-New%20Google%20Headquarters/New%20Google%20Headquarters/","text":"\u5e55\u5899-New Google Headquarters","title":"\u5e55\u5899-New Google Headquarters"},{"location":"ISE-AEC/ARC-New%20Google%20Headquarters/New%20Google%20Headquarters/#-new-google-headquarters","text":"","title":"\u5e55\u5899-New Google Headquarters"},{"location":"ISE-AEC/ARC-%E7%AB%8B%E9%9D%A2%E7%AE%97%E6%B3%95/","text":"Welcome to Knowledge For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to Knowledge"},{"location":"ISE-AEC/ARC-%E7%AB%8B%E9%9D%A2%E7%AE%97%E6%B3%95/#welcome-to-knowledge","text":"For full documentation visit mkdocs.org .","title":"Welcome to Knowledge"},{"location":"ISE-AEC/ARC-%E7%AB%8B%E9%9D%A2%E7%AE%97%E6%B3%95/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"ISE-AEC/ARC-%E7%AB%8B%E9%9D%A2%E7%AE%97%E6%B3%95/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/","text":"\u4e8c\u671f\u9879\u76ee\u4ee3\u7801 \u521b\u5efa\u6865\u6881\u5206\u5b54\u7ebf\u5e76\u4e14\u8f93\u51fa\u6570\u636e\u5230excel using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; using System.Collections ; using System.IO ; using MECMOD ; using INFITF ; using KnowledgewareTypeLib ; using HybridShapeTypeLib ; using System.Windows ; namespace Interop.CATCIVAxisDataLib.Code { public class CreatAxisFormExcel : MainWindow { public void creatAxisAlongCurve ( int installtype , INFITF . AnyObject planerCurve , INFITF . AnyObject Curve3d , INFITF . AnyObject StartPoint ) { ArrayList dislist = new ArrayList (); ArrayList namelist = new ArrayList (); ArrayList ispierlist = new ArrayList (); ArrayList anglelist = new ArrayList (); excel xle = new excel (); dislist = xle . Open ( out namelist , out ispierlist , out anglelist ); //for (int i = 1; i < dislist.Count; i++) //{ // MessageBox.Show(dislist[i].ToString()); //} Part part = GetContainPart ( planerCurve ); HybridShapeFactory hsf = ( HybridShapeFactory ) part . HybridShapeFactory ; HybridBody AXISHB = part . HybridBodies . Add (); AXISHB . set_Name ( \"PIER_AXIS_SET\" ); HybridBody hbpts = AXISHB . HybridBodies . Add (); hbpts . set_Name ( \"AXIS_PTS\" ); HybridBody hbref = AXISHB . HybridBodies . Add (); hbref . set_Name ( \"AXIS_REF\" ); HybridBody hb = AXISHB . HybridBodies . Add (); hb . set_Name ( \"AXIS_RESULT\" ); ListParameter axislist = part . Parameters . CreateList ( \"AXISLIST\" ); //MessageBox.Show(\"\u8ddd\u79bb\u6570\u91cf\uff1a\"+dislist.Count); for ( int i = 0 ; i < dislist . Count ; i ++) { double dislens = Convert . ToDouble ( dislist [ i ]) * 1000 ; double RoatateAngle = Convert . ToDouble ( anglelist [ i ]); part . InWorkObject = hb ; HybridShapeProject proj ; if ( installtype == 1 ) { HybridShape pts = hsf . AddNewPointOnCurveWithReferenceFromDistance (( Reference ) planerCurve , ( Reference ) StartPoint , dislens , false ); StartPoint = pts ; pts . set_Name ( namelist [ i ]. ToString ()); hbpts . AppendHybridShape ( pts ); // HybridShape pts = hsf.AddNewPointOnCurveFromDistance((Reference)crv, aa, false); pts.Compute(); proj = hsf . AddNewProject (( Reference ) pts , ( Reference ) Curve3d ); proj . Compute (); proj . SolutionType = 0 ; proj . Normal = false ; proj . SmoothingType = 0 ; proj . ExtrapolationMode = 0 ; proj . Direction = hsf . AddNewDirectionByCoord ( 0 , 0 , 1 ); proj . set_Name ( namelist [ i ]. ToString ()); hbref . AppendHybridShape ( proj ); proj . Compute (); AxisSystem pieraxis = Axis ( part , ( HybridShape ) Curve3d , ( HybridShape ) proj , hb , RoatateAngle ); Parameters parms = part . Parameters . SubList ( pieraxis , true ); Parameter distag = parms . CreateInteger ( \"IsPier\" , Convert . ToInt32 ( ispierlist [ i ])); Parameter angletag = parms . CreateDimension ( \"AxisAngle\" , \"ANGLE\" , Convert . ToInt32 ( anglelist [ i ])); } else { if ( i == 0 ) { HybridShape pts = hsf . AddNewPointOnCurveWithReferenceFromDistance (( Reference ) planerCurve , ( Reference ) StartPoint , dislens , false ); StartPoint = pts ; // HybridShape pts = hsf.AddNewPointOnCurveFromDistance((Reference)crv, aa, false); pts.Compute(); proj = hsf . AddNewProject (( Reference ) pts , ( Reference ) Curve3d ); proj . Compute (); proj . SolutionType = 0 ; proj . Normal = false ; proj . SmoothingType = 0 ; proj . ExtrapolationMode = 0 ; proj . Direction = hsf . AddNewDirectionByCoord ( 0 , 0 , 1 ); proj . set_Name ( namelist [ i ]. ToString ()); hbref . AppendHybridShape ( proj ); proj . Compute (); AxisSystem pieraxis = Axis ( part , ( HybridShape ) Curve3d , ( HybridShape ) proj , hb , RoatateAngle ); Parameters parms = part . Parameters . SubList ( pieraxis , true ); Parameter distag = parms . CreateInteger ( \"IsPier\" , Convert . ToInt32 ( ispierlist [ i ])); Parameter angletag = parms . CreateInteger ( \"AxisAngle\" , Convert . ToInt32 ( anglelist [ i ])); } else { HybridShapeLineTangency tar1 = hsf . AddNewLineTangency (( Reference ) planerCurve , ( Reference ) StartPoint , 10 , 0 , false ); tar1 . Compute (); HybridShapeSphere sph1 = hsf . AddNewSphere (( Reference ) StartPoint , null , dislens , - 45 , 45 , 0 , 180 ); sph1 . Limitation = 1 ; sph1 . Compute (); HybridShapeIntersection intt1 = hsf . AddNewIntersection (( Reference ) sph1 , ( Reference ) planerCurve ); intt1 . PointType = 0 ; intt1 . Compute (); HybridShapeNear near1 = hsf . AddNewNear (( Reference ) intt1 , ( Reference ) tar1 ); StartPoint = near1 ; near1 . Compute (); //hbref.AppendHybridShape(near1); proj = hsf . AddNewProject (( Reference ) near1 , ( Reference ) Curve3d ); proj . Compute (); proj . SolutionType = 0 ; proj . Normal = false ; proj . SmoothingType = 0 ; proj . ExtrapolationMode = 0 ; proj . Direction = hsf . AddNewDirectionByCoord ( 0 , 0 , 1 ); proj . set_Name ( namelist [ i ]. ToString ()); hbref . AppendHybridShape ( proj ); proj . Compute (); proj . set_Name ( namelist [ i ]. ToString ()); AxisSystem pieraxis = Axis ( part , ( HybridShape ) Curve3d , ( HybridShape ) proj , hb , RoatateAngle ); Parameters parms = part . Parameters . SubList ( pieraxis , true ); Parameter distag = parms . CreateInteger ( \"IsPier\" , Convert . ToInt32 ( ispierlist [ i ])); Parameter angletag = parms . CreateInteger ( \"AxisAngle\" , Convert . ToInt32 ( anglelist [ i ])); } } part . InWorkObject = hb ; //xle = null; } //\u91ca\u653e\u8d44\u6e90 xle = null ; } static AxisSystem Axis ( Part part , HybridShape crv , HybridShape pt , HybridBody hb , double rotateAngle ) { HybridShapeFactory hsf = ( HybridShapeFactory ) part . HybridShapeFactory ; HybridShapeDirection zdir = hsf . AddNewDirection (( Reference ) part . OriginElements . PlaneXY ); HybridShape zln = hsf . AddNewLinePtDir (( INFITF . Reference ) pt , zdir , - 100 , 500 , false ); zln . Compute (); HybridShape pln = hsf . AddNewPlaneOffsetPt (( Reference ) part . OriginElements . PlaneXY , ( Reference ) pt ); pln . Compute (); HybridShapeLineTangency tarln = hsf . AddNewLineTangency (( Reference ) crv , ( Reference ) pt , - 100 , 300 , false ); tarln . Compute (); HybridShapeProject xdirln = hsf . AddNewProject (( Reference ) tarln , ( Reference ) pln ); xdirln . Compute (); xdirln . SolutionType = 0 ; xdirln . Normal = false ; xdirln . SmoothingType = 0 ; xdirln . Direction = zdir ; xdirln . ExtrapolationMode = 0 ; Reference reference1 = part . CreateReferenceFromObject ( xdirln ); HybridShapeRotate hybridShapeRotate1 = hsf . AddNewEmptyRotate (); hybridShapeRotate1 . ElemToRotate = reference1 ; hybridShapeRotate1 . VolumeResult = false ; hybridShapeRotate1 . RotationType = 0 ; hybridShapeRotate1 . Compute (); hybridShapeRotate1 . Axis = ( Reference ) zln ; hybridShapeRotate1 . AngleValue = rotateAngle ; hybridShapeRotate1 . set_Name ( \"Roatate_ln_\" + Convert . ToString ( rotateAngle )); hybridShapeRotate1 . Compute (); AxisSystem axis = part . AxisSystems . Add (); axis . OriginType = CATAxisSystemOriginType . catAxisSystemOriginByPoint ; axis . OriginPoint = ( Reference ) pt ; axis . XAxisType = CATAxisSystemAxisType . catAxisSystemAxisSameDirection ; axis . XAxisDirection = ( Reference ) hybridShapeRotate1 ; axis . YAxisType = CATAxisSystemAxisType . catAxisSystemAxisOppositeDirection ; axis . ZAxisType = CATAxisSystemAxisType . catAxisSystemAxisSameDirection ; axis . ZAxisDirection = ( Reference ) zln ; part . UpdateObject ( axis ); axis . IsCurrent = true ; axis . set_Name ( pt . get_Name ()); part . UpdateObject ( axis ); return axis ; } public static MECMOD . Part GetContainPart ( INFITF . AnyObject obj ) { INFITF . AnyObject a = ( INFITF . AnyObject ) obj ; INFITF . AnyObject current = a ; bool found = false ; while ( found == false ) { current = ( INFITF . AnyObject ) current . Parent ; //Console.WriteLine(\"aaa___!\" + Microsoft.VisualBasic. Information.TypeName(current)); if ( Microsoft . VisualBasic . Information . TypeName ( current ) == \"Part\" ) { found = true ; // break; } } return ( MECMOD . Part ) current ; } class excel { ArrayList dislist = new ArrayList (); // public string Filename; public ArrayList Open ( out ArrayList namelist , out ArrayList IsPierParm , out ArrayList angleList ) //\u6253\u5f00\u4e00\u4e2aMicrosoft.Office.Interop.Excel\u6587\u4ef6 { dislist . Clear (); namelist = new ArrayList (); namelist . Clear (); IsPierParm = new ArrayList (); IsPierParm . Clear (); angleList = new ArrayList (); angleList . Clear (); int icount = 1000 ; int colnum = 3 ; int names = 5 ; int ispier = 24 ; int angleIndex = 21 ; for ( int i = 1 ; i < icount ; i ++) { if ( xlsheet . Cells [ i + 6 , colnum ]. Value != null ) { if ( xlsheet . Cells [ i + 6 , names ]. Value != null ) { if ( xlsheet . Cells [ i + 6 , ispier ]. Value != null ) { dislist . Add ( xlsheet . Cells [ i + 6 , colnum ]. Value ); namelist . Add ( xlsheet . Cells [ i + 6 , names ]. Value ); IsPierParm . Add ( xlsheet . Cells [ i + 6 , ispier ]. Value ); angleList . Add ( xlsheet . Cells [ i + 6 , angleIndex ]. Value ); } } } } return dislist ; } } class attribure { public void SetAttributeBooleanToObject ( MECMOD . Part part , HybridShape obj , string name , Boolean value ) { Parameters parms = part . Parameters . SubList ( obj , true ); Parameter distag = parms . CreateBoolean ( name , value ); } public void GetAttributeBooleanToObject ( MECMOD . Part part , HybridShape obj , string name , Boolean value ) { Parameters parms = part . Parameters . SubList ( obj , true ); Parameter distag = parms . CreateBoolean ( name , value ); } } } } \u8fde\u7eed\u6881\u6574\u4f53\u521b\u5efa //BeamProduct:ProductOccurrence,PierProduct:ProductOccurrence,AXIS_LIST:list,ROAD_CENTER:Curve,ROAD_PLANER:Curve /* Action created by 86156 2019/6/5 */ let i ( integer ) let F1 , F2 ( DocumentTemplate ) let destination1 , destination2 ( ProductOccurrence ) destination1 = BeamProduct destination2 = PierProduct let axisList ( list ) axisList = AXIS_LIST let xlsheet ( DTSheetType ) let xls ( string ) xls = EXCEL set xlsheet = CreateSheet ( xls ) let nb ( Integer ) nb = xlsheet . RowsNb Notify ( \"\u4e2a\u6570:\" , nb ) let resName , resExcel ( string ) //\u58f0\u660e\u5168\u5c40\u53d8\u91cf let L1length ( length ) let R1length ( length ) let L2length ( length ) let R2length ( length ) let PierHeight ( length ) let BeamCount ( integer ) let GapStr ( string ) let DirStr ( string ) // ***************************** // ProgressBar creation // ***************************** CreateProgressBar ( \"ProgressBar Name\" ) i = START for i while i <= END //axisList.Size () { ProgressBarSetValue ( 100 * i / axisList . Size ()) ProgressBarSetText ( \" \uff1a\u5df2\u5b8c\u6210 \u5171\" + floor ( END )) //\u6570\u636e\u5904\u7406 //\u83b7\u5f97\u6881\u6570 set BeamCount = xlsheet -> CellAsReal ( 5 + i , 32 ) Notify ( \"\u6881\u6570\u91cf\uff1a\" , BeamCount ) if ( i > 1 ) { //\u83b7\u5f97\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L1length = xlsheet -> CellAsReal (( 5 + ( i - 1 )), 22 ) * 1 m Notify ( \"\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L1length ) //\u83b7\u5f97\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R1length = xlsheet -> CellAsReal (( 5 + ( i - 1 )), 23 ) * 1 m Notify ( \"\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\" , R1length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L2length = xlsheet -> CellAsReal ( 5 + i , 24 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L2length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R2length = xlsheet -> CellAsReal ( 5 + i , 25 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\" , R2length ) //\u83b7\u5f97\u8fb9\u8de8 GapStr = xlsheet -> CellAsString (( 5 + ( i - 1 )), 33 ) Notify ( \"\u83b7\u5f97\u8fb9\u8de8:\" , GapStr ) //\u83b7\u5f97\u4f4d\u7f6e\u8bbe\u5b9a DirStr = xlsheet -> CellAsString (( 5 + ( i - 1 )), 34 ) Notify ( \"\u4f4d\u7f6e\u8bbe\u5b9a:\" , DirStr ) //\u5b9e\u4f8b\u5316\u4e0a\u90e8\u6865\u6881 F1 = InstantiateTemplate ( \"Re1\" , destination1 . Instance ) F1 -> SetAttributeObject ( \"P1\" , axisList . GetItem ( i - 1 )) F1 -> SetAttributeObject ( \"P2\" , axisList . GetItem ( i )) F1 -> SetAttributeObject ( \"ROAD_CENTER\" , ROAD_CENTER ) F1 -> SetAttributeObject ( \"ROAD_PLANER\" , ROAD_PLANER ) //\u4fee\u6b63\u6570\u636e F1 -> SetAttributeDimension ( \"P1_LW\" , L1length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P1_RW\" , R1length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P2_LW\" , L2length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P2_RW\" , R2length , \"LENGTH\" ) F1 -> SetAttributeInteger ( \"BEAM_COUNT\" , BeamCount ) //F1->SetAttributeString(\"GapCheck\",GapStr) F1 -> SetAttributeString ( \"DirCheck\" , DirStr ) //F1->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F1 ) } if ( i > 0 ) { //\u83b7\u5f97\u6865\u58a9\u9ad8\u5ea6 PierHeight = xlsheet -> CellAsReal ( 5 + i , 27 ) * 1 m Notify ( \"PierHeight:\" , PierHeight ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L2length = xlsheet -> CellAsReal ( 5 + i , 22 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L2length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R2length = xlsheet -> CellAsReal ( 5 + i , 23 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\" , R2length ) resExcel = xlsheet -> CellAsString ( 5 + i , 31 ) if resExcel == \"\u8fde\u7eed\u6881\u6865-\u6865\u53f0\" { resName = \"Res3\" } else if resExcel == \"\u8fde\u7eed\u6881\u6865-\u95e8\u67b6\" { resName = \"Res2\" } else if resExcel == \"\u8fde\u7eed\u6881\u6865-\u60ac\u81c2\u76d6\u6881\u58a9\" { resName = \"Res1\" } Notify ( \"\u4e0b\u90e8\u7ed3\u6784\u8d44\u6e90\u540d\u79f0\u4e3a\uff1a\" , resName ) //\u5b9e\u4f8b\u5316\u4e0b\u90e8\u6865\u58a9 F2 = InstantiateTemplate ( resName , destination2 . Instance ) F2 -> SetAttributeObject ( \"AXIS\" , axisList . GetItem ( i )) //\u4fee\u6b63\u6570\u636e F2 -> SetAttributeDimension ( \"PIER_HEIGHT\" , PierHeight , \"LENGTH\" ) F2 -> SetAttributeDimension ( \"WIDTH_L\" , L2length - 824 mm , \"LENGTH\" ) F2 -> SetAttributeDimension ( \"WIDTH_R\" , R2length - 824 mm , \"LENGTH\" ) //F2->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F2 ) } } \u7b80\u652f\u6881\u6574\u4f53\u521b\u5efa //BeamProduct:ProductOccurrence,PierProduct:ProductOccurrence,AXIS_LIST:list,ROAD_CENTER:Curve,ROAD_PLANER:Curve /* Action created by 86156 2019/6/5 */ let i ( integer ) let F1 , F2 ( DocumentTemplate ) let destination1 , destination2 ( ProductOccurrence ) destination1 = BeamProduct destination2 = PierProduct let axisList ( list ) axisList = AXIS_LIST let xlsheet ( DTSheetType ) let xls ( string ) xls = EXCEL set xlsheet = CreateSheet ( xls ) let nb ( Integer ) nb = xlsheet . RowsNb Notify ( \"\u4e2a\u6570:\" , nb ) let resExcel , resName ( String ) //\u58f0\u660e\u5168\u5c40\u53d8\u91cf let L1length ( length ) let R1length ( length ) let L2length ( length ) let R2length ( length ) let PierHeight ( length ) let BeamCount ( integer ) let GapStr ( string ) let DirStr ( string ) // ***************************** // ProgressBar creation // ***************************** CreateProgressBar ( \"ProgressBar Name\" ) i = START for i while i <= END //axisList.Size () { ProgressBarSetValue ( 100 * i / axisList . Size ()) ProgressBarSetText ( \" \uff1a\u5df2\u5b8c\u6210 \u5171\" + floor ( axisList . Size ())) //\u6570\u636e\u5904\u7406 //\u83b7\u5f97\u6881\u6570 set BeamCount = xlsheet -> CellAsReal ( 5 + i , 32 ) Notify ( \"\u6881\u6570\u91cf\uff1a\" , BeamCount ) if ( i > 1 ) { //\u83b7\u5f97\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L1length = xlsheet -> CellAsReal (( 5 + ( i - 1 )), 24 ) * 1 m Notify ( \"\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L1length ) //\u83b7\u5f97\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R1length = xlsheet -> CellAsReal (( 5 + ( i - 1 )), 25 ) * 1 m Notify ( \"\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\" , R1length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L2length = xlsheet -> CellAsReal ( 5 + i , 24 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L2length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R2length = xlsheet -> CellAsReal ( 5 + i , 25 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\" , R2length ) //\u83b7\u5f97\u8fb9\u8de8 GapStr = xlsheet -> CellAsString (( 5 + ( i - 1 )), 33 ) Notify ( \"\u83b7\u5f97\u8fb9\u8de8:\" , GapStr ) //\u83b7\u5f97\u4f4d\u7f6e\u8bbe\u5b9a DirStr = xlsheet -> CellAsString (( 5 + ( i - 1 )), 34 ) Notify ( \"\u4f4d\u7f6e\u8bbe\u5b9a:\" , DirStr ) //\u5b9e\u4f8b\u5316\u4e0a\u90e8\u6865\u6881 F1 = InstantiateTemplate ( \"Re2\" , destination1 . Instance ) F1 -> SetAttributeObject ( \"P1\" , axisList . GetItem ( i - 1 )) F1 -> SetAttributeObject ( \"P2\" , axisList . GetItem ( i )) F1 -> SetAttributeObject ( \"ROAD_CENTER\" , ROAD_CENTER ) F1 -> SetAttributeObject ( \"ROAD_PLANER\" , ROAD_PLANER ) //\u4fee\u6b63\u6570\u636e F1 -> SetAttributeDimension ( \"P1_LW\" , L1length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P1_RW\" , R1length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P2_LW\" , L2length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P2_RW\" , R2length , \"LENGTH\" ) F1 -> SetAttributeInteger ( \"BEAM_COUNT\" , BeamCount ) //F1->SetAttributeString(\"GapCheck\",GapStr) //F1->SetAttributeString(\"DirCheck\",DirStr) //F1->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F1 ) } //\u83b7\u5f97\u6865\u58a9\u9ad8\u5ea6 PierHeight = xlsheet -> CellAsReal ( 5 + i , 27 ) * 1 m Notify ( \"PierHeight:\" , PierHeight ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L2length = xlsheet -> CellAsReal ( 5 + i , 24 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L2length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R2length = xlsheet -> CellAsReal ( 5 + i , 25 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\" , R2length ) resExcel = xlsheet -> CellAsString ( 5 + i , 31 ) if resExcel == \"\u7b80\u652f\u6881\u6865-\u6865\u53f0\" { resName = \"Res3\" } else if resExcel == \"\u7b80\u652f\u6881\u6865-\u95e8\u67b6\" { resName = \"ResB\" } else if resExcel == \"\u7b80\u652f\u6881\u6865-\u60ac\u81c2\u76d6\u6881\u58a9\" { resName = \"ResA\" } Notify ( \"\u4e0b\u90e8\u7ed3\u6784\u8d44\u6e90\u540d\u79f0\u4e3a\uff1a\" , resName ) F2 = InstantiateTemplate ( resName , destination2 . Instance ) F2 -> SetAttributeObject ( \"AXIS\" , axisList . GetItem ( i )) F2 -> SetAttributeDimension ( \"PIER_HEIGHT\" , PierHeight , \"LENGTH\" ) F2 -> SetAttributeDimension ( \"WIDTH_L\" , L2length , \"LENGTH\" ) F2 -> SetAttributeDimension ( \"WIDTH_R\" , R2length , \"LENGTH\" ) //F2->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F2 ) } \u6865\u6881\u7684\u521b\u5efa //BeamProduct:ProductOccurrence,PierProduct:ProductOccurrence,AXIS_LIST:list,ROAD_CENTER:Curve,ROAD_PLANER:Curve /* Action created by 86156 2019/6/5 */ let i ( integer ) let F1 , F2 ( DocumentTemplate ) let destination1 , destination2 ( ProductOccurrence ) //destination1=BeamProduct destination2 = PierProduct let axisList ( list ) axisList = AXIS_LIST let xlsheet ( DTSheetType ) let xls ( string ) xls = \"Y:\\SHARE\\\u7248\u672c2\\0827\u6d4b\u8bd5\u6570\u636e\\\u8fde\u7eed\u6881_\u603b\u4f53\u8bbe\u8ba1\u8868.xlsx\" set xlsheet = CreateSheet ( xls ) let nb ( Integer ) nb = xlsheet . RowsNb Notify ( \"\u4e2a\u6570:\" , nb ) //\u58f0\u660e\u5168\u5c40\u53d8\u91cf let L1length ( length ) let R1length ( length ) let L2length ( length ) let R2length ( length ) let PierHeight ( length ) let PileHeight ( length ) let BeamCount ( integer ) let GapStr ( string ) let DirStr ( string ) // ***************************** // ProgressBar creation // ***************************** CreateProgressBar ( \"ProgressBar Name\" ) i = 1 for i while i <= axisList . Size () { ProgressBarSetValue ( 100 * i / axisList . Size ()) ProgressBarSetText ( \" \uff1a\u5df2\u5b8c\u6210 \u5171\" + floor ( axisList . Size ())) //\u6570\u636e\u5904\u7406 //\u83b7\u5f97\u6881\u6570 set BeamCount = xlsheet -> CellAsReal ( 5 + i , 32 ) Notify ( \"\u6881\u6570\u91cf\uff1a\" , BeamCount ) //\u83b7\u5f97\u6865\u58a9\u9ad8\u5ea6 PierHeight = xlsheet -> CellAsReal ( 5 + i , 27 ) * 1 m Notify ( \"PierHeight:\" , PierHeight ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L2length = xlsheet -> CellAsReal ( 5 + i , 24 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L2length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R2length = xlsheet -> CellAsReal ( 5 + i , 25 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\" , R2length ) //\u6869\u957f PileHeight = xlsheet -> CellAsReal ( 5 + i , 40 ) * 1 m Notify ( \"\u6869\u957f:\" , PileHeight ) if ( i == 1 ) { //\u5b9e\u4f8b\u5316\u4e0b\u90e8\u6865\u58a9 F1 = InstantiateTemplate ( \"Res3\" , destination2 . Instance ) F1 -> SetAttributeObject ( \"AXIS\" , axisList . GetItem ( i )) //\u4fee\u6b63\u6570\u636e //F1->SetAttributeDimension(\"PIER_HEIGHT\",PierHeight,\"LENGTH\") F1 -> SetAttributeDimension ( \"P1_RW\" , L2length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P1_LW\" , R2length , \"LENGTH\" ) F1 -> SetAttributeInteger ( \"DIRECTION\" , 0 ) F1 -> SetAttributeDimension ( \"PILE_H\" , PileHeight , \"LENGTH\" ) //F2->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F1 ) } else if ( i == axisList . Size ()) { //\u5b9e\u4f8b\u5316\u4e0b\u90e8\u6865\u58a9 F2 = InstantiateTemplate ( \"Res3\" , destination2 . Instance ) F2 -> SetAttributeObject ( \"AXIS\" , axisList . GetItem ( i )) //\u4fee\u6b63\u6570\u636e F2 -> SetAttributeDimension ( \"P1_RW\" , L2length , \"LENGTH\" ) F2 -> SetAttributeDimension ( \"P1_LW\" , R2length , \"LENGTH\" ) F2 -> SetAttributeInteger ( \"DIRECTION\" , 1 ) F2 -> SetAttributeDimension ( \"PILE_H\" , PileHeight , \"LENGTH\" ) //F2->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F2 ) } } \u5bfc\u51fa\u6574\u4f53\u6570\u636e\u5230\u603b\u4f53\u8bbe\u8ba1\u8868 /* \u5de5\u4f5c\u6307\u4ee4 \u521b\u5efa\u8005 liudi 2020/7/12 */ let i , j , k , a ( Integer ) let myshape , mypart ( VPMInstance ) let shapepoint , shapepoint1 ( PartFeature ) let shapelist , partlist , boxlist , boxlist1 , pointlist , planelist ( List ) let DT ( DTSheetType ) let myname , sheetname , boxname , ptname , outstring , myout ( String ) let box , onebox ( OpenBodyFeature ) let pt , pt0 , pt1 , pt2 , pt3 ( Point ) let L , D , x1 , x2 , x3 , y1 , y2 , y3 , z1 , z2 , z3 ( LENGTH ) let F ( Feature ) let pla ( Plane ) shapepoint = GetPLMOwner ( myplane ) shapepoint1 = shapepoint . Find ( \"PartFeature\" , \"\" , true ) SetWorkingContext ( shapepoint1 ) onebox = new ( \"OpenBodyFeature\" , \"000\" , shapepoint1 ) pt1 = new ( \"Point\" , \"1\" , onebox ) pt1 = pointonplane ( myplane , point ( 0 m , 0 m , 0 m ), 1 m , 10 m ) pt2 = new ( \"Point\" , \"2\" , onebox ) pt2 = pointonplane ( myplane , point ( 0 m , 0 m , 0 m ), 42 m , 35 m ) pt3 = new ( \"Point\" , \"3\" , onebox ) pt3 = pointonplane ( myplane , point ( 0 m , 0 m , 0 m ), 25 m , 18 m ) shapepoint1 . Update () x1 = pt1 . coord ( 1 ) y1 = pt1 . coord ( 2 ) z1 = pt1 . coord ( 3 ) x2 = pt2 . coord ( 1 ) y2 = pt2 . coord ( 2 ) z2 = pt2 . coord ( 3 ) x3 = pt3 . coord ( 1 ) y3 = pt3 . coord ( 2 ) z3 = pt3 . coord ( 3 ) onebox . Delete () set DT = CreateSheet ( strFileName ) sheetname = \"\u8ddd\u79bb(m)\" partlist = Location . Query ( \"VPMInstance\" , NULL ) shapelist = Location . Query ( \"PartFeature\" , NULL ) i = 1 for i while i <= partlist . Size () { myshape = shapelist [ i ] boxlist = myshape . Children boxlist1 = boxlist . Filter ( \"OpenBodyFeature\" , \"x.Name == \\\"EXPORT_DIM\\\"\" ) if boxlist1 . Size () == 0 { break } else { SetWorkingContext ( myshape ) box = boxlist1 [ 1 ] pla = new ( \"Plane\" , \"000\" , box ) pla = plane ( point ( x1 , y1 , z1 ), point ( x2 , y2 , z2 ), point ( x3 , y3 , z3 )) pointlist = box . Children k = pointlist . Size () /*********************/ pt = pointlist [ 1 ] D = distance ( pt , pla ) L = D / 1000 outstring = L a = outstring . Length () myout = outstring . Extract ( 0 , a - 2 ) DT -> SetCell ( 6 + i , 60 , myout ) /*********************/ /*********************/ pt = pointlist [ 2 ] D = distance ( pt , pla ) L = D / 1000 outstring = L a = outstring . Length () myout = outstring . Extract ( 0 , a - 2 ) DT -> SetCell ( 6 + i , 61 , myout ) /*********************/ /*********************/ pt = pointlist [ 2 ] pt0 = pointlist [ 3 ] D = distance ( pt , pt0 ) L = D / 1000 outstring = L a = outstring . Length () myout = outstring . Extract ( 0 , a - 2 ) DT -> SetCell ( 6 + i , 62 , myout ) /*********************/ /*********************/ pt = pointlist [ 3 ] D = distance ( pt , pla ) L = D / 1000 outstring = L a = outstring . Length () myout = outstring . Extract ( 0 , a - 2 ) DT -> SetCell ( 6 + i , 63 , myout ) /*********************/ pt = pointlist [ 4 ] pt0 = pointlist [ 3 ] D = distance ( pt , pt0 ) L = D / 1000 outstring = L a = outstring . Length () myout = outstring . Extract ( 0 , a - 2 ) DT -> SetCell ( 6 + i , 64 , myout ) /*********************/ /*********************/ pt = pointlist [ 4 ] D = distance ( pt , pla ) L = D / 1000 outstring = L a = outstring . Length () myout = outstring . Extract ( 0 , a - 2 ) DT -> SetCell ( 6 + i , 65 , myout ) /*********************/ /*********************/ pt = pointlist [ 5 ] D = distance ( pt , pla ) L = D / 1000 outstring = L a = outstring . Length () myout = outstring . Extract ( 0 , a - 2 ) DT -> SetCell ( 6 + i , 66 , myout ) /*********************/ pla . Delete () } i = i + 1 } \u5bfc\u51fa\u57ab\u77f3\u6570\u636e //Location : VPMReference,strFileName : String,ReferAxis : AxisSystem /* \u5de5\u4f5c\u6307\u4ee4 \u521b\u5efa\u8005 liudi 2020/7/21 */ let i , j , k , a , a1 , b , c , d , e ( Integer ) let myshape , mypart ( VPMInstance ) let partlist , chlist1 , chlist2 , chlist3 , mmlist1 , mmlist2 , mylist , mylist1 , mylist2 , onelist ( List ) let DT ( DTSheetType ) let box , onebox ( OpenBodyFeature ) let partname , outpartname , username , outname , mylength , outmylength , myv , outmyv , x1 , y1 , z1 , x2 , y2 , z2 ( String ) let yx1 , yx2 , yx3 , yx4 ( MMOrderedGeometricalSet ) let mybody , mybody2 , body1 ( BodyFeature ) let myuserfeature ( UserFeature ) let sur ( Surface ) let pt ( Point ) let v , vo , outv ( Real ) let xplane ( Plane ) let xdir ( Direction ) let x , y , z ( LENGTH ) let myaxis ( AxisSystem ) set DT = CreateSheet ( strFileName ) partlist = Location . Query ( \"PartFeature\" , NULL ) i = 1 a1 = 1 for i while i <= partlist . Size () { mypart = partlist [ i ] SetWorkingContext ( mypart ) partname = mypart . Name b = partname . Length () outpartname = partname . Extract ( 0 , b - 4 ) DT -> SetCell ( a1 + 1 , 1 , outpartname ) //\u7b2c\u4e00\u680f\u6570\u636e chlist1 = mypart . Children mmlist1 = chlist1 . Filter ( \"MMOrderedGeometricalSet\" , NULL ) yx1 = mmlist1 [ 1 ] chlist2 = yx1 . Children mmlist2 = chlist2 . Filter ( \"MMOrderedGeometricalSet\" , NULL ) yx2 = mmlist2 [ 3 ] chlist3 = yx2 . Children j = chlist3 . Size () yx3 = chlist3 [ j ] //body1=new(\"BodyFeature\",\"0000\",yx3) mylist = yx3 . Children mybody = mylist [ 1 ] mybody2 = mylist [ 2 ] mylist1 = mybody . Children mylist2 = mybody2 . Children onelist = mylist1 + mylist2 k = onelist . Size () a = 1 for a while a <= k { myuserfeature = onelist [ a ] username = myuserfeature . Name c = username . Length () outname = username . Extract ( 0 , c - 3 ) DT -> SetCell ( a1 + 1 , 2 , username ) //\u7b2c\u4e8c\u680f\u6570\u636e v = myuserfeature . GetAttributeReal ( ' \u4e0b\u57ab\u77f3\u4f53\u79ef ' ) myv = ToString ( v ) DT -> SetCell ( a1 + 1 , 6 , myv ) v = myuserfeature . GetAttributeReal ( ' \u4e0a\u57ab\u77f3\u4f53\u79ef ' ) myv = ToString ( v ) DT -> SetCell ( a1 + 1 , 7 , myv ) pt = myuserfeature . GetAttributeObject ( ' COORD_PT ' ) x = pt . coord ( 1 , ReferAxis ) y = pt . coord ( 2 , ReferAxis ) z = pt . coord ( 3 , ReferAxis ) x1 = ToString ( x ) c = x1 . Length () x2 = x1 . Extract ( 0 , c - 2 ) y1 = ToString ( y ) c = y1 . Length () y2 = y1 . Extract ( 0 , c - 2 ) z1 = ToString ( z ) c = z1 . Length () z2 = z1 . Extract ( 0 , c - 2 ) DT -> SetCell ( a1 + 1 , 3 , x2 ) DT -> SetCell ( a1 + 1 , 4 , y2 ) DT -> SetCell ( a1 + 1 , 5 , z2 ) a1 = a1 + 1 } } \u5bfc\u51fa\u57fa\u6869\u6570\u636e //Location : VPMReference,strFileName : String,ReferAxis : AxisSystem /* \u5de5\u4f5c\u6307\u4ee4 \u521b\u5efa\u8005 liudi 2020/7/23 */ let i , j , k , a , b ( Integer ) let myshape ( VPMInstance ) let mypart ( PartFeature ) let DT ( DTSheetType ) let partlist , shapelist , boxlist , list1 , list2 , ptlist , yxlist1 , yxlist2 , yxlist3 , bodylist , list3 , culist ( List ) let yx1 , yx2 , yx3 , yx4 ( MMOrderedGeometricalSet ) let mybox , box ( OpenBodyFeature ) let partname ( String ) let pt , mypoint ( Point ) let xplane , plane1 , myplane ( Plane ) let mybody ( BodyFeature ) let allcu , mycu ( Curve ) let tutai ( Surface ) let x , y ( LENGTH ) set DT = CreateSheet ( strFileName ) partlist = Location . Query ( \"VPMInstance\" , NULL ) shapelist = Location . Query ( \"PartFeature\" , NULL ) j = partlist . Size () i = 1 k = 1 for i while i <= j { mypart = partlist [ i ] myshape = shapelist [ i ] partname = mypart . Name () DT -> SetCell ( k + 1 , 1 , partname ) SetWorkingContext ( myshape ) list1 = myshape . Children list2 = list1 . Filter ( \"OpenBodyFeature\" , NULL ) box = list2 [ 2 ] ptlist = box . Children pt = ptlist [ 4 ] mybox = new ( \"OpenBodyFeature\" , \"\u53c2\u7167\" , myshape ) xplane = new ( \"Plane\" , \"\u6c34\u5e73\u9762\" , mybox ) xplane = plane ( point ( 0 mm , 0 mm , 0 mm ), point ( 1 mm , 0 mm , 0 mm ), point ( 0 mm , 1 mm , 0 mm )) plane1 = new ( \"Plane\" , \"\u8fc7\u6e21\u5e73\u9762\" , mybox ) set plane1 = planeoffset ( xplane , pt ) myplane = new ( \"Plane\" , \"\u76f8\u4ea4\u5e73\u9762\" , mybox ) myplane = planeoffset ( plane1 , - 200 mm , true ) yxlist1 = list1 . Filter ( \"MMOrderedGeometricalSet\" , NULL ) yx1 = yxlist1 [ 1 ] yxlist2 = yx1 . Children yxlist3 = yxlist2 . Filter ( \"MMOrderedGeometricalSet\" , NULL ) yx2 = yxlist3 [ 3 ] bodylist = yx2 . Children mybody = bodylist [ 5 ] list3 = mybody . Children allcu = new ( \"Curve\" , \"\u76f8\u4ea4\u7ebf\" , mybox ) allcu = intersect ( myplane , list3 [ 1 ] ) culist = disassemble ( allcu , false ) a = culist . Size () b = 1 for b while b <= a { mycu = culist [ b ] mypoint = new ( \"Point\" , \"\u70b9_\" + b , mybox ) mypoint = centerofgravity ( mycu ) DT -> SetCell ( k + 1 , 2 , b ) x = mypoint . coord ( 1 , ReferAxis ) y = mypoint . coord ( 2 , ReferAxis ) DT -> SetCell ( k + 1 , 3 , x ) DT -> SetCell ( k + 1 , 4 , y ) k = k + 1 } mybox . Update () mybox . Delete () } \u8fde\u7eed\u6881\u4e0e\u7b80\u652f\u6881\u5de5\u7a0b\u6a21\u677f\u4ee3\u7801 \u53cd\u8f6c\u8f93\u5165\u6761\u4ef6 set ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Curve .6 = invert ( ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Sketch .242 ) set ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Curve .7 = invert ( ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Sketch .243 ) \u4e2d\u8de8\u4f4d\u7f6e\u8bbe\u5b9a /*\u89c4\u5219 \u521b\u5efa\u8005 DESKTOP 2020/4/26*/ if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u4e2d\u8de8\" { ` ALL_BEAMS \\ PARAMETERS \\ \u8fb9\u8de8\u5224\u65ad ` = 1 } else { ` ALL_BEAMS \\ PARAMETERS \\ \u8fb9\u8de8\u5224\u65ad ` = 0 } \u4f4d\u7f6e\u53c2\u6570\u5b9a\u4e49 /*\u89c4\u5219 \u521b\u5efa\u8005 DESKTOP 2020/4/27*/ if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u4e2d\u8de8\" ` \u7aef\u5c01\u677f\u5224\u65ad ` = \"ALL\" else if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\" ` \u7aef\u5c01\u677f\u5224\u65ad ` = \"P2\" else if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5927\u91cc\u7a0b\u8fb9\u8de8\" ` \u7aef\u5c01\u677f\u5224\u65ad ` = \"P1\" /*\u89c4\u5219 \u521b\u5efa\u8005 DESKTOP 2020/4/27*/ let F ( UserFeature ) //let l(list) // l=obj.Query(\"UserFeature\",\"\") if UDFList . Size () > 0 { for F inside UDFList { if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\" { F -> SetAttributeInteger ( \"DIRECTION\" , 0 ) } else if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5927\u91cc\u7a0b\u8fb9\u8de8\" { F -> SetAttributeInteger ( \"DIRECTION\" , 1 ) } else { Notify ( \"\u6881\u4e3a\u4e2d\u8de8\u7bb1\u6881\uff0c\u65e0\u9700\u65b9\u5411\u5224\u65ad\" ) } } } \u6881\u8ddd\u79bb\u7684\u8ba1\u7b97 /*Rule created by PZG4 4/28/2020*/ let i , j ( Integer ) let ptlist1 , ptlist2 ( List ) let pt1 , pt2 ( point ) let dis1 , dis2 ( length ) let p1 , p2 , p3 , p4 ( point ) set ptlist1 = Point1 set ptlist2 = Point2 if ptlist1 . Size () > 2 { p1 = ptlist1 [ 1 ] p2 = ptlist1 [ 2 ] Notify ( \"DIS:\" , dis1 ) dis1 = distance ( p1 , p2 ) ` ALL_BEAMS \\ PARAMETERS \\ P1\u6881\u8ddd ` = dis1 } if ptlist2 . Size () > 2 { p3 = ptlist2 [ 1 ] p4 = ptlist2 [ 2 ] Notify ( \"DIS:\" , dis2 ) dis2 = distance ( p3 , p4 ) ` ALL_BEAMS \\ PARAMETERS \\ P2\u6881\u8ddd ` = dis2 } \u5220\u9664\u548c\u521b\u5efa\u6881\u96c6\u5408 If hb1 . Bodies . Count <> 0 Then CATIA . ActiveEditor . Selection . Clear For k = 1 To hb1 . Bodies . Count Dim hb0obj As Body Set hb0obj = hb1 . Bodies . Item ( k ) CATIA . ActiveEditor . Selection . Add hb0obj Next CATIA . ActiveEditor . Selection . Delete End If Dim i as integer For i = 1 To icount Dim hb2 As Body Set hb2 = hb1 . Bodies . Add hb2 . Name = \"BEAM_\" + CStr ( i ) Next End Sub \u66f4\u65b0\u6881 Dim part as Part Set part = ContainingPart ( prt ) part . InWorkObject = prt On Error Resume Next Part . UpdateObject ( prt ) End Sub Function ContainingPart ( ByVal CatObject ) Dim found As Boolean Dim Current Set Current = CatObject found = False Do While found = False Set Current = Current . Parent If TypeName ( Current ) = \"Part\" Then found = True End If Loop Set ContainingPart = Current End Function \u5c0f\u7bb1\u6881\u96c6\u5408 \u521b\u5efa\u5c0f\u7bb1\u6881 //\u5b9a\u4e49\u53d8\u91cf let i , j ( integer ) let beamcount ( integer ) let pt1 , pt2 , ptA1 , pta1 , ptA2 , pta2 ( point ) let planerLn ( line ) let pl1 , pl2 , pl3 , pl4 ( plane ) let cu , cu1 , cu2 , cu3 , cu4 ( curve ) let a1 , a2 ( angle ) let D1 , D2 ( length ) let F ( feature ) let p1 , p2 , drwrailpt1 , drwrailpt2 ( point ) let body1 ( body ) set p1 = ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ p1 set p2 = ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ p2 set cu = project ( ALL_BEAMS \\ INPUT \\ PLANER_CRV , ` xy plane ` , direction ( ` xy plane ` )) //\u76f8\u4ea4\u51fa\u4e24\u6761\u66f2\u7ebf set cu1 = ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 1 ` set cu2 = ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 2 ` i = 1 beamcount = ALL_BEAMS \\ PARAMETERS \\ BEAM_COUNT for i while i <= beamcount { pta1 = CreateOrModifyDatum ( \"point\" , ALL_BEAMS \\ DATUM \\ POINTS_1 , Point11 , i ) set pta1 = pointoncurveRatio ( ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Line .8507 , NULL ,( i - 1 ) / ( beamcount - 1 ), true ) ptA1 = CreateOrModifyDatum ( \"point\" , ALL_BEAMS \\ DATUM \\ POINTS_1 , Point1 , i ) set ptA1 = project ( pta1 , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Multi - sections Surface .62 ` , direction ( ` xy plane ` )) pta2 = CreateOrModifyDatum ( \"point\" , ALL_BEAMS \\ DATUM \\ POINTS_2 , Point22 , i ) set pta2 = pointoncurveRatio ( ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Line .8508 , NULL ,( i - 1 ) / ( beamcount - 1 ), true ) ptA2 = CreateOrModifyDatum ( \"point\" , ALL_BEAMS \\ DATUM \\ POINTS_2 , Point2 , i ) set ptA2 = project ( pta2 , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Multi - sections Surface .62 ` , direction ( ` xy plane ` )) ptA1 . Name = \"PTA_1_\" + i ptA2 . Name = \"PTA_2_\" + i pta1 . Name = \"PTB_1_\" + i pta1 . Name = \"PTB_2_\" + i planerLn = CreateOrModifyDatum ( \"Line\" , ALL_BEAMS \\ DATUM \\ LINES , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAMS \\ PlanerLnList , i ) planerLn = line ( pta1 , pta2 ) planerLn . Color = \"224,2,32\" planerLn . Name = \"LN_\" + i } j = 1 ALL_BEAMS \\ RELATIONS \\ REFERENCE_RELATIONS \\ VBScriptNewBody \\ CREATE_BODY . Run ( ALL_BEAMS \\ MODEL \\ BEAMS_SETS , beamcount ) let blist ( List ) blist = ALL_BEAMS \\ MODEL \\ BEAMS_SETS . Query ( \"BodyFeature\" , \"\" ) let beambody ( BodyFeature ) for j while j <= beamcount { beambody = blist [ j ] if ( ` ALL_BEAMS \\ PARAMETERS \\ \u8fb9\u8de8\u5224\u65ad ` == \"1\" ) { F = CreateOrModifyTemplate ( \"R1\" , beambody , UDFList , j ) F -> SetAttributeObject ( \"p1\" , Point1 . GetItem ( j )) F -> SetAttributeObject ( \"p2\" , Point2 . GetItem ( j )) F -> SetAttributeObject ( \"curve1\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 01 ` ) F -> SetAttributeObject ( \"curve2\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 02 ` ) F -> SetAttributeObject ( \"curve3\" , ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ MiddleCrvDRV ) //F->SetAttributeInteger(\"ORIENTATION\",1) } else if ( ` ALL_BEAMS \\ PARAMETERS \\ \u8fb9\u8de8\u5224\u65ad ` == \"0\" ) { F = CreateOrModifyTemplate ( \"R2\" , beambody , UDFList , j ) F -> SetAttributeObject ( \"p1\" , Point1 . GetItem ( j )) F -> SetAttributeObject ( \"p2\" , Point2 . GetItem ( j )) F -> SetAttributeObject ( \"curve1\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 01 ` ) F -> SetAttributeObject ( \"curve2\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 02 ` ) F -> SetAttributeObject ( \"curve3\" , ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ MiddleCrvDRV ) } EndModifyTemplate ( F ) F . Name = \"\u6881\u6bb5_\" + j } drwrailpt1 = CreateOrModifyDatum ( \"point\" , ALL_BEAMS \\ DATUM \\ OTHER_PTS , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAMS \\ DrwRail_List_1 , 1 ) drwrailpt1 = pointoncurveRatio ( ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 01 ` , NULL , 0 , true ) drwrailpt2 = CreateOrModifyDatum ( \"point\" , ALL_BEAMS \\ DATUM \\ OTHER_PTS , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAMS \\ DrwRail_List_1 , 1 ) drwrailpt2 = pointoncurveRatio ( ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 01 ` , NULL , 1 , true ) Notify ( \"\u6881\u6bb5\u6570=\" , beamcount ) \u66f4\u65b0\u5c0f\u7bb1\u6881 let p1list , p2list , udflist ( List ) let udf , blockudf1 , blockudf2 ( Feature ) let i ( integer ) let dis1 , dis2 , disa , disb ( Length ) set p1list = Point11 set p2list = Point22 set udflist = UDFList let BeamType ( string ) BeamType = ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` i = 1 set dis1 = distance ( p1list [ 1 ] , p1list [ 2 ] ) set dis2 = distance ( p2list [ 1 ] , p2list [ 2 ] ) for i while i <= p1list . Size () { Notify ( \"Distance1:\" , dis1 ) Notify ( \"Distance2:\" , dis2 ) if ( BeamType == \"\u4e2d\u8de8\" ) { set udf = udflist [ i ] if i == 1 { udf . SetAttributeDimension ( \"DIM_1_L\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_L\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_R\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" , 637 mm , \"LENGTH\" ) Notify ( \"\u4fee\u6539\u6210\u529f\" , udf . Name ) } if i > 1 and i < p1list . Size () { udf . SetAttributeDimension ( \"DIM_1_L\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_L\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_R\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) } if i == p1list . Size () { udf . SetAttributeDimension ( \"DIM_1_L\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_L\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_R\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) } } else if ( BeamType == \"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\" ) { set udf = udflist [ i ] if i == 1 { udf . SetAttributeDimension ( \"DIM_1_R\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_L\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_L\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) } if i > 1 and i < p1list . Size () { udf . SetAttributeDimension ( \"DIM_1_R\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_L\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_L\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) } if i == p1list . Size () { udf . SetAttributeDimension ( \"DIM_1_R\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_L\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_L\" , 637 mm , \"LENGTH\" ) } } else if ( BeamType == \"\u5927\u91cc\u7a0b\u8fb9\u8de8\" ) { set udf = udflist [ i ] if i == 1 { udf . SetAttributeDimension ( \"DIM_1_L\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_L\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_R\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) } if i > 1 and i < p1list . Size () { udf . SetAttributeDimension ( \"DIM_2_L\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_L\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_R\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) } if i == p1list . Size () { udf . SetAttributeDimension ( \"DIM_2_L\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_L\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_R\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" , 637 mm , \"LENGTH\" ) } } } \u7aef\u5c01\u677f\u5224\u65ad let B1 , B2 ( feature ) let i , j ( Integer ) let ptlist1 , ptlist2 ( List ) let pt1 , pt2 ( point ) let dis1 , dis2 ( length ) let udf1 , udf2 ( Feature ) let surf ( surface ) set surf = ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Multi - sections Surface .62 ` set ptlist1 = Point1 set ptlist2 = Point2 i = 1 j = 1 if ( ` \u7aef\u5c01\u677f\u5224\u65ad ` == \"P1\" ) //P1 { for i while i <= ptlist1 . Size () { B1 = CreateOrModifyTemplate ( \"BB\" , ALL_BEAMS \\ MODEL \\ MODEL_POURING_BEAM_P1 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_H \\ list1 , i ) B1 -> SetAttributeObject ( \"PT\" , ptlist1 . GetItem ( i )) B1 -> SetAttributeObject ( \"CRV\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 01 ` ) B1 -> SetAttributeObject ( \"SURFACE\" , surf ) B1 . SetAttributeInteger ( \"ORENTATION\" , 0 ) B1 . Name = \"B1-\" + i if i == 1 { B1 . SetAttributeInteger ( \"CHECK_A\" , 1 ) B1 . SetAttributeInteger ( \"CHECK_B\" , 0 ) } else if ( i == ptlist1 . Size ()) { B1 . SetAttributeInteger ( \"CHECK_A\" , 0 ) B1 . SetAttributeInteger ( \"CHECK_B\" , 1 ) } a EndModifyTemplate ( B1 ) } } else if ( ` \u7aef\u5c01\u677f\u5224\u65ad ` == \"P2\" ) //P2 { for j while j <= ptlist2 . Size () { B2 = CreateOrModifyTemplate ( \"BB\" , ALL_BEAMS \\ MODEL \\ MODEL_POURING_BEAM_P2 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_H \\ list2 , j ) B2 -> SetAttributeObject ( \"PT\" , ptlist2 . GetItem ( j )) B2 -> SetAttributeObject ( \"CRV\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 02 ` ) B2 -> SetAttributeObject ( \"SURFACE\" , surf ) B2 . SetAttributeInteger ( \"ORENTATION\" , 1 ) B2 . Name = \"B2-\" + j if j == 1 { B2 . SetAttributeInteger ( \"CHECK_A\" , 0 ) B2 . SetAttributeInteger ( \"CHECK_B\" , 1 ) } else if ( j == ptlist2 . Size ()) { B2 . SetAttributeInteger ( \"CHECK_A\" , 1 ) B2 . SetAttributeInteger ( \"CHECK_B\" , 0 ) } EndModifyTemplate ( B2 ) } } else //all { for i while i <= ptlist1 . Size () { B1 = CreateOrModifyTemplate ( \"BB\" , ALL_BEAMS \\ MODEL \\ MODEL_POURING_BEAM_P1 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_H \\ list1 , i ) B1 -> SetAttributeObject ( \"PT\" , ptlist1 . GetItem ( i )) B1 -> SetAttributeObject ( \"CRV\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 01 ` ) B1 -> SetAttributeObject ( \"SURFACE\" , surf ) B1 . SetAttributeInteger ( \"ORENTATION\" , 0 ) B1 . Name = \"B1-\" + i if i == 1 { B1 . SetAttributeInteger ( \"CHECK_A\" , 1 ) B1 . SetAttributeInteger ( \"CHECK_B\" , 0 ) } else if ( i == ptlist1 . Size ()) { B1 . SetAttributeInteger ( \"CHECK_A\" , 0 ) B1 . SetAttributeInteger ( \"CHECK_B\" , 1 ) } EndModifyTemplate ( B1 ) } for j while j <= ptlist2 . Size () { B2 = CreateOrModifyTemplate ( \"BB\" , ALL_BEAMS \\ MODEL \\ MODEL_POURING_BEAM_P2 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_H \\ list2 , j ) B2 -> SetAttributeObject ( \"PT\" , ptlist2 . GetItem ( j )) B2 -> SetAttributeObject ( \"CRV\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 02 ` ) B2 -> SetAttributeObject ( \"SURFACE\" , surf ) B2 . SetAttributeInteger ( \"ORENTATION\" , 1 ) B2 . Name = \"B2-\" + j if j == 1 { B2 . SetAttributeInteger ( \"CHECK_A\" , 0 ) B2 . SetAttributeInteger ( \"CHECK_B\" , 1 ) } else if ( j == ptlist2 . Size ()) { B2 . SetAttributeInteger ( \"CHECK_A\" , 1 ) B2 . SetAttributeInteger ( \"CHECK_B\" , 0 ) } EndModifyTemplate ( B2 ) } } \u7aef\u90e8\u73b0\u6d47\u90e8\u4f4d\u81ea\u52a8\u9002\u5e94 let p1list , p2list , udflist1 , udflist2 ( List ) let udf1 , udf2 ( UserFeature ) let i , j ( integer ) let dis1 , dis2 , disa , disb ( Length ) set p1list = Point11 set p2list = Point22 set udflist1 = ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_H \\ list1 set udflist2 = ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_H \\ list2 let BeamType ( string ) let gap ( length ) gap = ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` / 2 BeamType = ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` set dis1 = distance ( p1list [ 1 ] , p1list [ 2 ] ) set dis2 = distance ( p2list [ 1 ] , p2list [ 2 ] ) Notify ( \"Name:\" , dis1 ) Notify ( \"Name:\" , dis2 ) i = 1 j = 1 if udflist1 . Size () <> 0 { for i while i <= p1list . Size () { udf1 = udflist1 [ i ] if i == 1 { udf1 -> SetAttributeDimension ( \"Length1\" , dis1 / 2 - ( 2676 mm / 2 ), \"Length\" ) udf1 -> SetAttributeDimension ( \"Length2\" , 637 mm , \"Length\" ) } if i > 1 and i < p1list . Size () { udf1 -> SetAttributeDimension ( \"Length1\" , dis1 / 2 - ( 2676 mm / 2 ), \"Length\" ) udf1 -> SetAttributeDimension ( \"Length2\" , dis1 / 2 - ( 2676 mm / 2 ), \"Length\" ) } if i == p1list . Size () { udf1 -> SetAttributeDimension ( \"Length1\" , 637 mm , \"Length\" ) udf1 -> SetAttributeDimension ( \"Length2\" , dis1 / 2 - ( 2676 mm / 2 ), \"Length\" ) } } } if udflist2 . Size () <> 0 { for j while j <= p2list . Size () { udf2 = udflist2 [ j ] if j == 1 { udf2 -> SetAttributeDimension ( \"Length1\" , 637 mm , \"Length\" ) udf2 -> SetAttributeDimension ( \"Length2\" , dis2 / 2 - ( 2676 mm / 2 ), \"Length\" ) } if j > 1 and j < p2list . Size () { udf2 -> SetAttributeDimension ( \"Length1\" , dis2 / 2 - ( 2676 mm / 2 ), \"Length\" ) udf2 -> SetAttributeDimension ( \"Length2\" , dis2 / 2 - ( 2676 mm / 2 ), \"Length\" ) } if j == p2list . Size () { udf2 -> SetAttributeDimension ( \"Length1\" , dis2 / 2 - ( 2676 mm / 2 ), \"Length\" ) udf2 -> SetAttributeDimension ( \"Length2\" , 637 mm , \"Length\" ) } } } \u66f4\u65b0\u8fb9\u8de8UDF\u6570\u636e /*\u89c4\u5219 \u521b\u5efa\u8005 DESKTOP 2020/7/7*/ let udf1 , udf2 ( Feature ) if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5927\u91cc\u7a0b\u8fb9\u8de8\" { udf1 = UDFList [ 1 ] udf1 -> SetAttributeInteger ( \"SIDEBEAM_LEFT_CHECK\" , 0 ) udf1 -> SetAttributeInteger ( \"SIDEBEAM_RIGHT_CHECK\" , 1 ) udf2 = UDFList [ UDFList . Size () ] udf2 -> SetAttributeInteger ( \"SIDEBEAM_LEFT_CHECK\" , 1 ) udf2 -> SetAttributeInteger ( \"SIDEBEAM_RIGHT_CHECK\" , 0 ) } else if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\" { udf1 = UDFList [ 1 ] udf1 -> SetAttributeInteger ( \"SIDEBEAM_LEFT_CHECK\" , 1 ) udf1 -> SetAttributeInteger ( \"SIDEBEAM_RIGHT_CHECK\" , 0 ) udf2 = UDFList [ UDFList . Size () ] udf2 -> SetAttributeInteger ( \"SIDEBEAM_LEFT_CHECK\" , 0 ) udf2 -> SetAttributeInteger ( \"SIDEBEAM_RIGHT_CHECK\" , 1 ) } else { udf1 = UDFList [ 1 ] udf1 -> SetAttributeInteger ( \"SIDEBEAM_LEFT_CHECK\" , 1 ) udf1 -> SetAttributeInteger ( \"SIDEBEAM_RIGHT_CHECK\" , 0 ) udf2 = UDFList [ UDFList . Size () ] udf2 -> SetAttributeInteger ( \"SIDEBEAM_LEFT_CHECK\" , 0 ) udf2 -> SetAttributeInteger ( \"SIDEBEAM_RIGHT_CHECK\" , 1 ) } \u57ab\u77f3\u7684\u521b\u5efa let B1 , B2 ( feature ) let i , j ( Integer ) let ptlist1 , ptlist2 ( List ) let pt1 , pt2 ( point ) let dis1 , dis2 ( length ) let udf1 , udf2 ( Feature ) let cushionHeight ( length ) set ptlist1 = Point1 set ptlist2 = Point2 set cushionHeight = CUSHION_HEIGHT i = 1 j = 1 if ( ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u4e2d\u8de8\" ) //P1 { for i while i <= ptlist1 . Size () { B1 = CreateOrModifyTemplate ( \"DIANKUAI\" , ALL_BEAMS \\ MODEL \\ MODEL_CUSHION \\ P1 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_CUSHION \\ List .1 , i ) B1 -> SetAttributeObject ( \"PT\" , ptlist1 . GetItem ( i )) B1 -> SetAttributeObject ( \"AXIS\" , ` ALL_BEAMS \\ INPUT \\ AX - P1 ` ) B1 . SetAttributeDimension ( \"OFFSET_Z\" , 1610 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"OFFSET_X\" , 0 mm , \"LENGTH\" ) B1 . Name = \"B1-\" + i B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) //B1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\") B1 . SetAttributeDimension ( \"\u652f\u5ea7\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u6a2a\u5411\u5bbd\" , 500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\" , 750 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u9ad8\" , 110 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u9ad8\" , 150 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\" , cushionHeight , \"LENGTH\" ) EndModifyTemplate ( B1 ) } for j while j <= ptlist2 . Size () { B2 = CreateOrModifyTemplate ( \"DIANKUAI\" , ALL_BEAMS \\ MODEL \\ MODEL_CUSHION \\ P2 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_CUSHION \\ List .2 , j ) B2 -> SetAttributeObject ( \"PT\" , ptlist2 . GetItem ( j )) B2 -> SetAttributeObject ( \"AXIS\" , ` ALL_BEAMS \\ INPUT \\ AX - P2 ` ) B2 . SetAttributeDimension ( \"OFFSET_Z\" , 1610 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"OFFSET_X\" , 0 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) //B2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\") B2 . SetAttributeDimension ( \"\u652f\u5ea7\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u6a2a\u5411\u5bbd\" , 500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\" , 750 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u9ad8\" , 110 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u9ad8\" , 150 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\" , cushionHeight , \"LENGTH\" ) B2 . Name = \"B2-\" + j EndModifyTemplate ( B2 ) } } else if ( ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5927\u91cc\u7a0b\u8fb9\u8de8\" ) //P2 { for i while i <= ptlist1 . Size () { B1 = CreateOrModifyTemplate ( \"DIANKUAI\" , ALL_BEAMS \\ MODEL \\ MODEL_CUSHION \\ P1 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_CUSHION \\ List .1 , i ) B1 -> SetAttributeObject ( \"PT\" , ptlist1 . GetItem ( i )) B1 -> SetAttributeObject ( \"AXIS\" , ` ALL_BEAMS \\ INPUT \\ AX - P1 ` ) B1 . SetAttributeDimension ( \"OFFSET_Z\" , 1610 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"OFFSET_X\" , - 0 mm , \"LENGTH\" ) B1 . Name = \"B1-\" + i B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) //B1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\") B1 . SetAttributeDimension ( \"\u652f\u5ea7\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u6a2a\u5411\u5bbd\" , 500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\" , 750 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u9ad8\" , 110 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u9ad8\" , 150 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\" , cushionHeight , \"LENGTH\" ) EndModifyTemplate ( B1 ) } for j while j <= ptlist2 . Size () { B2 = CreateOrModifyTemplate ( \"DIANKUAI\" , ALL_BEAMS \\ MODEL \\ MODEL_CUSHION \\ P2 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_CUSHION \\ List .2 , j ) B2 -> SetAttributeObject ( \"PT\" , ptlist2 . GetItem ( j )) B2 -> SetAttributeObject ( \"AXIS\" , ` ALL_BEAMS \\ INPUT \\ AX - P2 ` ) B2 . SetAttributeDimension ( \"OFFSET_Z\" , 1610 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"OFFSET_X\" , - 250 mm , \"LENGTH\" ) B2 . Name = \"B2-\" + j B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) //B2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\") B2 . SetAttributeDimension ( \"\u652f\u5ea7\u987a\u6865\u5411\u957f\" , 400 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u6a2a\u5411\u5bbd\" , 350 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\" , 750 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u9ad8\" , 110 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u9ad8\" , 150 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\" , cushionHeight , \"LENGTH\" ) EndModifyTemplate ( B2 ) } } else // \u5c0f\u91cc\u7a0b\u8fb9\u8de8 { for i while i <= ptlist1 . Size () { B1 = CreateOrModifyTemplate ( \"DIANKUAI\" , ALL_BEAMS \\ MODEL \\ MODEL_CUSHION \\ P1 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_CUSHION \\ List .1 , i ) B1 -> SetAttributeObject ( \"PT\" , ptlist1 . GetItem ( i )) B1 -> SetAttributeObject ( \"AXIS\" , ` ALL_BEAMS \\ INPUT \\ AX - P1 ` ) B1 . SetAttributeDimension ( \"OFFSET_Z\" , 1610 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"OFFSET_X\" , 250 mm , \"LENGTH\" ) B1 . Name = \"B1-\" + i B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) //B1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\") B1 . SetAttributeDimension ( \"\u652f\u5ea7\u987a\u6865\u5411\u957f\" , 400 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u6a2a\u5411\u5bbd\" , 350 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\" , 750 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u9ad8\" , 110 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u9ad8\" , 150 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\" , cushionHeight , \"LENGTH\" ) EndModifyTemplate ( B1 ) } for j while j <= ptlist2 . Size () { B2 = CreateOrModifyTemplate ( \"DIANKUAI\" , ALL_BEAMS \\ MODEL \\ MODEL_CUSHION \\ P2 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_CUSHION \\ List .2 , j ) B2 -> SetAttributeObject ( \"PT\" , ptlist2 . GetItem ( j )) B2 -> SetAttributeObject ( \"AXIS\" , ` ALL_BEAMS \\ INPUT \\ AX - P2 ` ) B2 . SetAttributeDimension ( \"OFFSET_Z\" , 1610 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"OFFSET_X\" , 0 mm , \"LENGTH\" ) B2 . Name = \"B2-\" + j B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) //B2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\") B2 . SetAttributeDimension ( \"\u652f\u5ea7\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u6a2a\u5411\u5bbd\" , 500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\" , 750 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u9ad8\" , 110 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u9ad8\" , 150 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\" , cushionHeight , \"LENGTH\" ) EndModifyTemplate ( B2 ) } } \u521b\u5efa\u6881\u7f1d\u9699\u73b0\u6d47\u5757 let F ( UserFeature ) let i ( Integer ) let p1 , p2 , p3 , p4 , pa , pb ( point ) let ln ( curve ) i = 1 for i while i < Point1 . Size () { /* set pa=pointbetween(Point1[i],Point1[i+1],0.5,false) set pa=CreateOrModifyDatum(\"Point\",`ALL_BEAMS\\RESULT\\MODEL_GAP\\Ordered Geometrical Set.63` ,`ALL_BEAMS\\RELATIONS\\KP_MODEL\\Knowledge Pattern.18\\PA_List` ,i) pa.Name=\"Pa_\"+ToString(i) pa.Update() set pb=pointbetween(Point2 [i],Point2 [i+1],0.5,false) set pb=CreateOrModifyDatum(\"Point\",`ALL_BEAMS\\RESULT\\MODEL_GAP\\Ordered Geometrical Set.63` ,`ALL_BEAMS\\RELATIONS\\KP_MODEL\\Knowledge Pattern.18\\PB_List` ,i) pb.Name=\"Pb_\"+ToString(i) pb.Update() */ ln = CreateOrModifyDatum ( \"Line\" , ALL_BEAMS \\ DATUM \\ LINES , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_GAP \\ LineList , i ) set ln = project ( line ( pointbetween ( Point1 [ i ] , Point1 [ i + 1 ] , 0.5 , false ), pointbetween ( Point2 [ i ] , Point2 [ i + 1 ] , 0.5 , false )), ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Multi - sections Surface .62 ` , direction ( 0 , 0 , 1 )) ln . Name = \"LN-\" + i ln . Update () F = CreateOrModifyTemplate ( \"BEAM_GAP\" , ALL_BEAMS \\ MODEL \\ MODEL_GAP \\ Body .8 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_GAP \\ BEAM_GAP_List , i ) if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u4e2d\u8de8\" { F -> SetAttributeObject ( \"LINE\" , ln ) F -> SetAttributeObject ( \"LINE1\" , ` ALL_BEAMS \\ CONSTRUCTION \\ DRW_REF \\ Ordered Geometrical Set .33 \\ DRW_INT_LN ` ) F -> SetAttributeObject ( \"SURF\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Multi - sections Surface .62 ` ) F -> SetAttributeString ( \"\u4f4d\u7f6e\u8bbe\u5b9a\" , \"\u4e2d\u8de8\" ) } else if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\" { F -> SetAttributeObject ( \"LINE\" , ln ) F -> SetAttributeObject ( \"LINE1\" , ` ALL_BEAMS \\ CONSTRUCTION \\ DRW_REF \\ Ordered Geometrical Set .33 \\ DRW_INT_LN ` ) F -> SetAttributeObject ( \"SURF\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Multi - sections Surface .62 ` ) F -> SetAttributeString ( \"\u4f4d\u7f6e\u8bbe\u5b9a\" , \"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\" ) } else { F -> SetAttributeObject ( \"LINE\" , ln ) F -> SetAttributeObject ( \"LINE1\" , ` ALL_BEAMS \\ CONSTRUCTION \\ DRW_REF \\ Ordered Geometrical Set .33 \\ DRW_INT_LN ` ) F -> SetAttributeObject ( \"SURF\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Multi - sections Surface .62 ` ) F -> SetAttributeString ( \"\u4f4d\u7f6e\u8bbe\u5b9a\" , \"\u5927\u91cc\u7a0b\u8fb9\u8de8\" ) } EndModifyTemplate ( F ) F . Name = \"GAP_\" + i } \u51fa\u56fe\u6a21\u578b \u6881\u5e73\u9762\u56fe let pt , pt1 , pt2 ( point ) let i ( integer ) let ln ( line ) let l1 , l2 ( list ) let F ( Feature ) l1 = Point11 l2 = Point22 i = 1 for i while i < l1 . Size () { ln = CreateOrModifyDatum ( \"line\" , ALL_BEAMS \\ DATUM \\ PLANER_LN , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_GAP_BEAM \\ LineList , i ) pt1 = pointbetween ( l1 [ i ] , l1 [ i + 1 ] , 0.5 , false ) pt2 = pointbetween ( l2 [ i ] , l2 [ i + 1 ] , 0.5 , false ) ln = line ( pt1 , pt2 ) ln . Name = \"LN-\" + i ln . Update () Set F = CreateOrModifyTemplate ( \"DRW_BEAM_P1\" , ALL_BEAMS \\ MODEL \\ DRW_PLANER_BEAM_GAP , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_GAP_BEAM \\ BeamGapList , i ) F -> SetAttributeObject ( \"LN\" , ln ) F -> SetAttributeObject ( \"CRV-1\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 1 ` ) F -> SetAttributeObject ( \"CRV-2\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 2 ` ) F -> SetAttributeDimension ( \"BEAM_WIDTH\" , 300 mm , \"LENGTH\" ) F -> SetAttributeString ( \"TYPE\" , \"B\" ) F . Name = \"BEAM-PLANER-\" + i //F.Color=\"0,255,255\" EndModifyTemplate ( F ) } \u5355\u70b9\u6807\u6ce8 let pt , pt1 ( point ) let i , j , k ( integer ) let ln ( line ) let l1 ( list ) // let F ( ArcAnnotationOnePointFeature ) let F1 ( ArcAnnotationTwoPointFeature ) //let DEMO1, //let DEMO2(feature) l1 = ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAMS \\ PlanerLnList ln = ` ALL_BEAMS \\ CONSTRUCTION \\ DRW_REF \\ Ordered Geometrical Set .33 \\ DRW_INT_LN ` i = 1 for i while i <= l1 . Size () { pt = CreateOrModifyDatum ( \"point\" , ALL_BEAMS \\ DATUM \\ DRW_POINTS , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ IntPointList , i ) pt = intersect ( ln , l1 [ i ] ) pt . Name = \"INT-POINT-\" + i } j = 1 for j while j <= l1 . Size () { /*Set F=InstantiateTemplate(\"DRW_TAG_1\",ALL_BEAMS\\RESULT\\DRW_TAGS ) F->SetAttributeObject(\"PT\",ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\IntPointList [j]) //F->SetAttributeDimension(\"BEAM_WIDTH\",300mm,\"LENGTH\") F->SetAttributeString(\"ComponentName\",\"demo\") F->SetAttributeString(\"Name\",\"TEST-\"+j) F->SetAttributeString(\"Value\",\"K-\"+`ALL_BEAMS\\PARAMETERS\\\u8de8\u53f7` +\"_\"+j+\"-\u53f7\u6881\") EndModifyTemplate(F) ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\LabelList->SetItem(F->GetAttributeObject(\"LABEL\"),j) DEMO1=F->GetAttributeObject(\"LABEL\") DEMO1.Name=\"Label-\"+j */ F = CreateArcAnnotationOnePointFeature ( ` Annotation \\ \u6881\u53f7\u6807\u6ce8 ` , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ IntPointList [ j ] , \"RTTT\" , \"demo\" , \"K-\" + ` ALL_BEAMS \\ PARAMETERS \\ \u8de8\u53f7 ` + \"_\" + j + \"-\u53f7\u6881\" ) ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ LabelList -> SetItem ( F , j ) } k = 1 for k while k < l1 . Size () { /*Set F1=InstantiateTemplate(\"DRW_DIM_1\",ALL_BEAMS\\RESULT\\DRW_DIM ) F1->SetAttributeObject(\"P1\",ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\IntPointList [k]) F1->SetAttributeObject(\"P2\",ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\IntPointList [k+1]) F1->SetAttributeString(\"Name\",\"Distance-\"+k) F1->SetAttributeInteger(\"DimType\",3) EndModifyTemplate(F1) ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\DimListM ->SetItem(F1->GetAttributeObject(\"DIM\"),k) DEMO2=F1->GetAttributeObject(\"DIM\") DEMO2->SetAttributeString(\"Value\",\"K-\"+k+\"-\u53f7\u6881\") DEMO2.Name=\"Dim-M-\"+k */ F1 = CreateArcAnnotationTwoPointFeature ( ` Annotation \\ \u73b0\u6d47\u7f1d\u9699\u6807\u6ce8 ` , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ IntPointList [ k ] , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ IntPointList [ k + 1 ] , \"Distance-\" + k , \"K-\" + k + \"-\u53f7\u6881\" , \"1\" ) ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ DimListM -> SetItem ( F1 , k ) } //\u5f97\u5230\u4e24\u8fb9\u6807\u6ce8 k = 1 for k while k < l1 . Size () { /* Set F1=InstantiateTemplate(\"DRW_DIM_1\",ALL_BEAMS\\RESULT\\DRW_DIM ) F1->SetAttributeObject(\"P1\",Point11 [k] ) F1->SetAttributeObject(\"P2\",Point11 [k+1]) F1->SetAttributeString(\"Name\",\"Distance-\"+k) F1->SetAttributeInteger(\"DimType\",3) EndModifyTemplate(F1) ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\DimListL ->SetItem(F1->GetAttributeObject(\"DIM\"),k) DEMO2=F1->GetAttributeObject(\"DIM\") DEMO2->SetAttributeString(\"Value\",\"K-\"+k+\"-\u53f7\u6881\") DEMO2.Name=\"Dim-L-\"+k */ F1 = CreateArcAnnotationTwoPointFeature ( ` Annotation \\ \u73b0\u6d47\u7f1d\u5c0f\u91cc\u7a0b\u6807\u6ce8 ` , Point11 [ k ] , Point11 [ k + 1 ] , \"Distance-\" + k , \"K-\" + k + \"-\u53f7\u6881\" , \"3\" ) ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ DimListL -> SetItem ( F1 , k ) } //\u5f97\u5230\u4e24\u8fb9\u6807\u6ce8 k = 1 for k while k < l1 . Size () { /*Set F1=InstantiateTemplate(\"DRW_DIM_1\",ALL_BEAMS\\RESULT\\DRW_DIM ) F1->SetAttributeObject(\"P1\",Point22 [k] ) F1->SetAttributeObject(\"P2\",Point22 [k+1]) F1->SetAttributeString(\"Name\",\"Distance-\"+k) F1->SetAttributeInteger(\"DimType\",3) EndModifyTemplate(F1) ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\DimList ->SetItem(F1->GetAttributeObject(\"DIM\"),k) DEMO2=F1->GetAttributeObject(\"DIM\") DEMO2->SetAttributeString(\"Value\",\"K-\"+k+\"-\u53f7\u6881\") DEMO2.Name=\"Dim-R-\"+k */ F1 = CreateArcAnnotationTwoPointFeature ( ` Annotation \\ \u73b0\u6d47\u7f1d\u5927\u91cc\u7a0b\u6807\u6ce8 ` , Point22 [ k ] , Point22 [ k + 1 ] , \"Distance-\" + k , \"K-\" + k + \"-\u53f7\u6881\" , \"3\" ) ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ DimList -> SetItem ( F1 , k ) } \u6a2a\u65ad\u9762\u56fe\u7eb8\u6a21\u677f\u7684\u751f\u6210 let i , j ( integer ) let p1 , p2 , p3 , p4 ( point ) let dis1 , dis2 ( LENGTH ) let L1 , L2 ( list ) L1 = Point11 L2 = Point22 let F1 , F2 ( Feature ) let gap ( length ) gap = ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` / 2 i = 1 j = 1 p1 = Point1 [ 1 ] p2 = Point1 [ 2 ] Notify ( \"DIS:\" , dis1 ) dis1 = distance ( p1 , p2 ) p3 = Point2 [ 1 ] p4 = Point2 [ 2 ] Notify ( \"DIS:\" , dis2 ) dis2 = distance ( p3 , p4 ) for i while i <= Point11 . Size () { F1 = CreateOrModifyTemplate ( \"S1\" , ALL_BEAMS \\ MODEL \\ DRW_SECTION_UDFS_P1 , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_BEAM_SECTION \\ BeamSectionList_1 , i ) F1 -> SetAttributeObject ( \"CRV\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 01 ` ) F1 -> SetAttributeObject ( \"PT\" , Point1 . GetItem ( i )) if i == 1 { F1 -> SetAttributeDimension ( \"Length_L\" , 1975 mm , \"Length\" ) F1 -> SetAttributeDimension ( \"Length_R\" , dis1 / 2 - gap , \"Length\" ) } if i > 1 and i < Point11 . Size () { F1 -> SetAttributeDimension ( \"Length_L\" , dis1 / 2 - gap , \"Length\" ) F1 -> SetAttributeDimension ( \"Length_R\" , dis1 / 2 - gap , \"Length\" ) } if i == Point11 . Size () { F1 -> SetAttributeDimension ( \"Length_L\" , dis1 / 2 - gap , \"Length\" ) F1 -> SetAttributeDimension ( \"Length_R\" , 1975 mm , \"Length\" ) } EndModifyTemplate ( F1 ) F2 = CreateOrModifyTemplate ( \"S1\" , ALL_BEAMS \\ MODEL \\ DRW_SECTION_UDFS_P2 , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_BEAM_SECTION \\ BeamSectionList_2 , i ) F2 -> SetAttributeObject ( \"CRV\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 02 ` ) F2 -> SetAttributeObject ( \"PT\" , Point2 . GetItem ( i )) if i == 1 { F2 -> SetAttributeDimension ( \"Length_L\" , 1975 mm , \"Length\" ) F2 -> SetAttributeDimension ( \"Length_R\" , dis2 / 2 - gap , \"Length\" ) } if i > 1 and i < Point11 . Size () { F2 -> SetAttributeDimension ( \"Length_L\" , dis2 / 2 - gap , \"Length\" ) F2 -> SetAttributeDimension ( \"Length_R\" , dis2 / 2 - gap , \"Length\" ) } if i == Point11 . Size () { F2 -> SetAttributeDimension ( \"Length_L\" , dis2 / 2 - gap , \"Length\" ) F2 -> SetAttributeDimension ( \"Length_R\" , 1975 mm , \"Length\" ) } EndModifyTemplate ( F2 ) } \u6881\u6570\u91cf\u8ba1\u7b97\u5668 void BrdLogical::mainLoop ( double brd_width ) { std :: cout << \"\u5f00\u59cb\u8ba1\u7b97! \\n \" ; double B = 0 ; double maxgap = 4300 ; //\u6700\u5927\u6881\u8ddd double mingap = 3000 ; //\u6700\u5c0f\u6881\u8ddd double stdgap = 300 ; //\u73b0\u6d47\u6bb5\u8ddd\u79bb double stdLength = 4250 ; //\u6807\u51c6\u6881\u8ddd\u79bb double DS0 = 1975 ; //\u8fb9\u6881\u5916\u4fa7\u5bbd double guardrailwidth = 150 ; //\u9632\u649e\u62a4\u680f\u5916\u5305\u5bbd double beamTF = 0 ; //\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001 double NB = 0 ; //\u6881\u6570\uff08\u521d\u59cb\uff09 double DT = 0.0 ; //\u4e24\u4fa7\u8fb9\u6881\u4e2d\u5fc3\u8ddd double beamdistance = 0 ; double beamdis3 = 0 ; double beamdis4_3 = 0 ; double beamdisTF = 0 ; double NB2 = 0 ; double DL2 = 0.0 ; double DL3 = 0.000 ; //\u6881\u8ddd\uff08\u4fee\u6b633\uff09 //B = i*500; B = brd_width ; cout << \"\" << endl ; cout << \"\u6865\u5bbd=\" << B << endl ; DT = B - 2 * guardrailwidth - 2 * DS0 ; cout << \"-----\u4e24\u4fa7\u8fb9\u6881\u4e2d\u5fc3\u8ddd=\" << DT << endl ; //\u6881\u6570\u6700\u5c0f\u503c\uff08\u4f30\u7b97\uff09\uff1b if ( int ( B / maxgap ) < 2 ) { beamdistance = 2 ; } else { beamdistance = ( int ( B / maxgap )); } cout << \"-----\u6881\u6570\u6700\u5c0f\u503c\uff08\u4f30\u7b97\uff09=\" << beamdistance << endl ; //\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09 if ( int ( B / mingap ) < 2 ) { beamdistance = 2 ; } else { beamdistance = ( int ( B / mingap )); } cout << \"-----\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09=\" << beamdistance << endl ; //*************************************** //**\u6b64\u5faa\u73af\u5224\u5b9a\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\uff08\u5f88\u7a84\uff09 //*************************************** cout << \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\uff08\u5f88\u7a84\uff09**\" << endl ; //\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001 if ( DT < stdLength ) { beamTF = 1 ; } else { beamTF = 0 ; } cout << \"-----\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001=\" << beamTF << endl ; //\u6881\u6570\uff08\u521d\u59cb\uff09 NB = int ( DT / stdLength ); cout << \"-----\u6881\u6570\uff08\u521d\u59cb\uff09=\" << NB << endl ; //\u6881\u6570\uff08\u4fee\u6b631\uff09 if ( beamTF == 1 ) { NB = NB + 2 ; } else { NB = NB + 1 ; } cout << \"-----\u6881\u6570\uff08\u4fee\u6b631\uff09=\" << NB << endl ; //\u6881\u8ddd\uff08\u4fee\u6b631\uff09 beamdistance = DT / ( NB - 1 ); cout << \"-----\u6881\u8ddd\uff08\u4fee\u6b631\uff09=\" << beamdistance << endl ; //\u6881\u8ddd\u5224\u5b9a >=3.0 if ( beamdistance >= mingap ) { beamdis3 = 1 ; } else { beamdis3 = 0 ; } //********************** //**\u6b64\u5faa\u73af\u5224\u5b9a\u6881\u8ddd\u662f\u5426\u5408\u7406 //********************** cout << \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u6881\u8ddd\u662f\u5426\u5408\u7406**\" << endl ; cout << \"-----\u6881\u8ddd\u5224\u5b9a >=3.0=\" << beamdis3 << endl ; //\u6881\u8ddd\u5224\u5b9a <=4.3 if ( beamdistance <= maxgap ) { beamdis4_3 = 1 ; } else { beamdis4_3 = 0 ; } cout << \"-----\u6881\u8ddd\u5224\u5b9a <=4.3=\" << beamdis4_3 << endl ; //\u6881\u8ddd\u662f\u5426\u5408\u7406 if ( beamdis3 * beamdis4_3 == 1 ) { beamdisTF = 1 ; } else { beamdisTF = 0 ; } cout << \"-----\u6881\u8ddd\u662f\u5426\u5408\u7406=\" << beamdisTF << endl ; //\u6881\u6570\uff08\u4fee\u6b632\uff09 if ( beamdisTF == 1 ) { NB2 = NB ; } else if ( beamdis3 == 0 ) { if ( beamdistance < mingap ) { NB2 = NB ; } else { NB2 = NB - 1 ; } } else if ( beamdis4_3 == 0 ) { NB2 = NB + 1 ; } cout << \"-----\u6881\u6570\uff08\u4fee\u6b632\uff09=\" << NB2 << endl ; //\u6881\u8ddd\uff08\u4fee\u6b632\uff09 DL2 = DT / ( NB2 - 1 ); cout << \"-----\u6881\u8ddd\uff08\u4fee\u6b632\uff09=\" << DL2 << endl ; //********************** //**\u6b64\u5faa\u73af\u5224\u5b9a\u8fb9\u6881\u5916\u4fa7\u5bbd\u662f\u5426\u9700\u8c03\u6574 //********************** //\u6881\u8ddd\u5224\u5b9a >= 3.0 int beamDisCheck2_3 = 0 ; if ( DL2 > mingap ) { beamDisCheck2_3 = 1 ; } else { beamDisCheck2_3 = 0 ; } cout << \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u8fb9\u6881\u5916\u4fa7\u5bbd\u662f\u5426\u9700\u8c03\u6574**\" << endl ; cout << \"-----\u6881\u8ddd\u5224\u5b9a >= 3.0=\" << beamDisCheck2_3 << endl ; //\u6881\u8ddd\u5224\u5b9a <= 4.3 int beamDisCheck2_4_3 = 0 ; if ( DL2 <= maxgap ) { beamDisCheck2_4_3 = 1 ; } else { beamDisCheck2_4_3 = 0 ; } cout << \"-----\u6881\u8ddd\u5224\u5b9a <= 4.3=\" << beamDisCheck2_4_3 << endl ; //\u6881\u8ddd\u662f\u5426\u5408\u7406 int beamdisTF2 = 0 ; if ( beamDisCheck2_3 * beamDisCheck2_4_3 == 1 ) { beamdisTF2 = 1 ; } else { beamdisTF2 = 0 ; } cout << \"-----\u6881\u8ddd\u662f\u5426\u5408\u7406=\" << beamdisTF2 << endl ; if ( beamDisCheck2_3 == 1 ) { DL3 = DL2 ; } else { DL3 = B / NB2 ; } cout << \"-----\u6881\u8ddd\uff08\u4fee\u6b633\uff09=\" << DL3 << endl ; //\u8fb9\u6881\u5916\u4fa7\u5bbd\uff08\u4fee\u6b631\uff09 double DS01 = 0 ; DS01 = ( B - ( 2 * guardrailwidth ) - ( NB2 - 1 ) * DL3 ) / 2 ; cout << \"-----\u8fb9\u6881\u5916\u4fa7\u5bbd\uff08\u4fee\u6b631\uff09=\" << DS01 << endl ; cout << \" \\n \" << endl ; cout << \"\u8ba1\u7b97\u7ed3\u675f! \\n \" << endl ; } void BrdLogical::GetCount ( double BW , int & A , int & B ) { //declare variables; double minLength = 3.000 ; double maxLength = 4.300 ; double stdLength = 4.250 ; double DT = 0.000 ; double DL1 = 0.000 ; MaxCount = int ( BW / minLength ); if ( MaxCount < 2 ) { MaxCount = 2 ; } else { MaxCount = int ( BW / minLength ); } MinCount = int ( BW / maxLength ); if ( MinCount < 2 ) { MinCount = 2 ; } else { MinCount = int ( BW / maxLength ); } DT = BW - ( 1.975 * 2 + 0.150 * 2 ); cout << \"-----\u4e24\u4fa7\u8fb9\u6881\u4e2d\u5fc3\u8ddd=\" << DT << endl ; if ( DT < stdLength ) { cout << \"-----\u6881\u8ddd\u4e0d\u6ee1\u8db3\u4e00\u4e2a\u6807\u51c6\u68814.25\u7c73\u7684\u8ddd\u79bb\u3002\" << endl ; //\u8ba1\u7b97\u521d\u59cb\u503c Bcount = ( DT / stdLength ) + 2 ; cout << \"-----\u6881\u6570\uff08\u4fee\u6b631\uff09=\" << Bcount << endl ; } else { //\u8ba1\u7b97\u521d\u59cb\u503c Bcount = ( DT / stdLength ) + 1 ; cout << \"-----\u6881\u6570\uff08\u4fee\u6b631\uff09=\" << Bcount << endl ; DL1 = DT / ( Bcount - 1 ); cout << \"-----\u6881\u8dddDL1=\" << DL1 << endl ; } //\u7ea0\u6b63 if ( DL1 < minLength ) { Bcount = ( DT / stdLength ) + 2 ; } else if ( DL1 > minLength && DL1 <= maxLength ) { Bcount = ( DT / stdLength ) + 1 ; } else if ( DL1 >= maxLength ) { Bcount = Bcount + 1 ; } cout << \"-----\u6881\u6570\uff08\u4fee\u6b632\uff09=\" << Bcount << endl ; A = Bcount ; //\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09\u7684 \u6881\u8ddd double MaxBeamLength = 0 ; MaxBeamLength = DT / ( MaxCount - 1 ); cout << \"-----\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09\u7684 \u6881\u8ddd = \" << MaxBeamLength << endl ; //\u6881\u6570\u6700\u5927\u503c\uff08\u53d6\u7528 \u8bd5\u7b971\uff09 double MaxBeamCount = 0 ; if ( MaxBeamLength > minLength && MaxBeamLength <= maxLength ) { MaxBeamCount = MaxCount ; // (DT / stdLength) + 2; //cout << \"-----\u6881\u6570\u6700\u5927\u503c[if (MaxBeamLength<minLength)]\uff08\u53d6\u7528 \u8bd5\u7b971\uff09=\" << MaxBeamCount << endl; } else if ( MaxCount -1 >= Bcount ) { MaxBeamCount = MaxCount -1 ; //cout << \"-----\u6881\u6570\u6700\u5927\u503c[(MaxCount-1>= Bcount)]\uff08\u53d6\u7528 \u8bd5\u7b971\uff09=\" << MaxBeamCount << endl; } else { MaxBeamCount = Bcount ; //cout << \"-----\u6881\u6570\u6700\u5927\u503c[else]\uff08\u53d6\u7528 \u8bd5\u7b971\uff09=\" << MaxBeamCount << endl; } cout << \"-----\u6881\u6570\u6700\u5927\u503c\uff08\u53d6\u7528 \u8bd5\u7b971\uff09=\" << MaxBeamCount << endl ; B = MaxBeamCount ; } void BrdLogical::Compare ( double P1Length , double P2Length , int & oCount ) { BrdLogical aa ; // P1 int CountA = 0 ; int CountB = 0 ; aa . GetCount ( P1Length , CountA , CountB ); cout << \"-----\u6700\u7ec8P1\uff1a=\" << \"\u6865\u5bbd\uff1a\" << P1Length << \"_\" << \"A:\" << CountA << \"_\" << \"B:\" << CountB << endl ; // P2 int Counta = 0 ; int Countb = 0 ; aa . GetCount ( P2Length , Counta , Countb ); cout << \"-----\u6700\u7ec8P2\uff1a=\" << \"\u6865\u5bbd\uff1a\" << P2Length << \"_\" << \"A:\" << Counta << \"_\" << \"B:\" << Countb << endl ; //---------------------------------------------------------------------- //\u4ea4\u96c6\u7684\u7c7b\u578b 1\uff08\u5c0f\u91cc\u7a0b\u6700\u5c0f\u6881\u6570<\u5927\u91cc\u7a0b\u6700\u5c0f\u6881\u6570\uff09 int type1 = 0 ; if ( CountA < Counta && CountB >= Counta ) { type1 = 1 ; } else { type1 = 0 ; } cout << \"-----\u4ea4\u96c6\u7684\u7c7b\u578b 1\uff08\u5c0f\u91cc\u7a0b\u6700\u5c0f\u6881\u6570<\u5927\u91cc\u7a0b\u6700\u5c0f\u6881\u6570\uff09\uff1a\" << type1 << endl ; //\u4ea4\u96c6\u7684\u7c7b\u578b 2\uff08\u5c0f\u91cc\u7a0b\u6700\u5c0f\u6881\u6570>=\u5927\u91cc\u7a0b\u6700\u5c0f\u6881\u6570\uff09 int type2 = 0 ; if ( CountA >= Counta && CountA >= Countb ) { type2 = 1 ; } else { type2 = 0 ; } cout << \"-----\u4ea4\u96c6\u7684\u7c7b\u578b 2\uff08\u5c0f\u91cc\u7a0b\u6700\u5c0f\u6881\u6570>=\u5927\u91cc\u7a0b\u6700\u5c0f\u6881\u6570\uff09\uff1a\" << type2 << endl ; //---------------------------------------------------------------------- //\u6881\u6570 \u662f\u5426\u6709\u4ea4\u96c6 int beamintbool = 0 ; if ( type1 == 0 && type2 == 0 ) { beamintbool = 0 ; } else { beamintbool = 1 ; } cout << \"-----\u6881\u6570 \u662f\u5426\u6709\u4ea4\u96c6\uff1a\" << beamintbool << endl ; //---------------------------------------------------------------------- //\u5982\u6709\u4ea4\u96c6 \u6881\u6570\uff08\u53d6\u516c\u6709\u6570\u7684\u6700\u5c0f\u503c\uff09 int beamGetMin = 0 ; if ( type1 == 1 ) { beamGetMin = Counta ; } else { if ( type1 == 0 ) { beamGetMin = CountA ; } } cout << \"-----\u6881\u6570 \u5982\u6709\u4ea4\u96c6 \u6881\u6570\uff08\u53d6\u516c\u6709\u6570\u7684\u6700\u5c0f\u503c\uff09\uff1a\" << beamGetMin << endl ; // \u5982\u65e0\u4ea4\u96c6 \u6881\u6570\uff08\u53d6\u56db\u4e2a\u6570\u4e2d\uff0c\u7b2c\u4e8c\u5927\u7684\u90a3\u4e2a\u6570\uff09\u63a8\u8350 int noInterVal = 0 ; if ( beamintbool == 0 ) { if ( CountA < Counta ) { noInterVal = Counta ; } else { noInterVal = CountA ; } } else { noInterVal = beamGetMin ; cout << \"-----\u6881\u6570 \u67e5\u770b\u6709\u4ea4\u96c6\u89e3\uff1a\" << noInterVal << endl ; } cout << \"-----\u6881\u6570 \u5982\u65e0\u4ea4\u96c6 \u6881\u6570\uff08\u53d6\u56db\u4e2a\u6570\u4e2d\uff0c\u7b2c\u4e8c\u5927\u7684\u90a3\u4e2a\u6570\uff09\u63a8\u8350\uff1a\" << noInterVal << endl ; //noInterVal \u4e3a\u6700\u7ec8\u89e3 //---------------------------------------------------------------------- //\u5982\u65e0\u4ea4\u96c6 \u9700\u4fee\u6539\u6865\u5bbd\u7684\u4e00\u4fa7 //---------------------------------------------------------------------- int NoBeamCheck = 0 ; if ( beamintbool == 0 ) { if ( CountA < Counta ) { cout << \"-----\u6881\u6570 \u8c03\u8282\u5c0f\u91cc\u7a0b\u4fa7 \" << endl ; } else { cout << \"-----\u6881\u6570 \u8c03\u8282\u5927\u91cc\u7a0b\u4fa7 \" << endl ; } } else { NoBeamCheck = noInterVal ; cout << \"-----\u6881\u6570 \u67e5\u770b\u6709\u4ea4\u96c6\u89e3 \" << endl ; } //---------------------------------------------------------------------- // \u5982\u65e0\u4ea4\u96c6 \u9700\u4fee\u6539\u6865\u5bbd\u7684\u4e00\u4fa7 \u6865\u5bbd\u63a8\u8350 //---------------------------------------------------------------------- int beamFixVal = 0 ; if ( beamintbool == 1 ) { cout << \"-----\u6881\u6570 \u67e5\u770b\u6709\u4ea4\u96c6\u89e3 \" << endl ; } else { cout << \"-----\u6881\u6570 \u6865\u5bbd\u63a8\u8350 \" << endl ; } //\u4ee5\u4e0b\u4e3a\u5176\u4ed6\u7b97\u6cd5\u8ba1\u7b97\u7ed3\u679c\uff0c\u53ef\u4ee5\u53c2\u8003\uff0c\u53ef\u4ee5\u5220\u9664\uff1b //---------------------------------------------------------------------- int sresult = 0 ; if ( type1 == 1 ) { sresult = Counta ; } else if ( type2 == 1 ) { sresult = CountA ; } else if ( beamintbool == 1 ) { if ( CountA < Counta ) { sresult = Counta ; } else if ( CountA > Counta ) { sresult = CountA ; } } else if ( beamintbool == 0 ) { if ( CountA < Counta ) { sresult = Counta ; } else if ( CountA > Counta ) { sresult = CountA ; } } else { ////---------------------------------------------------------------------- vector < int > dArr ; dArr . push_back ( CountA ); dArr . push_back ( CountB ); dArr . push_back ( Counta ); dArr . push_back ( Countb ); int icoutt = GetSmallNumber ( dArr ); cout << \"\u6700\u7ec8\u6881\u5f97\u6570\u91cf\u4e3a:\" << icoutt << endl ; //////---------------------------------------------------------------------- oCount = icoutt ; } oCount = sresult ; ////---------------------------------------------------------------------- //vector<int>dArr; //dArr.push_back(CountA); //dArr.push_back(CountB); //dArr.push_back(Counta); //dArr.push_back(Countb); //int icoutt = GetSmallNumber(dArr); //cout << \"\u6700\u7ec8\u6881\u5f97\u6570\u91cf\u4e3a:\" << icoutt << endl; //////---------------------------------------------------------------------- //oCount = icoutt; //---------------------------------------------------------------------- } void BrdLogical::run () { std :: cout << \"\u5f00\u59cb\u8ba1\u7b97! \\n \" ; double B = 0 ; double maxgap = 4300 ; //\u6700\u5927\u6881\u8ddd double mingap = 3000 ; //\u6700\u5c0f\u6881\u8ddd double stdgap = 300 ; //\u73b0\u6d47\u6bb5\u8ddd\u79bb double stdLength = 4250 ; //\u6807\u51c6\u6881\u8ddd\u79bb double DS0 = 1975 ; //\u8fb9\u6881\u5916\u4fa7\u5bbd double guardrailwidth = 150 ; //\u9632\u649e\u62a4\u680f\u5916\u5305\u5bbd double beamTF = 0 ; //\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001 double NB = 0 ; //\u6881\u6570\uff08\u521d\u59cb\uff09 double DT = 0.0 ; //\u4e24\u4fa7\u8fb9\u6881\u4e2d\u5fc3\u8ddd double beamCount = 0 ; double beamdis3 = 0 ; double beamdis4_3 = 0 ; double beamdisTF = 0 ; double NB2 = 0 ; double DL2 = 0.0 ; double DL3 = 0.000 ; //\u6881\u8ddd\uff08\u4fee\u6b633\uff09 for ( int i = 0 ; i < 150 ; i ++ ) { B = i * 500 ; cout << \"\" << endl ; cout << \"\u6865\u5bbd=\" << B << endl ; DT = B - 2 * guardrailwidth - 2 * DS0 ; cout << \"-----\u4e24\u4fa7\u8fb9\u6881\u4e2d\u5fc3\u8ddd=\" << DT << endl ; //\u6881\u6570\u6700\u5c0f\u503c\uff08\u4f30\u7b97\uff09\uff1b if ( int ( B / maxgap ) < 2 ) { beamCount = 2 ; } else { beamCount = ( int ( B / maxgap )); } cout << \"-----\u6881\u6570\u6700\u5c0f\u503c\uff08\u4f30\u7b97\uff09=\" << beamCount << endl ; //\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09 if ( int ( B / mingap ) < 2 ) { beamCount = 2 ; } else { beamCount = ( int ( B / mingap )); } cout << \"-----\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09=\" << beamCount << endl ; //*************************************** //**\u6b64\u5faa\u73af\u5224\u5b9a\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\uff08\u5f88\u7a84\uff09 //*************************************** cout << \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\uff08\u5f88\u7a84\uff09**\" << endl ; //\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001 if ( DT < stdLength ) { beamTF = 1 ; } else { beamTF = 0 ; } cout << \"-----\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001 =\" << beamTF << endl ; //\u6881\u6570\uff08\u521d\u59cb\uff09 NB = int ( DT / stdLength ); cout << \"-----\u6881\u6570\uff08\u521d\u59cb\uff09=\" << NB << endl ; //\u6881\u6570\uff08\u4fee\u6b631\uff09 if ( beamTF == 1 ) { NB = NB + 2 ; } else { NB = NB + 1 ; } cout << \"-----\u6881\u6570\uff08\u4fee\u6b631\uff09=\" << NB << endl ; //\u6881\u8ddd\uff08\u4fee\u6b631\uff09 beamCount = DT / ( NB - 1 ); cout << \"-----\u6881\u8ddd\uff08\u4fee\u6b631\uff09=\" << beamCount << endl ; //\u6881\u8ddd\u5224\u5b9a >=3.0 if ( beamCount >= mingap ) { beamdis3 = 1 ; } else { beamdis3 = 0 ; } //********************** //**\u6b64\u5faa\u73af\u5224\u5b9a\u6881\u8ddd\u662f\u5426\u5408\u7406 //********************** cout << \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u6881\u8ddd\u662f\u5426\u5408\u7406**\" << endl ; cout << \"-----\u6881\u8ddd\u5224\u5b9a >=3.0=\" << beamdis3 << endl ; //\u6881\u8ddd\u5224\u5b9a <=4.3 if ( beamCount <= maxgap ) { beamdis4_3 = 1 ; } else { beamdis4_3 = 0 ; } cout << \"-----\u6881\u8ddd\u5224\u5b9a <=4.3=\" << beamdis4_3 << endl ; //\u6881\u8ddd\u662f\u5426\u5408\u7406 if ( beamdis3 * beamdis4_3 == 1 ) { beamdisTF = 1 ; } else { beamdisTF = 0 ; } cout << \"-----\u6881\u8ddd\u662f\u5426\u5408\u7406=\" << beamdisTF << endl ; //\u6881\u6570\uff08\u4fee\u6b632\uff09 if ( beamdisTF == 1 ) { NB2 = NB ; } else if ( beamdis3 == 0 ) { if ( beamCount < mingap ) { NB2 = NB ; } else { NB2 = NB - 1 ; } } else if ( beamdis4_3 == 0 ) { NB2 = NB + 1 ; } cout << \"-----\u6881\u6570\uff08\u4fee\u6b632\uff09=\" << NB2 << endl ; //\u6881\u8ddd\uff08\u4fee\u6b632\uff09 DL2 = DT / ( NB2 - 1 ); cout << \"-----\u6881\u8ddd\uff08\u4fee\u6b632\uff09=\" << DL2 << endl ; //********************** //**\u6b64\u5faa\u73af\u5224\u5b9a\u8fb9\u6881\u5916\u4fa7\u5bbd\u662f\u5426\u9700\u8c03\u6574 //********************** //\u6881\u8ddd\u5224\u5b9a >= 3.0 int beamDisCheck2_3 = 0 ; if ( DL2 > mingap ) { beamDisCheck2_3 = 1 ; } else { beamDisCheck2_3 = 0 ; } cout << \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u8fb9\u6881\u5916\u4fa7\u5bbd\u662f\u5426\u9700\u8c03\u6574**\" << endl ; cout << \"-----\u6881\u8ddd\u5224\u5b9a >= 3.0=\" << beamDisCheck2_3 << endl ; //\u6881\u8ddd\u5224\u5b9a <= 4.3 int beamDisCheck2_4_3 = 0 ; if ( DL2 <= maxgap ) { beamDisCheck2_4_3 = 1 ; } else { beamDisCheck2_4_3 = 0 ; } cout << \"-----\u6881\u8ddd\u5224\u5b9a <= 4.3=\" << beamDisCheck2_4_3 << endl ; //\u6881\u8ddd\u662f\u5426\u5408\u7406 int beamdisTF2 = 0 ; if ( beamDisCheck2_3 * beamDisCheck2_4_3 == 1 ) { beamdisTF2 = 1 ; } else { beamdisTF2 = 0 ; } cout << \"-----\u6881\u8ddd\u662f\u5426\u5408\u7406=\" << beamdisTF2 << endl ; if ( beamDisCheck2_3 == 1 ) { DL3 = DL2 ; } else { DL3 = B / NB2 ; } cout << \"-----\u6881\u8ddd\uff08\u4fee\u6b633\uff09=\" << DL3 << endl ; //\u8fb9\u6881\u5916\u4fa7\u5bbd\uff08\u4fee\u6b631\uff09 double DS01 = 0 ; DS01 = ( B - ( 2 * guardrailwidth ) - ( NB2 - 1 ) * DL3 ) / 2 ; cout << \"-----\u8fb9\u6881\u5916\u4fa7\u5bbd\uff08\u4fee\u6b631\uff09=\" << DS01 << endl ; //\u6881\u6570\u6700\u5c0f\u503c\uff08\u4f30\u7b97\uff09\u7684 \u6881\u8ddd } //cout << \"_groupMaxCount \u6570\u7ec4\u7684\u6570\u91cf\u662f\uff1a\" << _groupMaxCount.Size() << endl; //cout << \"_groupMinCount \u6570\u7ec4\u7684\u6570\u91cf\u662f\uff1a\" << _groupMinCount.Size() << endl; cout << \" \\n \" << endl ; cout << \"\u8ba1\u7b97\u7ed3\u675f! \\n \" << endl ; } bool BrdLogical::sortFun ( const int & p1 , const int & p2 ) { return p1 < p2 ; } int BrdLogical::GetSmallNumber ( vector < int > dArr ) { vector < int > dArrVec ; for ( int i = 0 ; i < dArr . size (); i ++ ) { int dOne = dArr [ i ]; for ( int j = i + 1 ; j < dArr . size (); j ++ ) { if ( dOne == dArr [ j ]) { dArrVec . push_back ( dOne ); cout << \"ONE:\" << dOne << endl ; } } } sort ( dArrVec . begin (), dArrVec . end (), sortFun ); if ( dArrVec . size () <= 0 ) { return 0 ; } cout << dArrVec [ 0 ] << endl ; return dArrVec [ 0 ]; }","title":"\u4e8c\u671f\u9879\u76ee\u4ee3\u7801"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_1","text":"","title":"\u4e8c\u671f\u9879\u76ee\u4ee3\u7801"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#excel","text":"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; using System.Collections ; using System.IO ; using MECMOD ; using INFITF ; using KnowledgewareTypeLib ; using HybridShapeTypeLib ; using System.Windows ; namespace Interop.CATCIVAxisDataLib.Code { public class CreatAxisFormExcel : MainWindow { public void creatAxisAlongCurve ( int installtype , INFITF . AnyObject planerCurve , INFITF . AnyObject Curve3d , INFITF . AnyObject StartPoint ) { ArrayList dislist = new ArrayList (); ArrayList namelist = new ArrayList (); ArrayList ispierlist = new ArrayList (); ArrayList anglelist = new ArrayList (); excel xle = new excel (); dislist = xle . Open ( out namelist , out ispierlist , out anglelist ); //for (int i = 1; i < dislist.Count; i++) //{ // MessageBox.Show(dislist[i].ToString()); //} Part part = GetContainPart ( planerCurve ); HybridShapeFactory hsf = ( HybridShapeFactory ) part . HybridShapeFactory ; HybridBody AXISHB = part . HybridBodies . Add (); AXISHB . set_Name ( \"PIER_AXIS_SET\" ); HybridBody hbpts = AXISHB . HybridBodies . Add (); hbpts . set_Name ( \"AXIS_PTS\" ); HybridBody hbref = AXISHB . HybridBodies . Add (); hbref . set_Name ( \"AXIS_REF\" ); HybridBody hb = AXISHB . HybridBodies . Add (); hb . set_Name ( \"AXIS_RESULT\" ); ListParameter axislist = part . Parameters . CreateList ( \"AXISLIST\" ); //MessageBox.Show(\"\u8ddd\u79bb\u6570\u91cf\uff1a\"+dislist.Count); for ( int i = 0 ; i < dislist . Count ; i ++) { double dislens = Convert . ToDouble ( dislist [ i ]) * 1000 ; double RoatateAngle = Convert . ToDouble ( anglelist [ i ]); part . InWorkObject = hb ; HybridShapeProject proj ; if ( installtype == 1 ) { HybridShape pts = hsf . AddNewPointOnCurveWithReferenceFromDistance (( Reference ) planerCurve , ( Reference ) StartPoint , dislens , false ); StartPoint = pts ; pts . set_Name ( namelist [ i ]. ToString ()); hbpts . AppendHybridShape ( pts ); // HybridShape pts = hsf.AddNewPointOnCurveFromDistance((Reference)crv, aa, false); pts.Compute(); proj = hsf . AddNewProject (( Reference ) pts , ( Reference ) Curve3d ); proj . Compute (); proj . SolutionType = 0 ; proj . Normal = false ; proj . SmoothingType = 0 ; proj . ExtrapolationMode = 0 ; proj . Direction = hsf . AddNewDirectionByCoord ( 0 , 0 , 1 ); proj . set_Name ( namelist [ i ]. ToString ()); hbref . AppendHybridShape ( proj ); proj . Compute (); AxisSystem pieraxis = Axis ( part , ( HybridShape ) Curve3d , ( HybridShape ) proj , hb , RoatateAngle ); Parameters parms = part . Parameters . SubList ( pieraxis , true ); Parameter distag = parms . CreateInteger ( \"IsPier\" , Convert . ToInt32 ( ispierlist [ i ])); Parameter angletag = parms . CreateDimension ( \"AxisAngle\" , \"ANGLE\" , Convert . ToInt32 ( anglelist [ i ])); } else { if ( i == 0 ) { HybridShape pts = hsf . AddNewPointOnCurveWithReferenceFromDistance (( Reference ) planerCurve , ( Reference ) StartPoint , dislens , false ); StartPoint = pts ; // HybridShape pts = hsf.AddNewPointOnCurveFromDistance((Reference)crv, aa, false); pts.Compute(); proj = hsf . AddNewProject (( Reference ) pts , ( Reference ) Curve3d ); proj . Compute (); proj . SolutionType = 0 ; proj . Normal = false ; proj . SmoothingType = 0 ; proj . ExtrapolationMode = 0 ; proj . Direction = hsf . AddNewDirectionByCoord ( 0 , 0 , 1 ); proj . set_Name ( namelist [ i ]. ToString ()); hbref . AppendHybridShape ( proj ); proj . Compute (); AxisSystem pieraxis = Axis ( part , ( HybridShape ) Curve3d , ( HybridShape ) proj , hb , RoatateAngle ); Parameters parms = part . Parameters . SubList ( pieraxis , true ); Parameter distag = parms . CreateInteger ( \"IsPier\" , Convert . ToInt32 ( ispierlist [ i ])); Parameter angletag = parms . CreateInteger ( \"AxisAngle\" , Convert . ToInt32 ( anglelist [ i ])); } else { HybridShapeLineTangency tar1 = hsf . AddNewLineTangency (( Reference ) planerCurve , ( Reference ) StartPoint , 10 , 0 , false ); tar1 . Compute (); HybridShapeSphere sph1 = hsf . AddNewSphere (( Reference ) StartPoint , null , dislens , - 45 , 45 , 0 , 180 ); sph1 . Limitation = 1 ; sph1 . Compute (); HybridShapeIntersection intt1 = hsf . AddNewIntersection (( Reference ) sph1 , ( Reference ) planerCurve ); intt1 . PointType = 0 ; intt1 . Compute (); HybridShapeNear near1 = hsf . AddNewNear (( Reference ) intt1 , ( Reference ) tar1 ); StartPoint = near1 ; near1 . Compute (); //hbref.AppendHybridShape(near1); proj = hsf . AddNewProject (( Reference ) near1 , ( Reference ) Curve3d ); proj . Compute (); proj . SolutionType = 0 ; proj . Normal = false ; proj . SmoothingType = 0 ; proj . ExtrapolationMode = 0 ; proj . Direction = hsf . AddNewDirectionByCoord ( 0 , 0 , 1 ); proj . set_Name ( namelist [ i ]. ToString ()); hbref . AppendHybridShape ( proj ); proj . Compute (); proj . set_Name ( namelist [ i ]. ToString ()); AxisSystem pieraxis = Axis ( part , ( HybridShape ) Curve3d , ( HybridShape ) proj , hb , RoatateAngle ); Parameters parms = part . Parameters . SubList ( pieraxis , true ); Parameter distag = parms . CreateInteger ( \"IsPier\" , Convert . ToInt32 ( ispierlist [ i ])); Parameter angletag = parms . CreateInteger ( \"AxisAngle\" , Convert . ToInt32 ( anglelist [ i ])); } } part . InWorkObject = hb ; //xle = null; } //\u91ca\u653e\u8d44\u6e90 xle = null ; } static AxisSystem Axis ( Part part , HybridShape crv , HybridShape pt , HybridBody hb , double rotateAngle ) { HybridShapeFactory hsf = ( HybridShapeFactory ) part . HybridShapeFactory ; HybridShapeDirection zdir = hsf . AddNewDirection (( Reference ) part . OriginElements . PlaneXY ); HybridShape zln = hsf . AddNewLinePtDir (( INFITF . Reference ) pt , zdir , - 100 , 500 , false ); zln . Compute (); HybridShape pln = hsf . AddNewPlaneOffsetPt (( Reference ) part . OriginElements . PlaneXY , ( Reference ) pt ); pln . Compute (); HybridShapeLineTangency tarln = hsf . AddNewLineTangency (( Reference ) crv , ( Reference ) pt , - 100 , 300 , false ); tarln . Compute (); HybridShapeProject xdirln = hsf . AddNewProject (( Reference ) tarln , ( Reference ) pln ); xdirln . Compute (); xdirln . SolutionType = 0 ; xdirln . Normal = false ; xdirln . SmoothingType = 0 ; xdirln . Direction = zdir ; xdirln . ExtrapolationMode = 0 ; Reference reference1 = part . CreateReferenceFromObject ( xdirln ); HybridShapeRotate hybridShapeRotate1 = hsf . AddNewEmptyRotate (); hybridShapeRotate1 . ElemToRotate = reference1 ; hybridShapeRotate1 . VolumeResult = false ; hybridShapeRotate1 . RotationType = 0 ; hybridShapeRotate1 . Compute (); hybridShapeRotate1 . Axis = ( Reference ) zln ; hybridShapeRotate1 . AngleValue = rotateAngle ; hybridShapeRotate1 . set_Name ( \"Roatate_ln_\" + Convert . ToString ( rotateAngle )); hybridShapeRotate1 . Compute (); AxisSystem axis = part . AxisSystems . Add (); axis . OriginType = CATAxisSystemOriginType . catAxisSystemOriginByPoint ; axis . OriginPoint = ( Reference ) pt ; axis . XAxisType = CATAxisSystemAxisType . catAxisSystemAxisSameDirection ; axis . XAxisDirection = ( Reference ) hybridShapeRotate1 ; axis . YAxisType = CATAxisSystemAxisType . catAxisSystemAxisOppositeDirection ; axis . ZAxisType = CATAxisSystemAxisType . catAxisSystemAxisSameDirection ; axis . ZAxisDirection = ( Reference ) zln ; part . UpdateObject ( axis ); axis . IsCurrent = true ; axis . set_Name ( pt . get_Name ()); part . UpdateObject ( axis ); return axis ; } public static MECMOD . Part GetContainPart ( INFITF . AnyObject obj ) { INFITF . AnyObject a = ( INFITF . AnyObject ) obj ; INFITF . AnyObject current = a ; bool found = false ; while ( found == false ) { current = ( INFITF . AnyObject ) current . Parent ; //Console.WriteLine(\"aaa___!\" + Microsoft.VisualBasic. Information.TypeName(current)); if ( Microsoft . VisualBasic . Information . TypeName ( current ) == \"Part\" ) { found = true ; // break; } } return ( MECMOD . Part ) current ; } class excel { ArrayList dislist = new ArrayList (); // public string Filename; public ArrayList Open ( out ArrayList namelist , out ArrayList IsPierParm , out ArrayList angleList ) //\u6253\u5f00\u4e00\u4e2aMicrosoft.Office.Interop.Excel\u6587\u4ef6 { dislist . Clear (); namelist = new ArrayList (); namelist . Clear (); IsPierParm = new ArrayList (); IsPierParm . Clear (); angleList = new ArrayList (); angleList . Clear (); int icount = 1000 ; int colnum = 3 ; int names = 5 ; int ispier = 24 ; int angleIndex = 21 ; for ( int i = 1 ; i < icount ; i ++) { if ( xlsheet . Cells [ i + 6 , colnum ]. Value != null ) { if ( xlsheet . Cells [ i + 6 , names ]. Value != null ) { if ( xlsheet . Cells [ i + 6 , ispier ]. Value != null ) { dislist . Add ( xlsheet . Cells [ i + 6 , colnum ]. Value ); namelist . Add ( xlsheet . Cells [ i + 6 , names ]. Value ); IsPierParm . Add ( xlsheet . Cells [ i + 6 , ispier ]. Value ); angleList . Add ( xlsheet . Cells [ i + 6 , angleIndex ]. Value ); } } } } return dislist ; } } class attribure { public void SetAttributeBooleanToObject ( MECMOD . Part part , HybridShape obj , string name , Boolean value ) { Parameters parms = part . Parameters . SubList ( obj , true ); Parameter distag = parms . CreateBoolean ( name , value ); } public void GetAttributeBooleanToObject ( MECMOD . Part part , HybridShape obj , string name , Boolean value ) { Parameters parms = part . Parameters . SubList ( obj , true ); Parameter distag = parms . CreateBoolean ( name , value ); } } } }","title":"\u521b\u5efa\u6865\u6881\u5206\u5b54\u7ebf\u5e76\u4e14\u8f93\u51fa\u6570\u636e\u5230excel"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_2","text":"//BeamProduct:ProductOccurrence,PierProduct:ProductOccurrence,AXIS_LIST:list,ROAD_CENTER:Curve,ROAD_PLANER:Curve /* Action created by 86156 2019/6/5 */ let i ( integer ) let F1 , F2 ( DocumentTemplate ) let destination1 , destination2 ( ProductOccurrence ) destination1 = BeamProduct destination2 = PierProduct let axisList ( list ) axisList = AXIS_LIST let xlsheet ( DTSheetType ) let xls ( string ) xls = EXCEL set xlsheet = CreateSheet ( xls ) let nb ( Integer ) nb = xlsheet . RowsNb Notify ( \"\u4e2a\u6570:\" , nb ) let resName , resExcel ( string ) //\u58f0\u660e\u5168\u5c40\u53d8\u91cf let L1length ( length ) let R1length ( length ) let L2length ( length ) let R2length ( length ) let PierHeight ( length ) let BeamCount ( integer ) let GapStr ( string ) let DirStr ( string ) // ***************************** // ProgressBar creation // ***************************** CreateProgressBar ( \"ProgressBar Name\" ) i = START for i while i <= END //axisList.Size () { ProgressBarSetValue ( 100 * i / axisList . Size ()) ProgressBarSetText ( \" \uff1a\u5df2\u5b8c\u6210 \u5171\" + floor ( END )) //\u6570\u636e\u5904\u7406 //\u83b7\u5f97\u6881\u6570 set BeamCount = xlsheet -> CellAsReal ( 5 + i , 32 ) Notify ( \"\u6881\u6570\u91cf\uff1a\" , BeamCount ) if ( i > 1 ) { //\u83b7\u5f97\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L1length = xlsheet -> CellAsReal (( 5 + ( i - 1 )), 22 ) * 1 m Notify ( \"\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L1length ) //\u83b7\u5f97\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R1length = xlsheet -> CellAsReal (( 5 + ( i - 1 )), 23 ) * 1 m Notify ( \"\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\" , R1length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L2length = xlsheet -> CellAsReal ( 5 + i , 24 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L2length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R2length = xlsheet -> CellAsReal ( 5 + i , 25 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\" , R2length ) //\u83b7\u5f97\u8fb9\u8de8 GapStr = xlsheet -> CellAsString (( 5 + ( i - 1 )), 33 ) Notify ( \"\u83b7\u5f97\u8fb9\u8de8:\" , GapStr ) //\u83b7\u5f97\u4f4d\u7f6e\u8bbe\u5b9a DirStr = xlsheet -> CellAsString (( 5 + ( i - 1 )), 34 ) Notify ( \"\u4f4d\u7f6e\u8bbe\u5b9a:\" , DirStr ) //\u5b9e\u4f8b\u5316\u4e0a\u90e8\u6865\u6881 F1 = InstantiateTemplate ( \"Re1\" , destination1 . Instance ) F1 -> SetAttributeObject ( \"P1\" , axisList . GetItem ( i - 1 )) F1 -> SetAttributeObject ( \"P2\" , axisList . GetItem ( i )) F1 -> SetAttributeObject ( \"ROAD_CENTER\" , ROAD_CENTER ) F1 -> SetAttributeObject ( \"ROAD_PLANER\" , ROAD_PLANER ) //\u4fee\u6b63\u6570\u636e F1 -> SetAttributeDimension ( \"P1_LW\" , L1length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P1_RW\" , R1length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P2_LW\" , L2length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P2_RW\" , R2length , \"LENGTH\" ) F1 -> SetAttributeInteger ( \"BEAM_COUNT\" , BeamCount ) //F1->SetAttributeString(\"GapCheck\",GapStr) F1 -> SetAttributeString ( \"DirCheck\" , DirStr ) //F1->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F1 ) } if ( i > 0 ) { //\u83b7\u5f97\u6865\u58a9\u9ad8\u5ea6 PierHeight = xlsheet -> CellAsReal ( 5 + i , 27 ) * 1 m Notify ( \"PierHeight:\" , PierHeight ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L2length = xlsheet -> CellAsReal ( 5 + i , 22 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L2length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R2length = xlsheet -> CellAsReal ( 5 + i , 23 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\" , R2length ) resExcel = xlsheet -> CellAsString ( 5 + i , 31 ) if resExcel == \"\u8fde\u7eed\u6881\u6865-\u6865\u53f0\" { resName = \"Res3\" } else if resExcel == \"\u8fde\u7eed\u6881\u6865-\u95e8\u67b6\" { resName = \"Res2\" } else if resExcel == \"\u8fde\u7eed\u6881\u6865-\u60ac\u81c2\u76d6\u6881\u58a9\" { resName = \"Res1\" } Notify ( \"\u4e0b\u90e8\u7ed3\u6784\u8d44\u6e90\u540d\u79f0\u4e3a\uff1a\" , resName ) //\u5b9e\u4f8b\u5316\u4e0b\u90e8\u6865\u58a9 F2 = InstantiateTemplate ( resName , destination2 . Instance ) F2 -> SetAttributeObject ( \"AXIS\" , axisList . GetItem ( i )) //\u4fee\u6b63\u6570\u636e F2 -> SetAttributeDimension ( \"PIER_HEIGHT\" , PierHeight , \"LENGTH\" ) F2 -> SetAttributeDimension ( \"WIDTH_L\" , L2length - 824 mm , \"LENGTH\" ) F2 -> SetAttributeDimension ( \"WIDTH_R\" , R2length - 824 mm , \"LENGTH\" ) //F2->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F2 ) } }","title":"\u8fde\u7eed\u6881\u6574\u4f53\u521b\u5efa"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_3","text":"//BeamProduct:ProductOccurrence,PierProduct:ProductOccurrence,AXIS_LIST:list,ROAD_CENTER:Curve,ROAD_PLANER:Curve /* Action created by 86156 2019/6/5 */ let i ( integer ) let F1 , F2 ( DocumentTemplate ) let destination1 , destination2 ( ProductOccurrence ) destination1 = BeamProduct destination2 = PierProduct let axisList ( list ) axisList = AXIS_LIST let xlsheet ( DTSheetType ) let xls ( string ) xls = EXCEL set xlsheet = CreateSheet ( xls ) let nb ( Integer ) nb = xlsheet . RowsNb Notify ( \"\u4e2a\u6570:\" , nb ) let resExcel , resName ( String ) //\u58f0\u660e\u5168\u5c40\u53d8\u91cf let L1length ( length ) let R1length ( length ) let L2length ( length ) let R2length ( length ) let PierHeight ( length ) let BeamCount ( integer ) let GapStr ( string ) let DirStr ( string ) // ***************************** // ProgressBar creation // ***************************** CreateProgressBar ( \"ProgressBar Name\" ) i = START for i while i <= END //axisList.Size () { ProgressBarSetValue ( 100 * i / axisList . Size ()) ProgressBarSetText ( \" \uff1a\u5df2\u5b8c\u6210 \u5171\" + floor ( axisList . Size ())) //\u6570\u636e\u5904\u7406 //\u83b7\u5f97\u6881\u6570 set BeamCount = xlsheet -> CellAsReal ( 5 + i , 32 ) Notify ( \"\u6881\u6570\u91cf\uff1a\" , BeamCount ) if ( i > 1 ) { //\u83b7\u5f97\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L1length = xlsheet -> CellAsReal (( 5 + ( i - 1 )), 24 ) * 1 m Notify ( \"\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L1length ) //\u83b7\u5f97\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R1length = xlsheet -> CellAsReal (( 5 + ( i - 1 )), 25 ) * 1 m Notify ( \"\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\" , R1length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L2length = xlsheet -> CellAsReal ( 5 + i , 24 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L2length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R2length = xlsheet -> CellAsReal ( 5 + i , 25 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\" , R2length ) //\u83b7\u5f97\u8fb9\u8de8 GapStr = xlsheet -> CellAsString (( 5 + ( i - 1 )), 33 ) Notify ( \"\u83b7\u5f97\u8fb9\u8de8:\" , GapStr ) //\u83b7\u5f97\u4f4d\u7f6e\u8bbe\u5b9a DirStr = xlsheet -> CellAsString (( 5 + ( i - 1 )), 34 ) Notify ( \"\u4f4d\u7f6e\u8bbe\u5b9a:\" , DirStr ) //\u5b9e\u4f8b\u5316\u4e0a\u90e8\u6865\u6881 F1 = InstantiateTemplate ( \"Re2\" , destination1 . Instance ) F1 -> SetAttributeObject ( \"P1\" , axisList . GetItem ( i - 1 )) F1 -> SetAttributeObject ( \"P2\" , axisList . GetItem ( i )) F1 -> SetAttributeObject ( \"ROAD_CENTER\" , ROAD_CENTER ) F1 -> SetAttributeObject ( \"ROAD_PLANER\" , ROAD_PLANER ) //\u4fee\u6b63\u6570\u636e F1 -> SetAttributeDimension ( \"P1_LW\" , L1length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P1_RW\" , R1length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P2_LW\" , L2length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P2_RW\" , R2length , \"LENGTH\" ) F1 -> SetAttributeInteger ( \"BEAM_COUNT\" , BeamCount ) //F1->SetAttributeString(\"GapCheck\",GapStr) //F1->SetAttributeString(\"DirCheck\",DirStr) //F1->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F1 ) } //\u83b7\u5f97\u6865\u58a9\u9ad8\u5ea6 PierHeight = xlsheet -> CellAsReal ( 5 + i , 27 ) * 1 m Notify ( \"PierHeight:\" , PierHeight ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L2length = xlsheet -> CellAsReal ( 5 + i , 24 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L2length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R2length = xlsheet -> CellAsReal ( 5 + i , 25 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\" , R2length ) resExcel = xlsheet -> CellAsString ( 5 + i , 31 ) if resExcel == \"\u7b80\u652f\u6881\u6865-\u6865\u53f0\" { resName = \"Res3\" } else if resExcel == \"\u7b80\u652f\u6881\u6865-\u95e8\u67b6\" { resName = \"ResB\" } else if resExcel == \"\u7b80\u652f\u6881\u6865-\u60ac\u81c2\u76d6\u6881\u58a9\" { resName = \"ResA\" } Notify ( \"\u4e0b\u90e8\u7ed3\u6784\u8d44\u6e90\u540d\u79f0\u4e3a\uff1a\" , resName ) F2 = InstantiateTemplate ( resName , destination2 . Instance ) F2 -> SetAttributeObject ( \"AXIS\" , axisList . GetItem ( i )) F2 -> SetAttributeDimension ( \"PIER_HEIGHT\" , PierHeight , \"LENGTH\" ) F2 -> SetAttributeDimension ( \"WIDTH_L\" , L2length , \"LENGTH\" ) F2 -> SetAttributeDimension ( \"WIDTH_R\" , R2length , \"LENGTH\" ) //F2->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F2 ) }","title":"\u7b80\u652f\u6881\u6574\u4f53\u521b\u5efa"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_4","text":"//BeamProduct:ProductOccurrence,PierProduct:ProductOccurrence,AXIS_LIST:list,ROAD_CENTER:Curve,ROAD_PLANER:Curve /* Action created by 86156 2019/6/5 */ let i ( integer ) let F1 , F2 ( DocumentTemplate ) let destination1 , destination2 ( ProductOccurrence ) //destination1=BeamProduct destination2 = PierProduct let axisList ( list ) axisList = AXIS_LIST let xlsheet ( DTSheetType ) let xls ( string ) xls = \"Y:\\SHARE\\\u7248\u672c2\\0827\u6d4b\u8bd5\u6570\u636e\\\u8fde\u7eed\u6881_\u603b\u4f53\u8bbe\u8ba1\u8868.xlsx\" set xlsheet = CreateSheet ( xls ) let nb ( Integer ) nb = xlsheet . RowsNb Notify ( \"\u4e2a\u6570:\" , nb ) //\u58f0\u660e\u5168\u5c40\u53d8\u91cf let L1length ( length ) let R1length ( length ) let L2length ( length ) let R2length ( length ) let PierHeight ( length ) let PileHeight ( length ) let BeamCount ( integer ) let GapStr ( string ) let DirStr ( string ) // ***************************** // ProgressBar creation // ***************************** CreateProgressBar ( \"ProgressBar Name\" ) i = 1 for i while i <= axisList . Size () { ProgressBarSetValue ( 100 * i / axisList . Size ()) ProgressBarSetText ( \" \uff1a\u5df2\u5b8c\u6210 \u5171\" + floor ( axisList . Size ())) //\u6570\u636e\u5904\u7406 //\u83b7\u5f97\u6881\u6570 set BeamCount = xlsheet -> CellAsReal ( 5 + i , 32 ) Notify ( \"\u6881\u6570\u91cf\uff1a\" , BeamCount ) //\u83b7\u5f97\u6865\u58a9\u9ad8\u5ea6 PierHeight = xlsheet -> CellAsReal ( 5 + i , 27 ) * 1 m Notify ( \"PierHeight:\" , PierHeight ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L2length = xlsheet -> CellAsReal ( 5 + i , 24 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L2length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R2length = xlsheet -> CellAsReal ( 5 + i , 25 ) * 1 m Notify ( \"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\" , R2length ) //\u6869\u957f PileHeight = xlsheet -> CellAsReal ( 5 + i , 40 ) * 1 m Notify ( \"\u6869\u957f:\" , PileHeight ) if ( i == 1 ) { //\u5b9e\u4f8b\u5316\u4e0b\u90e8\u6865\u58a9 F1 = InstantiateTemplate ( \"Res3\" , destination2 . Instance ) F1 -> SetAttributeObject ( \"AXIS\" , axisList . GetItem ( i )) //\u4fee\u6b63\u6570\u636e //F1->SetAttributeDimension(\"PIER_HEIGHT\",PierHeight,\"LENGTH\") F1 -> SetAttributeDimension ( \"P1_RW\" , L2length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P1_LW\" , R2length , \"LENGTH\" ) F1 -> SetAttributeInteger ( \"DIRECTION\" , 0 ) F1 -> SetAttributeDimension ( \"PILE_H\" , PileHeight , \"LENGTH\" ) //F2->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F1 ) } else if ( i == axisList . Size ()) { //\u5b9e\u4f8b\u5316\u4e0b\u90e8\u6865\u58a9 F2 = InstantiateTemplate ( \"Res3\" , destination2 . Instance ) F2 -> SetAttributeObject ( \"AXIS\" , axisList . GetItem ( i )) //\u4fee\u6b63\u6570\u636e F2 -> SetAttributeDimension ( \"P1_RW\" , L2length , \"LENGTH\" ) F2 -> SetAttributeDimension ( \"P1_LW\" , R2length , \"LENGTH\" ) F2 -> SetAttributeInteger ( \"DIRECTION\" , 1 ) F2 -> SetAttributeDimension ( \"PILE_H\" , PileHeight , \"LENGTH\" ) //F2->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F2 ) } }","title":"\u6865\u6881\u7684\u521b\u5efa"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_5","text":"/* \u5de5\u4f5c\u6307\u4ee4 \u521b\u5efa\u8005 liudi 2020/7/12 */ let i , j , k , a ( Integer ) let myshape , mypart ( VPMInstance ) let shapepoint , shapepoint1 ( PartFeature ) let shapelist , partlist , boxlist , boxlist1 , pointlist , planelist ( List ) let DT ( DTSheetType ) let myname , sheetname , boxname , ptname , outstring , myout ( String ) let box , onebox ( OpenBodyFeature ) let pt , pt0 , pt1 , pt2 , pt3 ( Point ) let L , D , x1 , x2 , x3 , y1 , y2 , y3 , z1 , z2 , z3 ( LENGTH ) let F ( Feature ) let pla ( Plane ) shapepoint = GetPLMOwner ( myplane ) shapepoint1 = shapepoint . Find ( \"PartFeature\" , \"\" , true ) SetWorkingContext ( shapepoint1 ) onebox = new ( \"OpenBodyFeature\" , \"000\" , shapepoint1 ) pt1 = new ( \"Point\" , \"1\" , onebox ) pt1 = pointonplane ( myplane , point ( 0 m , 0 m , 0 m ), 1 m , 10 m ) pt2 = new ( \"Point\" , \"2\" , onebox ) pt2 = pointonplane ( myplane , point ( 0 m , 0 m , 0 m ), 42 m , 35 m ) pt3 = new ( \"Point\" , \"3\" , onebox ) pt3 = pointonplane ( myplane , point ( 0 m , 0 m , 0 m ), 25 m , 18 m ) shapepoint1 . Update () x1 = pt1 . coord ( 1 ) y1 = pt1 . coord ( 2 ) z1 = pt1 . coord ( 3 ) x2 = pt2 . coord ( 1 ) y2 = pt2 . coord ( 2 ) z2 = pt2 . coord ( 3 ) x3 = pt3 . coord ( 1 ) y3 = pt3 . coord ( 2 ) z3 = pt3 . coord ( 3 ) onebox . Delete () set DT = CreateSheet ( strFileName ) sheetname = \"\u8ddd\u79bb(m)\" partlist = Location . Query ( \"VPMInstance\" , NULL ) shapelist = Location . Query ( \"PartFeature\" , NULL ) i = 1 for i while i <= partlist . Size () { myshape = shapelist [ i ] boxlist = myshape . Children boxlist1 = boxlist . Filter ( \"OpenBodyFeature\" , \"x.Name == \\\"EXPORT_DIM\\\"\" ) if boxlist1 . Size () == 0 { break } else { SetWorkingContext ( myshape ) box = boxlist1 [ 1 ] pla = new ( \"Plane\" , \"000\" , box ) pla = plane ( point ( x1 , y1 , z1 ), point ( x2 , y2 , z2 ), point ( x3 , y3 , z3 )) pointlist = box . Children k = pointlist . Size () /*********************/ pt = pointlist [ 1 ] D = distance ( pt , pla ) L = D / 1000 outstring = L a = outstring . Length () myout = outstring . Extract ( 0 , a - 2 ) DT -> SetCell ( 6 + i , 60 , myout ) /*********************/ /*********************/ pt = pointlist [ 2 ] D = distance ( pt , pla ) L = D / 1000 outstring = L a = outstring . Length () myout = outstring . Extract ( 0 , a - 2 ) DT -> SetCell ( 6 + i , 61 , myout ) /*********************/ /*********************/ pt = pointlist [ 2 ] pt0 = pointlist [ 3 ] D = distance ( pt , pt0 ) L = D / 1000 outstring = L a = outstring . Length () myout = outstring . Extract ( 0 , a - 2 ) DT -> SetCell ( 6 + i , 62 , myout ) /*********************/ /*********************/ pt = pointlist [ 3 ] D = distance ( pt , pla ) L = D / 1000 outstring = L a = outstring . Length () myout = outstring . Extract ( 0 , a - 2 ) DT -> SetCell ( 6 + i , 63 , myout ) /*********************/ pt = pointlist [ 4 ] pt0 = pointlist [ 3 ] D = distance ( pt , pt0 ) L = D / 1000 outstring = L a = outstring . Length () myout = outstring . Extract ( 0 , a - 2 ) DT -> SetCell ( 6 + i , 64 , myout ) /*********************/ /*********************/ pt = pointlist [ 4 ] D = distance ( pt , pla ) L = D / 1000 outstring = L a = outstring . Length () myout = outstring . Extract ( 0 , a - 2 ) DT -> SetCell ( 6 + i , 65 , myout ) /*********************/ /*********************/ pt = pointlist [ 5 ] D = distance ( pt , pla ) L = D / 1000 outstring = L a = outstring . Length () myout = outstring . Extract ( 0 , a - 2 ) DT -> SetCell ( 6 + i , 66 , myout ) /*********************/ pla . Delete () } i = i + 1 }","title":"\u5bfc\u51fa\u6574\u4f53\u6570\u636e\u5230\u603b\u4f53\u8bbe\u8ba1\u8868"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_6","text":"//Location : VPMReference,strFileName : String,ReferAxis : AxisSystem /* \u5de5\u4f5c\u6307\u4ee4 \u521b\u5efa\u8005 liudi 2020/7/21 */ let i , j , k , a , a1 , b , c , d , e ( Integer ) let myshape , mypart ( VPMInstance ) let partlist , chlist1 , chlist2 , chlist3 , mmlist1 , mmlist2 , mylist , mylist1 , mylist2 , onelist ( List ) let DT ( DTSheetType ) let box , onebox ( OpenBodyFeature ) let partname , outpartname , username , outname , mylength , outmylength , myv , outmyv , x1 , y1 , z1 , x2 , y2 , z2 ( String ) let yx1 , yx2 , yx3 , yx4 ( MMOrderedGeometricalSet ) let mybody , mybody2 , body1 ( BodyFeature ) let myuserfeature ( UserFeature ) let sur ( Surface ) let pt ( Point ) let v , vo , outv ( Real ) let xplane ( Plane ) let xdir ( Direction ) let x , y , z ( LENGTH ) let myaxis ( AxisSystem ) set DT = CreateSheet ( strFileName ) partlist = Location . Query ( \"PartFeature\" , NULL ) i = 1 a1 = 1 for i while i <= partlist . Size () { mypart = partlist [ i ] SetWorkingContext ( mypart ) partname = mypart . Name b = partname . Length () outpartname = partname . Extract ( 0 , b - 4 ) DT -> SetCell ( a1 + 1 , 1 , outpartname ) //\u7b2c\u4e00\u680f\u6570\u636e chlist1 = mypart . Children mmlist1 = chlist1 . Filter ( \"MMOrderedGeometricalSet\" , NULL ) yx1 = mmlist1 [ 1 ] chlist2 = yx1 . Children mmlist2 = chlist2 . Filter ( \"MMOrderedGeometricalSet\" , NULL ) yx2 = mmlist2 [ 3 ] chlist3 = yx2 . Children j = chlist3 . Size () yx3 = chlist3 [ j ] //body1=new(\"BodyFeature\",\"0000\",yx3) mylist = yx3 . Children mybody = mylist [ 1 ] mybody2 = mylist [ 2 ] mylist1 = mybody . Children mylist2 = mybody2 . Children onelist = mylist1 + mylist2 k = onelist . Size () a = 1 for a while a <= k { myuserfeature = onelist [ a ] username = myuserfeature . Name c = username . Length () outname = username . Extract ( 0 , c - 3 ) DT -> SetCell ( a1 + 1 , 2 , username ) //\u7b2c\u4e8c\u680f\u6570\u636e v = myuserfeature . GetAttributeReal ( ' \u4e0b\u57ab\u77f3\u4f53\u79ef ' ) myv = ToString ( v ) DT -> SetCell ( a1 + 1 , 6 , myv ) v = myuserfeature . GetAttributeReal ( ' \u4e0a\u57ab\u77f3\u4f53\u79ef ' ) myv = ToString ( v ) DT -> SetCell ( a1 + 1 , 7 , myv ) pt = myuserfeature . GetAttributeObject ( ' COORD_PT ' ) x = pt . coord ( 1 , ReferAxis ) y = pt . coord ( 2 , ReferAxis ) z = pt . coord ( 3 , ReferAxis ) x1 = ToString ( x ) c = x1 . Length () x2 = x1 . Extract ( 0 , c - 2 ) y1 = ToString ( y ) c = y1 . Length () y2 = y1 . Extract ( 0 , c - 2 ) z1 = ToString ( z ) c = z1 . Length () z2 = z1 . Extract ( 0 , c - 2 ) DT -> SetCell ( a1 + 1 , 3 , x2 ) DT -> SetCell ( a1 + 1 , 4 , y2 ) DT -> SetCell ( a1 + 1 , 5 , z2 ) a1 = a1 + 1 } }","title":"\u5bfc\u51fa\u57ab\u77f3\u6570\u636e"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_7","text":"//Location : VPMReference,strFileName : String,ReferAxis : AxisSystem /* \u5de5\u4f5c\u6307\u4ee4 \u521b\u5efa\u8005 liudi 2020/7/23 */ let i , j , k , a , b ( Integer ) let myshape ( VPMInstance ) let mypart ( PartFeature ) let DT ( DTSheetType ) let partlist , shapelist , boxlist , list1 , list2 , ptlist , yxlist1 , yxlist2 , yxlist3 , bodylist , list3 , culist ( List ) let yx1 , yx2 , yx3 , yx4 ( MMOrderedGeometricalSet ) let mybox , box ( OpenBodyFeature ) let partname ( String ) let pt , mypoint ( Point ) let xplane , plane1 , myplane ( Plane ) let mybody ( BodyFeature ) let allcu , mycu ( Curve ) let tutai ( Surface ) let x , y ( LENGTH ) set DT = CreateSheet ( strFileName ) partlist = Location . Query ( \"VPMInstance\" , NULL ) shapelist = Location . Query ( \"PartFeature\" , NULL ) j = partlist . Size () i = 1 k = 1 for i while i <= j { mypart = partlist [ i ] myshape = shapelist [ i ] partname = mypart . Name () DT -> SetCell ( k + 1 , 1 , partname ) SetWorkingContext ( myshape ) list1 = myshape . Children list2 = list1 . Filter ( \"OpenBodyFeature\" , NULL ) box = list2 [ 2 ] ptlist = box . Children pt = ptlist [ 4 ] mybox = new ( \"OpenBodyFeature\" , \"\u53c2\u7167\" , myshape ) xplane = new ( \"Plane\" , \"\u6c34\u5e73\u9762\" , mybox ) xplane = plane ( point ( 0 mm , 0 mm , 0 mm ), point ( 1 mm , 0 mm , 0 mm ), point ( 0 mm , 1 mm , 0 mm )) plane1 = new ( \"Plane\" , \"\u8fc7\u6e21\u5e73\u9762\" , mybox ) set plane1 = planeoffset ( xplane , pt ) myplane = new ( \"Plane\" , \"\u76f8\u4ea4\u5e73\u9762\" , mybox ) myplane = planeoffset ( plane1 , - 200 mm , true ) yxlist1 = list1 . Filter ( \"MMOrderedGeometricalSet\" , NULL ) yx1 = yxlist1 [ 1 ] yxlist2 = yx1 . Children yxlist3 = yxlist2 . Filter ( \"MMOrderedGeometricalSet\" , NULL ) yx2 = yxlist3 [ 3 ] bodylist = yx2 . Children mybody = bodylist [ 5 ] list3 = mybody . Children allcu = new ( \"Curve\" , \"\u76f8\u4ea4\u7ebf\" , mybox ) allcu = intersect ( myplane , list3 [ 1 ] ) culist = disassemble ( allcu , false ) a = culist . Size () b = 1 for b while b <= a { mycu = culist [ b ] mypoint = new ( \"Point\" , \"\u70b9_\" + b , mybox ) mypoint = centerofgravity ( mycu ) DT -> SetCell ( k + 1 , 2 , b ) x = mypoint . coord ( 1 , ReferAxis ) y = mypoint . coord ( 2 , ReferAxis ) DT -> SetCell ( k + 1 , 3 , x ) DT -> SetCell ( k + 1 , 4 , y ) k = k + 1 } mybox . Update () mybox . Delete () }","title":"\u5bfc\u51fa\u57fa\u6869\u6570\u636e"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_8","text":"","title":"\u8fde\u7eed\u6881\u4e0e\u7b80\u652f\u6881\u5de5\u7a0b\u6a21\u677f\u4ee3\u7801"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_9","text":"set ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Curve .6 = invert ( ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Sketch .242 ) set ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Curve .7 = invert ( ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Sketch .243 )","title":"\u53cd\u8f6c\u8f93\u5165\u6761\u4ef6"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_10","text":"/*\u89c4\u5219 \u521b\u5efa\u8005 DESKTOP 2020/4/26*/ if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u4e2d\u8de8\" { ` ALL_BEAMS \\ PARAMETERS \\ \u8fb9\u8de8\u5224\u65ad ` = 1 } else { ` ALL_BEAMS \\ PARAMETERS \\ \u8fb9\u8de8\u5224\u65ad ` = 0 }","title":"\u4e2d\u8de8\u4f4d\u7f6e\u8bbe\u5b9a"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_11","text":"/*\u89c4\u5219 \u521b\u5efa\u8005 DESKTOP 2020/4/27*/ if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u4e2d\u8de8\" ` \u7aef\u5c01\u677f\u5224\u65ad ` = \"ALL\" else if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\" ` \u7aef\u5c01\u677f\u5224\u65ad ` = \"P2\" else if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5927\u91cc\u7a0b\u8fb9\u8de8\" ` \u7aef\u5c01\u677f\u5224\u65ad ` = \"P1\" /*\u89c4\u5219 \u521b\u5efa\u8005 DESKTOP 2020/4/27*/ let F ( UserFeature ) //let l(list) // l=obj.Query(\"UserFeature\",\"\") if UDFList . Size () > 0 { for F inside UDFList { if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\" { F -> SetAttributeInteger ( \"DIRECTION\" , 0 ) } else if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5927\u91cc\u7a0b\u8fb9\u8de8\" { F -> SetAttributeInteger ( \"DIRECTION\" , 1 ) } else { Notify ( \"\u6881\u4e3a\u4e2d\u8de8\u7bb1\u6881\uff0c\u65e0\u9700\u65b9\u5411\u5224\u65ad\" ) } } }","title":"\u4f4d\u7f6e\u53c2\u6570\u5b9a\u4e49"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_12","text":"/*Rule created by PZG4 4/28/2020*/ let i , j ( Integer ) let ptlist1 , ptlist2 ( List ) let pt1 , pt2 ( point ) let dis1 , dis2 ( length ) let p1 , p2 , p3 , p4 ( point ) set ptlist1 = Point1 set ptlist2 = Point2 if ptlist1 . Size () > 2 { p1 = ptlist1 [ 1 ] p2 = ptlist1 [ 2 ] Notify ( \"DIS:\" , dis1 ) dis1 = distance ( p1 , p2 ) ` ALL_BEAMS \\ PARAMETERS \\ P1\u6881\u8ddd ` = dis1 } if ptlist2 . Size () > 2 { p3 = ptlist2 [ 1 ] p4 = ptlist2 [ 2 ] Notify ( \"DIS:\" , dis2 ) dis2 = distance ( p3 , p4 ) ` ALL_BEAMS \\ PARAMETERS \\ P2\u6881\u8ddd ` = dis2 }","title":"\u6881\u8ddd\u79bb\u7684\u8ba1\u7b97"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_13","text":"If hb1 . Bodies . Count <> 0 Then CATIA . ActiveEditor . Selection . Clear For k = 1 To hb1 . Bodies . Count Dim hb0obj As Body Set hb0obj = hb1 . Bodies . Item ( k ) CATIA . ActiveEditor . Selection . Add hb0obj Next CATIA . ActiveEditor . Selection . Delete End If Dim i as integer For i = 1 To icount Dim hb2 As Body Set hb2 = hb1 . Bodies . Add hb2 . Name = \"BEAM_\" + CStr ( i ) Next End Sub","title":"\u5220\u9664\u548c\u521b\u5efa\u6881\u96c6\u5408"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_14","text":"Dim part as Part Set part = ContainingPart ( prt ) part . InWorkObject = prt On Error Resume Next Part . UpdateObject ( prt ) End Sub Function ContainingPart ( ByVal CatObject ) Dim found As Boolean Dim Current Set Current = CatObject found = False Do While found = False Set Current = Current . Parent If TypeName ( Current ) = \"Part\" Then found = True End If Loop Set ContainingPart = Current End Function","title":"\u66f4\u65b0\u6881"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_15","text":"","title":"\u5c0f\u7bb1\u6881\u96c6\u5408"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_16","text":"//\u5b9a\u4e49\u53d8\u91cf let i , j ( integer ) let beamcount ( integer ) let pt1 , pt2 , ptA1 , pta1 , ptA2 , pta2 ( point ) let planerLn ( line ) let pl1 , pl2 , pl3 , pl4 ( plane ) let cu , cu1 , cu2 , cu3 , cu4 ( curve ) let a1 , a2 ( angle ) let D1 , D2 ( length ) let F ( feature ) let p1 , p2 , drwrailpt1 , drwrailpt2 ( point ) let body1 ( body ) set p1 = ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ p1 set p2 = ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ p2 set cu = project ( ALL_BEAMS \\ INPUT \\ PLANER_CRV , ` xy plane ` , direction ( ` xy plane ` )) //\u76f8\u4ea4\u51fa\u4e24\u6761\u66f2\u7ebf set cu1 = ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 1 ` set cu2 = ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 2 ` i = 1 beamcount = ALL_BEAMS \\ PARAMETERS \\ BEAM_COUNT for i while i <= beamcount { pta1 = CreateOrModifyDatum ( \"point\" , ALL_BEAMS \\ DATUM \\ POINTS_1 , Point11 , i ) set pta1 = pointoncurveRatio ( ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Line .8507 , NULL ,( i - 1 ) / ( beamcount - 1 ), true ) ptA1 = CreateOrModifyDatum ( \"point\" , ALL_BEAMS \\ DATUM \\ POINTS_1 , Point1 , i ) set ptA1 = project ( pta1 , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Multi - sections Surface .62 ` , direction ( ` xy plane ` )) pta2 = CreateOrModifyDatum ( \"point\" , ALL_BEAMS \\ DATUM \\ POINTS_2 , Point22 , i ) set pta2 = pointoncurveRatio ( ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Line .8508 , NULL ,( i - 1 ) / ( beamcount - 1 ), true ) ptA2 = CreateOrModifyDatum ( \"point\" , ALL_BEAMS \\ DATUM \\ POINTS_2 , Point2 , i ) set ptA2 = project ( pta2 , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Multi - sections Surface .62 ` , direction ( ` xy plane ` )) ptA1 . Name = \"PTA_1_\" + i ptA2 . Name = \"PTA_2_\" + i pta1 . Name = \"PTB_1_\" + i pta1 . Name = \"PTB_2_\" + i planerLn = CreateOrModifyDatum ( \"Line\" , ALL_BEAMS \\ DATUM \\ LINES , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAMS \\ PlanerLnList , i ) planerLn = line ( pta1 , pta2 ) planerLn . Color = \"224,2,32\" planerLn . Name = \"LN_\" + i } j = 1 ALL_BEAMS \\ RELATIONS \\ REFERENCE_RELATIONS \\ VBScriptNewBody \\ CREATE_BODY . Run ( ALL_BEAMS \\ MODEL \\ BEAMS_SETS , beamcount ) let blist ( List ) blist = ALL_BEAMS \\ MODEL \\ BEAMS_SETS . Query ( \"BodyFeature\" , \"\" ) let beambody ( BodyFeature ) for j while j <= beamcount { beambody = blist [ j ] if ( ` ALL_BEAMS \\ PARAMETERS \\ \u8fb9\u8de8\u5224\u65ad ` == \"1\" ) { F = CreateOrModifyTemplate ( \"R1\" , beambody , UDFList , j ) F -> SetAttributeObject ( \"p1\" , Point1 . GetItem ( j )) F -> SetAttributeObject ( \"p2\" , Point2 . GetItem ( j )) F -> SetAttributeObject ( \"curve1\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 01 ` ) F -> SetAttributeObject ( \"curve2\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 02 ` ) F -> SetAttributeObject ( \"curve3\" , ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ MiddleCrvDRV ) //F->SetAttributeInteger(\"ORIENTATION\",1) } else if ( ` ALL_BEAMS \\ PARAMETERS \\ \u8fb9\u8de8\u5224\u65ad ` == \"0\" ) { F = CreateOrModifyTemplate ( \"R2\" , beambody , UDFList , j ) F -> SetAttributeObject ( \"p1\" , Point1 . GetItem ( j )) F -> SetAttributeObject ( \"p2\" , Point2 . GetItem ( j )) F -> SetAttributeObject ( \"curve1\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 01 ` ) F -> SetAttributeObject ( \"curve2\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 02 ` ) F -> SetAttributeObject ( \"curve3\" , ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ MiddleCrvDRV ) } EndModifyTemplate ( F ) F . Name = \"\u6881\u6bb5_\" + j } drwrailpt1 = CreateOrModifyDatum ( \"point\" , ALL_BEAMS \\ DATUM \\ OTHER_PTS , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAMS \\ DrwRail_List_1 , 1 ) drwrailpt1 = pointoncurveRatio ( ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 01 ` , NULL , 0 , true ) drwrailpt2 = CreateOrModifyDatum ( \"point\" , ALL_BEAMS \\ DATUM \\ OTHER_PTS , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAMS \\ DrwRail_List_1 , 1 ) drwrailpt2 = pointoncurveRatio ( ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 01 ` , NULL , 1 , true ) Notify ( \"\u6881\u6bb5\u6570=\" , beamcount )","title":"\u521b\u5efa\u5c0f\u7bb1\u6881"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_17","text":"let p1list , p2list , udflist ( List ) let udf , blockudf1 , blockudf2 ( Feature ) let i ( integer ) let dis1 , dis2 , disa , disb ( Length ) set p1list = Point11 set p2list = Point22 set udflist = UDFList let BeamType ( string ) BeamType = ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` i = 1 set dis1 = distance ( p1list [ 1 ] , p1list [ 2 ] ) set dis2 = distance ( p2list [ 1 ] , p2list [ 2 ] ) for i while i <= p1list . Size () { Notify ( \"Distance1:\" , dis1 ) Notify ( \"Distance2:\" , dis2 ) if ( BeamType == \"\u4e2d\u8de8\" ) { set udf = udflist [ i ] if i == 1 { udf . SetAttributeDimension ( \"DIM_1_L\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_L\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_R\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" , 637 mm , \"LENGTH\" ) Notify ( \"\u4fee\u6539\u6210\u529f\" , udf . Name ) } if i > 1 and i < p1list . Size () { udf . SetAttributeDimension ( \"DIM_1_L\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_L\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_R\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) } if i == p1list . Size () { udf . SetAttributeDimension ( \"DIM_1_L\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_L\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_R\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) } } else if ( BeamType == \"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\" ) { set udf = udflist [ i ] if i == 1 { udf . SetAttributeDimension ( \"DIM_1_R\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_L\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_L\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) } if i > 1 and i < p1list . Size () { udf . SetAttributeDimension ( \"DIM_1_R\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_L\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_L\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) } if i == p1list . Size () { udf . SetAttributeDimension ( \"DIM_1_R\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_L\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_L\" , 637 mm , \"LENGTH\" ) } } else if ( BeamType == \"\u5927\u91cc\u7a0b\u8fb9\u8de8\" ) { set udf = udflist [ i ] if i == 1 { udf . SetAttributeDimension ( \"DIM_1_L\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_L\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_R\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) } if i > 1 and i < p1list . Size () { udf . SetAttributeDimension ( \"DIM_2_L\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_L\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_R\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) } if i == p1list . Size () { udf . SetAttributeDimension ( \"DIM_2_L\" ,( dis1 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_L\" ,( dis2 - ` ALL_BEAMS \\ PARAMETERS \\ \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6 ` - ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` ) / 2 , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_1_R\" , 637 mm , \"LENGTH\" ) udf . SetAttributeDimension ( \"DIM_2_R\" , 637 mm , \"LENGTH\" ) } } }","title":"\u66f4\u65b0\u5c0f\u7bb1\u6881"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_18","text":"let B1 , B2 ( feature ) let i , j ( Integer ) let ptlist1 , ptlist2 ( List ) let pt1 , pt2 ( point ) let dis1 , dis2 ( length ) let udf1 , udf2 ( Feature ) let surf ( surface ) set surf = ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Multi - sections Surface .62 ` set ptlist1 = Point1 set ptlist2 = Point2 i = 1 j = 1 if ( ` \u7aef\u5c01\u677f\u5224\u65ad ` == \"P1\" ) //P1 { for i while i <= ptlist1 . Size () { B1 = CreateOrModifyTemplate ( \"BB\" , ALL_BEAMS \\ MODEL \\ MODEL_POURING_BEAM_P1 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_H \\ list1 , i ) B1 -> SetAttributeObject ( \"PT\" , ptlist1 . GetItem ( i )) B1 -> SetAttributeObject ( \"CRV\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 01 ` ) B1 -> SetAttributeObject ( \"SURFACE\" , surf ) B1 . SetAttributeInteger ( \"ORENTATION\" , 0 ) B1 . Name = \"B1-\" + i if i == 1 { B1 . SetAttributeInteger ( \"CHECK_A\" , 1 ) B1 . SetAttributeInteger ( \"CHECK_B\" , 0 ) } else if ( i == ptlist1 . Size ()) { B1 . SetAttributeInteger ( \"CHECK_A\" , 0 ) B1 . SetAttributeInteger ( \"CHECK_B\" , 1 ) } a EndModifyTemplate ( B1 ) } } else if ( ` \u7aef\u5c01\u677f\u5224\u65ad ` == \"P2\" ) //P2 { for j while j <= ptlist2 . Size () { B2 = CreateOrModifyTemplate ( \"BB\" , ALL_BEAMS \\ MODEL \\ MODEL_POURING_BEAM_P2 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_H \\ list2 , j ) B2 -> SetAttributeObject ( \"PT\" , ptlist2 . GetItem ( j )) B2 -> SetAttributeObject ( \"CRV\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 02 ` ) B2 -> SetAttributeObject ( \"SURFACE\" , surf ) B2 . SetAttributeInteger ( \"ORENTATION\" , 1 ) B2 . Name = \"B2-\" + j if j == 1 { B2 . SetAttributeInteger ( \"CHECK_A\" , 0 ) B2 . SetAttributeInteger ( \"CHECK_B\" , 1 ) } else if ( j == ptlist2 . Size ()) { B2 . SetAttributeInteger ( \"CHECK_A\" , 1 ) B2 . SetAttributeInteger ( \"CHECK_B\" , 0 ) } EndModifyTemplate ( B2 ) } } else //all { for i while i <= ptlist1 . Size () { B1 = CreateOrModifyTemplate ( \"BB\" , ALL_BEAMS \\ MODEL \\ MODEL_POURING_BEAM_P1 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_H \\ list1 , i ) B1 -> SetAttributeObject ( \"PT\" , ptlist1 . GetItem ( i )) B1 -> SetAttributeObject ( \"CRV\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 01 ` ) B1 -> SetAttributeObject ( \"SURFACE\" , surf ) B1 . SetAttributeInteger ( \"ORENTATION\" , 0 ) B1 . Name = \"B1-\" + i if i == 1 { B1 . SetAttributeInteger ( \"CHECK_A\" , 1 ) B1 . SetAttributeInteger ( \"CHECK_B\" , 0 ) } else if ( i == ptlist1 . Size ()) { B1 . SetAttributeInteger ( \"CHECK_A\" , 0 ) B1 . SetAttributeInteger ( \"CHECK_B\" , 1 ) } EndModifyTemplate ( B1 ) } for j while j <= ptlist2 . Size () { B2 = CreateOrModifyTemplate ( \"BB\" , ALL_BEAMS \\ MODEL \\ MODEL_POURING_BEAM_P2 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_H \\ list2 , j ) B2 -> SetAttributeObject ( \"PT\" , ptlist2 . GetItem ( j )) B2 -> SetAttributeObject ( \"CRV\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 02 ` ) B2 -> SetAttributeObject ( \"SURFACE\" , surf ) B2 . SetAttributeInteger ( \"ORENTATION\" , 1 ) B2 . Name = \"B2-\" + j if j == 1 { B2 . SetAttributeInteger ( \"CHECK_A\" , 0 ) B2 . SetAttributeInteger ( \"CHECK_B\" , 1 ) } else if ( j == ptlist2 . Size ()) { B2 . SetAttributeInteger ( \"CHECK_A\" , 1 ) B2 . SetAttributeInteger ( \"CHECK_B\" , 0 ) } EndModifyTemplate ( B2 ) } }","title":"\u7aef\u5c01\u677f\u5224\u65ad"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_19","text":"let p1list , p2list , udflist1 , udflist2 ( List ) let udf1 , udf2 ( UserFeature ) let i , j ( integer ) let dis1 , dis2 , disa , disb ( Length ) set p1list = Point11 set p2list = Point22 set udflist1 = ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_H \\ list1 set udflist2 = ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_H \\ list2 let BeamType ( string ) let gap ( length ) gap = ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` / 2 BeamType = ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` set dis1 = distance ( p1list [ 1 ] , p1list [ 2 ] ) set dis2 = distance ( p2list [ 1 ] , p2list [ 2 ] ) Notify ( \"Name:\" , dis1 ) Notify ( \"Name:\" , dis2 ) i = 1 j = 1 if udflist1 . Size () <> 0 { for i while i <= p1list . Size () { udf1 = udflist1 [ i ] if i == 1 { udf1 -> SetAttributeDimension ( \"Length1\" , dis1 / 2 - ( 2676 mm / 2 ), \"Length\" ) udf1 -> SetAttributeDimension ( \"Length2\" , 637 mm , \"Length\" ) } if i > 1 and i < p1list . Size () { udf1 -> SetAttributeDimension ( \"Length1\" , dis1 / 2 - ( 2676 mm / 2 ), \"Length\" ) udf1 -> SetAttributeDimension ( \"Length2\" , dis1 / 2 - ( 2676 mm / 2 ), \"Length\" ) } if i == p1list . Size () { udf1 -> SetAttributeDimension ( \"Length1\" , 637 mm , \"Length\" ) udf1 -> SetAttributeDimension ( \"Length2\" , dis1 / 2 - ( 2676 mm / 2 ), \"Length\" ) } } } if udflist2 . Size () <> 0 { for j while j <= p2list . Size () { udf2 = udflist2 [ j ] if j == 1 { udf2 -> SetAttributeDimension ( \"Length1\" , 637 mm , \"Length\" ) udf2 -> SetAttributeDimension ( \"Length2\" , dis2 / 2 - ( 2676 mm / 2 ), \"Length\" ) } if j > 1 and j < p2list . Size () { udf2 -> SetAttributeDimension ( \"Length1\" , dis2 / 2 - ( 2676 mm / 2 ), \"Length\" ) udf2 -> SetAttributeDimension ( \"Length2\" , dis2 / 2 - ( 2676 mm / 2 ), \"Length\" ) } if j == p2list . Size () { udf2 -> SetAttributeDimension ( \"Length1\" , dis2 / 2 - ( 2676 mm / 2 ), \"Length\" ) udf2 -> SetAttributeDimension ( \"Length2\" , 637 mm , \"Length\" ) } } }","title":"\u7aef\u90e8\u73b0\u6d47\u90e8\u4f4d\u81ea\u52a8\u9002\u5e94"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#udf","text":"/*\u89c4\u5219 \u521b\u5efa\u8005 DESKTOP 2020/7/7*/ let udf1 , udf2 ( Feature ) if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5927\u91cc\u7a0b\u8fb9\u8de8\" { udf1 = UDFList [ 1 ] udf1 -> SetAttributeInteger ( \"SIDEBEAM_LEFT_CHECK\" , 0 ) udf1 -> SetAttributeInteger ( \"SIDEBEAM_RIGHT_CHECK\" , 1 ) udf2 = UDFList [ UDFList . Size () ] udf2 -> SetAttributeInteger ( \"SIDEBEAM_LEFT_CHECK\" , 1 ) udf2 -> SetAttributeInteger ( \"SIDEBEAM_RIGHT_CHECK\" , 0 ) } else if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\" { udf1 = UDFList [ 1 ] udf1 -> SetAttributeInteger ( \"SIDEBEAM_LEFT_CHECK\" , 1 ) udf1 -> SetAttributeInteger ( \"SIDEBEAM_RIGHT_CHECK\" , 0 ) udf2 = UDFList [ UDFList . Size () ] udf2 -> SetAttributeInteger ( \"SIDEBEAM_LEFT_CHECK\" , 0 ) udf2 -> SetAttributeInteger ( \"SIDEBEAM_RIGHT_CHECK\" , 1 ) } else { udf1 = UDFList [ 1 ] udf1 -> SetAttributeInteger ( \"SIDEBEAM_LEFT_CHECK\" , 1 ) udf1 -> SetAttributeInteger ( \"SIDEBEAM_RIGHT_CHECK\" , 0 ) udf2 = UDFList [ UDFList . Size () ] udf2 -> SetAttributeInteger ( \"SIDEBEAM_LEFT_CHECK\" , 0 ) udf2 -> SetAttributeInteger ( \"SIDEBEAM_RIGHT_CHECK\" , 1 ) }","title":"\u66f4\u65b0\u8fb9\u8de8UDF\u6570\u636e"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_20","text":"let B1 , B2 ( feature ) let i , j ( Integer ) let ptlist1 , ptlist2 ( List ) let pt1 , pt2 ( point ) let dis1 , dis2 ( length ) let udf1 , udf2 ( Feature ) let cushionHeight ( length ) set ptlist1 = Point1 set ptlist2 = Point2 set cushionHeight = CUSHION_HEIGHT i = 1 j = 1 if ( ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u4e2d\u8de8\" ) //P1 { for i while i <= ptlist1 . Size () { B1 = CreateOrModifyTemplate ( \"DIANKUAI\" , ALL_BEAMS \\ MODEL \\ MODEL_CUSHION \\ P1 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_CUSHION \\ List .1 , i ) B1 -> SetAttributeObject ( \"PT\" , ptlist1 . GetItem ( i )) B1 -> SetAttributeObject ( \"AXIS\" , ` ALL_BEAMS \\ INPUT \\ AX - P1 ` ) B1 . SetAttributeDimension ( \"OFFSET_Z\" , 1610 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"OFFSET_X\" , 0 mm , \"LENGTH\" ) B1 . Name = \"B1-\" + i B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) //B1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\") B1 . SetAttributeDimension ( \"\u652f\u5ea7\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u6a2a\u5411\u5bbd\" , 500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\" , 750 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u9ad8\" , 110 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u9ad8\" , 150 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\" , cushionHeight , \"LENGTH\" ) EndModifyTemplate ( B1 ) } for j while j <= ptlist2 . Size () { B2 = CreateOrModifyTemplate ( \"DIANKUAI\" , ALL_BEAMS \\ MODEL \\ MODEL_CUSHION \\ P2 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_CUSHION \\ List .2 , j ) B2 -> SetAttributeObject ( \"PT\" , ptlist2 . GetItem ( j )) B2 -> SetAttributeObject ( \"AXIS\" , ` ALL_BEAMS \\ INPUT \\ AX - P2 ` ) B2 . SetAttributeDimension ( \"OFFSET_Z\" , 1610 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"OFFSET_X\" , 0 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) //B2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\") B2 . SetAttributeDimension ( \"\u652f\u5ea7\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u6a2a\u5411\u5bbd\" , 500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\" , 750 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u9ad8\" , 110 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u9ad8\" , 150 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\" , cushionHeight , \"LENGTH\" ) B2 . Name = \"B2-\" + j EndModifyTemplate ( B2 ) } } else if ( ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5927\u91cc\u7a0b\u8fb9\u8de8\" ) //P2 { for i while i <= ptlist1 . Size () { B1 = CreateOrModifyTemplate ( \"DIANKUAI\" , ALL_BEAMS \\ MODEL \\ MODEL_CUSHION \\ P1 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_CUSHION \\ List .1 , i ) B1 -> SetAttributeObject ( \"PT\" , ptlist1 . GetItem ( i )) B1 -> SetAttributeObject ( \"AXIS\" , ` ALL_BEAMS \\ INPUT \\ AX - P1 ` ) B1 . SetAttributeDimension ( \"OFFSET_Z\" , 1610 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"OFFSET_X\" , - 0 mm , \"LENGTH\" ) B1 . Name = \"B1-\" + i B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) //B1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\") B1 . SetAttributeDimension ( \"\u652f\u5ea7\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u6a2a\u5411\u5bbd\" , 500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\" , 750 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u9ad8\" , 110 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u9ad8\" , 150 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\" , cushionHeight , \"LENGTH\" ) EndModifyTemplate ( B1 ) } for j while j <= ptlist2 . Size () { B2 = CreateOrModifyTemplate ( \"DIANKUAI\" , ALL_BEAMS \\ MODEL \\ MODEL_CUSHION \\ P2 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_CUSHION \\ List .2 , j ) B2 -> SetAttributeObject ( \"PT\" , ptlist2 . GetItem ( j )) B2 -> SetAttributeObject ( \"AXIS\" , ` ALL_BEAMS \\ INPUT \\ AX - P2 ` ) B2 . SetAttributeDimension ( \"OFFSET_Z\" , 1610 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"OFFSET_X\" , - 250 mm , \"LENGTH\" ) B2 . Name = \"B2-\" + j B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) //B2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\") B2 . SetAttributeDimension ( \"\u652f\u5ea7\u987a\u6865\u5411\u957f\" , 400 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u6a2a\u5411\u5bbd\" , 350 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\" , 750 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u9ad8\" , 110 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u9ad8\" , 150 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\" , cushionHeight , \"LENGTH\" ) EndModifyTemplate ( B2 ) } } else // \u5c0f\u91cc\u7a0b\u8fb9\u8de8 { for i while i <= ptlist1 . Size () { B1 = CreateOrModifyTemplate ( \"DIANKUAI\" , ALL_BEAMS \\ MODEL \\ MODEL_CUSHION \\ P1 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_CUSHION \\ List .1 , i ) B1 -> SetAttributeObject ( \"PT\" , ptlist1 . GetItem ( i )) B1 -> SetAttributeObject ( \"AXIS\" , ` ALL_BEAMS \\ INPUT \\ AX - P1 ` ) B1 . SetAttributeDimension ( \"OFFSET_Z\" , 1610 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"OFFSET_X\" , 250 mm , \"LENGTH\" ) B1 . Name = \"B1-\" + i B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) //B1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\") B1 . SetAttributeDimension ( \"\u652f\u5ea7\u987a\u6865\u5411\u957f\" , 400 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u6a2a\u5411\u5bbd\" , 350 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\" , 750 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u5ea7\u9ad8\" , 110 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u9ad8\" , 150 mm , \"LENGTH\" ) B1 . SetAttributeDimension ( \"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\" , cushionHeight , \"LENGTH\" ) EndModifyTemplate ( B1 ) } for j while j <= ptlist2 . Size () { B2 = CreateOrModifyTemplate ( \"DIANKUAI\" , ALL_BEAMS \\ MODEL \\ MODEL_CUSHION \\ P2 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_CUSHION \\ List .2 , j ) B2 -> SetAttributeObject ( \"PT\" , ptlist2 . GetItem ( j )) B2 -> SetAttributeObject ( \"AXIS\" , ` ALL_BEAMS \\ INPUT \\ AX - P2 ` ) B2 . SetAttributeDimension ( \"OFFSET_Z\" , 1610 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"OFFSET_X\" , 0 mm , \"LENGTH\" ) B2 . Name = \"B2-\" + j B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) //B2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\") B2 . SetAttributeDimension ( \"\u652f\u5ea7\u987a\u6865\u5411\u957f\" , 500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u6a2a\u5411\u5bbd\" , 500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\" , 750 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\" , 750 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\" , 1500 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u5ea7\u9ad8\" , 110 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u4e0b\u57ab\u77f3\u9ad8\" , 150 mm , \"LENGTH\" ) B2 . SetAttributeDimension ( \"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\" , cushionHeight , \"LENGTH\" ) EndModifyTemplate ( B2 ) } }","title":"\u57ab\u77f3\u7684\u521b\u5efa"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_21","text":"let F ( UserFeature ) let i ( Integer ) let p1 , p2 , p3 , p4 , pa , pb ( point ) let ln ( curve ) i = 1 for i while i < Point1 . Size () { /* set pa=pointbetween(Point1[i],Point1[i+1],0.5,false) set pa=CreateOrModifyDatum(\"Point\",`ALL_BEAMS\\RESULT\\MODEL_GAP\\Ordered Geometrical Set.63` ,`ALL_BEAMS\\RELATIONS\\KP_MODEL\\Knowledge Pattern.18\\PA_List` ,i) pa.Name=\"Pa_\"+ToString(i) pa.Update() set pb=pointbetween(Point2 [i],Point2 [i+1],0.5,false) set pb=CreateOrModifyDatum(\"Point\",`ALL_BEAMS\\RESULT\\MODEL_GAP\\Ordered Geometrical Set.63` ,`ALL_BEAMS\\RELATIONS\\KP_MODEL\\Knowledge Pattern.18\\PB_List` ,i) pb.Name=\"Pb_\"+ToString(i) pb.Update() */ ln = CreateOrModifyDatum ( \"Line\" , ALL_BEAMS \\ DATUM \\ LINES , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_GAP \\ LineList , i ) set ln = project ( line ( pointbetween ( Point1 [ i ] , Point1 [ i + 1 ] , 0.5 , false ), pointbetween ( Point2 [ i ] , Point2 [ i + 1 ] , 0.5 , false )), ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Multi - sections Surface .62 ` , direction ( 0 , 0 , 1 )) ln . Name = \"LN-\" + i ln . Update () F = CreateOrModifyTemplate ( \"BEAM_GAP\" , ALL_BEAMS \\ MODEL \\ MODEL_GAP \\ Body .8 , ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAM_GAP \\ BEAM_GAP_List , i ) if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u4e2d\u8de8\" { F -> SetAttributeObject ( \"LINE\" , ln ) F -> SetAttributeObject ( \"LINE1\" , ` ALL_BEAMS \\ CONSTRUCTION \\ DRW_REF \\ Ordered Geometrical Set .33 \\ DRW_INT_LN ` ) F -> SetAttributeObject ( \"SURF\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Multi - sections Surface .62 ` ) F -> SetAttributeString ( \"\u4f4d\u7f6e\u8bbe\u5b9a\" , \"\u4e2d\u8de8\" ) } else if ` ALL_BEAMS \\ PARAMETERS \\ \u4f4d\u7f6e\u8bbe\u5b9a ` == \"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\" { F -> SetAttributeObject ( \"LINE\" , ln ) F -> SetAttributeObject ( \"LINE1\" , ` ALL_BEAMS \\ CONSTRUCTION \\ DRW_REF \\ Ordered Geometrical Set .33 \\ DRW_INT_LN ` ) F -> SetAttributeObject ( \"SURF\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Multi - sections Surface .62 ` ) F -> SetAttributeString ( \"\u4f4d\u7f6e\u8bbe\u5b9a\" , \"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\" ) } else { F -> SetAttributeObject ( \"LINE\" , ln ) F -> SetAttributeObject ( \"LINE1\" , ` ALL_BEAMS \\ CONSTRUCTION \\ DRW_REF \\ Ordered Geometrical Set .33 \\ DRW_INT_LN ` ) F -> SetAttributeObject ( \"SURF\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ Multi - sections Surface .62 ` ) F -> SetAttributeString ( \"\u4f4d\u7f6e\u8bbe\u5b9a\" , \"\u5927\u91cc\u7a0b\u8fb9\u8de8\" ) } EndModifyTemplate ( F ) F . Name = \"GAP_\" + i }","title":"\u521b\u5efa\u6881\u7f1d\u9699\u73b0\u6d47\u5757"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_22","text":"","title":"\u51fa\u56fe\u6a21\u578b"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_23","text":"let pt , pt1 , pt2 ( point ) let i ( integer ) let ln ( line ) let l1 , l2 ( list ) let F ( Feature ) l1 = Point11 l2 = Point22 i = 1 for i while i < l1 . Size () { ln = CreateOrModifyDatum ( \"line\" , ALL_BEAMS \\ DATUM \\ PLANER_LN , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_GAP_BEAM \\ LineList , i ) pt1 = pointbetween ( l1 [ i ] , l1 [ i + 1 ] , 0.5 , false ) pt2 = pointbetween ( l2 [ i ] , l2 [ i + 1 ] , 0.5 , false ) ln = line ( pt1 , pt2 ) ln . Name = \"LN-\" + i ln . Update () Set F = CreateOrModifyTemplate ( \"DRW_BEAM_P1\" , ALL_BEAMS \\ MODEL \\ DRW_PLANER_BEAM_GAP , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_GAP_BEAM \\ BeamGapList , i ) F -> SetAttributeObject ( \"LN\" , ln ) F -> SetAttributeObject ( \"CRV-1\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 1 ` ) F -> SetAttributeObject ( \"CRV-2\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 2 ` ) F -> SetAttributeDimension ( \"BEAM_WIDTH\" , 300 mm , \"LENGTH\" ) F -> SetAttributeString ( \"TYPE\" , \"B\" ) F . Name = \"BEAM-PLANER-\" + i //F.Color=\"0,255,255\" EndModifyTemplate ( F ) }","title":"\u6881\u5e73\u9762\u56fe"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_24","text":"let pt , pt1 ( point ) let i , j , k ( integer ) let ln ( line ) let l1 ( list ) // let F ( ArcAnnotationOnePointFeature ) let F1 ( ArcAnnotationTwoPointFeature ) //let DEMO1, //let DEMO2(feature) l1 = ALL_BEAMS \\ RELATIONS \\ KP_MODEL \\ KP_BEAMS \\ PlanerLnList ln = ` ALL_BEAMS \\ CONSTRUCTION \\ DRW_REF \\ Ordered Geometrical Set .33 \\ DRW_INT_LN ` i = 1 for i while i <= l1 . Size () { pt = CreateOrModifyDatum ( \"point\" , ALL_BEAMS \\ DATUM \\ DRW_POINTS , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ IntPointList , i ) pt = intersect ( ln , l1 [ i ] ) pt . Name = \"INT-POINT-\" + i } j = 1 for j while j <= l1 . Size () { /*Set F=InstantiateTemplate(\"DRW_TAG_1\",ALL_BEAMS\\RESULT\\DRW_TAGS ) F->SetAttributeObject(\"PT\",ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\IntPointList [j]) //F->SetAttributeDimension(\"BEAM_WIDTH\",300mm,\"LENGTH\") F->SetAttributeString(\"ComponentName\",\"demo\") F->SetAttributeString(\"Name\",\"TEST-\"+j) F->SetAttributeString(\"Value\",\"K-\"+`ALL_BEAMS\\PARAMETERS\\\u8de8\u53f7` +\"_\"+j+\"-\u53f7\u6881\") EndModifyTemplate(F) ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\LabelList->SetItem(F->GetAttributeObject(\"LABEL\"),j) DEMO1=F->GetAttributeObject(\"LABEL\") DEMO1.Name=\"Label-\"+j */ F = CreateArcAnnotationOnePointFeature ( ` Annotation \\ \u6881\u53f7\u6807\u6ce8 ` , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ IntPointList [ j ] , \"RTTT\" , \"demo\" , \"K-\" + ` ALL_BEAMS \\ PARAMETERS \\ \u8de8\u53f7 ` + \"_\" + j + \"-\u53f7\u6881\" ) ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ LabelList -> SetItem ( F , j ) } k = 1 for k while k < l1 . Size () { /*Set F1=InstantiateTemplate(\"DRW_DIM_1\",ALL_BEAMS\\RESULT\\DRW_DIM ) F1->SetAttributeObject(\"P1\",ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\IntPointList [k]) F1->SetAttributeObject(\"P2\",ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\IntPointList [k+1]) F1->SetAttributeString(\"Name\",\"Distance-\"+k) F1->SetAttributeInteger(\"DimType\",3) EndModifyTemplate(F1) ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\DimListM ->SetItem(F1->GetAttributeObject(\"DIM\"),k) DEMO2=F1->GetAttributeObject(\"DIM\") DEMO2->SetAttributeString(\"Value\",\"K-\"+k+\"-\u53f7\u6881\") DEMO2.Name=\"Dim-M-\"+k */ F1 = CreateArcAnnotationTwoPointFeature ( ` Annotation \\ \u73b0\u6d47\u7f1d\u9699\u6807\u6ce8 ` , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ IntPointList [ k ] , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ IntPointList [ k + 1 ] , \"Distance-\" + k , \"K-\" + k + \"-\u53f7\u6881\" , \"1\" ) ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ DimListM -> SetItem ( F1 , k ) } //\u5f97\u5230\u4e24\u8fb9\u6807\u6ce8 k = 1 for k while k < l1 . Size () { /* Set F1=InstantiateTemplate(\"DRW_DIM_1\",ALL_BEAMS\\RESULT\\DRW_DIM ) F1->SetAttributeObject(\"P1\",Point11 [k] ) F1->SetAttributeObject(\"P2\",Point11 [k+1]) F1->SetAttributeString(\"Name\",\"Distance-\"+k) F1->SetAttributeInteger(\"DimType\",3) EndModifyTemplate(F1) ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\DimListL ->SetItem(F1->GetAttributeObject(\"DIM\"),k) DEMO2=F1->GetAttributeObject(\"DIM\") DEMO2->SetAttributeString(\"Value\",\"K-\"+k+\"-\u53f7\u6881\") DEMO2.Name=\"Dim-L-\"+k */ F1 = CreateArcAnnotationTwoPointFeature ( ` Annotation \\ \u73b0\u6d47\u7f1d\u5c0f\u91cc\u7a0b\u6807\u6ce8 ` , Point11 [ k ] , Point11 [ k + 1 ] , \"Distance-\" + k , \"K-\" + k + \"-\u53f7\u6881\" , \"3\" ) ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ DimListL -> SetItem ( F1 , k ) } //\u5f97\u5230\u4e24\u8fb9\u6807\u6ce8 k = 1 for k while k < l1 . Size () { /*Set F1=InstantiateTemplate(\"DRW_DIM_1\",ALL_BEAMS\\RESULT\\DRW_DIM ) F1->SetAttributeObject(\"P1\",Point22 [k] ) F1->SetAttributeObject(\"P2\",Point22 [k+1]) F1->SetAttributeString(\"Name\",\"Distance-\"+k) F1->SetAttributeInteger(\"DimType\",3) EndModifyTemplate(F1) ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\DimList ->SetItem(F1->GetAttributeObject(\"DIM\"),k) DEMO2=F1->GetAttributeObject(\"DIM\") DEMO2->SetAttributeString(\"Value\",\"K-\"+k+\"-\u53f7\u6881\") DEMO2.Name=\"Dim-R-\"+k */ F1 = CreateArcAnnotationTwoPointFeature ( ` Annotation \\ \u73b0\u6d47\u7f1d\u5927\u91cc\u7a0b\u6807\u6ce8 ` , Point22 [ k ] , Point22 [ k + 1 ] , \"Distance-\" + k , \"K-\" + k + \"-\u53f7\u6881\" , \"3\" ) ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_LABEL_POSITION \\ DimList -> SetItem ( F1 , k ) }","title":"\u5355\u70b9\u6807\u6ce8"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_25","text":"let i , j ( integer ) let p1 , p2 , p3 , p4 ( point ) let dis1 , dis2 ( LENGTH ) let L1 , L2 ( list ) L1 = Point11 L2 = Point22 let F1 , F2 ( Feature ) let gap ( length ) gap = ` ALL_BEAMS \\ PARAMETERS \\ \u73b0\u6d47\u95f4\u8ddd ` / 2 i = 1 j = 1 p1 = Point1 [ 1 ] p2 = Point1 [ 2 ] Notify ( \"DIS:\" , dis1 ) dis1 = distance ( p1 , p2 ) p3 = Point2 [ 1 ] p4 = Point2 [ 2 ] Notify ( \"DIS:\" , dis2 ) dis2 = distance ( p3 , p4 ) for i while i <= Point11 . Size () { F1 = CreateOrModifyTemplate ( \"S1\" , ALL_BEAMS \\ MODEL \\ DRW_SECTION_UDFS_P1 , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_BEAM_SECTION \\ BeamSectionList_1 , i ) F1 -> SetAttributeObject ( \"CRV\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 01 ` ) F1 -> SetAttributeObject ( \"PT\" , Point1 . GetItem ( i )) if i == 1 { F1 -> SetAttributeDimension ( \"Length_L\" , 1975 mm , \"Length\" ) F1 -> SetAttributeDimension ( \"Length_R\" , dis1 / 2 - gap , \"Length\" ) } if i > 1 and i < Point11 . Size () { F1 -> SetAttributeDimension ( \"Length_L\" , dis1 / 2 - gap , \"Length\" ) F1 -> SetAttributeDimension ( \"Length_R\" , dis1 / 2 - gap , \"Length\" ) } if i == Point11 . Size () { F1 -> SetAttributeDimension ( \"Length_L\" , dis1 / 2 - gap , \"Length\" ) F1 -> SetAttributeDimension ( \"Length_R\" , 1975 mm , \"Length\" ) } EndModifyTemplate ( F1 ) F2 = CreateOrModifyTemplate ( \"S1\" , ALL_BEAMS \\ MODEL \\ DRW_SECTION_UDFS_P2 , ALL_BEAMS \\ RELATIONS \\ KP_DRW \\ KP_DRW_BEAM_SECTION \\ BeamSectionList_2 , i ) F2 -> SetAttributeObject ( \"CRV\" , ` ALL_BEAMS \\ CONSTRUCTION \\ CONSTRUCTION \\ CRV - 02 ` ) F2 -> SetAttributeObject ( \"PT\" , Point2 . GetItem ( i )) if i == 1 { F2 -> SetAttributeDimension ( \"Length_L\" , 1975 mm , \"Length\" ) F2 -> SetAttributeDimension ( \"Length_R\" , dis2 / 2 - gap , \"Length\" ) } if i > 1 and i < Point11 . Size () { F2 -> SetAttributeDimension ( \"Length_L\" , dis2 / 2 - gap , \"Length\" ) F2 -> SetAttributeDimension ( \"Length_R\" , dis2 / 2 - gap , \"Length\" ) } if i == Point11 . Size () { F2 -> SetAttributeDimension ( \"Length_L\" , dis2 / 2 - gap , \"Length\" ) F2 -> SetAttributeDimension ( \"Length_R\" , 1975 mm , \"Length\" ) } EndModifyTemplate ( F2 ) }","title":"\u6a2a\u65ad\u9762\u56fe\u7eb8\u6a21\u677f\u7684\u751f\u6210"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_26","text":"void BrdLogical::mainLoop ( double brd_width ) { std :: cout << \"\u5f00\u59cb\u8ba1\u7b97! \\n \" ; double B = 0 ; double maxgap = 4300 ; //\u6700\u5927\u6881\u8ddd double mingap = 3000 ; //\u6700\u5c0f\u6881\u8ddd double stdgap = 300 ; //\u73b0\u6d47\u6bb5\u8ddd\u79bb double stdLength = 4250 ; //\u6807\u51c6\u6881\u8ddd\u79bb double DS0 = 1975 ; //\u8fb9\u6881\u5916\u4fa7\u5bbd double guardrailwidth = 150 ; //\u9632\u649e\u62a4\u680f\u5916\u5305\u5bbd double beamTF = 0 ; //\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001 double NB = 0 ; //\u6881\u6570\uff08\u521d\u59cb\uff09 double DT = 0.0 ; //\u4e24\u4fa7\u8fb9\u6881\u4e2d\u5fc3\u8ddd double beamdistance = 0 ; double beamdis3 = 0 ; double beamdis4_3 = 0 ; double beamdisTF = 0 ; double NB2 = 0 ; double DL2 = 0.0 ; double DL3 = 0.000 ; //\u6881\u8ddd\uff08\u4fee\u6b633\uff09 //B = i*500; B = brd_width ; cout << \"\" << endl ; cout << \"\u6865\u5bbd=\" << B << endl ; DT = B - 2 * guardrailwidth - 2 * DS0 ; cout << \"-----\u4e24\u4fa7\u8fb9\u6881\u4e2d\u5fc3\u8ddd=\" << DT << endl ; //\u6881\u6570\u6700\u5c0f\u503c\uff08\u4f30\u7b97\uff09\uff1b if ( int ( B / maxgap ) < 2 ) { beamdistance = 2 ; } else { beamdistance = ( int ( B / maxgap )); } cout << \"-----\u6881\u6570\u6700\u5c0f\u503c\uff08\u4f30\u7b97\uff09=\" << beamdistance << endl ; //\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09 if ( int ( B / mingap ) < 2 ) { beamdistance = 2 ; } else { beamdistance = ( int ( B / mingap )); } cout << \"-----\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09=\" << beamdistance << endl ; //*************************************** //**\u6b64\u5faa\u73af\u5224\u5b9a\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\uff08\u5f88\u7a84\uff09 //*************************************** cout << \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\uff08\u5f88\u7a84\uff09**\" << endl ; //\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001 if ( DT < stdLength ) { beamTF = 1 ; } else { beamTF = 0 ; } cout << \"-----\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001=\" << beamTF << endl ; //\u6881\u6570\uff08\u521d\u59cb\uff09 NB = int ( DT / stdLength ); cout << \"-----\u6881\u6570\uff08\u521d\u59cb\uff09=\" << NB << endl ; //\u6881\u6570\uff08\u4fee\u6b631\uff09 if ( beamTF == 1 ) { NB = NB + 2 ; } else { NB = NB + 1 ; } cout << \"-----\u6881\u6570\uff08\u4fee\u6b631\uff09=\" << NB << endl ; //\u6881\u8ddd\uff08\u4fee\u6b631\uff09 beamdistance = DT / ( NB - 1 ); cout << \"-----\u6881\u8ddd\uff08\u4fee\u6b631\uff09=\" << beamdistance << endl ; //\u6881\u8ddd\u5224\u5b9a >=3.0 if ( beamdistance >= mingap ) { beamdis3 = 1 ; } else { beamdis3 = 0 ; } //********************** //**\u6b64\u5faa\u73af\u5224\u5b9a\u6881\u8ddd\u662f\u5426\u5408\u7406 //********************** cout << \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u6881\u8ddd\u662f\u5426\u5408\u7406**\" << endl ; cout << \"-----\u6881\u8ddd\u5224\u5b9a >=3.0=\" << beamdis3 << endl ; //\u6881\u8ddd\u5224\u5b9a <=4.3 if ( beamdistance <= maxgap ) { beamdis4_3 = 1 ; } else { beamdis4_3 = 0 ; } cout << \"-----\u6881\u8ddd\u5224\u5b9a <=4.3=\" << beamdis4_3 << endl ; //\u6881\u8ddd\u662f\u5426\u5408\u7406 if ( beamdis3 * beamdis4_3 == 1 ) { beamdisTF = 1 ; } else { beamdisTF = 0 ; } cout << \"-----\u6881\u8ddd\u662f\u5426\u5408\u7406=\" << beamdisTF << endl ; //\u6881\u6570\uff08\u4fee\u6b632\uff09 if ( beamdisTF == 1 ) { NB2 = NB ; } else if ( beamdis3 == 0 ) { if ( beamdistance < mingap ) { NB2 = NB ; } else { NB2 = NB - 1 ; } } else if ( beamdis4_3 == 0 ) { NB2 = NB + 1 ; } cout << \"-----\u6881\u6570\uff08\u4fee\u6b632\uff09=\" << NB2 << endl ; //\u6881\u8ddd\uff08\u4fee\u6b632\uff09 DL2 = DT / ( NB2 - 1 ); cout << \"-----\u6881\u8ddd\uff08\u4fee\u6b632\uff09=\" << DL2 << endl ; //********************** //**\u6b64\u5faa\u73af\u5224\u5b9a\u8fb9\u6881\u5916\u4fa7\u5bbd\u662f\u5426\u9700\u8c03\u6574 //********************** //\u6881\u8ddd\u5224\u5b9a >= 3.0 int beamDisCheck2_3 = 0 ; if ( DL2 > mingap ) { beamDisCheck2_3 = 1 ; } else { beamDisCheck2_3 = 0 ; } cout << \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u8fb9\u6881\u5916\u4fa7\u5bbd\u662f\u5426\u9700\u8c03\u6574**\" << endl ; cout << \"-----\u6881\u8ddd\u5224\u5b9a >= 3.0=\" << beamDisCheck2_3 << endl ; //\u6881\u8ddd\u5224\u5b9a <= 4.3 int beamDisCheck2_4_3 = 0 ; if ( DL2 <= maxgap ) { beamDisCheck2_4_3 = 1 ; } else { beamDisCheck2_4_3 = 0 ; } cout << \"-----\u6881\u8ddd\u5224\u5b9a <= 4.3=\" << beamDisCheck2_4_3 << endl ; //\u6881\u8ddd\u662f\u5426\u5408\u7406 int beamdisTF2 = 0 ; if ( beamDisCheck2_3 * beamDisCheck2_4_3 == 1 ) { beamdisTF2 = 1 ; } else { beamdisTF2 = 0 ; } cout << \"-----\u6881\u8ddd\u662f\u5426\u5408\u7406=\" << beamdisTF2 << endl ; if ( beamDisCheck2_3 == 1 ) { DL3 = DL2 ; } else { DL3 = B / NB2 ; } cout << \"-----\u6881\u8ddd\uff08\u4fee\u6b633\uff09=\" << DL3 << endl ; //\u8fb9\u6881\u5916\u4fa7\u5bbd\uff08\u4fee\u6b631\uff09 double DS01 = 0 ; DS01 = ( B - ( 2 * guardrailwidth ) - ( NB2 - 1 ) * DL3 ) / 2 ; cout << \"-----\u8fb9\u6881\u5916\u4fa7\u5bbd\uff08\u4fee\u6b631\uff09=\" << DS01 << endl ; cout << \" \\n \" << endl ; cout << \"\u8ba1\u7b97\u7ed3\u675f! \\n \" << endl ; } void BrdLogical::GetCount ( double BW , int & A , int & B ) { //declare variables; double minLength = 3.000 ; double maxLength = 4.300 ; double stdLength = 4.250 ; double DT = 0.000 ; double DL1 = 0.000 ; MaxCount = int ( BW / minLength ); if ( MaxCount < 2 ) { MaxCount = 2 ; } else { MaxCount = int ( BW / minLength ); } MinCount = int ( BW / maxLength ); if ( MinCount < 2 ) { MinCount = 2 ; } else { MinCount = int ( BW / maxLength ); } DT = BW - ( 1.975 * 2 + 0.150 * 2 ); cout << \"-----\u4e24\u4fa7\u8fb9\u6881\u4e2d\u5fc3\u8ddd=\" << DT << endl ; if ( DT < stdLength ) { cout << \"-----\u6881\u8ddd\u4e0d\u6ee1\u8db3\u4e00\u4e2a\u6807\u51c6\u68814.25\u7c73\u7684\u8ddd\u79bb\u3002\" << endl ; //\u8ba1\u7b97\u521d\u59cb\u503c Bcount = ( DT / stdLength ) + 2 ; cout << \"-----\u6881\u6570\uff08\u4fee\u6b631\uff09=\" << Bcount << endl ; } else { //\u8ba1\u7b97\u521d\u59cb\u503c Bcount = ( DT / stdLength ) + 1 ; cout << \"-----\u6881\u6570\uff08\u4fee\u6b631\uff09=\" << Bcount << endl ; DL1 = DT / ( Bcount - 1 ); cout << \"-----\u6881\u8dddDL1=\" << DL1 << endl ; } //\u7ea0\u6b63 if ( DL1 < minLength ) { Bcount = ( DT / stdLength ) + 2 ; } else if ( DL1 > minLength && DL1 <= maxLength ) { Bcount = ( DT / stdLength ) + 1 ; } else if ( DL1 >= maxLength ) { Bcount = Bcount + 1 ; } cout << \"-----\u6881\u6570\uff08\u4fee\u6b632\uff09=\" << Bcount << endl ; A = Bcount ; //\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09\u7684 \u6881\u8ddd double MaxBeamLength = 0 ; MaxBeamLength = DT / ( MaxCount - 1 ); cout << \"-----\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09\u7684 \u6881\u8ddd = \" << MaxBeamLength << endl ; //\u6881\u6570\u6700\u5927\u503c\uff08\u53d6\u7528 \u8bd5\u7b971\uff09 double MaxBeamCount = 0 ; if ( MaxBeamLength > minLength && MaxBeamLength <= maxLength ) { MaxBeamCount = MaxCount ; // (DT / stdLength) + 2; //cout << \"-----\u6881\u6570\u6700\u5927\u503c[if (MaxBeamLength<minLength)]\uff08\u53d6\u7528 \u8bd5\u7b971\uff09=\" << MaxBeamCount << endl; } else if ( MaxCount -1 >= Bcount ) { MaxBeamCount = MaxCount -1 ; //cout << \"-----\u6881\u6570\u6700\u5927\u503c[(MaxCount-1>= Bcount)]\uff08\u53d6\u7528 \u8bd5\u7b971\uff09=\" << MaxBeamCount << endl; } else { MaxBeamCount = Bcount ; //cout << \"-----\u6881\u6570\u6700\u5927\u503c[else]\uff08\u53d6\u7528 \u8bd5\u7b971\uff09=\" << MaxBeamCount << endl; } cout << \"-----\u6881\u6570\u6700\u5927\u503c\uff08\u53d6\u7528 \u8bd5\u7b971\uff09=\" << MaxBeamCount << endl ; B = MaxBeamCount ; } void BrdLogical::Compare ( double P1Length , double P2Length , int & oCount ) { BrdLogical aa ; // P1 int CountA = 0 ; int CountB = 0 ; aa . GetCount ( P1Length , CountA , CountB ); cout << \"-----\u6700\u7ec8P1\uff1a=\" << \"\u6865\u5bbd\uff1a\" << P1Length << \"_\" << \"A:\" << CountA << \"_\" << \"B:\" << CountB << endl ; // P2 int Counta = 0 ; int Countb = 0 ; aa . GetCount ( P2Length , Counta , Countb ); cout << \"-----\u6700\u7ec8P2\uff1a=\" << \"\u6865\u5bbd\uff1a\" << P2Length << \"_\" << \"A:\" << Counta << \"_\" << \"B:\" << Countb << endl ; //---------------------------------------------------------------------- //\u4ea4\u96c6\u7684\u7c7b\u578b 1\uff08\u5c0f\u91cc\u7a0b\u6700\u5c0f\u6881\u6570<\u5927\u91cc\u7a0b\u6700\u5c0f\u6881\u6570\uff09 int type1 = 0 ; if ( CountA < Counta && CountB >= Counta ) { type1 = 1 ; } else { type1 = 0 ; } cout << \"-----\u4ea4\u96c6\u7684\u7c7b\u578b 1\uff08\u5c0f\u91cc\u7a0b\u6700\u5c0f\u6881\u6570<\u5927\u91cc\u7a0b\u6700\u5c0f\u6881\u6570\uff09\uff1a\" << type1 << endl ; //\u4ea4\u96c6\u7684\u7c7b\u578b 2\uff08\u5c0f\u91cc\u7a0b\u6700\u5c0f\u6881\u6570>=\u5927\u91cc\u7a0b\u6700\u5c0f\u6881\u6570\uff09 int type2 = 0 ; if ( CountA >= Counta && CountA >= Countb ) { type2 = 1 ; } else { type2 = 0 ; } cout << \"-----\u4ea4\u96c6\u7684\u7c7b\u578b 2\uff08\u5c0f\u91cc\u7a0b\u6700\u5c0f\u6881\u6570>=\u5927\u91cc\u7a0b\u6700\u5c0f\u6881\u6570\uff09\uff1a\" << type2 << endl ; //---------------------------------------------------------------------- //\u6881\u6570 \u662f\u5426\u6709\u4ea4\u96c6 int beamintbool = 0 ; if ( type1 == 0 && type2 == 0 ) { beamintbool = 0 ; } else { beamintbool = 1 ; } cout << \"-----\u6881\u6570 \u662f\u5426\u6709\u4ea4\u96c6\uff1a\" << beamintbool << endl ; //---------------------------------------------------------------------- //\u5982\u6709\u4ea4\u96c6 \u6881\u6570\uff08\u53d6\u516c\u6709\u6570\u7684\u6700\u5c0f\u503c\uff09 int beamGetMin = 0 ; if ( type1 == 1 ) { beamGetMin = Counta ; } else { if ( type1 == 0 ) { beamGetMin = CountA ; } } cout << \"-----\u6881\u6570 \u5982\u6709\u4ea4\u96c6 \u6881\u6570\uff08\u53d6\u516c\u6709\u6570\u7684\u6700\u5c0f\u503c\uff09\uff1a\" << beamGetMin << endl ; // \u5982\u65e0\u4ea4\u96c6 \u6881\u6570\uff08\u53d6\u56db\u4e2a\u6570\u4e2d\uff0c\u7b2c\u4e8c\u5927\u7684\u90a3\u4e2a\u6570\uff09\u63a8\u8350 int noInterVal = 0 ; if ( beamintbool == 0 ) { if ( CountA < Counta ) { noInterVal = Counta ; } else { noInterVal = CountA ; } } else { noInterVal = beamGetMin ; cout << \"-----\u6881\u6570 \u67e5\u770b\u6709\u4ea4\u96c6\u89e3\uff1a\" << noInterVal << endl ; } cout << \"-----\u6881\u6570 \u5982\u65e0\u4ea4\u96c6 \u6881\u6570\uff08\u53d6\u56db\u4e2a\u6570\u4e2d\uff0c\u7b2c\u4e8c\u5927\u7684\u90a3\u4e2a\u6570\uff09\u63a8\u8350\uff1a\" << noInterVal << endl ; //noInterVal \u4e3a\u6700\u7ec8\u89e3 //---------------------------------------------------------------------- //\u5982\u65e0\u4ea4\u96c6 \u9700\u4fee\u6539\u6865\u5bbd\u7684\u4e00\u4fa7 //---------------------------------------------------------------------- int NoBeamCheck = 0 ; if ( beamintbool == 0 ) { if ( CountA < Counta ) { cout << \"-----\u6881\u6570 \u8c03\u8282\u5c0f\u91cc\u7a0b\u4fa7 \" << endl ; } else { cout << \"-----\u6881\u6570 \u8c03\u8282\u5927\u91cc\u7a0b\u4fa7 \" << endl ; } } else { NoBeamCheck = noInterVal ; cout << \"-----\u6881\u6570 \u67e5\u770b\u6709\u4ea4\u96c6\u89e3 \" << endl ; } //---------------------------------------------------------------------- // \u5982\u65e0\u4ea4\u96c6 \u9700\u4fee\u6539\u6865\u5bbd\u7684\u4e00\u4fa7 \u6865\u5bbd\u63a8\u8350 //---------------------------------------------------------------------- int beamFixVal = 0 ; if ( beamintbool == 1 ) { cout << \"-----\u6881\u6570 \u67e5\u770b\u6709\u4ea4\u96c6\u89e3 \" << endl ; } else { cout << \"-----\u6881\u6570 \u6865\u5bbd\u63a8\u8350 \" << endl ; } //\u4ee5\u4e0b\u4e3a\u5176\u4ed6\u7b97\u6cd5\u8ba1\u7b97\u7ed3\u679c\uff0c\u53ef\u4ee5\u53c2\u8003\uff0c\u53ef\u4ee5\u5220\u9664\uff1b //---------------------------------------------------------------------- int sresult = 0 ; if ( type1 == 1 ) { sresult = Counta ; } else if ( type2 == 1 ) { sresult = CountA ; } else if ( beamintbool == 1 ) { if ( CountA < Counta ) { sresult = Counta ; } else if ( CountA > Counta ) { sresult = CountA ; } } else if ( beamintbool == 0 ) { if ( CountA < Counta ) { sresult = Counta ; } else if ( CountA > Counta ) { sresult = CountA ; } } else { ////---------------------------------------------------------------------- vector < int > dArr ; dArr . push_back ( CountA ); dArr . push_back ( CountB ); dArr . push_back ( Counta ); dArr . push_back ( Countb ); int icoutt = GetSmallNumber ( dArr ); cout << \"\u6700\u7ec8\u6881\u5f97\u6570\u91cf\u4e3a:\" << icoutt << endl ; //////---------------------------------------------------------------------- oCount = icoutt ; } oCount = sresult ; ////---------------------------------------------------------------------- //vector<int>dArr; //dArr.push_back(CountA); //dArr.push_back(CountB); //dArr.push_back(Counta); //dArr.push_back(Countb); //int icoutt = GetSmallNumber(dArr); //cout << \"\u6700\u7ec8\u6881\u5f97\u6570\u91cf\u4e3a:\" << icoutt << endl; //////---------------------------------------------------------------------- //oCount = icoutt; //---------------------------------------------------------------------- } void BrdLogical::run () { std :: cout << \"\u5f00\u59cb\u8ba1\u7b97! \\n \" ; double B = 0 ; double maxgap = 4300 ; //\u6700\u5927\u6881\u8ddd double mingap = 3000 ; //\u6700\u5c0f\u6881\u8ddd double stdgap = 300 ; //\u73b0\u6d47\u6bb5\u8ddd\u79bb double stdLength = 4250 ; //\u6807\u51c6\u6881\u8ddd\u79bb double DS0 = 1975 ; //\u8fb9\u6881\u5916\u4fa7\u5bbd double guardrailwidth = 150 ; //\u9632\u649e\u62a4\u680f\u5916\u5305\u5bbd double beamTF = 0 ; //\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001 double NB = 0 ; //\u6881\u6570\uff08\u521d\u59cb\uff09 double DT = 0.0 ; //\u4e24\u4fa7\u8fb9\u6881\u4e2d\u5fc3\u8ddd double beamCount = 0 ; double beamdis3 = 0 ; double beamdis4_3 = 0 ; double beamdisTF = 0 ; double NB2 = 0 ; double DL2 = 0.0 ; double DL3 = 0.000 ; //\u6881\u8ddd\uff08\u4fee\u6b633\uff09 for ( int i = 0 ; i < 150 ; i ++ ) { B = i * 500 ; cout << \"\" << endl ; cout << \"\u6865\u5bbd=\" << B << endl ; DT = B - 2 * guardrailwidth - 2 * DS0 ; cout << \"-----\u4e24\u4fa7\u8fb9\u6881\u4e2d\u5fc3\u8ddd=\" << DT << endl ; //\u6881\u6570\u6700\u5c0f\u503c\uff08\u4f30\u7b97\uff09\uff1b if ( int ( B / maxgap ) < 2 ) { beamCount = 2 ; } else { beamCount = ( int ( B / maxgap )); } cout << \"-----\u6881\u6570\u6700\u5c0f\u503c\uff08\u4f30\u7b97\uff09=\" << beamCount << endl ; //\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09 if ( int ( B / mingap ) < 2 ) { beamCount = 2 ; } else { beamCount = ( int ( B / mingap )); } cout << \"-----\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09=\" << beamCount << endl ; //*************************************** //**\u6b64\u5faa\u73af\u5224\u5b9a\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\uff08\u5f88\u7a84\uff09 //*************************************** cout << \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\uff08\u5f88\u7a84\uff09**\" << endl ; //\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001 if ( DT < stdLength ) { beamTF = 1 ; } else { beamTF = 0 ; } cout << \"-----\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001 =\" << beamTF << endl ; //\u6881\u6570\uff08\u521d\u59cb\uff09 NB = int ( DT / stdLength ); cout << \"-----\u6881\u6570\uff08\u521d\u59cb\uff09=\" << NB << endl ; //\u6881\u6570\uff08\u4fee\u6b631\uff09 if ( beamTF == 1 ) { NB = NB + 2 ; } else { NB = NB + 1 ; } cout << \"-----\u6881\u6570\uff08\u4fee\u6b631\uff09=\" << NB << endl ; //\u6881\u8ddd\uff08\u4fee\u6b631\uff09 beamCount = DT / ( NB - 1 ); cout << \"-----\u6881\u8ddd\uff08\u4fee\u6b631\uff09=\" << beamCount << endl ; //\u6881\u8ddd\u5224\u5b9a >=3.0 if ( beamCount >= mingap ) { beamdis3 = 1 ; } else { beamdis3 = 0 ; } //********************** //**\u6b64\u5faa\u73af\u5224\u5b9a\u6881\u8ddd\u662f\u5426\u5408\u7406 //********************** cout << \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u6881\u8ddd\u662f\u5426\u5408\u7406**\" << endl ; cout << \"-----\u6881\u8ddd\u5224\u5b9a >=3.0=\" << beamdis3 << endl ; //\u6881\u8ddd\u5224\u5b9a <=4.3 if ( beamCount <= maxgap ) { beamdis4_3 = 1 ; } else { beamdis4_3 = 0 ; } cout << \"-----\u6881\u8ddd\u5224\u5b9a <=4.3=\" << beamdis4_3 << endl ; //\u6881\u8ddd\u662f\u5426\u5408\u7406 if ( beamdis3 * beamdis4_3 == 1 ) { beamdisTF = 1 ; } else { beamdisTF = 0 ; } cout << \"-----\u6881\u8ddd\u662f\u5426\u5408\u7406=\" << beamdisTF << endl ; //\u6881\u6570\uff08\u4fee\u6b632\uff09 if ( beamdisTF == 1 ) { NB2 = NB ; } else if ( beamdis3 == 0 ) { if ( beamCount < mingap ) { NB2 = NB ; } else { NB2 = NB - 1 ; } } else if ( beamdis4_3 == 0 ) { NB2 = NB + 1 ; } cout << \"-----\u6881\u6570\uff08\u4fee\u6b632\uff09=\" << NB2 << endl ; //\u6881\u8ddd\uff08\u4fee\u6b632\uff09 DL2 = DT / ( NB2 - 1 ); cout << \"-----\u6881\u8ddd\uff08\u4fee\u6b632\uff09=\" << DL2 << endl ; //********************** //**\u6b64\u5faa\u73af\u5224\u5b9a\u8fb9\u6881\u5916\u4fa7\u5bbd\u662f\u5426\u9700\u8c03\u6574 //********************** //\u6881\u8ddd\u5224\u5b9a >= 3.0 int beamDisCheck2_3 = 0 ; if ( DL2 > mingap ) { beamDisCheck2_3 = 1 ; } else { beamDisCheck2_3 = 0 ; } cout << \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u8fb9\u6881\u5916\u4fa7\u5bbd\u662f\u5426\u9700\u8c03\u6574**\" << endl ; cout << \"-----\u6881\u8ddd\u5224\u5b9a >= 3.0=\" << beamDisCheck2_3 << endl ; //\u6881\u8ddd\u5224\u5b9a <= 4.3 int beamDisCheck2_4_3 = 0 ; if ( DL2 <= maxgap ) { beamDisCheck2_4_3 = 1 ; } else { beamDisCheck2_4_3 = 0 ; } cout << \"-----\u6881\u8ddd\u5224\u5b9a <= 4.3=\" << beamDisCheck2_4_3 << endl ; //\u6881\u8ddd\u662f\u5426\u5408\u7406 int beamdisTF2 = 0 ; if ( beamDisCheck2_3 * beamDisCheck2_4_3 == 1 ) { beamdisTF2 = 1 ; } else { beamdisTF2 = 0 ; } cout << \"-----\u6881\u8ddd\u662f\u5426\u5408\u7406=\" << beamdisTF2 << endl ; if ( beamDisCheck2_3 == 1 ) { DL3 = DL2 ; } else { DL3 = B / NB2 ; } cout << \"-----\u6881\u8ddd\uff08\u4fee\u6b633\uff09=\" << DL3 << endl ; //\u8fb9\u6881\u5916\u4fa7\u5bbd\uff08\u4fee\u6b631\uff09 double DS01 = 0 ; DS01 = ( B - ( 2 * guardrailwidth ) - ( NB2 - 1 ) * DL3 ) / 2 ; cout << \"-----\u8fb9\u6881\u5916\u4fa7\u5bbd\uff08\u4fee\u6b631\uff09=\" << DS01 << endl ; //\u6881\u6570\u6700\u5c0f\u503c\uff08\u4f30\u7b97\uff09\u7684 \u6881\u8ddd } //cout << \"_groupMaxCount \u6570\u7ec4\u7684\u6570\u91cf\u662f\uff1a\" << _groupMaxCount.Size() << endl; //cout << \"_groupMinCount \u6570\u7ec4\u7684\u6570\u91cf\u662f\uff1a\" << _groupMinCount.Size() << endl; cout << \" \\n \" << endl ; cout << \"\u8ba1\u7b97\u7ed3\u675f! \\n \" << endl ; } bool BrdLogical::sortFun ( const int & p1 , const int & p2 ) { return p1 < p2 ; } int BrdLogical::GetSmallNumber ( vector < int > dArr ) { vector < int > dArrVec ; for ( int i = 0 ; i < dArr . size (); i ++ ) { int dOne = dArr [ i ]; for ( int j = i + 1 ; j < dArr . size (); j ++ ) { if ( dOne == dArr [ j ]) { dArrVec . push_back ( dOne ); cout << \"ONE:\" << dOne << endl ; } } } sort ( dArrVec . begin (), dArrVec . end (), sortFun ); if ( dArrVec . size () <= 0 ) { return 0 ; } cout << dArrVec [ 0 ] << endl ; return dArrVec [ 0 ]; }","title":"\u6881\u6570\u91cf\u8ba1\u7b97\u5668"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E5%9F%BA%E4%BA%8E3DEXPERIENCE%E5%B0%8F%E7%AE%B1%E6%A2%81%E5%8F%AA%E8%83%BD%E5%BB%BA%E6%A8%A1%E7%A0%94%E7%A9%B6/","text":"\u57fa\u4e8e3DEXPERIENCE\u5c0f\u7bb1\u6881\u53ea\u80fd\u5efa\u6a21\u7814\u7a76 \u57fa\u4e8e3DEXPERIENCE\u5c0f\u7bb1\u6881\u53ea\u80fd\u5efa\u6a21\u7814\u7a76 \u9876\u90e8\u94a2\u7b4b\u521b\u5efa\u65b9\u6cd5 \u8fde\u7eed\u6881\u4e2d\u8de8\u6881 A . 1 \u5835\u5934\u677f\u4e2d\u5fc3\u8ddd\u4e2d\u58a9\u5206\u5b54\u7ebf\u987a\u6865\u5411\u957f _625mm \u4e2d\u652f\u70b9\u6a2a\u6881\u73b0\u6d47\u6bb5\u7eb5\u6865\u5411\u957f ( \u9876\u7f18 ) _406mm \u5835\u5934\u677f\u539a _80mm \u4e2d\u652f\u70b9\u6a2a\u6881\u539a / 2 _350mm \u4e2d\u652f\u70b9\u6a2a\u6881\u9ad8 [ \u5916\u90e8 ] _1380mm \u6881\u9ad8 _1600mm \u9884\u5236\u6881\u5728\u4e2d\u652f\u70b9\u6a2a\u6881\u73b0\u6d47\u6bb5\u5916\u51f8\u7684\u7ad6\u5411\u9ad8 _1200mm \u4e2d\u652f\u70b9\u6a2a\u6881\u73b0\u6d47\u6bb5\u7eb5\u6865\u5411\u957f ( \u5e95\u7f18 ) _425mm \u5e95\u677f\u548c\u8179\u677f\u52a0\u539a\u6bb5\u987a\u6865\u5411\u957f _825mm \u5e95\u677f\u548c\u8179\u677f\u53d8\u539a\u6bb5\u987a\u6865\u5411\u957f _4000mm \u8de8\u5f84 ( \u5206\u5b54\u7ebf\u4e4b\u95f4\u7684\u51c0\u8ddd )/ 2 _31473 . 384 mm \u8de8\u4e2d\u9694\u677f\u539a / 2 _150mm \u8de8\u4e2d\u9694\u677f\u9ad8 _1380mm \u4e2d\u6881\u9884\u5236\u603b\u5bbd _3276mm \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u533a\u5bbd\u5ea6 _2676mm \u9876\u677f\u5916\u627f\u6258\u6c34\u5e73\u5411\u957f _250mm \u9876\u677f\u5916\u4fa7\u539a _200mm \u9876\u677f\u627f\u6258\u7ad6\u5411\u9ad8 _50mm \u9876\u677f\u5185\u627f\u6258\u6c34\u5e73\u5411\u957f _180mm \u9876\u677f\u5185\u4fa7\u539a _200mm \u8179\u677f\u52a0\u539a _320mm \u5e95\u677f\u52a0\u539a _300mm \u5e95\u677f\u8fb9\u7f18\u5012\u89d2\u534a\u5f84 _50mm \u8179\u677f\u539a _190mm \u5e95\u677f\u539a _200mm \u5e95\u677f\u603b\u5bbd _1500mm \u652f\u70b9\u6a2a\u6881\u53ca\u9694\u677f\u4eba\u5b54\u4e2d\u5fc3\u81f3\u5e95\u677f\u5e95\u7f18\u9ad8 _800mm \u652f\u70b9\u6a2a\u6881\u53ca\u9694\u677f\u4eba\u5b54\u76f4\u5f84 _700mm DIM_1_L_1000mm DIM_1_R_1000mm DIM_2_L_1000mm DIM_2_R_1000mm \u4e2d\u652f\u70b9\u9884\u5e94\u529b\u5f2f\u8d77\u89d2\u5ea6 _5deg SIDEBEAM_LEFT_CHECK_1 SIDEBEAM_RIGHT_CHECK_1 \u5e95\u677f\u6cc4\u6c34\u5b54\u76f4\u5f84 _80mm \u8fb9\u652f\u5ea7\u578b\u53f7 _GYZF4 - 375 X77 \u4e2d\u652f\u5ea7\u578b\u53f7 _GYZ - 375 X77 \u8fb9\u652f\u5ea7\u4e2a\u6570 _2 \u4e2d\u652f\u5ea7\u4e2a\u6570 _2 \u5c0f\u7bb1\u6881\u65bd\u5de5\u65b9\u6cd5 _ \u9884\u5236 \u5c0f\u7bb1\u6881\u6df7\u51dd\u571f\u6750\u6599 _C50 \u9884\u5236\u6df7\u51dd\u571f\u4f53\u79ef _56 . 747 m3 \u73b0\u6d47\u6df7\u51dd\u571f\u4f53\u79ef _0m3 \u6df7\u51dd\u571f\u603b\u4f53\u79ef _56 . 747 m3 \u94a2\u7b4b\u603b\u91cd\u91cf _0kg \u94a2\u7ede\u7ebf\u603b\u91cd\u91cf _0kg \u6df7\u51dd\u571f\u4f53\u79ef - C15_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C20_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C25_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C30_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C35_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C40_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C45_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C50_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C55_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C60_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C65_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C70_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C80_0m3 ``` cs ``` cs Let A ( AxisSystem ) Let pt , pt1 ( Point ) Let li1 , li2 , li3 ( Line ) Let pl ( Plane ) Let ptlist , oplist ( List ) Let i , j ( Integer ) Let mybox ( openBodyFeature ) Let L ( LENGTH ) Let na ( String ) let shapeContainingPoint ( PartFeature ) shapeContainingPoint = GetPLMOwner ( My_Curve ) oplist = shapeContainingPoint . Children set na = My_Curve . Name set mybox = new ( \"openBodyFeature\" , na + \"_\u5b9a\u4f4d\u8f74\u7cfb\" , oplist [ 1 ]) set pl = plane ( point ( 0 mm , 0 mm , 0 mm ), point ( 1 mm , 0 mm , 0 mm ), point ( 0 mm , 1 mm , 0 mm )) L = length ( My_Curve ) j = floor ( L / D ) i = 1 for i while i <= j { set pt = pointoncurve ( My_Curve , NULL , D * i , true ) set pt1 = project ( pt , pl , direction ( pl )) set li1 = linetangent ( My_Curve , pt , 0 mm , 20 mm , true ) set li2 = project ( li1 , pl , direction ( pl )) set li3 = lineangle ( li2 , pl , pt1 , true , 20 mm , 0 mm , 90d eg , true ) A = new ( \"AxisSystem\" , \"\u8f74\u7cfb_\" + i , mybox ) A = axisSystem ( pt , direction ( li2 ), direction ( li3 ), direction ( pl )) } shapeContainingPoint . Update () \u8fde\u7eed\u6881\u6574\u4f53\u5b9e\u4f8b\u5316\u903b\u8f91\u4ee3\u7801 //BeamProduct:ProductOccurrence,PierProduct:ProductOccurrence,AXIS_LIST:list,ROAD_CENTER:Curve,ROAD_PLANER:Curve,EXECL:String /* Action created by 86156 2019/6/5 */ let i ( integer ) let F1 , F2 ( DocumentTemplate ) let destination1 , destination2 ( ProductOccurrence ) destination1 = BeamProduct destination2 = PierProduct let axisList ( list ) axisList = AXIS_LIST let xlsheet ( DTSheetType ) let xls ( string ) xls = EXCEL set xlsheet = CreateSheet ( xls ) let nb ( Integer ) nb = xlsheet . RowsNb Notify ( \"\u4e2a\u6570:\" , nb ) //\u58f0\u660e\u5168\u5c40\u53d8\u91cf let L1length ( length ) let R1length ( length ) let L2length ( length ) let R2length ( length ) let PierHeight ( length ) let BeamCount ( integer ) let GapStr ( string ) let DirStr ( string ) // ***************************** // ProgressBar creation // ***************************** CreateProgressBar ( \"ProgressBar Name\" ) i = 1 for i while i <= axisList . Size () { ProgressBarSetValue ( 100 * i / axisList . Size ()) ProgressBarSetText ( \" \uff1a\u5df2\u5b8c\u6210 \u5171\" + floor ( axisList . Size ())) //\u6570\u636e\u5904\u7406 //\u83b7\u5f97\u6881\u6570 set BeamCount = xlsheet -> CellAsReal ( 5 + i , 32 ) Notify ( \"\u6881\u6570\u91cf\uff1a\" , BeamCount ) if ( i > 1 ) { //\u83b7\u5f97\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L1length = xlsheet -> CellAsReal (( 5 +( i - 1 )), 24 )* 1 m Notif y ( \"\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L1length ) //\u83b7\u5f97\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R1length = xlsheet -> CellAsReal (( 5 +( i - 1 )), 25 )* 1 m Notif y ( \"\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\" , R1length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L2length = xlsheet -> CellAsReal ( 5 + i , 24 )* 1 m Notif y ( \"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L2length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R2length = xlsheet -> CellAsReal ( 5 + i , 25 )* 1 m Notif y ( \"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\" , R2length ) //\u83b7\u5f97\u8fb9\u8de8 GapStr = xlsheet -> CellAsString (( 5 +( i - 1 )), 33 ) Notif y ( \"\u83b7\u5f97\u8fb9\u8de8:\" , GapStr ) //\u83b7\u5f97\u4f4d\u7f6e\u8bbe\u5b9a DirStr = xlsheet -> CellAsString (( 5 +( i - 1 )), 34 ) Notif y ( \"\u4f4d\u7f6e\u8bbe\u5b9a:\" , DirStr ) //\u5b9e\u4f8b\u5316\u4e0a\u90e8\u6865\u6881 F1 = InstantiateTemplate ( \"Re1\" , destination1 . Instance ) F1 -> SetA ttributeObject ( \"P1\" , axisList . GetItem ( i - 1 )) F1 -> SetA ttributeObject ( \"P2\" , axisList . GetItem ( i )) F1 -> SetA ttributeObject ( \"ROAD_CENTER\" , ROAD_CENTER ) F1 -> SetAttributeObject ( \"ROAD_PLANER\" , ROAD_PLANER ) //\u4fee\u6b63\u6570\u636e F1 -> SetAttributeDimension ( \"P1_LW\" , L1length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P1_RW\" , R1length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P2_LW\" , L2length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P2_RW\" , R2length , \"LENGTH\" ) F1 -> SetAttributeInteger ( \"BEAM_COUNT\" , BeamCount ) F1 -> SetAttributeString ( \"GapCheck\" , GapStr ) F1 -> SetAttributeString ( \"DirCheck\" , DirStr ) //F1->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F1 ) } if ( i > 1 ) and ( i < axisList . Size ()) { //\u83b7\u5f97\u6865\u58a9\u9ad8\u5ea6 PierHeight = xlsheet -> CellAsReal ( 5 + i , 27 )* 1 m Notify ( \"PierHeight:\" , PierHeight ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L2length = xlsheet -> CellAsReal ( 5 + i , 24 )* 1 m Notify ( \"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L2length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R2length = xlsheet -> CellAsReal ( 5 + i , 25 )* 1 m Notify ( \"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\" , R2length ) //\u5b9e\u4f8b\u5316\u4e0b\u90e8\u6865\u58a9 F2 = InstantiateTemplate ( \"P2\" , destination2 . Instance ) F2 -> SetAttributeObject ( \"AXIS\" , axisList . GetItem ( i )) //\u4fee\u6b63\u6570\u636e F2 -> SetAttributeDimension ( \"PIER_HEIGHT\" , PierHeight , \"LENGTH\" ) F2 -> SetAttributeDimension ( \"WIDTH_L\" , L2length - 824 mm , \"LENGTH\" ) F2 -> SetAttributeDimension ( \"WIDTH_R\" , R2length - 824 mm , \"LENGTH\" ) //F2->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F2 ) } } \u603b\u4f53\u6570\u636e\u7684\u5bfc\u51fa \u5728\u603b\u4f53 Excel \u8868\u4e2d\u8f93\u51fa\u6570\u636e\uff1a \u2022 \u76d6\u6881\u4e2d\u90e8\u9876\u6807\u9ad8 \u2022 \u5728\u6a21\u677f\u4e2d\u7684 EXPORT_DIM \u4e2d\uff0c\u83b7\u53d6 \u7b2c\u4e00\u5143\u7d20\uff08 1 \uff09\uff0c\u6d4b\u91cf\u8f93\u5165\u5e73\u9762\u4e0e\u8be5\u70b9\u7684\u8ddd \u79bb\uff0c\u5199\u5165 Excel \u7684 Ceil ( 7 , 57 ) \u5217\uff1b \u2022 \u58a9\u9876\u6807\u9ad8 \u2022 \u5728\u6a21\u677f\u4e2d\u7684 EXPORT_DIM \u4e2d\uff0c\u83b7\u53d6 \u7b2c 2 \u5143\u7d20\uff08 2 \uff09\uff0c\u6d4b\u91cf\u8f93\u5165\u5e73\u9762\u4e0e\u8be5\u70b9\u7684\u8ddd \u79bb\uff0c\u5199\u5165 Excel \u7684 Ceil ( 7 , 58 ) \u5217\uff1b \u2022 \u58a9\u9ad8 \u2022 \u5728\u6a21\u677f\u4e2d\u7684 EXPORT_DIM \u4e2d\uff0c\u83b7\u53d6 \u7b2c 2 , 3 \u5143\u7d20\uff08 2 , 3 \uff09\uff0c\u6d4b\u91cf\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u8ddd \u79bb\uff0c\u5199\u5165 Excel \u7684 Ceil ( 7 , 59 ) \u5217\uff1b \u2022 \u627f\u53f0\u9876\u90e8\u6807\u9ad8 \u2022 \u5728\u6a21\u677f\u4e2d\u7684 EXPORT_DIM \u4e2d\uff0c\u83b7\u53d6 \u7b2c 3 \u5143\u7d20\uff08 3 \uff09\uff0c\u6d4b\u91cf\u8f93\u5165\u5e73\u9762\u4e0e\u8be5\u70b9\u7684\u8ddd \u79bb\uff0c\u5199\u5165 Excel \u7684 Ceil ( 7 , 60 ) \u5217\uff1b \u2022 \u627f\u53f0\u539a \u2022 \u5728\u6a21\u677f\u4e2d\u7684 EXPORT_DIM \u4e2d\uff0c\u83b7\u53d6 \u7b2c 3 \uff0c 4 \u5143\u7d20\uff08 3 \uff0c 4 \uff09\uff0c\u6d4b\u91cf\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4 \u7684\u8ddd\u79bb\uff0c\u5199\u5165 Excel \u7684 Ceil ( 7 , 61 ) \u5217\uff1b \u2022 \u6869\u9876\u6807\u9ad8 \u2022 \u5728\u6a21\u677f\u4e2d\u7684 EXPORT_DIM \u4e2d\uff0c\u83b7\u53d6 \u7b2c 4 \u5143\u7d20\uff08 4 \uff09\uff0c\u6d4b\u91cf\u8f93\u5165\u5e73\u9762\u4e0e\u8be5\u5143\u7d20\u7684 \u8ddd\u79bb\uff0c\u5199\u5165 Excel \u7684 Ceil ( 7 , 62 ) \u5217\uff1b \u2022 \u2022 \u6869\u5e95\u6807\u9ad8 \u2022 \u5728\u6a21\u677f\u4e2d\u7684 EXPORT_DIM \u4e2d\uff0c\u83b7\u53d6 \u7b2c 5 \u5143\u7d20\uff08 5 \uff09\uff0c\u6d4b\u91cf\u8f93\u5165\u5e73\u9762\u4e0e\u8be5\u5143\u7d20\u7684 \u8ddd\u79bb\uff0c\u5199\u5165 Excel \u7684 Ceil ( 7 , 63 ) \u5217\uff1b Location : VPMReference , myplane : Plane -------------------------- /* \u5de5\u4f5c\u6307\u4ee4 \u521b\u5efa\u8005 liudi 2020/7/12 */ //\u96f7\u533alet i,j,k(Integer ) let myshape , mypart ( VPMInstance ) let shapepoint , shapepoint1 ( PartFeature ) let shapelist , partlist , boxlist , boxlist1 , pointlist , planelist ( let DT ( DTSheetType ) let myname , sheetname , boxname , ptname ( String ) let box , onebox ( OpenBodyFeature ) let pt , pt1 , pt2 , pt3 ( Point ) let L , x1 , x2 , x3 , y1 , y2 , y3 , z1 , z2 , z3 ( LENGTH ) let F ( Feature ) let pla ( Plane ) shapepoint = GetPLMOwner ( myplane ) shapepoint1 = shapepoint . Find ( \"PartFeature\" , \"\" , true ) SetWorkingContext ( shapepoint1 ) onebox = new ( \"OpenBodyFeature\" , \"000\" , shapepoint1 ) pt1 = new ( \"Point\" , \"1\" , onebox ) pt1 = pointonplane ( myplane , point ( 0 m , 0 m , 0 m ), 1 m , 10 m ) pt2 = new ( \"Point\" , \"2\" , onebox ) pt2 = pointonplane ( myplane , point ( 0 m , 0 m , 0 m ), 42 m , 35 m ) pt3 = new ( \"Point\" , \"3\" , onebox ) pt3 = pointonplane ( myplane , point ( 0 m , 0 m , 0 m ), 25 m , 18 m ) shapepoint1 . Update () x1 = pt1 . coord ( 1 ) y1 = pt1 . coord ( 2 ) z1 = pt1 . coord ( 3 ) x2 = pt2 . coord ( 1 ) y2 = pt2 . coord ( 2 ) z2 = pt2 . coord ( 3 ) x3 = pt3 . coord ( 1 ) y3 = pt3 . coord ( 2 ) z3 = pt3 . coord ( 3 ) onebox . Delete () set DT = CreateSheet ( \"*The file path*\\output_point_dis.sheetname=\" \u8ddd\u79bb \" partlist = Location . Query ( \"VPMInstance\" , NULL ) shapelist = Location . Query ( \"PartFeature\" , NULL ) i = 1 for i while i <= partlist . Size () { mypart = partlist [ i ] myname = mypart . Name DT -> SetCell ( 2 * i - 1 , 1 , myname ) DT -> SetCell ( 2 * i , 1 , sheetname ) myshape = shapelist [ i ] boxlist = myshape . Children boxlist1 = boxlist . Filter ( \"OpenBodyFeature\" , \"OpenBodyFeature\" , \"x.Name == \\\"EXPORT_DIM\\\"\" ) if boxlist1 . Size ()== 0 { break } else { SetWorkingContext ( myshape box = boxlist1 [ 1 ] pla = new ( \"Plane\" , \"000\" , box ) pla = plane ( point ( x1 , y1 , z1 ), point ( pointlist = box -> Query ( \"Point\" , k = pointlist . Size () j = 1 for j while j <= k { pt = pointlist [ j ] ptname = pt . Name DT -> SetCell ( 2 * i - L = distance ( pt , pla ) DT -> SetCell ( 2 * i , j + j = j + 1 } pla . Delete () } i = i + 1 } //\u533a\u6bd4\u8f83\u591a\uff0c\u505a\u7684\u8f83\u590d\u6742 planelist ( List ) true ) shapepoint1 ) 10 m ) 35 m ) 18 m ) dis . xlsx \") myshape ) point ( x2 , y2 , z2 ), point ( x3 , y3 , z3 )) Point \",NULL) Name () i - 1 , j + 1 , ptname ) pla ) j + 1 , L )","title":"\u57fa\u4e8e3DEXPERIENCE\u5c0f\u7bb1\u6881\u53ea\u80fd\u5efa\u6a21\u7814\u7a76"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E5%9F%BA%E4%BA%8E3DEXPERIENCE%E5%B0%8F%E7%AE%B1%E6%A2%81%E5%8F%AA%E8%83%BD%E5%BB%BA%E6%A8%A1%E7%A0%94%E7%A9%B6/#3dexperience","text":"","title":"\u57fa\u4e8e3DEXPERIENCE\u5c0f\u7bb1\u6881\u53ea\u80fd\u5efa\u6a21\u7814\u7a76"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E5%9F%BA%E4%BA%8E3DEXPERIENCE%E5%B0%8F%E7%AE%B1%E6%A2%81%E5%8F%AA%E8%83%BD%E5%BB%BA%E6%A8%A1%E7%A0%94%E7%A9%B6/#3dexperience_1","text":"","title":"\u57fa\u4e8e3DEXPERIENCE\u5c0f\u7bb1\u6881\u53ea\u80fd\u5efa\u6a21\u7814\u7a76"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E5%9F%BA%E4%BA%8E3DEXPERIENCE%E5%B0%8F%E7%AE%B1%E6%A2%81%E5%8F%AA%E8%83%BD%E5%BB%BA%E6%A8%A1%E7%A0%94%E7%A9%B6/#_1","text":"\u8fde\u7eed\u6881\u4e2d\u8de8\u6881 A . 1 \u5835\u5934\u677f\u4e2d\u5fc3\u8ddd\u4e2d\u58a9\u5206\u5b54\u7ebf\u987a\u6865\u5411\u957f _625mm \u4e2d\u652f\u70b9\u6a2a\u6881\u73b0\u6d47\u6bb5\u7eb5\u6865\u5411\u957f ( \u9876\u7f18 ) _406mm \u5835\u5934\u677f\u539a _80mm \u4e2d\u652f\u70b9\u6a2a\u6881\u539a / 2 _350mm \u4e2d\u652f\u70b9\u6a2a\u6881\u9ad8 [ \u5916\u90e8 ] _1380mm \u6881\u9ad8 _1600mm \u9884\u5236\u6881\u5728\u4e2d\u652f\u70b9\u6a2a\u6881\u73b0\u6d47\u6bb5\u5916\u51f8\u7684\u7ad6\u5411\u9ad8 _1200mm \u4e2d\u652f\u70b9\u6a2a\u6881\u73b0\u6d47\u6bb5\u7eb5\u6865\u5411\u957f ( \u5e95\u7f18 ) _425mm \u5e95\u677f\u548c\u8179\u677f\u52a0\u539a\u6bb5\u987a\u6865\u5411\u957f _825mm \u5e95\u677f\u548c\u8179\u677f\u53d8\u539a\u6bb5\u987a\u6865\u5411\u957f _4000mm \u8de8\u5f84 ( \u5206\u5b54\u7ebf\u4e4b\u95f4\u7684\u51c0\u8ddd )/ 2 _31473 . 384 mm \u8de8\u4e2d\u9694\u677f\u539a / 2 _150mm \u8de8\u4e2d\u9694\u677f\u9ad8 _1380mm \u4e2d\u6881\u9884\u5236\u603b\u5bbd _3276mm \u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u533a\u5bbd\u5ea6 _2676mm \u9876\u677f\u5916\u627f\u6258\u6c34\u5e73\u5411\u957f _250mm \u9876\u677f\u5916\u4fa7\u539a _200mm \u9876\u677f\u627f\u6258\u7ad6\u5411\u9ad8 _50mm \u9876\u677f\u5185\u627f\u6258\u6c34\u5e73\u5411\u957f _180mm \u9876\u677f\u5185\u4fa7\u539a _200mm \u8179\u677f\u52a0\u539a _320mm \u5e95\u677f\u52a0\u539a _300mm \u5e95\u677f\u8fb9\u7f18\u5012\u89d2\u534a\u5f84 _50mm \u8179\u677f\u539a _190mm \u5e95\u677f\u539a _200mm \u5e95\u677f\u603b\u5bbd _1500mm \u652f\u70b9\u6a2a\u6881\u53ca\u9694\u677f\u4eba\u5b54\u4e2d\u5fc3\u81f3\u5e95\u677f\u5e95\u7f18\u9ad8 _800mm \u652f\u70b9\u6a2a\u6881\u53ca\u9694\u677f\u4eba\u5b54\u76f4\u5f84 _700mm DIM_1_L_1000mm DIM_1_R_1000mm DIM_2_L_1000mm DIM_2_R_1000mm \u4e2d\u652f\u70b9\u9884\u5e94\u529b\u5f2f\u8d77\u89d2\u5ea6 _5deg SIDEBEAM_LEFT_CHECK_1 SIDEBEAM_RIGHT_CHECK_1 \u5e95\u677f\u6cc4\u6c34\u5b54\u76f4\u5f84 _80mm \u8fb9\u652f\u5ea7\u578b\u53f7 _GYZF4 - 375 X77 \u4e2d\u652f\u5ea7\u578b\u53f7 _GYZ - 375 X77 \u8fb9\u652f\u5ea7\u4e2a\u6570 _2 \u4e2d\u652f\u5ea7\u4e2a\u6570 _2 \u5c0f\u7bb1\u6881\u65bd\u5de5\u65b9\u6cd5 _ \u9884\u5236 \u5c0f\u7bb1\u6881\u6df7\u51dd\u571f\u6750\u6599 _C50 \u9884\u5236\u6df7\u51dd\u571f\u4f53\u79ef _56 . 747 m3 \u73b0\u6d47\u6df7\u51dd\u571f\u4f53\u79ef _0m3 \u6df7\u51dd\u571f\u603b\u4f53\u79ef _56 . 747 m3 \u94a2\u7b4b\u603b\u91cd\u91cf _0kg \u94a2\u7ede\u7ebf\u603b\u91cd\u91cf _0kg \u6df7\u51dd\u571f\u4f53\u79ef - C15_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C20_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C25_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C30_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C35_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C40_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C45_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C50_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C55_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C60_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C65_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C70_0m3 \u6df7\u51dd\u571f\u4f53\u79ef - C80_0m3 ``` cs ``` cs Let A ( AxisSystem ) Let pt , pt1 ( Point ) Let li1 , li2 , li3 ( Line ) Let pl ( Plane ) Let ptlist , oplist ( List ) Let i , j ( Integer ) Let mybox ( openBodyFeature ) Let L ( LENGTH ) Let na ( String ) let shapeContainingPoint ( PartFeature ) shapeContainingPoint = GetPLMOwner ( My_Curve ) oplist = shapeContainingPoint . Children set na = My_Curve . Name set mybox = new ( \"openBodyFeature\" , na + \"_\u5b9a\u4f4d\u8f74\u7cfb\" , oplist [ 1 ]) set pl = plane ( point ( 0 mm , 0 mm , 0 mm ), point ( 1 mm , 0 mm , 0 mm ), point ( 0 mm , 1 mm , 0 mm )) L = length ( My_Curve ) j = floor ( L / D ) i = 1 for i while i <= j { set pt = pointoncurve ( My_Curve , NULL , D * i , true ) set pt1 = project ( pt , pl , direction ( pl )) set li1 = linetangent ( My_Curve , pt , 0 mm , 20 mm , true ) set li2 = project ( li1 , pl , direction ( pl )) set li3 = lineangle ( li2 , pl , pt1 , true , 20 mm , 0 mm , 90d eg , true ) A = new ( \"AxisSystem\" , \"\u8f74\u7cfb_\" + i , mybox ) A = axisSystem ( pt , direction ( li2 ), direction ( li3 ), direction ( pl )) } shapeContainingPoint . Update () \u8fde\u7eed\u6881\u6574\u4f53\u5b9e\u4f8b\u5316\u903b\u8f91\u4ee3\u7801 //BeamProduct:ProductOccurrence,PierProduct:ProductOccurrence,AXIS_LIST:list,ROAD_CENTER:Curve,ROAD_PLANER:Curve,EXECL:String /* Action created by 86156 2019/6/5 */ let i ( integer ) let F1 , F2 ( DocumentTemplate ) let destination1 , destination2 ( ProductOccurrence ) destination1 = BeamProduct destination2 = PierProduct let axisList ( list ) axisList = AXIS_LIST let xlsheet ( DTSheetType ) let xls ( string ) xls = EXCEL set xlsheet = CreateSheet ( xls ) let nb ( Integer ) nb = xlsheet . RowsNb Notify ( \"\u4e2a\u6570:\" , nb ) //\u58f0\u660e\u5168\u5c40\u53d8\u91cf let L1length ( length ) let R1length ( length ) let L2length ( length ) let R2length ( length ) let PierHeight ( length ) let BeamCount ( integer ) let GapStr ( string ) let DirStr ( string ) // ***************************** // ProgressBar creation // ***************************** CreateProgressBar ( \"ProgressBar Name\" ) i = 1 for i while i <= axisList . Size () { ProgressBarSetValue ( 100 * i / axisList . Size ()) ProgressBarSetText ( \" \uff1a\u5df2\u5b8c\u6210 \u5171\" + floor ( axisList . Size ())) //\u6570\u636e\u5904\u7406 //\u83b7\u5f97\u6881\u6570 set BeamCount = xlsheet -> CellAsReal ( 5 + i , 32 ) Notify ( \"\u6881\u6570\u91cf\uff1a\" , BeamCount ) if ( i > 1 ) { //\u83b7\u5f97\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L1length = xlsheet -> CellAsReal (( 5 +( i - 1 )), 24 )* 1 m Notif y ( \"\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L1length ) //\u83b7\u5f97\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R1length = xlsheet -> CellAsReal (( 5 +( i - 1 )), 25 )* 1 m Notif y ( \"\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\" , R1length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L2length = xlsheet -> CellAsReal ( 5 + i , 24 )* 1 m Notif y ( \"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L2length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R2length = xlsheet -> CellAsReal ( 5 + i , 25 )* 1 m Notif y ( \"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\" , R2length ) //\u83b7\u5f97\u8fb9\u8de8 GapStr = xlsheet -> CellAsString (( 5 +( i - 1 )), 33 ) Notif y ( \"\u83b7\u5f97\u8fb9\u8de8:\" , GapStr ) //\u83b7\u5f97\u4f4d\u7f6e\u8bbe\u5b9a DirStr = xlsheet -> CellAsString (( 5 +( i - 1 )), 34 ) Notif y ( \"\u4f4d\u7f6e\u8bbe\u5b9a:\" , DirStr ) //\u5b9e\u4f8b\u5316\u4e0a\u90e8\u6865\u6881 F1 = InstantiateTemplate ( \"Re1\" , destination1 . Instance ) F1 -> SetA ttributeObject ( \"P1\" , axisList . GetItem ( i - 1 )) F1 -> SetA ttributeObject ( \"P2\" , axisList . GetItem ( i )) F1 -> SetA ttributeObject ( \"ROAD_CENTER\" , ROAD_CENTER ) F1 -> SetAttributeObject ( \"ROAD_PLANER\" , ROAD_PLANER ) //\u4fee\u6b63\u6570\u636e F1 -> SetAttributeDimension ( \"P1_LW\" , L1length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P1_RW\" , R1length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P2_LW\" , L2length , \"LENGTH\" ) F1 -> SetAttributeDimension ( \"P2_RW\" , R2length , \"LENGTH\" ) F1 -> SetAttributeInteger ( \"BEAM_COUNT\" , BeamCount ) F1 -> SetAttributeString ( \"GapCheck\" , GapStr ) F1 -> SetAttributeString ( \"DirCheck\" , DirStr ) //F1->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F1 ) } if ( i > 1 ) and ( i < axisList . Size ()) { //\u83b7\u5f97\u6865\u58a9\u9ad8\u5ea6 PierHeight = xlsheet -> CellAsReal ( 5 + i , 27 )* 1 m Notify ( \"PierHeight:\" , PierHeight ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6 L2length = xlsheet -> CellAsReal ( 5 + i , 24 )* 1 m Notify ( \"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\" , L2length ) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 R2length = xlsheet -> CellAsReal ( 5 + i , 25 )* 1 m Notify ( \"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\" , R2length ) //\u5b9e\u4f8b\u5316\u4e0b\u90e8\u6865\u58a9 F2 = InstantiateTemplate ( \"P2\" , destination2 . Instance ) F2 -> SetAttributeObject ( \"AXIS\" , axisList . GetItem ( i )) //\u4fee\u6b63\u6570\u636e F2 -> SetAttributeDimension ( \"PIER_HEIGHT\" , PierHeight , \"LENGTH\" ) F2 -> SetAttributeDimension ( \"WIDTH_L\" , L2length - 824 mm , \"LENGTH\" ) F2 -> SetAttributeDimension ( \"WIDTH_R\" , R2length - 824 mm , \"LENGTH\" ) //F2->SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) ) EndModifyTemplate ( F2 ) } } \u603b\u4f53\u6570\u636e\u7684\u5bfc\u51fa \u5728\u603b\u4f53 Excel \u8868\u4e2d\u8f93\u51fa\u6570\u636e\uff1a \u2022 \u76d6\u6881\u4e2d\u90e8\u9876\u6807\u9ad8 \u2022 \u5728\u6a21\u677f\u4e2d\u7684 EXPORT_DIM \u4e2d\uff0c\u83b7\u53d6 \u7b2c\u4e00\u5143\u7d20\uff08 1 \uff09\uff0c\u6d4b\u91cf\u8f93\u5165\u5e73\u9762\u4e0e\u8be5\u70b9\u7684\u8ddd \u79bb\uff0c\u5199\u5165 Excel \u7684 Ceil ( 7 , 57 ) \u5217\uff1b \u2022 \u58a9\u9876\u6807\u9ad8 \u2022 \u5728\u6a21\u677f\u4e2d\u7684 EXPORT_DIM \u4e2d\uff0c\u83b7\u53d6 \u7b2c 2 \u5143\u7d20\uff08 2 \uff09\uff0c\u6d4b\u91cf\u8f93\u5165\u5e73\u9762\u4e0e\u8be5\u70b9\u7684\u8ddd \u79bb\uff0c\u5199\u5165 Excel \u7684 Ceil ( 7 , 58 ) \u5217\uff1b \u2022 \u58a9\u9ad8 \u2022 \u5728\u6a21\u677f\u4e2d\u7684 EXPORT_DIM \u4e2d\uff0c\u83b7\u53d6 \u7b2c 2 , 3 \u5143\u7d20\uff08 2 , 3 \uff09\uff0c\u6d4b\u91cf\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u8ddd \u79bb\uff0c\u5199\u5165 Excel \u7684 Ceil ( 7 , 59 ) \u5217\uff1b \u2022 \u627f\u53f0\u9876\u90e8\u6807\u9ad8 \u2022 \u5728\u6a21\u677f\u4e2d\u7684 EXPORT_DIM \u4e2d\uff0c\u83b7\u53d6 \u7b2c 3 \u5143\u7d20\uff08 3 \uff09\uff0c\u6d4b\u91cf\u8f93\u5165\u5e73\u9762\u4e0e\u8be5\u70b9\u7684\u8ddd \u79bb\uff0c\u5199\u5165 Excel \u7684 Ceil ( 7 , 60 ) \u5217\uff1b \u2022 \u627f\u53f0\u539a \u2022 \u5728\u6a21\u677f\u4e2d\u7684 EXPORT_DIM \u4e2d\uff0c\u83b7\u53d6 \u7b2c 3 \uff0c 4 \u5143\u7d20\uff08 3 \uff0c 4 \uff09\uff0c\u6d4b\u91cf\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4 \u7684\u8ddd\u79bb\uff0c\u5199\u5165 Excel \u7684 Ceil ( 7 , 61 ) \u5217\uff1b \u2022 \u6869\u9876\u6807\u9ad8 \u2022 \u5728\u6a21\u677f\u4e2d\u7684 EXPORT_DIM \u4e2d\uff0c\u83b7\u53d6 \u7b2c 4 \u5143\u7d20\uff08 4 \uff09\uff0c\u6d4b\u91cf\u8f93\u5165\u5e73\u9762\u4e0e\u8be5\u5143\u7d20\u7684 \u8ddd\u79bb\uff0c\u5199\u5165 Excel \u7684 Ceil ( 7 , 62 ) \u5217\uff1b \u2022 \u2022 \u6869\u5e95\u6807\u9ad8 \u2022 \u5728\u6a21\u677f\u4e2d\u7684 EXPORT_DIM \u4e2d\uff0c\u83b7\u53d6 \u7b2c 5 \u5143\u7d20\uff08 5 \uff09\uff0c\u6d4b\u91cf\u8f93\u5165\u5e73\u9762\u4e0e\u8be5\u5143\u7d20\u7684 \u8ddd\u79bb\uff0c\u5199\u5165 Excel \u7684 Ceil ( 7 , 63 ) \u5217\uff1b Location : VPMReference , myplane : Plane -------------------------- /* \u5de5\u4f5c\u6307\u4ee4 \u521b\u5efa\u8005 liudi 2020/7/12 */ //\u96f7\u533alet i,j,k(Integer ) let myshape , mypart ( VPMInstance ) let shapepoint , shapepoint1 ( PartFeature ) let shapelist , partlist , boxlist , boxlist1 , pointlist , planelist ( let DT ( DTSheetType ) let myname , sheetname , boxname , ptname ( String ) let box , onebox ( OpenBodyFeature ) let pt , pt1 , pt2 , pt3 ( Point ) let L , x1 , x2 , x3 , y1 , y2 , y3 , z1 , z2 , z3 ( LENGTH ) let F ( Feature ) let pla ( Plane ) shapepoint = GetPLMOwner ( myplane ) shapepoint1 = shapepoint . Find ( \"PartFeature\" , \"\" , true ) SetWorkingContext ( shapepoint1 ) onebox = new ( \"OpenBodyFeature\" , \"000\" , shapepoint1 ) pt1 = new ( \"Point\" , \"1\" , onebox ) pt1 = pointonplane ( myplane , point ( 0 m , 0 m , 0 m ), 1 m , 10 m ) pt2 = new ( \"Point\" , \"2\" , onebox ) pt2 = pointonplane ( myplane , point ( 0 m , 0 m , 0 m ), 42 m , 35 m ) pt3 = new ( \"Point\" , \"3\" , onebox ) pt3 = pointonplane ( myplane , point ( 0 m , 0 m , 0 m ), 25 m , 18 m ) shapepoint1 . Update () x1 = pt1 . coord ( 1 ) y1 = pt1 . coord ( 2 ) z1 = pt1 . coord ( 3 ) x2 = pt2 . coord ( 1 ) y2 = pt2 . coord ( 2 ) z2 = pt2 . coord ( 3 ) x3 = pt3 . coord ( 1 ) y3 = pt3 . coord ( 2 ) z3 = pt3 . coord ( 3 ) onebox . Delete () set DT = CreateSheet ( \"*The file path*\\output_point_dis.sheetname=\" \u8ddd\u79bb \" partlist = Location . Query ( \"VPMInstance\" , NULL ) shapelist = Location . Query ( \"PartFeature\" , NULL ) i = 1 for i while i <= partlist . Size () { mypart = partlist [ i ] myname = mypart . Name DT -> SetCell ( 2 * i - 1 , 1 , myname ) DT -> SetCell ( 2 * i , 1 , sheetname ) myshape = shapelist [ i ] boxlist = myshape . Children boxlist1 = boxlist . Filter ( \"OpenBodyFeature\" , \"OpenBodyFeature\" , \"x.Name == \\\"EXPORT_DIM\\\"\" ) if boxlist1 . Size ()== 0 { break } else { SetWorkingContext ( myshape box = boxlist1 [ 1 ] pla = new ( \"Plane\" , \"000\" , box ) pla = plane ( point ( x1 , y1 , z1 ), point ( pointlist = box -> Query ( \"Point\" , k = pointlist . Size () j = 1 for j while j <= k { pt = pointlist [ j ] ptname = pt . Name DT -> SetCell ( 2 * i - L = distance ( pt , pla ) DT -> SetCell ( 2 * i , j + j = j + 1 } pla . Delete () } i = i + 1 } //\u533a\u6bd4\u8f83\u591a\uff0c\u505a\u7684\u8f83\u590d\u6742 planelist ( List ) true ) shapepoint1 ) 10 m ) 35 m ) 18 m ) dis . xlsx \") myshape ) point ( x2 , y2 , z2 ), point ( x3 , y3 , z3 )) Point \",NULL) Name () i - 1 , j + 1 , ptname ) pla ) j + 1 , L )","title":"\u9876\u90e8\u94a2\u7b4b\u521b\u5efa\u65b9\u6cd5"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/","text":"Automatic deletion of small box beams \u7531\u4e8e\u5728\u505a\u5c0f\u7bb1\u6881\u6a21\u578b\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u8ba1\u7b97\u6bcf\u8de8\u7bb1\u6881\u7684\u4e2a\u6570\uff0c\u8fd9\u4e2a\u662fKP\u81ea\u52a8\u8ba1\u7b97\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6d4b\u91cf\u4f53\u79ef\u7684\u51c6\u786e\u6027\uff0c\u6bcf\u4e2a\u7bb1\u6881\u90fd\u5728\u81ea\u5df1\u7684Body\u4e2d\uff0c\u4e3a\u4e86\u589e\u5f3a\u6a21\u677f\u7684\u6027\u80fd\uff0c\u66f4\u65b0\u6881\u6570\u5220\u9664\u65e7\u7684\u5143\u7d20\uff0cEKL\u7a33\u5b9a\u6027\u4f1a\u5dee\u4e00\u4e9b\uff0c\u53ef\u4ee5\u5728KP\u4e2d\u5d4c\u5957VB\u811a\u672c\u5b9e\u73b0\u81ea\u52a8\u5220\u9664\u4e0e\u81ea\u52a8\u751f\u6210\u3002 \u5728\u4e3b\u6846\u67b6\u7ed3\u6784\u6811\u4e2d\u65b0\u589eVBAction\uff1b \u5199\u4e0a\u51fd\u6570\uff0c\u53c2\u6570\u4e3a\u4e00\u4e2a\u6709\u5e8f\u51e0\u4f55\u56fe\u5f62\u96c6\uff0c\u548c\u751f\u6210\u7684\u4e2a\u6570\u3002 \u8fd9\u4e2a\u51fd\u6570\u4e3b\u8981\u7684\u529f\u80fd\u662f\u4e00\u4e2a\u96c6\u5408\u56fe\u5f62\u96c6\u5185\u6240\u6709\u7684Body\uff0c\u5e76\u4e14\u65b0\u5efa\u540c\u6837\u591a\u6570\u91cf\u7684\u3002\u8d77\u5230\u4e00\u4e2a\u66f4\u65b0\u7684\u4f5c\u7528\u3002 \u5185\u90e8\u4ee3\u7801 Main (hb1,icount) If hb1.Bodies.Count <> 0 Then CATIA.ActiveEditor.Selection.Clear For k = 1 To hb1.Bodies.Count Dim hb0obj As Body Set hb0obj = hb1.Bodies.Item(k) CATIA.ActiveEditor.Selection.Add hb0obj Next CATIA.ActiveEditor.Selection.Delete End If Dim i as integer For i = 1 To icount Dim hb2 As Body Set hb2 = hb1.Bodies.Add hb2.Name = \"BEAM_\" + CStr(i) Next End Sub \u5728\u751f\u6210\u6881\u7684KP\u4e2d\uff0c\u63d0\u524d\u8fd0\u884c\u4e00\u4e0b\u8fd9\u4e2aVB\u51fd\u6570\uff0c\u5b83\u4f1a\u5220\u9664\u65e7\u7684\uff0c\u5e76\u4e14\u521b\u5efa\u65b0\u7684Body\u3002 \u6700\u540e\u68c0\u7d22Body\u4f4d\u7f6e\u7684\u7236\u7ea7\uff0c\u904d\u5386\u5f97\u5230\u65b0\u7684Body\u7684list\u3002 \u8fd9\u6837KP\u6267\u884c\u4e86\u5220\u9664\u4e86\u65e7\u7684Body,\u548c\u521b\u5efa\u65b0\u7684Body\u4e24\u4e2a\u8fc7\u7a0b\uff0c\u5e76\u4e14\u5c06\u65b0\u7684Body\u52a0\u5165\u5217\u8868\u4e2d\uff0c\u4e3a\u540e\u7eed\u7684UDF\u7684\u653e\u7f6e\u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u7ed3\u6784\u6811\u89c4\u8303\u5982\u4e0b\u3002","title":"\u5c0f\u7bb1\u6881\u7684\u81ea\u52a8\u5220\u9664"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/#automatic-deletion-of-small-box-beams","text":"\u7531\u4e8e\u5728\u505a\u5c0f\u7bb1\u6881\u6a21\u578b\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u8ba1\u7b97\u6bcf\u8de8\u7bb1\u6881\u7684\u4e2a\u6570\uff0c\u8fd9\u4e2a\u662fKP\u81ea\u52a8\u8ba1\u7b97\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6d4b\u91cf\u4f53\u79ef\u7684\u51c6\u786e\u6027\uff0c\u6bcf\u4e2a\u7bb1\u6881\u90fd\u5728\u81ea\u5df1\u7684Body\u4e2d\uff0c\u4e3a\u4e86\u589e\u5f3a\u6a21\u677f\u7684\u6027\u80fd\uff0c\u66f4\u65b0\u6881\u6570\u5220\u9664\u65e7\u7684\u5143\u7d20\uff0cEKL\u7a33\u5b9a\u6027\u4f1a\u5dee\u4e00\u4e9b\uff0c\u53ef\u4ee5\u5728KP\u4e2d\u5d4c\u5957VB\u811a\u672c\u5b9e\u73b0\u81ea\u52a8\u5220\u9664\u4e0e\u81ea\u52a8\u751f\u6210\u3002 \u5728\u4e3b\u6846\u67b6\u7ed3\u6784\u6811\u4e2d\u65b0\u589eVBAction\uff1b \u5199\u4e0a\u51fd\u6570\uff0c\u53c2\u6570\u4e3a\u4e00\u4e2a\u6709\u5e8f\u51e0\u4f55\u56fe\u5f62\u96c6\uff0c\u548c\u751f\u6210\u7684\u4e2a\u6570\u3002 \u8fd9\u4e2a\u51fd\u6570\u4e3b\u8981\u7684\u529f\u80fd\u662f\u4e00\u4e2a\u96c6\u5408\u56fe\u5f62\u96c6\u5185\u6240\u6709\u7684Body\uff0c\u5e76\u4e14\u65b0\u5efa\u540c\u6837\u591a\u6570\u91cf\u7684\u3002\u8d77\u5230\u4e00\u4e2a\u66f4\u65b0\u7684\u4f5c\u7528\u3002 \u5185\u90e8\u4ee3\u7801 Main (hb1,icount) If hb1.Bodies.Count <> 0 Then CATIA.ActiveEditor.Selection.Clear For k = 1 To hb1.Bodies.Count Dim hb0obj As Body Set hb0obj = hb1.Bodies.Item(k) CATIA.ActiveEditor.Selection.Add hb0obj Next CATIA.ActiveEditor.Selection.Delete End If Dim i as integer For i = 1 To icount Dim hb2 As Body Set hb2 = hb1.Bodies.Add hb2.Name = \"BEAM_\" + CStr(i) Next End Sub \u5728\u751f\u6210\u6881\u7684KP\u4e2d\uff0c\u63d0\u524d\u8fd0\u884c\u4e00\u4e0b\u8fd9\u4e2aVB\u51fd\u6570\uff0c\u5b83\u4f1a\u5220\u9664\u65e7\u7684\uff0c\u5e76\u4e14\u521b\u5efa\u65b0\u7684Body\u3002 \u6700\u540e\u68c0\u7d22Body\u4f4d\u7f6e\u7684\u7236\u7ea7\uff0c\u904d\u5386\u5f97\u5230\u65b0\u7684Body\u7684list\u3002 \u8fd9\u6837KP\u6267\u884c\u4e86\u5220\u9664\u4e86\u65e7\u7684Body,\u548c\u521b\u5efa\u65b0\u7684Body\u4e24\u4e2a\u8fc7\u7a0b\uff0c\u5e76\u4e14\u5c06\u65b0\u7684Body\u52a0\u5165\u5217\u8868\u4e2d\uff0c\u4e3a\u540e\u7eed\u7684UDF\u7684\u653e\u7f6e\u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u7ed3\u6784\u6811\u89c4\u8303\u5982\u4e0b\u3002","title":"Automatic deletion of small box beams"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/","text":"\u57fa\u4e8e\u8fbe\u7d22\u7cfb\u7edf\u5e73\u53f0\u7684\u6865\u6881\u5feb\u901f\u8bbe\u8ba1(SUCDRI) \u4f5c\u8005\uff1a\u80e1\u65b9\u5065\u3001\u738b\u5229\u5f3a\u3001\u5218\u8fea\u3001\u7530\u826f 1.\u6458\u8981 2.\u5f15\u8a00 3. \u6280\u672f\u8def\u7ebf 3.1\u53c2\u6570\u5316\u6a21\u578b 3.2\u8bbe\u8ba1\u6570\u636e\u540c\u6b65 4.\u56fe\u7eb8\u751f\u6210 5.\u9879\u76ee\u5e94\u7528 6.\u7ed3\u8bed 7.\u4f5c\u8005\u7b80\u4ecb 8.\u611f\u8c22\u8bed \u8fbe\u7d22\u7cfb\u7edf\u611f\u8c22\u4e0a\u6d77\u57ce\u5efa\u9662\u6295\u7a3f\u4eba\u80e1\u65b9\u5065\u5148\u751f\u548c\u8fbe\u8d62\u4fe1\u606f\u5408\u4f5c\u4f19\u4f34\u738b\u5229\u5f3a\u5148\u751f\u3001\u5218\u8fea\u5148\u751f\u3001\u7530\u826f\u5148\u751f\u8d21\u732e\u7684\u9ad8\u8d28\u91cf\u6587\u7ae0\uff0c\u8fbe\u667a\u6c47\u4e09\u91cd\u798f\u5229\u5c06\u5373\u65f6\u5949\u4e0a\u3002\u79ef\u6c99\u6210\u6ee9\uff0c\u79ef\u6d41\u6210\u6e0a\u3002\u8fbe\u7d22\u7cfb\u7edf\u5c06\u5168\u5e74\u6301\u7eed\u9762\u5411\u57fa\u7840\u8bbe\u65bd\u884c\u4e1a\u5e7f\u53ec\u82f1\u96c4\u5e16\uff0c\u5f81\u96c63DEXPERIENCE\u5e73\u53f0\u4f18\u79c0\u884c\u4e1a\u6587\u7ae0\uff0c\u5171\u540c\u6253\u9020\u884c\u4e1a\u77e5\u8bc6\u5171\u4eab\u3001\u7ecf\u9a8c\u4ea4\u6d41\u7684\u65b0\u751f\u6001\uff0c\u52a9\u529b\u6570\u5b57\u5316\u8f6c\u578b\u3002","title":"\u57fa\u4e8e\u8fbe\u7d22\u7cfb\u7edf\u5e73\u53f0\u7684\u6865\u6881\u5feb\u901f\u8bbe\u8ba1(SUCDRI)"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#sucdri","text":"\u4f5c\u8005\uff1a\u80e1\u65b9\u5065\u3001\u738b\u5229\u5f3a\u3001\u5218\u8fea\u3001\u7530\u826f","title":"\u57fa\u4e8e\u8fbe\u7d22\u7cfb\u7edf\u5e73\u53f0\u7684\u6865\u6881\u5feb\u901f\u8bbe\u8ba1(SUCDRI)"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#1","text":"","title":"1.\u6458\u8981"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#2","text":"","title":"2.\u5f15\u8a00"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#3","text":"","title":"3. \u6280\u672f\u8def\u7ebf"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#31","text":"","title":"3.1\u53c2\u6570\u5316\u6a21\u578b"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#32","text":"","title":"3.2\u8bbe\u8ba1\u6570\u636e\u540c\u6b65"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#4","text":"","title":"4.\u56fe\u7eb8\u751f\u6210"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#5","text":"","title":"5.\u9879\u76ee\u5e94\u7528"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#6","text":"","title":"6.\u7ed3\u8bed"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#7","text":"","title":"7.\u4f5c\u8005\u7b80\u4ecb"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#8","text":"\u8fbe\u7d22\u7cfb\u7edf\u611f\u8c22\u4e0a\u6d77\u57ce\u5efa\u9662\u6295\u7a3f\u4eba\u80e1\u65b9\u5065\u5148\u751f\u548c\u8fbe\u8d62\u4fe1\u606f\u5408\u4f5c\u4f19\u4f34\u738b\u5229\u5f3a\u5148\u751f\u3001\u5218\u8fea\u5148\u751f\u3001\u7530\u826f\u5148\u751f\u8d21\u732e\u7684\u9ad8\u8d28\u91cf\u6587\u7ae0\uff0c\u8fbe\u667a\u6c47\u4e09\u91cd\u798f\u5229\u5c06\u5373\u65f6\u5949\u4e0a\u3002\u79ef\u6c99\u6210\u6ee9\uff0c\u79ef\u6d41\u6210\u6e0a\u3002\u8fbe\u7d22\u7cfb\u7edf\u5c06\u5168\u5e74\u6301\u7eed\u9762\u5411\u57fa\u7840\u8bbe\u65bd\u884c\u4e1a\u5e7f\u53ec\u82f1\u96c4\u5e16\uff0c\u5f81\u96c63DEXPERIENCE\u5e73\u53f0\u4f18\u79c0\u884c\u4e1a\u6587\u7ae0\uff0c\u5171\u540c\u6253\u9020\u884c\u4e1a\u77e5\u8bc6\u5171\u4eab\u3001\u7ecf\u9a8c\u4ea4\u6d41\u7684\u65b0\u751f\u6001\uff0c\u52a9\u529b\u6570\u5b57\u5316\u8f6c\u578b\u3002","title":"8.\u611f\u8c22\u8bed"},{"location":"ISE-AEC/BRD-%E6%A1%A5%E6%A2%81%E7%A0%94%E5%8F%91/TSY/","text":"\u94a2\u6841\u6881\u6865\u667a\u6167\u8bbe\u8ba1\u5efa\u8bbe\u65b9\u6848 (TSY) \u6839\u636e\u94c1\u5efa\u8fd0\u7ba1\u7f51\u30102022\u301188\u53f7\u6587\u7684\u8981\u6c42\u5236\u5b9a\u672c\u5efa\u8bbe\u65b9\u6848\u3002 \u672c\u7740\u6280\u672f\u6210\u719f\u53ef\u9760\uff0c\u6210\u679c\u53ef\u5b9e\u73b0\u3001\u53ef\u6838\u67e5\u3001\u53ef\u63a8\u5e7f\u3001\u53ef\u5ef6\u7533\u3001\u7ec8\u70b9\u805a\u7126\u8bbe\u8ba1\uff0c\u8003\u8651\u884c\u4e1a\u5168\u8fc7\u7a0b\u7684\u7406\u5ff5\u5236\u5b9a\u672c\u5efa\u8bbe\u65b9\u6848\u3002 \u4e00\u3001 \u6982\u8ff0 \u7ed3\u5408\u67d0\u9879\u76ee\u7684\u94a2\u6841\u659c\u62c9\u6865\u65bd\u5de5\u56fe\u8bbe\u8ba1\uff0c\u5f00\u5c55\u94a2\u6841\u6881\u7684\u4e09\u7ef4\u8bbe\u8ba1\u3002\u9996\u5148\u9488\u5bf9\u5de5\u70b9\u8bbe\u8ba1\uff0c\u5229\u7528\u4e09\u7ef4\u53c2\u6570\u9a71\u52a8\u6280\u672f\u548c\u77e5\u8bc6\u5de5\u7a0b\u6280\u672f\uff0c\u6784\u5efa\u94a2\u6841\u6881\u7684\u4e09\u7ef4\u8bbe\u8ba1\u7cfb\u7edf\uff0c\u5b8c\u6210\u5de5\u70b9\u6865\u7684\u4e09\u7ef4\u53c2\u6570\u9a71\u52a8\u6a21\u578b\uff0c\u5b9e\u73b0\u4e09\u7ef4\u8bbe\u8ba1\u6a21\u578b\u7684\u6570\u5b57\u4ea4\u4ed8\u80fd\u529b\u3002\u65b9\u6848\u5b9e\u73b0\u540e\uff0c\u80fd\u591f\u79ef\u7d2f\u8d77\u4e00\u5957\u94a2\u6841\u6881\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u5e93\u548c\u8f85\u52a9\u8bbe\u8ba1\u5e94\u7528\u7a0b\u5e8f\uff0c\u5f62\u6210\u4e00\u4e2a\u7a33\u5b9a\u53ef\u9760\u7684\u6570\u5b57\u5316\u94a2\u6841\u6881\u4e09\u7ef4\u8bbe\u8ba1\u7cfb\u7edf\u548c\u4e00\u5957\u64cd\u4f5c\u6d41\u7a0b\uff0c\u5e76\u5177\u5907\u63a8\u5e7f\u5230\u5176\u4ed6\u8bbe\u8ba1\u9879\u76ee\u4e2d\u7684\u80fd\u529b\u3002 \u4e09\u7ef4\u53c2\u6570\u9a71\u52a8\u6a21\u578b\u548c\u77e5\u8bc6\u5de5\u7a0b\u4ee3\u7801 \u4e8c\u3001 \u76ee\u6807 1\u3001 \u5efa\u7acb\u4e00\u5957\u94a2\u6841\u6881\u4e09\u7ef4\u53c2\u6570\u9a71\u52a8\u6a21\u578b\u7684\u8bbe\u8ba1\u7cfb\u7edf\u3002 \u8fd9\u5305\u62ec\u4e00\u5957\u9488\u5bf9\u94a2\u6841\u6881\u7684\u96f6\u4ef6\u5e93\uff0c\u4e00\u5957\u6587\u6863\u6a21\u677f\u5e93\uff0c\u4e00\u4e2a\u914d\u5957\u7684\u8f85\u52a9\u8bbe\u8ba1\u8f6f\u4ef6\u3002\u94a2\u6841\u6881\u96f6\u4ef6\u4e3b\u8981\u5305\u62ec\uff0c\u6574\u4f53\u8282\u70b9\u677f\u3001\u94a2\u677f\u3001\u6a2a\u9694\u677f\u3001\u677f\u578b\u52a0\u52b2\u808b\u3001U\u5f62\u52a0\u52b2\u808b\u3001\u6a2a\u6881\u3001\u4e0e\u52a0\u52b2\u808b\u76f8\u5bf9\u7684\u8fc7\u710a\u5b54\u7b49\u3002 \u6587\u6863\u6a21\u677f\uff08\u4ea7\u54c1\u7ea7\u7684\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\uff09\u5305\u62ec\u4e0e\u96f6\u4ef6\u5bf9\u5e94\u7684\u6a21\u677f\u548c\u5b50\u7ed3\u6784\u7684\u6a21\u677f\u3002\u5b50\u7ed3\u6784\u6a21\u677f\u4e3b\u8981\u5305\u62ec\u6574\u4f53\u8282\u70b9\u6a21\u677f\uff0cH\u5f62\u6746\u4ef6\u6a21\u677f\u3001\u7bb1\u578b\u6746\u4ef6\u6a21\u677f\u3001\u6865\u9762\u6a2a\u6881\u6a21\u677f\u7b49\u3002 \u8f85\u52a9\u8bbe\u8ba1\u8f6f\u4ef6\u9488\u5bf9\u53c2\u6570\u9a71\u52a8\u6a21\u578b\u7684\u7279\u70b9\u63d0\u4f9b\u66f4\u4e3a\u7cfb\u7edf\u7684\u53c2\u6570\u8c03\u6574\u529f\u80fd\uff0c\u914d\u4ee5\u76f4\u89c2\u7684\u793a\u610f\u56fe\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u53c2\u6570\u7684\u542b\u4e49\uff0c\u8fbe\u5230\u4e00\u5904\u4fee\u6539\u5173\u8054\u66f4\u65b0\u7684\u6548\u679c\u3002 \u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u5b9e\u4f8b\u5316 2\u3001 \u4e09\u7ef4\u53ef\u89c6\u5316\u4ea4\u5e95\u3002 \u5bf9\u590d\u6742\u7ed3\u6784\u5236\u4f5c\u62c6\u89e3\u56fe\uff0c\u5c55\u793a\u6784\u9020\u7ec6\u8282\u548c\u6784\u4ef6\u95f4\u5173\u7cfb\u3002\u5236\u4f5c\u590d\u6742\u5b50\u7ed3\u6784\u7684\u62fc\u88c5\u52a8\u753b\uff0c\u6f14\u793a\u7ed3\u6784\u7684\u88c5\u914d\u8fc7\u7a0b\u3002 Composer\u4e2d\u7bb1\u578b\u6746\u4ef6\u7684\u5c55\u793a\u56fe 3\u3001 \u8bbe\u8ba1\u6210\u679c\u6570\u5b57\u4ea4\u4ed8\u3002 \u6574\u4f53\u6a21\u578b\u548c\u6784\u4ef6\u6a21\u578b\u4ee5\u901a\u7528\u7684\u683c\u5f0f\u5bfc\u51fa\uff0c\u63d0\u4f9b\u7ed9\u65bd\u5de5\u4f01\u4e1a\u548c\u94a2\u7ed3\u6784\u52a0\u5de5\u4f01\u4e1a\uff0c\u4ee5\u4fbf\u540e\u7eed\u73af\u8282\u7684\u65bd\u5de5\u6a21\u62df\u548c\u6570\u5b57\u5316\u52a0\u5de5\u3002 \u4e09\u3001 \u6280\u672f\u8def\u7ebf 1\u3001 \u5efa\u6a21\u5de5\u5177 \u8fbe\u7d22 3DEXPERIENCE\u4f53\u9a8c\u5e73\u53f0\uff08R2021x\uff09\u4e0b\u7684CATIA\uff0c\u4e3b\u8981\u5e94\u7528\u6a21\u5757\u5305\u62ecCIENC\u3001CIDEC\u3001TEO\u3001FRST0\u3001SDV\u3002 2\u3001 \u4e09\u7ef4\u5c55\u793a\u5de5\u5177 \u8fbe\u7d22 CATIA Composer R2021 3\u3001 \u8f6f\u4ef6\u5f00\u53d1\u5de5\u5177 Microsoft Visual Studio 2019 4\u3001 \u6280\u672f\u8def\u7ebf 1) \u7ed3\u5408\u81ea\u9876\u5411\u4e0b\u548c\u81ea\u5e95\u5411\u4e0a\u7684\u5efa\u6a21\u65b9\u6cd5\u5efa\u7acb\u6a21\u578b \u81ea\u9876\u5411\u4e0b\u5efa\u6a21\u3002\u5bf9\u6841\u67b6\u5355\u5143\uff0c\u5148\u5efa\u7acb\u6841\u6881\u5de5\u4f5c\u7ebf\u4f5c\u4e3a\u6a21\u578b\u9aa8\u67b6\uff0c\u5728\u9aa8\u67b6\u7684\u57fa\u7840\u4e0a\u88c5\u914d\u6841\u67b6\u6784\u4ef6\u3002 \u81ea\u9876\u5411\u4e0b\u5efa\u6a21\u2014\u2014\u9aa8\u67b6\u548c\u6784\u4ef6 \u81ea\u5e95\u5411\u4e0a\u5efa\u6a21\u3002\u5bf9\u5c40\u90e8\u5b50\u7ed3\u6784\uff0c\u5148\u5efa\u7acb\u5404\u4e2a\u96f6\u4ef6\u6a21\u578b\uff0c\u7136\u540e\u518d\u5c06\u96f6\u4ef6\u88c5\u914d\u6210\u6784\u4ef6\u3002 \u81ea\u5e95\u5411\u4e0a\u5efa\u6a21\u2014\u2014\u96f6\u4ef6\u88c5\u914d\u4e3a\u6784\u4ef6 2) \u6784\u5efa\u4e09\u4e2a\u590d\u6742\u7ea7\u522b\u7684\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u4ee5\u53d6\u5f97\u4e09\u4e2a\u7ea7\u522b\u7684\u7075\u6d3b\u6027\u548c\u6548\u7387\u5e73\u8861 \u5728\u6700\u5e95\u5c42\uff0c\u5148\u5236\u4f5c\u5e38\u7528\u96f6\u4ef6\u7684\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u3002\u7531\u4e8e\u662f\u5355\u4e2a\u96f6\u4ef6\u7684\u6a21\u677f\uff0c\u53ef\u4e0e\u5176\u4ed6\u96f6\u4ef6\u7ec4\u5408\u53ef\u4ee5\u88c5\u914d\u51fa\u5404\u79cd\u7ed3\u6784\uff0c\u5e94\u7528\u8303\u56f4\u5e7f\uff0c\u7075\u6d3b\u6027\u6700\u9ad8\uff0c\u4f46\u901a\u8fc7\u5355\u4e2a\u96f6\u4ef6\u7ec4\u88c5\u6210\u5b8c\u6574\u6a21\u578b\uff0c\u5de5\u4f5c\u4f1a\u5f88\u7410\u788e\uff0c\u6548\u7387\u6700\u4f4e\u3002 \u7b2c\u4e8c\u5c42\u5c06\u96f6\u4ef6\u88c5\u914d\u6210\u7ed3\u6784\u6784\u4ef6\uff0c\u518d\u5236\u4f5c\u6784\u4ef6\u7684\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u3002\u8fd9\u4e2a\u7ea7\u522b\u7684\u6a21\u677f\u5728\u5e94\u7528\u8fc7\u7a0b\u4e2d\u76f8\u8f83\u4e8e\u5355\u96f6\u4ef6\u6a21\u677f\u6548\u7387\u63d0\u9ad8\uff0c\u4f46\u53ea\u80fd\u751f\u6210\u7279\u70b9\u6784\u4ef6\u7684\u6a21\u578b\uff0c\u7075\u6d3b\u6027\u964d\u4f4e\u3002 \u6700\u9ad8\u5c42\u5c06\u6784\u4ef6\u88c5\u914d\u6210\u6841\u67b6\u5355\u5143\uff0c\u7136\u540e\u5236\u4f5c\u6841\u67b6\u5355\u5143\u7684\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u3002\u8fd9\u7c7b\u6a21\u677f\u4f7f\u7528\u65f6\u53ef\u4ee5\u4e00\u6b21\u751f\u6210\u591a\u4e2a\u7ed3\u6784\u6784\u4ef6\uff0c\u6548\u7387\u6700\u9ad8\uff0c\u4f46\u53ea\u80fd\u751f\u6210\u7279\u5b9a\u6841\u67b6\u5355\u5143\u7684\u6a21\u578b\uff0c\u7075\u6d3b\u6027\u8fdb\u4e00\u6b65\u964d\u4f4e\u3002 5\u3001 \u5176\u4ed6\u65b9\u9762 1) \u4e09\u7ef4\u6a21\u578b\u7684\u4e8c\u7ef4\u51fa\u56fe\u3002 \u5728\u638c\u63e1\u57fa\u672c\u7684\u4e8c\u7ef4\u51fa\u56fe\u65b9\u5f0f\u7684\u57fa\u7840\u4e0a\uff0c\u7814\u7a76\u66f4\u4e3a\u76f4\u89c2\u7684\u6807\u6ce8\u65b9\u5f0f\u6807\u6ce8\u5c3a\u5bf8\uff0c\u6bd4\u5982\u66f4\u591a\u5730\u7528\u8f74\u6d4b\u56fe\u505a\u4e09\u7ef4\u6807\u6ce8\u3002 \u4e09\u7ef4\u6a21\u578b\u5230\u4e8c\u7ef4\u51fa\u56fe 2) \u6784\u4ef6\u7684\u4e09\u7ef4\u5c55\u793a \u7531\u4e8eComposer\u548cCATIA\u90fd\u662f\u8fbe\u7d22\u7684\u4ea7\u54c1\uff0cCATIA\u4e2d\u7684\u6a21\u578b\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\u5230Composer\u4e2d\u7528\u4e8e\u4e09\u7ef4\u5c55\u793a\u3002\u7528Composer\u505a\u4e09\u7ef4\u5c55\u793a\u7684\u65b9\u5f0f\u6709\u6784\u4ef6\u7684\u7206\u70b8\u89c6\u56fe\u3001\u4ea7\u54c1\u7684\u6280\u672f\u56fe\u89e3\u4ee5\u53ca\u6784\u4ef6\u7684\u62c6\u89e3\u6216\u88c5\u914d\u52a8\u753b\u7b49\u3002\u5fc5\u987b\u901a\u8fc7\u5b66\u4e60\u548c\u53cd\u590d\u5b9e\u8df5\uff0c\u624d\u80fd\u719f\u7ec3\u638c\u63e1Composer\u7684\u4f7f\u7528\u65b9\u6cd5\u548c\u6280\u5de7\u3002\u5728\u6b64\u57fa\u7840\u4e4b\u4e0a\u65b9\u80fd\u6839\u636e\u6784\u4ef6\u7684\u7279\u70b9\u9009\u62e9\u5408\u9002\u7684\u5c55\u793a\u65b9\u5f0f\uff0c\u8f85\u4ee5\u827a\u672f\u5316\u7684\u8868\u73b0\u624b\u6cd5\uff0c\u7a81\u7834\u4f20\u7edf\u4e8c\u7ef4\u56fe\u7eb8\u7684\u9650\u5236\uff0c\u8fbe\u5230\u6e05\u6670\u76f4\u89c2\u5730\u4f20\u9012\u8bbe\u8ba1\u601d\u60f3\u7684\u76ee\u7684\u3002 \u4e0b\u5f26\u8282\u70b9\u6280\u672f\u56fe\u89e3\u548c\u6750\u6599\u8868 \u56db\u3001 \u8ba1\u5212\u5b89\u6392 2022\u5e749\u670830\u65e5\uff0c\u5b8c\u6210\u6784\u4ef6\u5e93\u548c\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u7684\u5236\u4f5c\u3002 2022\u5e7412\u670831\u65e5\uff0c\u7ed3\u5408\u9879\u76ee\u8bbe\u8ba1\u8fdb\u5ea6\u5b8c\u6210\u6865\u6881\u6a21\u578b\u7684\u5efa\u7acb\uff1b\u4ee3\u8868\u6027\u6784\u4ef6\u548c\u4ea7\u54c1\u7684\u4e8c\u7ef4\u56fe\u7eb8\uff1b\u4ee3\u8868\u6027\u6784\u4ef6\u7684\u4e09\u7ef4\u5c55\u793a\uff08\u53ef\u89c6\u5316\u4ea4\u5e95\uff09\u3002 2023\u5e743\u670830\u65e5\uff0c\u5b8c\u6210\u8f85\u52a9\u8bbe\u8ba1\u8f6f\u4ef6\u7684\u5f00\u53d1\u3002 2023\u5e743\u6708\u4e4b\u540e\uff0c\u5728\u5176\u4ed6\u9879\u76ee\u4e2d\u4f7f\u7528\u7cfb\u7edf\uff1b\u7ed3\u5408\u5176\u4ed6\u9879\u76ee\u590d\u5236\u5f53\u524d\u9879\u76ee\u7684\u7ecf\u9a8c\u548c\u505a\u6cd5\uff0c\u5f00\u53d1\u9488\u5bf9\u65b0\u7ed3\u6784\u7684\u65b0\u7cfb\u7edf\u3002 \u4e94\u3001 \u6210\u679c \u4e00\u4e2a\u94a2\u6841\u659c\u62c9\u6865\u7684\u4e09\u7ef4\u6570\u5b57\u6a21\u578b\uff08LOD350\uff09 \u4e00\u5957\u53ef\u7528\u4e8e\u673a\u52a0\u5de5\u7684\u94a2\u6841\u67b6\u96f6\u4ef6\u6a21\u578b\uff08LOD350~LOD400\uff09 \u4e00\u5957\u94a2\u6841\u6881\u96f6\u4ef6\u5e93\u3002 \u4e00\u5957\u94a2\u6841\u6881\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u5e93\u3002 \u4e00\u4e2a\u8f85\u52a9\u6784\u5efa\u94a2\u6841\u6881\u6a21\u578b\u7684\u4e13\u7528\u7a0b\u5e8f\u3002 \u94a2\u6841\u6881\u96f6\u4ef6\u5e93 \u94a2\u6841\u6881\u6587\u6863\u6a21\u677f\u5e93 \u94a2\u6841\u6881\u8f85\u52a9\u8bbe\u8ba1\u8f6f\u4ef6\uff08\u539f\u578b\u7a0b\u5e8f\uff09 \u516d\u3001 \u8fdc\u671f\u76ee\u6807 \u76ee\u524d\u4f5c\u4e3a\u4e00\u4e9b\u8bbe\u60f3\uff0c\u6709\uff1a 1\u3001 \u6a21\u62df\uff0c\u5728\u4e09\u7ef4\u6a21\u578b\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6570\u5b57\u5316\u6a21\u62df\u88c5\u914d\uff0c\u4ee5\u9a8c\u8bc1\u8bbe\u8ba1\u65b9\u6848\u548c\u65bd\u5de5\u65b9\u6848\u7684\u53ef\u884c\u6027\u3002 2\u3001 \u4ea7\u54c1\u4f18\u5316\u7684\u53ef\u89c6\u5316\uff0c\u5229\u75283DEXPERIENCE\u5e73\u53f0\u4e0a\u7684TEO\u6a21\u5757\u5728\u53c2\u6570\u5316\u6a21\u578b\u57fa\u7840\u4e0a\u505a\u7279\u5b9a\u53c2\u6570\u7684\u4f18\u5316\u3002 3\u3001 \u4e0e\u94a2\u7ed3\u6784\u8ba1\u7b97\u8f6f\u4ef6\u8fde\u63a5\uff0c\u63d0\u53d6\u6a21\u578b\u4e2d\u7684\u6784\u5efa\u53c2\u6570\u8f93\u5165\u94a2\u7ed3\u6784\u8ba1\u7b97\u8f6f\u4ef6\u4e2d\u8fdb\u884c\u7ed3\u6784\u68c0\u7b97 CATIA\u4ea7\u54c1\u4f18\u5316\u529f\u80fd \u57fa\u4e8e\u6d4f\u89c8\u5668\u7684\u94a2\u7ed3\u6784\u6784\u4ef6\u68c0\u7b97\u8f6f\u4ef6","title":"\u94a2\u6841\u6881\u6865\u667a\u6167\u8bbe\u8ba1\u5efa\u8bbe\u65b9\u6848 (TSY)"},{"location":"ISE-AEC/BRD-%E6%A1%A5%E6%A2%81%E7%A0%94%E5%8F%91/TSY/#tsy","text":"\u6839\u636e\u94c1\u5efa\u8fd0\u7ba1\u7f51\u30102022\u301188\u53f7\u6587\u7684\u8981\u6c42\u5236\u5b9a\u672c\u5efa\u8bbe\u65b9\u6848\u3002 \u672c\u7740\u6280\u672f\u6210\u719f\u53ef\u9760\uff0c\u6210\u679c\u53ef\u5b9e\u73b0\u3001\u53ef\u6838\u67e5\u3001\u53ef\u63a8\u5e7f\u3001\u53ef\u5ef6\u7533\u3001\u7ec8\u70b9\u805a\u7126\u8bbe\u8ba1\uff0c\u8003\u8651\u884c\u4e1a\u5168\u8fc7\u7a0b\u7684\u7406\u5ff5\u5236\u5b9a\u672c\u5efa\u8bbe\u65b9\u6848\u3002","title":"\u94a2\u6841\u6881\u6865\u667a\u6167\u8bbe\u8ba1\u5efa\u8bbe\u65b9\u6848 (TSY)"},{"location":"ISE-AEC/BRD-%E6%A1%A5%E6%A2%81%E7%A0%94%E5%8F%91/TSY/#_1","text":"\u7ed3\u5408\u67d0\u9879\u76ee\u7684\u94a2\u6841\u659c\u62c9\u6865\u65bd\u5de5\u56fe\u8bbe\u8ba1\uff0c\u5f00\u5c55\u94a2\u6841\u6881\u7684\u4e09\u7ef4\u8bbe\u8ba1\u3002\u9996\u5148\u9488\u5bf9\u5de5\u70b9\u8bbe\u8ba1\uff0c\u5229\u7528\u4e09\u7ef4\u53c2\u6570\u9a71\u52a8\u6280\u672f\u548c\u77e5\u8bc6\u5de5\u7a0b\u6280\u672f\uff0c\u6784\u5efa\u94a2\u6841\u6881\u7684\u4e09\u7ef4\u8bbe\u8ba1\u7cfb\u7edf\uff0c\u5b8c\u6210\u5de5\u70b9\u6865\u7684\u4e09\u7ef4\u53c2\u6570\u9a71\u52a8\u6a21\u578b\uff0c\u5b9e\u73b0\u4e09\u7ef4\u8bbe\u8ba1\u6a21\u578b\u7684\u6570\u5b57\u4ea4\u4ed8\u80fd\u529b\u3002\u65b9\u6848\u5b9e\u73b0\u540e\uff0c\u80fd\u591f\u79ef\u7d2f\u8d77\u4e00\u5957\u94a2\u6841\u6881\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u5e93\u548c\u8f85\u52a9\u8bbe\u8ba1\u5e94\u7528\u7a0b\u5e8f\uff0c\u5f62\u6210\u4e00\u4e2a\u7a33\u5b9a\u53ef\u9760\u7684\u6570\u5b57\u5316\u94a2\u6841\u6881\u4e09\u7ef4\u8bbe\u8ba1\u7cfb\u7edf\u548c\u4e00\u5957\u64cd\u4f5c\u6d41\u7a0b\uff0c\u5e76\u5177\u5907\u63a8\u5e7f\u5230\u5176\u4ed6\u8bbe\u8ba1\u9879\u76ee\u4e2d\u7684\u80fd\u529b\u3002 \u4e09\u7ef4\u53c2\u6570\u9a71\u52a8\u6a21\u578b\u548c\u77e5\u8bc6\u5de5\u7a0b\u4ee3\u7801","title":"\u4e00\u3001   \u6982\u8ff0"},{"location":"ISE-AEC/BRD-%E6%A1%A5%E6%A2%81%E7%A0%94%E5%8F%91/TSY/#_2","text":"1\u3001 \u5efa\u7acb\u4e00\u5957\u94a2\u6841\u6881\u4e09\u7ef4\u53c2\u6570\u9a71\u52a8\u6a21\u578b\u7684\u8bbe\u8ba1\u7cfb\u7edf\u3002 \u8fd9\u5305\u62ec\u4e00\u5957\u9488\u5bf9\u94a2\u6841\u6881\u7684\u96f6\u4ef6\u5e93\uff0c\u4e00\u5957\u6587\u6863\u6a21\u677f\u5e93\uff0c\u4e00\u4e2a\u914d\u5957\u7684\u8f85\u52a9\u8bbe\u8ba1\u8f6f\u4ef6\u3002\u94a2\u6841\u6881\u96f6\u4ef6\u4e3b\u8981\u5305\u62ec\uff0c\u6574\u4f53\u8282\u70b9\u677f\u3001\u94a2\u677f\u3001\u6a2a\u9694\u677f\u3001\u677f\u578b\u52a0\u52b2\u808b\u3001U\u5f62\u52a0\u52b2\u808b\u3001\u6a2a\u6881\u3001\u4e0e\u52a0\u52b2\u808b\u76f8\u5bf9\u7684\u8fc7\u710a\u5b54\u7b49\u3002 \u6587\u6863\u6a21\u677f\uff08\u4ea7\u54c1\u7ea7\u7684\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\uff09\u5305\u62ec\u4e0e\u96f6\u4ef6\u5bf9\u5e94\u7684\u6a21\u677f\u548c\u5b50\u7ed3\u6784\u7684\u6a21\u677f\u3002\u5b50\u7ed3\u6784\u6a21\u677f\u4e3b\u8981\u5305\u62ec\u6574\u4f53\u8282\u70b9\u6a21\u677f\uff0cH\u5f62\u6746\u4ef6\u6a21\u677f\u3001\u7bb1\u578b\u6746\u4ef6\u6a21\u677f\u3001\u6865\u9762\u6a2a\u6881\u6a21\u677f\u7b49\u3002 \u8f85\u52a9\u8bbe\u8ba1\u8f6f\u4ef6\u9488\u5bf9\u53c2\u6570\u9a71\u52a8\u6a21\u578b\u7684\u7279\u70b9\u63d0\u4f9b\u66f4\u4e3a\u7cfb\u7edf\u7684\u53c2\u6570\u8c03\u6574\u529f\u80fd\uff0c\u914d\u4ee5\u76f4\u89c2\u7684\u793a\u610f\u56fe\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u53c2\u6570\u7684\u542b\u4e49\uff0c\u8fbe\u5230\u4e00\u5904\u4fee\u6539\u5173\u8054\u66f4\u65b0\u7684\u6548\u679c\u3002 \u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u5b9e\u4f8b\u5316 2\u3001 \u4e09\u7ef4\u53ef\u89c6\u5316\u4ea4\u5e95\u3002 \u5bf9\u590d\u6742\u7ed3\u6784\u5236\u4f5c\u62c6\u89e3\u56fe\uff0c\u5c55\u793a\u6784\u9020\u7ec6\u8282\u548c\u6784\u4ef6\u95f4\u5173\u7cfb\u3002\u5236\u4f5c\u590d\u6742\u5b50\u7ed3\u6784\u7684\u62fc\u88c5\u52a8\u753b\uff0c\u6f14\u793a\u7ed3\u6784\u7684\u88c5\u914d\u8fc7\u7a0b\u3002 Composer\u4e2d\u7bb1\u578b\u6746\u4ef6\u7684\u5c55\u793a\u56fe 3\u3001 \u8bbe\u8ba1\u6210\u679c\u6570\u5b57\u4ea4\u4ed8\u3002 \u6574\u4f53\u6a21\u578b\u548c\u6784\u4ef6\u6a21\u578b\u4ee5\u901a\u7528\u7684\u683c\u5f0f\u5bfc\u51fa\uff0c\u63d0\u4f9b\u7ed9\u65bd\u5de5\u4f01\u4e1a\u548c\u94a2\u7ed3\u6784\u52a0\u5de5\u4f01\u4e1a\uff0c\u4ee5\u4fbf\u540e\u7eed\u73af\u8282\u7684\u65bd\u5de5\u6a21\u62df\u548c\u6570\u5b57\u5316\u52a0\u5de5\u3002","title":"\u4e8c\u3001   \u76ee\u6807"},{"location":"ISE-AEC/BRD-%E6%A1%A5%E6%A2%81%E7%A0%94%E5%8F%91/TSY/#_3","text":"1\u3001 \u5efa\u6a21\u5de5\u5177 \u8fbe\u7d22 3DEXPERIENCE\u4f53\u9a8c\u5e73\u53f0\uff08R2021x\uff09\u4e0b\u7684CATIA\uff0c\u4e3b\u8981\u5e94\u7528\u6a21\u5757\u5305\u62ecCIENC\u3001CIDEC\u3001TEO\u3001FRST0\u3001SDV\u3002 2\u3001 \u4e09\u7ef4\u5c55\u793a\u5de5\u5177 \u8fbe\u7d22 CATIA Composer R2021 3\u3001 \u8f6f\u4ef6\u5f00\u53d1\u5de5\u5177 Microsoft Visual Studio 2019 4\u3001 \u6280\u672f\u8def\u7ebf 1) \u7ed3\u5408\u81ea\u9876\u5411\u4e0b\u548c\u81ea\u5e95\u5411\u4e0a\u7684\u5efa\u6a21\u65b9\u6cd5\u5efa\u7acb\u6a21\u578b \u81ea\u9876\u5411\u4e0b\u5efa\u6a21\u3002\u5bf9\u6841\u67b6\u5355\u5143\uff0c\u5148\u5efa\u7acb\u6841\u6881\u5de5\u4f5c\u7ebf\u4f5c\u4e3a\u6a21\u578b\u9aa8\u67b6\uff0c\u5728\u9aa8\u67b6\u7684\u57fa\u7840\u4e0a\u88c5\u914d\u6841\u67b6\u6784\u4ef6\u3002 \u81ea\u9876\u5411\u4e0b\u5efa\u6a21\u2014\u2014\u9aa8\u67b6\u548c\u6784\u4ef6 \u81ea\u5e95\u5411\u4e0a\u5efa\u6a21\u3002\u5bf9\u5c40\u90e8\u5b50\u7ed3\u6784\uff0c\u5148\u5efa\u7acb\u5404\u4e2a\u96f6\u4ef6\u6a21\u578b\uff0c\u7136\u540e\u518d\u5c06\u96f6\u4ef6\u88c5\u914d\u6210\u6784\u4ef6\u3002 \u81ea\u5e95\u5411\u4e0a\u5efa\u6a21\u2014\u2014\u96f6\u4ef6\u88c5\u914d\u4e3a\u6784\u4ef6 2) \u6784\u5efa\u4e09\u4e2a\u590d\u6742\u7ea7\u522b\u7684\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u4ee5\u53d6\u5f97\u4e09\u4e2a\u7ea7\u522b\u7684\u7075\u6d3b\u6027\u548c\u6548\u7387\u5e73\u8861 \u5728\u6700\u5e95\u5c42\uff0c\u5148\u5236\u4f5c\u5e38\u7528\u96f6\u4ef6\u7684\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u3002\u7531\u4e8e\u662f\u5355\u4e2a\u96f6\u4ef6\u7684\u6a21\u677f\uff0c\u53ef\u4e0e\u5176\u4ed6\u96f6\u4ef6\u7ec4\u5408\u53ef\u4ee5\u88c5\u914d\u51fa\u5404\u79cd\u7ed3\u6784\uff0c\u5e94\u7528\u8303\u56f4\u5e7f\uff0c\u7075\u6d3b\u6027\u6700\u9ad8\uff0c\u4f46\u901a\u8fc7\u5355\u4e2a\u96f6\u4ef6\u7ec4\u88c5\u6210\u5b8c\u6574\u6a21\u578b\uff0c\u5de5\u4f5c\u4f1a\u5f88\u7410\u788e\uff0c\u6548\u7387\u6700\u4f4e\u3002 \u7b2c\u4e8c\u5c42\u5c06\u96f6\u4ef6\u88c5\u914d\u6210\u7ed3\u6784\u6784\u4ef6\uff0c\u518d\u5236\u4f5c\u6784\u4ef6\u7684\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u3002\u8fd9\u4e2a\u7ea7\u522b\u7684\u6a21\u677f\u5728\u5e94\u7528\u8fc7\u7a0b\u4e2d\u76f8\u8f83\u4e8e\u5355\u96f6\u4ef6\u6a21\u677f\u6548\u7387\u63d0\u9ad8\uff0c\u4f46\u53ea\u80fd\u751f\u6210\u7279\u70b9\u6784\u4ef6\u7684\u6a21\u578b\uff0c\u7075\u6d3b\u6027\u964d\u4f4e\u3002 \u6700\u9ad8\u5c42\u5c06\u6784\u4ef6\u88c5\u914d\u6210\u6841\u67b6\u5355\u5143\uff0c\u7136\u540e\u5236\u4f5c\u6841\u67b6\u5355\u5143\u7684\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u3002\u8fd9\u7c7b\u6a21\u677f\u4f7f\u7528\u65f6\u53ef\u4ee5\u4e00\u6b21\u751f\u6210\u591a\u4e2a\u7ed3\u6784\u6784\u4ef6\uff0c\u6548\u7387\u6700\u9ad8\uff0c\u4f46\u53ea\u80fd\u751f\u6210\u7279\u5b9a\u6841\u67b6\u5355\u5143\u7684\u6a21\u578b\uff0c\u7075\u6d3b\u6027\u8fdb\u4e00\u6b65\u964d\u4f4e\u3002 5\u3001 \u5176\u4ed6\u65b9\u9762 1) \u4e09\u7ef4\u6a21\u578b\u7684\u4e8c\u7ef4\u51fa\u56fe\u3002 \u5728\u638c\u63e1\u57fa\u672c\u7684\u4e8c\u7ef4\u51fa\u56fe\u65b9\u5f0f\u7684\u57fa\u7840\u4e0a\uff0c\u7814\u7a76\u66f4\u4e3a\u76f4\u89c2\u7684\u6807\u6ce8\u65b9\u5f0f\u6807\u6ce8\u5c3a\u5bf8\uff0c\u6bd4\u5982\u66f4\u591a\u5730\u7528\u8f74\u6d4b\u56fe\u505a\u4e09\u7ef4\u6807\u6ce8\u3002 \u4e09\u7ef4\u6a21\u578b\u5230\u4e8c\u7ef4\u51fa\u56fe 2) \u6784\u4ef6\u7684\u4e09\u7ef4\u5c55\u793a \u7531\u4e8eComposer\u548cCATIA\u90fd\u662f\u8fbe\u7d22\u7684\u4ea7\u54c1\uff0cCATIA\u4e2d\u7684\u6a21\u578b\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\u5230Composer\u4e2d\u7528\u4e8e\u4e09\u7ef4\u5c55\u793a\u3002\u7528Composer\u505a\u4e09\u7ef4\u5c55\u793a\u7684\u65b9\u5f0f\u6709\u6784\u4ef6\u7684\u7206\u70b8\u89c6\u56fe\u3001\u4ea7\u54c1\u7684\u6280\u672f\u56fe\u89e3\u4ee5\u53ca\u6784\u4ef6\u7684\u62c6\u89e3\u6216\u88c5\u914d\u52a8\u753b\u7b49\u3002\u5fc5\u987b\u901a\u8fc7\u5b66\u4e60\u548c\u53cd\u590d\u5b9e\u8df5\uff0c\u624d\u80fd\u719f\u7ec3\u638c\u63e1Composer\u7684\u4f7f\u7528\u65b9\u6cd5\u548c\u6280\u5de7\u3002\u5728\u6b64\u57fa\u7840\u4e4b\u4e0a\u65b9\u80fd\u6839\u636e\u6784\u4ef6\u7684\u7279\u70b9\u9009\u62e9\u5408\u9002\u7684\u5c55\u793a\u65b9\u5f0f\uff0c\u8f85\u4ee5\u827a\u672f\u5316\u7684\u8868\u73b0\u624b\u6cd5\uff0c\u7a81\u7834\u4f20\u7edf\u4e8c\u7ef4\u56fe\u7eb8\u7684\u9650\u5236\uff0c\u8fbe\u5230\u6e05\u6670\u76f4\u89c2\u5730\u4f20\u9012\u8bbe\u8ba1\u601d\u60f3\u7684\u76ee\u7684\u3002 \u4e0b\u5f26\u8282\u70b9\u6280\u672f\u56fe\u89e3\u548c\u6750\u6599\u8868","title":"\u4e09\u3001   \u6280\u672f\u8def\u7ebf"},{"location":"ISE-AEC/BRD-%E6%A1%A5%E6%A2%81%E7%A0%94%E5%8F%91/TSY/#_4","text":"2022\u5e749\u670830\u65e5\uff0c\u5b8c\u6210\u6784\u4ef6\u5e93\u548c\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u7684\u5236\u4f5c\u3002 2022\u5e7412\u670831\u65e5\uff0c\u7ed3\u5408\u9879\u76ee\u8bbe\u8ba1\u8fdb\u5ea6\u5b8c\u6210\u6865\u6881\u6a21\u578b\u7684\u5efa\u7acb\uff1b\u4ee3\u8868\u6027\u6784\u4ef6\u548c\u4ea7\u54c1\u7684\u4e8c\u7ef4\u56fe\u7eb8\uff1b\u4ee3\u8868\u6027\u6784\u4ef6\u7684\u4e09\u7ef4\u5c55\u793a\uff08\u53ef\u89c6\u5316\u4ea4\u5e95\uff09\u3002 2023\u5e743\u670830\u65e5\uff0c\u5b8c\u6210\u8f85\u52a9\u8bbe\u8ba1\u8f6f\u4ef6\u7684\u5f00\u53d1\u3002 2023\u5e743\u6708\u4e4b\u540e\uff0c\u5728\u5176\u4ed6\u9879\u76ee\u4e2d\u4f7f\u7528\u7cfb\u7edf\uff1b\u7ed3\u5408\u5176\u4ed6\u9879\u76ee\u590d\u5236\u5f53\u524d\u9879\u76ee\u7684\u7ecf\u9a8c\u548c\u505a\u6cd5\uff0c\u5f00\u53d1\u9488\u5bf9\u65b0\u7ed3\u6784\u7684\u65b0\u7cfb\u7edf\u3002","title":"\u56db\u3001   \u8ba1\u5212\u5b89\u6392"},{"location":"ISE-AEC/BRD-%E6%A1%A5%E6%A2%81%E7%A0%94%E5%8F%91/TSY/#_5","text":"\u4e00\u4e2a\u94a2\u6841\u659c\u62c9\u6865\u7684\u4e09\u7ef4\u6570\u5b57\u6a21\u578b\uff08LOD350\uff09 \u4e00\u5957\u53ef\u7528\u4e8e\u673a\u52a0\u5de5\u7684\u94a2\u6841\u67b6\u96f6\u4ef6\u6a21\u578b\uff08LOD350~LOD400\uff09 \u4e00\u5957\u94a2\u6841\u6881\u96f6\u4ef6\u5e93\u3002 \u4e00\u5957\u94a2\u6841\u6881\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u5e93\u3002 \u4e00\u4e2a\u8f85\u52a9\u6784\u5efa\u94a2\u6841\u6881\u6a21\u578b\u7684\u4e13\u7528\u7a0b\u5e8f\u3002 \u94a2\u6841\u6881\u96f6\u4ef6\u5e93 \u94a2\u6841\u6881\u6587\u6863\u6a21\u677f\u5e93 \u94a2\u6841\u6881\u8f85\u52a9\u8bbe\u8ba1\u8f6f\u4ef6\uff08\u539f\u578b\u7a0b\u5e8f\uff09","title":"\u4e94\u3001   \u6210\u679c"},{"location":"ISE-AEC/BRD-%E6%A1%A5%E6%A2%81%E7%A0%94%E5%8F%91/TSY/#_6","text":"\u76ee\u524d\u4f5c\u4e3a\u4e00\u4e9b\u8bbe\u60f3\uff0c\u6709\uff1a 1\u3001 \u6a21\u62df\uff0c\u5728\u4e09\u7ef4\u6a21\u578b\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6570\u5b57\u5316\u6a21\u62df\u88c5\u914d\uff0c\u4ee5\u9a8c\u8bc1\u8bbe\u8ba1\u65b9\u6848\u548c\u65bd\u5de5\u65b9\u6848\u7684\u53ef\u884c\u6027\u3002 2\u3001 \u4ea7\u54c1\u4f18\u5316\u7684\u53ef\u89c6\u5316\uff0c\u5229\u75283DEXPERIENCE\u5e73\u53f0\u4e0a\u7684TEO\u6a21\u5757\u5728\u53c2\u6570\u5316\u6a21\u578b\u57fa\u7840\u4e0a\u505a\u7279\u5b9a\u53c2\u6570\u7684\u4f18\u5316\u3002 3\u3001 \u4e0e\u94a2\u7ed3\u6784\u8ba1\u7b97\u8f6f\u4ef6\u8fde\u63a5\uff0c\u63d0\u53d6\u6a21\u578b\u4e2d\u7684\u6784\u5efa\u53c2\u6570\u8f93\u5165\u94a2\u7ed3\u6784\u8ba1\u7b97\u8f6f\u4ef6\u4e2d\u8fdb\u884c\u7ed3\u6784\u68c0\u7b97 CATIA\u4ea7\u54c1\u4f18\u5316\u529f\u80fd \u57fa\u4e8e\u6d4f\u89c8\u5668\u7684\u94a2\u7ed3\u6784\u6784\u4ef6\u68c0\u7b97\u8f6f\u4ef6","title":"\u516d\u3001   \u8fdc\u671f\u76ee\u6807"},{"location":"ISE-AEC/BRD-%E9%92%A2%E6%A2%81%E6%89%B9%E9%87%8F%E5%BB%BA%E6%A8%A1%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6/doc/","text":"\u94a2\u6881\u6279\u91cf\u5efa\u6a21\u65b9\u6cd5\u7814\u7a76","title":"\u94a2\u6881\u6279\u91cf\u5efa\u6a21\u65b9\u6cd5\u7814\u7a76"},{"location":"ISE-AEC/BRD-%E9%92%A2%E6%A2%81%E6%89%B9%E9%87%8F%E5%BB%BA%E6%A8%A1%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6/doc/#_1","text":"","title":"\u94a2\u6881\u6279\u91cf\u5efa\u6a21\u65b9\u6cd5\u7814\u7a76"},{"location":"ISE-AEC/BRIDGE-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/","text":"Automatic delete box beams \u7531\u4e8e\u5728\u505a\u5c0f\u7bb1\u6881\u6a21\u578b\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u8ba1\u7b97\u6bcf\u8de8\u7bb1\u6881\u7684\u4e2a\u6570\uff0c\u8fd9\u4e2a\u662fKP\u81ea\u52a8\u8ba1\u7b97\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6d4b\u91cf\u4f53\u79ef\u7684\u51c6\u786e\u6027\uff0c\u6bcf\u4e2a\u7bb1\u6881\u90fd\u5728\u81ea\u5df1\u7684Body\u4e2d\uff0c\u4e3a\u4e86\u589e\u5f3a\u6a21\u677f\u7684\u6027\u80fd\uff0c\u66f4\u65b0\u6881\u6570\u5220\u9664\u65e7\u7684\u5143\u7d20\uff0cEKL\u7a33\u5b9a\u6027\u4f1a\u5dee\u4e00\u4e9b\uff0c\u53ef\u4ee5\u5728KP\u4e2d\u5d4c\u5957VB\u811a\u672c\u5b9e\u73b0\u81ea\u52a8\u5220\u9664\u4e0e\u81ea\u52a8\u751f\u6210\u3002 \u5728\u4e3b\u6846\u67b6\u7ed3\u6784\u6811\u4e2d\u65b0\u589eVBAction\uff1b \u5199\u4e0a\u51fd\u6570\uff0c\u53c2\u6570\u4e3a\u4e00\u4e2a\u6709\u5e8f\u51e0\u4f55\u56fe\u5f62\u96c6\uff0c\u548c\u751f\u6210\u7684\u4e2a\u6570\u3002 \u8fd9\u4e2a\u51fd\u6570\u4e3b\u8981\u7684\u529f\u80fd\u662f\u4e00\u4e2a\u96c6\u5408\u56fe\u5f62\u96c6\u5185\u6240\u6709\u7684Body\uff0c\u5e76\u4e14\u65b0\u5efa\u540c\u6837\u591a\u6570\u91cf\u7684\u3002\u8d77\u5230\u4e00\u4e2a\u66f4\u65b0\u7684\u4f5c\u7528\u3002 \u5185\u90e8\u4ee3\u7801 Main (hb1,icount) If hb1.Bodies.Count <> 0 Then CATIA.ActiveEditor.Selection.Clear For k = 1 To hb1.Bodies.Count Dim hb0obj As Body Set hb0obj = hb1.Bodies.Item(k) CATIA.ActiveEditor.Selection.Add hb0obj Next CATIA.ActiveEditor.Selection.Delete End If Dim i as integer For i = 1 To icount Dim hb2 As Body Set hb2 = hb1.Bodies.Add hb2.Name = \"BEAM_\" + CStr(i) Next End Sub \u5728\u751f\u6210\u6881\u7684KP\u4e2d\uff0c\u63d0\u524d\u8fd0\u884c\u4e00\u4e0b\u8fd9\u4e2aVB\u51fd\u6570\uff0c\u5b83\u4f1a\u5220\u9664\u65e7\u7684\uff0c\u5e76\u4e14\u521b\u5efa\u65b0\u7684Body\u3002 \u6700\u540e\u68c0\u7d22Body\u4f4d\u7f6e\u7684\u7236\u7ea7\uff0c\u904d\u5386\u5f97\u5230\u65b0\u7684Body\u7684list\u3002 \u8fd9\u6837KP\u6267\u884c\u4e86\u5220\u9664\u4e86\u65e7\u7684Body,\u548c\u521b\u5efa\u65b0\u7684Body\u4e24\u4e2a\u8fc7\u7a0b\uff0c\u5e76\u4e14\u5c06\u65b0\u7684Body\u52a0\u5165\u5217\u8868\u4e2d\uff0c\u4e3a\u540e\u7eed\u7684UDF\u7684\u653e\u7f6e\u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u7ed3\u6784\u6811\u89c4\u8303\u5982\u4e0b\u3002","title":"\u5c0f\u7bb1\u6881\u7684\u81ea\u52a8\u5220\u9664"},{"location":"ISE-AEC/BRIDGE-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/#automatic-delete-box-beams","text":"\u7531\u4e8e\u5728\u505a\u5c0f\u7bb1\u6881\u6a21\u578b\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u8ba1\u7b97\u6bcf\u8de8\u7bb1\u6881\u7684\u4e2a\u6570\uff0c\u8fd9\u4e2a\u662fKP\u81ea\u52a8\u8ba1\u7b97\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6d4b\u91cf\u4f53\u79ef\u7684\u51c6\u786e\u6027\uff0c\u6bcf\u4e2a\u7bb1\u6881\u90fd\u5728\u81ea\u5df1\u7684Body\u4e2d\uff0c\u4e3a\u4e86\u589e\u5f3a\u6a21\u677f\u7684\u6027\u80fd\uff0c\u66f4\u65b0\u6881\u6570\u5220\u9664\u65e7\u7684\u5143\u7d20\uff0cEKL\u7a33\u5b9a\u6027\u4f1a\u5dee\u4e00\u4e9b\uff0c\u53ef\u4ee5\u5728KP\u4e2d\u5d4c\u5957VB\u811a\u672c\u5b9e\u73b0\u81ea\u52a8\u5220\u9664\u4e0e\u81ea\u52a8\u751f\u6210\u3002 \u5728\u4e3b\u6846\u67b6\u7ed3\u6784\u6811\u4e2d\u65b0\u589eVBAction\uff1b \u5199\u4e0a\u51fd\u6570\uff0c\u53c2\u6570\u4e3a\u4e00\u4e2a\u6709\u5e8f\u51e0\u4f55\u56fe\u5f62\u96c6\uff0c\u548c\u751f\u6210\u7684\u4e2a\u6570\u3002 \u8fd9\u4e2a\u51fd\u6570\u4e3b\u8981\u7684\u529f\u80fd\u662f\u4e00\u4e2a\u96c6\u5408\u56fe\u5f62\u96c6\u5185\u6240\u6709\u7684Body\uff0c\u5e76\u4e14\u65b0\u5efa\u540c\u6837\u591a\u6570\u91cf\u7684\u3002\u8d77\u5230\u4e00\u4e2a\u66f4\u65b0\u7684\u4f5c\u7528\u3002 \u5185\u90e8\u4ee3\u7801 Main (hb1,icount) If hb1.Bodies.Count <> 0 Then CATIA.ActiveEditor.Selection.Clear For k = 1 To hb1.Bodies.Count Dim hb0obj As Body Set hb0obj = hb1.Bodies.Item(k) CATIA.ActiveEditor.Selection.Add hb0obj Next CATIA.ActiveEditor.Selection.Delete End If Dim i as integer For i = 1 To icount Dim hb2 As Body Set hb2 = hb1.Bodies.Add hb2.Name = \"BEAM_\" + CStr(i) Next End Sub \u5728\u751f\u6210\u6881\u7684KP\u4e2d\uff0c\u63d0\u524d\u8fd0\u884c\u4e00\u4e0b\u8fd9\u4e2aVB\u51fd\u6570\uff0c\u5b83\u4f1a\u5220\u9664\u65e7\u7684\uff0c\u5e76\u4e14\u521b\u5efa\u65b0\u7684Body\u3002 \u6700\u540e\u68c0\u7d22Body\u4f4d\u7f6e\u7684\u7236\u7ea7\uff0c\u904d\u5386\u5f97\u5230\u65b0\u7684Body\u7684list\u3002 \u8fd9\u6837KP\u6267\u884c\u4e86\u5220\u9664\u4e86\u65e7\u7684Body,\u548c\u521b\u5efa\u65b0\u7684Body\u4e24\u4e2a\u8fc7\u7a0b\uff0c\u5e76\u4e14\u5c06\u65b0\u7684Body\u52a0\u5165\u5217\u8868\u4e2d\uff0c\u4e3a\u540e\u7eed\u7684UDF\u7684\u653e\u7f6e\u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u7ed3\u6784\u6811\u89c4\u8303\u5982\u4e0b\u3002","title":"Automatic delete box beams"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/","text":"\u540c\u6d4e\u5e02\u653f\u9662\u57fa\u4e8e\u8fbe\u7d22\u7cfb\u7edf3DEXPERIENCE\u5e73\u53f0\u7684\u4e8c\u4e09\u7ef4\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u7a0b\u5e8f\u5f00\u53d1 \u6458\u8981 \u4e3a\u4e86\u6539\u5584\u4e8c\u4e09\u7ef4\u8def\u7ebf\u6570\u636e\u7684\u4ea4\u4e92\u65b9\u5f0f\uff0c\u540c\u6d4e\u5e02\u653f\u9662\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8eIFC 4.1\uff08industry foundation classes\uff0c\u5de5\u4e1a\u57fa\u7840\u7c7b\uff09\u6807\u51c6\u7684\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u65b9\u6cd5\uff0c\u5e76\u4ee5EICAD\u4e3a\u4f8b\u8fdb\u884c\u4e86\u529f\u80fd\u5f00\u53d1\u3002\u9274\u4e8e\u8fbe\u7d22\u7cfb\u7edf\u5bf9IFC 4.1\u683c\u5f0f\u7684\u826f\u597d\u517c\u5bb9\u6027\uff0c\u91c7\u75283DEXPERIENCE R2019x\u5e73\u53f0\u6765\u9a8c\u8bc1\u65b9\u6cd5\u7684\u53ef\u884c\u6027\u3002 \u7ed3\u679c\u8868\u660e\uff1a\u6211\u9662\u81ea\u4e3b\u5f00\u53d1\u7684\u8def\u7ebf\u8f6c\u6362\u7a0b\u5e8f\u80fd\u591f\u5b9e\u73b0\u5c06EICAD\u5e73\u7ad6\u66f2\u7ebf\u8bbe\u8ba1\u6587\u4ef6\u8f6c\u6362\u4e3aIFC\u8def\u7ebf\u6587\u4ef6\uff0c\u4e14\u5728\u5bfc\u51653DEXPERIENCE\u5e73\u53f0\u540e\u53ef\u4ee5\u8f83\u4e3a\u5b8c\u6574\u5730\u8fd8\u539f\u8def\u7ebf\u8bbe\u8ba1\u4fe1\u606f\uff0c\u4e0e\u4f20\u7edf\u57fa\u4e8eDWG\u6587\u4ef6\u7684\u4ea4\u4e92\u65b9\u5f0f\u76f8\u6bd4\uff0c\u80fd\u591f\u5728\u4fdd\u8bc1\u8def\u7ebf\u7cbe\u5ea6\u548c\u8f6f\u4ef6\u517c\u5bb9\u6027\u7684\u6761\u4ef6\u4e0b\uff0c\u5b9e\u73b0\u8def\u7ebf\u6570\u636e\u4e0e3DEXPERIENCE\u5e73\u53f0\u95f4\u7684\u6709\u6548\u4f20\u9012\u3002\u76f8\u5173\u6210\u679c\u5df2\u53d1\u8868\u5728\u300a\u6e05\u534e\u5927\u5b66\u5b66\u62a5(\u81ea\u7136\u79d1\u5b66\u7248)\u300b\u3002 \u5173\u952e\u8bcd\uff1a\u5de5\u4e1a\u57fa\u7840\u7c7b(IFC 4.1)\u3001EICAD\u3001\u8def\u7ebf\u4fe1\u606f\u3001\u5e73\u7ad6\u66f2\u7ebf\u3001\u6570\u636e\u8f6c\u6362\u3001xBIM \u6210\u679c\u8bba\u6587\uff1a\u66f9\u70b3\u52c7, \u65bd\u65b0\u6b23. \u57fa\u4e8eIFC 4.1\u6807\u51c6\u7684EICAD\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u65b9\u6cd5 [J]. \u6e05\u534e\u5927\u5b66\u5b66\u62a5(\u81ea\u7136\u79d1\u5b66\u7248), 2022, 62(02): 321-330. \u8bba\u6587\u94fe\u63a5\uff1a http://jst.tsinghuajournals.com/article/2022/4306/20220216.htm \u5f15\u8a00 \u5e02\u653f\u52d8\u5bdf\u8bbe\u8ba1\u884c\u4e1a\u6b63\u5904\u4e8e\u7531\u4e8c\u7ef4\u8bbe\u8ba1\u5411\u4e09\u7ef4\u8bbe\u8ba1\u8f6c\u578b\u5347\u7ea7\u7684\u6478\u7d22\u9636\u6bb5\u3002\u5bf9\u4e8e\u7ebf\u6027\u5de5\u7a0b\u800c\u8a00\uff0c\u8def\u7ebf\u4fe1\u606f\u662f\u6700\u4e3a\u57fa\u7840\u7684\u8bbe\u8ba1\u8981\u7d20\u4e4b\u4e00\uff0c\u4e5f\u662f\u591a\u4e13\u4e1a\u534f\u540c\u7684\u6838\u5fc3\u6570\u636e\u3002\u7136\u800cBIM\u6280\u672f\u5728\u7ebf\u6027\u5de5\u7a0b\u4e2d\u5e94\u7528\u7684\u666e\u53ca\u5ea6\u548c\u6210\u719f\u5ea6\u8fdc\u4e0d\u53ca\u5efa\u7b51\u5de5\u7a0b\uff0c\u4e09\u7ef4\u8def\u7ebf\u8bbe\u8ba1\u6a21\u5f0f\u63a8\u5e7f\u7f13\u6162\uff0c\u4e00\u65b9\u9762\u73b0\u884c\u8def\u7ebf\u8bbe\u8ba1\u89c4\u8303\u5bf9\u8def\u7ebf\u7684\u5e73\u7ad6\u66f2\u7ebf\u6709\u660e\u786e\u89c4\u5b9a\uff0c\u5373\u4f7f\u91c7\u7528\u4e09\u7ef4\u8def\u7ebf\u8bbe\u8ba1\u8f6f\u4ef6\u4e5f\u9700\u8981\u5728\u5e73\u9762\u548c\u7eb5\u65ad\u9762\u4e0a\u5206\u522b\u8fdb\u884c\u8bbe\u8ba1\uff0c\u518d\u8f6c\u6362\u4e3a\u4e09\u7ef4\u8def\u7ebf\uff1b\u53e6\u4e00\u65b9\u9762\u73b0\u6709\u7684\u4e8c\u7ef4\u8def\u7ebf\u8bbe\u8ba1\u8f6f\u4ef6\u5177\u6709\u529f\u80fd\u5b8c\u5584\u3001\u6613\u7528\u6027\u597d\u3001\u8bbe\u8ba1\u6548\u7387\u9ad8\u7b49\u4f18\u52bf\uff0c\u800c\u5f53\u524d\u901a\u7528\u7684BIM\u8f6f\u4ef6\u5e76\u4e0d\u63d0\u4f9b\u8def\u7ebf\u8bbe\u8ba1\u6a21\u5757\uff0c\u9700\u8981\u8bbe\u8ba1\u4f01\u4e1a\u901a\u8fc7\u4e8c\u6b21\u5f00\u53d1\u6765\u5b9e\u73b0\u8fd9\u90e8\u5206\u529f\u80fd\uff0c\u5f00\u53d1\u6210\u672c\u8f83\u9ad8\u3002\u6b64\u5916\uff0c\u5728\u57ce\u5e02\u4fe1\u606f\u5316\u5efa\u8bbe\u7684\u80cc\u666f\u4e0b\uff0c\u5927\u91cf\u5df2\u5efa\u7684\u7ebf\u6027\u5de5\u7a0b\u4e9f\u9700\u5c06\u4e8c\u7ef4\u6210\u679c\u6570\u636e\u5411\u4e09\u7ef4BIM\u6570\u636e\u8f6c\u6362\u3002\u56e0\u6b64\uff0c\u5229\u7528\u6570\u636e\u683c\u5f0f\u8f6c\u6362\u5b9e\u73b0\u8def\u7ebf\u4fe1\u606f\u4e0eBIM\u8f6f\u4ef6\u7684\u65e0\u7f1d\u8854\u63a5\u5177\u6709\u91cd\u8981\u7684\u5b9e\u9645\u5e94\u7528\u4ef7\u503c\u3002 BIM\u5f02\u6784\u6570\u636e\u4ee5\u53ca\u201c\u4fe1\u606f\u5b64\u5c9b\u201d\u95ee\u9898\u4e25\u91cd\u5236\u7ea6\u4e86\u4e8c\u4e09\u7ef4\u5e94\u7528\u8f6f\u4ef6\u4e4b\u95f4\u7684\u4fe1\u606f\u5171\u4eab\u548c\u534f\u540c\u5de5\u4f5c\uff0c\u5bfc\u81f4\u8def\u7ebf\u4fe1\u606f\u5728\u4f20\u9012\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u6570\u636e\u4e22\u5931\u6216\u5931\u771f\u7684\u73b0\u8c61\u3002IFC\u4f5c\u4e3a\u4e00\u79cd\u56fd\u9645\u5316\u7684BIM\u6570\u636e\u6807\u51c6\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u5177\u4f53\u7cfb\u7edf\u7684\uff0c\u673a\u5668\u53ef\u8bfb\u7684\uff0c\u9002\u5408\u4e8e\u63cf\u8ff0\u8d2f\u7a7f\u6574\u4e2a\u5efa\u7b51\u751f\u547d\u671f\u5185\u4ea7\u54c1\u6570\u636e\u7684\u4e2d\u6027\u673a\u5236\uff0c\u5e76\u56e0\u6b64\u5f97\u5230\u4e86\u5927\u91cfBIM\u5e94\u7528\u8f6f\u4ef6\u7684\u652f\u6301\u3002\u4f46\u5728\u8def\u7ebf\u8bbe\u8ba1\u9886\u57df\u5e94\u7528\u8f83\u4e3a\u5e7f\u6cdb\u7684EICAD\u8f6f\u4ef6\u4ecd\u4e0d\u652f\u6301IFC\u6570\u636e\u683c\u5f0f\u7684\u8f93\u51fa\uff0c\u56e0\u6b64\u73b0\u6709\u7684\u5de5\u4f5c\u6d41\u53ea\u80fd\u91c7\u7528\u57fa\u4e8eDWG\u6587\u4ef6\u7684\u8def\u7ebf\u6570\u636e\u4ea4\u4e92\u65b9\u5f0f\uff0c\u8be5\u65b9\u5f0f\u4e0b\u4ec5\u80fd\u4f20\u9012\u8def\u7ebf\u7684\u51e0\u4f55\u4fe1\u606f\uff0c\u4e14\u5b58\u5728\u7f13\u548c\u66f2\u7ebf\u7ed8\u5236\u4e0d\u7cbe\u786e\uff0c\u5e73\u7ad6\u66f2\u7ebf\u4fe1\u606f\u4e22\u5931\u7b49\u95ee\u9898\u3002\u9274\u4e8e\u4e0a\u8ff0\u95ee\u9898\uff0c\u901a\u8fc7\u7814\u7a76IFC\u6807\u51c6\u6846\u67b6\uff0c\u81ea\u4e3b\u5f00\u53d1\u7a0b\u5e8f\u5b9e\u73b0EICAD\u8def\u7ebf\u6570\u636e\u5bfc\u51fa\u4e3aIFC\u6570\u636e\u7684\u601d\u8def\u5df2\u7136\u6210\u4e3a\u4e00\u79cd\u53ef\u884c\u7684\u6280\u672f\u65b9\u6848\u3002 \u6570\u636e\u6d41\u8f6c\u65b0\u8303\u5f0f\uff1a\u57fa\u4e8eIFC\u6807\u51c6\u7684\u8def\u7ebf\u4fe1\u606f\u6a21\u578b IFC\u6807\u51c6\u6982\u8ff0 IFC\u4f5c\u4e3a\u5b9e\u73b0BIM\u5168\u751f\u547d\u5468\u671f\u7406\u5ff5\u7684\u91cd\u8981\u5de5\u5177\uff0c\u662f\u4e00\u79cd\u9762\u5411\u5efa\u7b51\u9886\u57df\u7684\u6570\u636e\u8868\u8fbe\u548c\u4ea4\u6362\u6807\u51c6\u3002\u5b83\u7531\u56fd\u9645\u534f\u540c\u5de5\u4f5c\u8054\u76dfIAI\uff08\u5df2\u66f4\u540d\u4e3abuildingSMART\uff09\u4e8e\u4e8c\u5341\u4e16\u7eaa\u4e5d\u5341\u5e74\u4ee3\u5f00\u59cb\u8d77\u8349\u5e76\u66f4\u65b0\u8fed\u4ee3\u81f3\u4eca\uff0c\u5f53\u524d\u6700\u65b0\u7248\u672c\u4e3aIFC4.3 RC2\u3002\u957f\u671f\u4ee5\u6765\uff0c\u8be5\u6807\u51c6\u4e3b\u8981\u81f4\u529b\u4e8e\u5efa\u7b51\u9886\u57df\u4fe1\u606f\u8868\u8fbe\u7684\u6807\u51c6\u5316\u5de5\u4f5c\uff0c\u800c\u81eaIFC 4.1\u7248\u672c\u5f00\u59cb\uff0cbuildingSMART\u7ec4\u7ec7\u9010\u6b65\u5c06IFC\u6807\u51c6\u5ef6\u4f38\u81f3\u57fa\u7840\u8bbe\u65bd\u9886\u57df\uff0c\u5305\u62ec\u9053\u8def\u3001\u94c1\u8def\u3001\u6865\u6881\u3001\u96a7\u9053\u7b49\u7ebf\u6027\u5de5\u7a0b\u5747\u5728\u6b64\u7248\u672c\u4e4b\u540e\u5f97\u5230\u4e86\u4e0d\u540c\u7a0b\u5ea6\u7684\u652f\u6301\uff0c\u5176\u663e\u8457\u7279\u5f81\u5728\u4e8eIFC 4.1\u6807\u51c6\u7248\u672c\u4e2d\u65b0\u589e\u4e86IfcAlignment\u5b9e\u4f53\uff0c\u53ef\u7528\u4e8e\u63cf\u8ff0\u7ebf\u6027\u57fa\u7840\u8bbe\u65bd\u5de5\u7a0b\u4e2d\u7684\u8def\u7ebf\u4fe1\u606f\u3002 \u5728IFC 4.1\u4e4b\u540e\u7684\u8fed\u4ee3\u7248\u672c\u4e2d\uff0cIFC 4.2\u5f15\u5165IfcBridge\u548cIfcBridgePart\u5b9e\u4f53\uff0c\u7531\u6b64\u5c55\u5f00\u5bf9\u6865\u6881\u7ed3\u6784\u7684\u63cf\u8ff0\uff0c\u5176\u4e2d\u8fd8\u6db5\u76d6\u4e86\u5bf9\u652f\u5ea7\u3001\u6df1\u57fa\u7840\u548c\u9884\u5e94\u529b\u7ba1\u9053\u7b49\u79bb\u6563\u6784\u4ef6\u7684\u5b9a\u4e49\uff1b\u800cIFC 4.3\u5219\u8fdb\u4e00\u6b65\u52a0\u5927\u5bf9\u57fa\u7840\u8bbe\u65bd\u9886\u57df\u7684\u8986\u76d6\uff0c\u5f15\u5165IfcPort\u3001IfcRailway\u548cIfcRoad\u5b9e\u4f53\uff0c\u5e76\u65b0\u589e\u6807\u8bc6\u724c\u3001\u4fe1\u53f7\u8bbe\u5907\u3001\u586b\u6316\u65b9\u4ee5\u53ca\u94fa\u88c5\u7b49\u4e00\u7cfb\u5217\u57fa\u7840\u8bbe\u65bd\u76f8\u5173\u7684\u5b9e\u4f53\u6982\u5ff5\uff0c\u540c\u65f6\u4f18\u5316\u4e86\u8def\u7ebf\u7684\u8bed\u4e49\u5316\u8868\u8fbe\uff0c\u5c06\u6a2a\u65ad\u9762\u8f6e\u5ed3\u548c\u6a2a\u5761\u4fe1\u606f\u7eb3\u5165\u8def\u7ebf\u7684\u6807\u51c6\u5316\u8868\u8fbe\u8303\u7574\u3002 \u57fa\u4e8eIFC 4.1\u6807\u51c6\u7684\u8def\u7ebf\u4fe1\u606f\u6a21\u578b \u867d\u7136\u4e3b\u6d41\u7684BIM\u6838\u5fc3\u5efa\u6a21\u8f6f\u4ef6\u5747\u5df2\u652f\u6301IFC\u6807\u51c6\uff0c\u4f46\u5176\u66f4\u65b0\u901f\u5ea6\u5f80\u5f80\u6bd4\u8f83\u6ede\u540e\uff0c\u76ee\u524d\u7edd\u5927\u591a\u6570BIM\u5e94\u7528\u8f6f\u4ef6\u6700\u9ad8\u652f\u6301IFC 4.1\u7248\u672c\uff0c\u56e0\u6b64\u672c\u7814\u7a76\u4ee5IFC 4.1\u7248\u672c\u7684\u6587\u4ef6\u683c\u5f0f\u4f5c\u4e3a\u8def\u7ebf\u8f6c\u6362\u7684\u76ee\u6807\u683c\u5f0f\u3002 \u56fe1\u4e3a\u57fa\u4e8eIFC\u6807\u51c6\u7684\u8def\u7ebf\u4fe1\u606f\u6a21\u578b\u3002\u6b63\u5982\u524d\u6587\u6240\u8ff0\uff0cIFC\u6807\u51c6\u4e2d\u4f7f\u7528IfcAlignment\u5b9e\u4f53\u8868\u793a\u8def\u7ebf\u4fe1\u606f\uff0cIfcProject\u548cIfcSite\u5219\u5206\u522b\u4ee3\u8868\u9879\u76ee\u4fe1\u606f\u548c\u573a\u5730\u4fe1\u606f\u3002IfcAlignment\u5b9e\u4f53\u7684\u8def\u7ebf\u51e0\u4f55\u4fe1\u606f\u7531Axis\u5c5e\u6027\u8868\u8fbe\uff0c\u5373IfcAlignmentCurve\u5b9e\u4f53\uff0c\u8be5\u5b9e\u4f53\u4e2dHorizontal\u548cVertical\u5c5e\u6027\u5206\u522b\u5bf9\u5e94\u8def\u7ebf\u4fe1\u606f\u4e2d\u7684\u5e73\u66f2\u7ebf\u548c\u7ad6\u66f2\u7ebf\u3002IFC\u6807\u51c6\u4e2d\u7684\u7ebf\u5143\u7c7b\u522b\u4e0e\u6211\u56fd\u73b0\u884c\u7684\u516c\u8def\u8def\u7ebf\u8bbe\u8ba1\u89c4\u8303\uff08JTG D20-2017\uff09\u4e00\u81f4\u3002\u5e73\u7ad6\u66f2\u7ebf\u7ebf\u5143\u5b9e\u4f53\u7684\u5c5e\u6027\u7ee7\u627f\u5982\u56fe2\u6240\u793a\u3002\u5bf9\u4e8e\u56fd\u5185\u63a8\u8350\u7ebf\u5143\u5b58\u5728\u5dee\u5f02\u7684\u60c5\u51b5\uff0c\u9700\u5bf9\u7ebf\u5143\u5c5e\u6027\u8fdb\u884c\u76f8\u5e94\u8bbe\u7f6e\u4ee5\u9002\u5e94\u672c\u571f\u5316\u9700\u6c42\u3002\u5177\u4f53\u8bbe\u7f6e\u89e3\u6790\u8be6\u89c1\u6210\u679c\u8bba\u6587\u3002 \u56fe1 \u57fa\u4e8eIFC\u6807\u51c6\u7684\u8def\u7ebf\u4fe1\u606f\u6a21\u578b \u56fe2 IFC\u7ebf\u5143\u5b9e\u4f53\u5c5e\u6027\u7ee7\u627f\u56fe \u4ee5\u5c0f\u89c1\u5927\uff0c\u521d\u7aa5\u795e\u5a01\uff1aEICAD\u6570\u636e\u4e0eIfcAlignment\u7684\u8f6c\u6362 EICAD\u6570\u636e\u89e3\u6790 EICAD\u662f\u4e00\u6b3e\u57fa\u4e8eAutoCAD\u5e73\u53f0\u7684\u96c6\u6210\u4ea4\u4e92\u5f0f\u9053\u8def\u4e0e\u7acb\u4ea4\u8bbe\u8ba1\u8f6f\u4ef6\uff0c\u5176\u8def\u7ebf\u8bbe\u8ba1\u6210\u679c\u53ef\u5bfc\u51fa\u4e3a\u76f8\u5e94\u7684\u6587\u672c\u6587\u4ef6\u8fdb\u884c\u5b58\u50a8\u548c\u4f20\u9012\uff0c\u5176\u4e2d\u5305\u62ec\u4ea4\u70b9\u8bbe\u8ba1\u6587\u4ef6 .JD\u3001\u79ef\u6728\u6cd5\u7ebf\u5143\u5355\u5143\u6587\u4ef6 .ICD\u3001\u7ad6\u66f2\u7ebf\u6587\u4ef6 .SQX\u4ee5\u53ca\u6869\u53f7\u65ad\u94fe\u6587\u4ef6 .DL\u7b49\u3002\u5bf9\u4e8e\u5e73\u66f2\u7ebf\u800c\u8a00\uff0cEICAD\u63d0\u4f9b\u4e86\u4ea4\u70b9\u6cd5\u548c\u79ef\u6728\u6cd5\u4e24\u79cd\u8f93\u51fa\u65b9\u5f0f\uff0c\u800cIFC\u6807\u51c6\u4e2d\u7684\u8def\u7ebf\u8868\u8fbe\u5219\u91c7\u7528\u7684\u662f\u7ebf\u5143\u6cd5\u7684\u601d\u60f3\uff0c\u4e0e\u79ef\u6728\u6cd5\u7c7b\u4f3c\uff0c\u6240\u4ee5\u672c\u6587\u4ec5\u4ee5ICD\u6587\u4ef6\u4f5c\u4e3a\u5e73\u66f2\u7ebf\u7684\u6210\u679c\u6587\u4ef6\u5c55\u5f00\u7814\u7a76\uff0c\u5177\u4f53\u8bba\u8ff0\u8be6\u89c1\u6210\u679c\u8bba\u6587\u3002 \u56fe3 EICAD\u5b9e\u4f8b\u6587\u4ef6 \u88681 EICAD\u4e0eIFC\u7ebf\u5143\u63cf\u8ff0\u5bf9\u7167\u8868 IFC\u7ebf\u5143\u5c5e\u6027\u503c\u6620\u5c04 \u5bf9\u6bd4EICAD\u8def\u7ebf\u8f93\u51fa\u6587\u4ef6\uff08\u56fe3\uff09\u4e0eIFC\u7ebf\u5143\u5b9e\u4f53\u5c5e\u6027\u7ee7\u627f\uff08\u56fe2\uff09\uff0c\u4e0d\u96be\u53d1\u73b0\u4e24\u8005\u5747\u901a\u8fc7\u8bb0\u5f55\u8def\u7ebf\u7ebf\u578b\u5355\u5143\u7684\u51e0\u4f55\u7279\u5f81\u6570\u636e\u6765\u63cf\u8ff0\u8def\u7ebf\u4fe1\u606f\uff0c\u56e0\u6b64\u5728\u7ebf\u5143\u53c2\u6570\u65b9\u9762\u5b58\u5728\u4e00\u4e9b\u4ea4\u96c6\u3002\u4f46\u662f\uff0c\u6b63\u5982\u524d\u6587\u6240\u8ff0\uff0c\u57fa\u4e8e\u79ef\u6728\u6cd5\u548c\u4ea4\u70b9\u6cd5\u7684\u8def\u7ebf\u8bbe\u8ba1\u601d\u8def\u5927\u5927\u7b80\u5316\u4e86EICAD\u5e73\u7ad6\u66f2\u7ebf\u7684\u6587\u4ef6\u6570\u636e\uff0c\u800cIFC\u8def\u7ebf\u4fe1\u606f\u7684\u63cf\u8ff0\u65b9\u5f0f\u867d\u91c7\u7528\u4e86\u7ebf\u5143\u6cd5\u7684\u8bbe\u8ba1\u7406\u5ff5\uff0c\u4f46\u5404\u4e2a\u7ebf\u5143\u7684\u53c2\u6570\u8868\u8fbe\u66f4\u52a0\u5b8c\u6574\uff08\u88682\uff09\uff0c\u5373\u6bcf\u4e2a\u7ebf\u578b\u5355\u5143\u53ef\u72ec\u7acb\u5b58\u5728\uff0c\u56e0\u6b64\u5728\u6570\u636e\u6620\u5c04\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u7ecf\u8fc7\u516c\u5f0f\u6362\u7b97\u624d\u80fd\u83b7\u5f97\u5b8c\u6574\u7684IFC\u7ebf\u5143\u5c5e\u6027\u503c\uff0c\u5177\u4f53\u516c\u5f0f\u89c1\u6210\u679c\u8bba\u6587\u3002 \u88682 EICAD\u7ebf\u5143\u53c2\u6570\u4e0eIFC\u7ebf\u5143\u5c5e\u6027\u7684\u5bf9\u6bd4 \u7a0b\u5e8f\u5b9e\u73b0\u4e0e\u5e94\u7528\u6848\u4f8b \u4e3a\u4e86\u9a8c\u8bc1\u4e0a\u8ff0\u65b9\u6cd5\u7684\u53ef\u884c\u6027\uff0c\u6211\u9662\u81ea\u4e3b\u5f00\u53d1\u4e86\u57fa\u4e8eIFC 4.1\u6807\u51c6\u7684EICAD\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u7a0b\u5e8f\uff0c\u8be5\u7a0b\u5e8f\u4e3b\u8981\u5206\u4e3a3\u4e2a\u6a21\u5757\uff1a\u2460\u8f93\u5165\u6a21\u5757\uff0c\u8be5\u6a21\u5757\u7528\u4e8e\u8f93\u5165EICAD\u5e73\u7ad6\u66f2\u7ebf\u8bbe\u8ba1\u6587\u4ef6\u4ee5\u53ca\u65ad\u94fe\u8bbe\u8ba1\u6587\u4ef6\uff1b\u2461\u6570\u636e\u8f6c\u6362\u6a21\u5757\uff0c\u662f\u7a0b\u5e8f\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u627f\u62c5\u5bf9\u8f93\u5165\u6570\u636e\u7684\u53cd\u5e8f\u5217\u5316\u548c\u53c2\u6570\u6620\u5c04\u7684\u4efb\u52a1\uff1b\u2462\u8f93\u51fa\u6a21\u5757\uff0c\u8be5\u6a21\u5757\u501f\u52a9\u4e8exBIM\u89e3\u6790\u5de5\u5177\u5305\u5b9e\u73b0IFC\u5b9e\u4f53\u7684\u521b\u5efa\u3001\u5c5e\u6027\u8d4b\u503c\u4ee5\u53ca\u6570\u636e\u5bfc\u51fa\u7684\u529f\u80fd\u3002 \u91c7\u75283DEXPERIENCE R2019x\u5bf9\u5bfc\u51fa\u7684IFC\u6587\u4ef6\u8fdb\u884c\u9a8c\u8bc1\uff0c\u8be5\u8f6f\u4ef6\u652f\u6301IFC 4.1\u8def\u7ebf\u5bfc\u5165\u529f\u80fd\u3002\u5728\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u7a0b\u5e8f\u80fd\u591f\u5feb\u901f\u5730\u5b8c\u6210\u6570\u636e\u8f6c\u6362\u5de5\u4f5c\u3002\u5c06\u8f6c\u6362\u540e\u7684IFC\u6587\u4ef6\u5bfc\u5165CATIA\u8f6f\u4ef6\u540e\u7684\u53ef\u89c6\u5316\u6548\u679c\u5982\u56fe4\u6240\u793a\u3002\u7ed3\u679c\u8868\u660eCATIA\u80fd\u591f\u51c6\u786e\u5730\u8bc6\u522b\u51faIFC\u8def\u7ebf\u4fe1\u606f\uff0c\u5e76\u5728\u7ed3\u6784\u6811\u4e2d\u4fdd\u7559\u5e73\u7ad6\u66f2\u7ebf\u7684\u5b9a\u4e49\uff0c\u4e14\u751f\u6210\u7684\u8def\u7ebf\u5177\u6709\u53ef\u7f16\u8f91\u6027\u3002 \u56fe4 IFC\u8def\u7ebf\u5bfc\u5165\u7ed3\u679c \u7ed3\u8bed \u6211\u9662\u6240\u5f00\u53d1\u7684\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u7a0b\u5e8f\u89e3\u51b3\u4e86\u5229\u7528\u8fbe\u7d22\u7cfb\u7edf3DEXPERIENCE\u5e73\u53f0\u8fdb\u884c\u4e8c\u4e09\u7ef4\u534f\u540c\u8bbe\u8ba1\u65f6\u8def\u7ebf\u6570\u636e\u65e0\u6cd5\u6709\u6548\u4f20\u9012\u7684\u95ee\u9898\uff0c\u5177\u6709\u7cbe\u5ea6\u9ad8\u3001\u517c\u5bb9\u6027\u5f3a\u3001\u9ad8\u5ea6\u96c6\u6210\u7b49\u4f18\u70b9\uff0c\u4e14\u80fd\u591f\u8f83\u4e3a\u5b8c\u6574\u5730\u8fd8\u539f\u8def\u7ebf\u8bbe\u8ba1\u4fe1\u606f\uff0c\u5bf9\u63a8\u8fdb\u7ebf\u6027\u5de5\u7a0b\u9879\u76ee\u7684\u6b63\u5411\u8bbe\u8ba1\u548c\u57fa\u4e8eBIM\u6a21\u578b\u7684\u8def\u7ebf\u8bbe\u8ba1\u5408\u89c4\u5ba1\u67e5\u5177\u6709\u91cd\u8981\u610f\u4e49","title":"\u540c\u6d4e\u5e02\u653f\u9662\u57fa\u4e8e\u8fbe\u7d22\u7cfb\u7edf3DEXPERIENCE\u5e73\u53f0\u7684\u4e8c\u4e09\u7ef4\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u7a0b\u5e8f\u5f00\u53d1"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#3dexperience","text":"","title":"\u540c\u6d4e\u5e02\u653f\u9662\u57fa\u4e8e\u8fbe\u7d22\u7cfb\u7edf3DEXPERIENCE\u5e73\u53f0\u7684\u4e8c\u4e09\u7ef4\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u7a0b\u5e8f\u5f00\u53d1"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#_1","text":"\u4e3a\u4e86\u6539\u5584\u4e8c\u4e09\u7ef4\u8def\u7ebf\u6570\u636e\u7684\u4ea4\u4e92\u65b9\u5f0f\uff0c\u540c\u6d4e\u5e02\u653f\u9662\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8eIFC 4.1\uff08industry foundation classes\uff0c\u5de5\u4e1a\u57fa\u7840\u7c7b\uff09\u6807\u51c6\u7684\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u65b9\u6cd5\uff0c\u5e76\u4ee5EICAD\u4e3a\u4f8b\u8fdb\u884c\u4e86\u529f\u80fd\u5f00\u53d1\u3002\u9274\u4e8e\u8fbe\u7d22\u7cfb\u7edf\u5bf9IFC 4.1\u683c\u5f0f\u7684\u826f\u597d\u517c\u5bb9\u6027\uff0c\u91c7\u75283DEXPERIENCE R2019x\u5e73\u53f0\u6765\u9a8c\u8bc1\u65b9\u6cd5\u7684\u53ef\u884c\u6027\u3002 \u7ed3\u679c\u8868\u660e\uff1a\u6211\u9662\u81ea\u4e3b\u5f00\u53d1\u7684\u8def\u7ebf\u8f6c\u6362\u7a0b\u5e8f\u80fd\u591f\u5b9e\u73b0\u5c06EICAD\u5e73\u7ad6\u66f2\u7ebf\u8bbe\u8ba1\u6587\u4ef6\u8f6c\u6362\u4e3aIFC\u8def\u7ebf\u6587\u4ef6\uff0c\u4e14\u5728\u5bfc\u51653DEXPERIENCE\u5e73\u53f0\u540e\u53ef\u4ee5\u8f83\u4e3a\u5b8c\u6574\u5730\u8fd8\u539f\u8def\u7ebf\u8bbe\u8ba1\u4fe1\u606f\uff0c\u4e0e\u4f20\u7edf\u57fa\u4e8eDWG\u6587\u4ef6\u7684\u4ea4\u4e92\u65b9\u5f0f\u76f8\u6bd4\uff0c\u80fd\u591f\u5728\u4fdd\u8bc1\u8def\u7ebf\u7cbe\u5ea6\u548c\u8f6f\u4ef6\u517c\u5bb9\u6027\u7684\u6761\u4ef6\u4e0b\uff0c\u5b9e\u73b0\u8def\u7ebf\u6570\u636e\u4e0e3DEXPERIENCE\u5e73\u53f0\u95f4\u7684\u6709\u6548\u4f20\u9012\u3002\u76f8\u5173\u6210\u679c\u5df2\u53d1\u8868\u5728\u300a\u6e05\u534e\u5927\u5b66\u5b66\u62a5(\u81ea\u7136\u79d1\u5b66\u7248)\u300b\u3002 \u5173\u952e\u8bcd\uff1a\u5de5\u4e1a\u57fa\u7840\u7c7b(IFC 4.1)\u3001EICAD\u3001\u8def\u7ebf\u4fe1\u606f\u3001\u5e73\u7ad6\u66f2\u7ebf\u3001\u6570\u636e\u8f6c\u6362\u3001xBIM \u6210\u679c\u8bba\u6587\uff1a\u66f9\u70b3\u52c7, \u65bd\u65b0\u6b23. \u57fa\u4e8eIFC 4.1\u6807\u51c6\u7684EICAD\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u65b9\u6cd5 [J]. \u6e05\u534e\u5927\u5b66\u5b66\u62a5(\u81ea\u7136\u79d1\u5b66\u7248), 2022, 62(02): 321-330. \u8bba\u6587\u94fe\u63a5\uff1a http://jst.tsinghuajournals.com/article/2022/4306/20220216.htm","title":"\u6458\u8981"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#_2","text":"\u5e02\u653f\u52d8\u5bdf\u8bbe\u8ba1\u884c\u4e1a\u6b63\u5904\u4e8e\u7531\u4e8c\u7ef4\u8bbe\u8ba1\u5411\u4e09\u7ef4\u8bbe\u8ba1\u8f6c\u578b\u5347\u7ea7\u7684\u6478\u7d22\u9636\u6bb5\u3002\u5bf9\u4e8e\u7ebf\u6027\u5de5\u7a0b\u800c\u8a00\uff0c\u8def\u7ebf\u4fe1\u606f\u662f\u6700\u4e3a\u57fa\u7840\u7684\u8bbe\u8ba1\u8981\u7d20\u4e4b\u4e00\uff0c\u4e5f\u662f\u591a\u4e13\u4e1a\u534f\u540c\u7684\u6838\u5fc3\u6570\u636e\u3002\u7136\u800cBIM\u6280\u672f\u5728\u7ebf\u6027\u5de5\u7a0b\u4e2d\u5e94\u7528\u7684\u666e\u53ca\u5ea6\u548c\u6210\u719f\u5ea6\u8fdc\u4e0d\u53ca\u5efa\u7b51\u5de5\u7a0b\uff0c\u4e09\u7ef4\u8def\u7ebf\u8bbe\u8ba1\u6a21\u5f0f\u63a8\u5e7f\u7f13\u6162\uff0c\u4e00\u65b9\u9762\u73b0\u884c\u8def\u7ebf\u8bbe\u8ba1\u89c4\u8303\u5bf9\u8def\u7ebf\u7684\u5e73\u7ad6\u66f2\u7ebf\u6709\u660e\u786e\u89c4\u5b9a\uff0c\u5373\u4f7f\u91c7\u7528\u4e09\u7ef4\u8def\u7ebf\u8bbe\u8ba1\u8f6f\u4ef6\u4e5f\u9700\u8981\u5728\u5e73\u9762\u548c\u7eb5\u65ad\u9762\u4e0a\u5206\u522b\u8fdb\u884c\u8bbe\u8ba1\uff0c\u518d\u8f6c\u6362\u4e3a\u4e09\u7ef4\u8def\u7ebf\uff1b\u53e6\u4e00\u65b9\u9762\u73b0\u6709\u7684\u4e8c\u7ef4\u8def\u7ebf\u8bbe\u8ba1\u8f6f\u4ef6\u5177\u6709\u529f\u80fd\u5b8c\u5584\u3001\u6613\u7528\u6027\u597d\u3001\u8bbe\u8ba1\u6548\u7387\u9ad8\u7b49\u4f18\u52bf\uff0c\u800c\u5f53\u524d\u901a\u7528\u7684BIM\u8f6f\u4ef6\u5e76\u4e0d\u63d0\u4f9b\u8def\u7ebf\u8bbe\u8ba1\u6a21\u5757\uff0c\u9700\u8981\u8bbe\u8ba1\u4f01\u4e1a\u901a\u8fc7\u4e8c\u6b21\u5f00\u53d1\u6765\u5b9e\u73b0\u8fd9\u90e8\u5206\u529f\u80fd\uff0c\u5f00\u53d1\u6210\u672c\u8f83\u9ad8\u3002\u6b64\u5916\uff0c\u5728\u57ce\u5e02\u4fe1\u606f\u5316\u5efa\u8bbe\u7684\u80cc\u666f\u4e0b\uff0c\u5927\u91cf\u5df2\u5efa\u7684\u7ebf\u6027\u5de5\u7a0b\u4e9f\u9700\u5c06\u4e8c\u7ef4\u6210\u679c\u6570\u636e\u5411\u4e09\u7ef4BIM\u6570\u636e\u8f6c\u6362\u3002\u56e0\u6b64\uff0c\u5229\u7528\u6570\u636e\u683c\u5f0f\u8f6c\u6362\u5b9e\u73b0\u8def\u7ebf\u4fe1\u606f\u4e0eBIM\u8f6f\u4ef6\u7684\u65e0\u7f1d\u8854\u63a5\u5177\u6709\u91cd\u8981\u7684\u5b9e\u9645\u5e94\u7528\u4ef7\u503c\u3002 BIM\u5f02\u6784\u6570\u636e\u4ee5\u53ca\u201c\u4fe1\u606f\u5b64\u5c9b\u201d\u95ee\u9898\u4e25\u91cd\u5236\u7ea6\u4e86\u4e8c\u4e09\u7ef4\u5e94\u7528\u8f6f\u4ef6\u4e4b\u95f4\u7684\u4fe1\u606f\u5171\u4eab\u548c\u534f\u540c\u5de5\u4f5c\uff0c\u5bfc\u81f4\u8def\u7ebf\u4fe1\u606f\u5728\u4f20\u9012\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u6570\u636e\u4e22\u5931\u6216\u5931\u771f\u7684\u73b0\u8c61\u3002IFC\u4f5c\u4e3a\u4e00\u79cd\u56fd\u9645\u5316\u7684BIM\u6570\u636e\u6807\u51c6\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u5177\u4f53\u7cfb\u7edf\u7684\uff0c\u673a\u5668\u53ef\u8bfb\u7684\uff0c\u9002\u5408\u4e8e\u63cf\u8ff0\u8d2f\u7a7f\u6574\u4e2a\u5efa\u7b51\u751f\u547d\u671f\u5185\u4ea7\u54c1\u6570\u636e\u7684\u4e2d\u6027\u673a\u5236\uff0c\u5e76\u56e0\u6b64\u5f97\u5230\u4e86\u5927\u91cfBIM\u5e94\u7528\u8f6f\u4ef6\u7684\u652f\u6301\u3002\u4f46\u5728\u8def\u7ebf\u8bbe\u8ba1\u9886\u57df\u5e94\u7528\u8f83\u4e3a\u5e7f\u6cdb\u7684EICAD\u8f6f\u4ef6\u4ecd\u4e0d\u652f\u6301IFC\u6570\u636e\u683c\u5f0f\u7684\u8f93\u51fa\uff0c\u56e0\u6b64\u73b0\u6709\u7684\u5de5\u4f5c\u6d41\u53ea\u80fd\u91c7\u7528\u57fa\u4e8eDWG\u6587\u4ef6\u7684\u8def\u7ebf\u6570\u636e\u4ea4\u4e92\u65b9\u5f0f\uff0c\u8be5\u65b9\u5f0f\u4e0b\u4ec5\u80fd\u4f20\u9012\u8def\u7ebf\u7684\u51e0\u4f55\u4fe1\u606f\uff0c\u4e14\u5b58\u5728\u7f13\u548c\u66f2\u7ebf\u7ed8\u5236\u4e0d\u7cbe\u786e\uff0c\u5e73\u7ad6\u66f2\u7ebf\u4fe1\u606f\u4e22\u5931\u7b49\u95ee\u9898\u3002\u9274\u4e8e\u4e0a\u8ff0\u95ee\u9898\uff0c\u901a\u8fc7\u7814\u7a76IFC\u6807\u51c6\u6846\u67b6\uff0c\u81ea\u4e3b\u5f00\u53d1\u7a0b\u5e8f\u5b9e\u73b0EICAD\u8def\u7ebf\u6570\u636e\u5bfc\u51fa\u4e3aIFC\u6570\u636e\u7684\u601d\u8def\u5df2\u7136\u6210\u4e3a\u4e00\u79cd\u53ef\u884c\u7684\u6280\u672f\u65b9\u6848\u3002","title":"\u5f15\u8a00"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#ifc","text":"","title":"\u6570\u636e\u6d41\u8f6c\u65b0\u8303\u5f0f\uff1a\u57fa\u4e8eIFC\u6807\u51c6\u7684\u8def\u7ebf\u4fe1\u606f\u6a21\u578b"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#ifc_1","text":"IFC\u4f5c\u4e3a\u5b9e\u73b0BIM\u5168\u751f\u547d\u5468\u671f\u7406\u5ff5\u7684\u91cd\u8981\u5de5\u5177\uff0c\u662f\u4e00\u79cd\u9762\u5411\u5efa\u7b51\u9886\u57df\u7684\u6570\u636e\u8868\u8fbe\u548c\u4ea4\u6362\u6807\u51c6\u3002\u5b83\u7531\u56fd\u9645\u534f\u540c\u5de5\u4f5c\u8054\u76dfIAI\uff08\u5df2\u66f4\u540d\u4e3abuildingSMART\uff09\u4e8e\u4e8c\u5341\u4e16\u7eaa\u4e5d\u5341\u5e74\u4ee3\u5f00\u59cb\u8d77\u8349\u5e76\u66f4\u65b0\u8fed\u4ee3\u81f3\u4eca\uff0c\u5f53\u524d\u6700\u65b0\u7248\u672c\u4e3aIFC4.3 RC2\u3002\u957f\u671f\u4ee5\u6765\uff0c\u8be5\u6807\u51c6\u4e3b\u8981\u81f4\u529b\u4e8e\u5efa\u7b51\u9886\u57df\u4fe1\u606f\u8868\u8fbe\u7684\u6807\u51c6\u5316\u5de5\u4f5c\uff0c\u800c\u81eaIFC 4.1\u7248\u672c\u5f00\u59cb\uff0cbuildingSMART\u7ec4\u7ec7\u9010\u6b65\u5c06IFC\u6807\u51c6\u5ef6\u4f38\u81f3\u57fa\u7840\u8bbe\u65bd\u9886\u57df\uff0c\u5305\u62ec\u9053\u8def\u3001\u94c1\u8def\u3001\u6865\u6881\u3001\u96a7\u9053\u7b49\u7ebf\u6027\u5de5\u7a0b\u5747\u5728\u6b64\u7248\u672c\u4e4b\u540e\u5f97\u5230\u4e86\u4e0d\u540c\u7a0b\u5ea6\u7684\u652f\u6301\uff0c\u5176\u663e\u8457\u7279\u5f81\u5728\u4e8eIFC 4.1\u6807\u51c6\u7248\u672c\u4e2d\u65b0\u589e\u4e86IfcAlignment\u5b9e\u4f53\uff0c\u53ef\u7528\u4e8e\u63cf\u8ff0\u7ebf\u6027\u57fa\u7840\u8bbe\u65bd\u5de5\u7a0b\u4e2d\u7684\u8def\u7ebf\u4fe1\u606f\u3002 \u5728IFC 4.1\u4e4b\u540e\u7684\u8fed\u4ee3\u7248\u672c\u4e2d\uff0cIFC 4.2\u5f15\u5165IfcBridge\u548cIfcBridgePart\u5b9e\u4f53\uff0c\u7531\u6b64\u5c55\u5f00\u5bf9\u6865\u6881\u7ed3\u6784\u7684\u63cf\u8ff0\uff0c\u5176\u4e2d\u8fd8\u6db5\u76d6\u4e86\u5bf9\u652f\u5ea7\u3001\u6df1\u57fa\u7840\u548c\u9884\u5e94\u529b\u7ba1\u9053\u7b49\u79bb\u6563\u6784\u4ef6\u7684\u5b9a\u4e49\uff1b\u800cIFC 4.3\u5219\u8fdb\u4e00\u6b65\u52a0\u5927\u5bf9\u57fa\u7840\u8bbe\u65bd\u9886\u57df\u7684\u8986\u76d6\uff0c\u5f15\u5165IfcPort\u3001IfcRailway\u548cIfcRoad\u5b9e\u4f53\uff0c\u5e76\u65b0\u589e\u6807\u8bc6\u724c\u3001\u4fe1\u53f7\u8bbe\u5907\u3001\u586b\u6316\u65b9\u4ee5\u53ca\u94fa\u88c5\u7b49\u4e00\u7cfb\u5217\u57fa\u7840\u8bbe\u65bd\u76f8\u5173\u7684\u5b9e\u4f53\u6982\u5ff5\uff0c\u540c\u65f6\u4f18\u5316\u4e86\u8def\u7ebf\u7684\u8bed\u4e49\u5316\u8868\u8fbe\uff0c\u5c06\u6a2a\u65ad\u9762\u8f6e\u5ed3\u548c\u6a2a\u5761\u4fe1\u606f\u7eb3\u5165\u8def\u7ebf\u7684\u6807\u51c6\u5316\u8868\u8fbe\u8303\u7574\u3002","title":"IFC\u6807\u51c6\u6982\u8ff0"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#ifc-41","text":"\u867d\u7136\u4e3b\u6d41\u7684BIM\u6838\u5fc3\u5efa\u6a21\u8f6f\u4ef6\u5747\u5df2\u652f\u6301IFC\u6807\u51c6\uff0c\u4f46\u5176\u66f4\u65b0\u901f\u5ea6\u5f80\u5f80\u6bd4\u8f83\u6ede\u540e\uff0c\u76ee\u524d\u7edd\u5927\u591a\u6570BIM\u5e94\u7528\u8f6f\u4ef6\u6700\u9ad8\u652f\u6301IFC 4.1\u7248\u672c\uff0c\u56e0\u6b64\u672c\u7814\u7a76\u4ee5IFC 4.1\u7248\u672c\u7684\u6587\u4ef6\u683c\u5f0f\u4f5c\u4e3a\u8def\u7ebf\u8f6c\u6362\u7684\u76ee\u6807\u683c\u5f0f\u3002 \u56fe1\u4e3a\u57fa\u4e8eIFC\u6807\u51c6\u7684\u8def\u7ebf\u4fe1\u606f\u6a21\u578b\u3002\u6b63\u5982\u524d\u6587\u6240\u8ff0\uff0cIFC\u6807\u51c6\u4e2d\u4f7f\u7528IfcAlignment\u5b9e\u4f53\u8868\u793a\u8def\u7ebf\u4fe1\u606f\uff0cIfcProject\u548cIfcSite\u5219\u5206\u522b\u4ee3\u8868\u9879\u76ee\u4fe1\u606f\u548c\u573a\u5730\u4fe1\u606f\u3002IfcAlignment\u5b9e\u4f53\u7684\u8def\u7ebf\u51e0\u4f55\u4fe1\u606f\u7531Axis\u5c5e\u6027\u8868\u8fbe\uff0c\u5373IfcAlignmentCurve\u5b9e\u4f53\uff0c\u8be5\u5b9e\u4f53\u4e2dHorizontal\u548cVertical\u5c5e\u6027\u5206\u522b\u5bf9\u5e94\u8def\u7ebf\u4fe1\u606f\u4e2d\u7684\u5e73\u66f2\u7ebf\u548c\u7ad6\u66f2\u7ebf\u3002IFC\u6807\u51c6\u4e2d\u7684\u7ebf\u5143\u7c7b\u522b\u4e0e\u6211\u56fd\u73b0\u884c\u7684\u516c\u8def\u8def\u7ebf\u8bbe\u8ba1\u89c4\u8303\uff08JTG D20-2017\uff09\u4e00\u81f4\u3002\u5e73\u7ad6\u66f2\u7ebf\u7ebf\u5143\u5b9e\u4f53\u7684\u5c5e\u6027\u7ee7\u627f\u5982\u56fe2\u6240\u793a\u3002\u5bf9\u4e8e\u56fd\u5185\u63a8\u8350\u7ebf\u5143\u5b58\u5728\u5dee\u5f02\u7684\u60c5\u51b5\uff0c\u9700\u5bf9\u7ebf\u5143\u5c5e\u6027\u8fdb\u884c\u76f8\u5e94\u8bbe\u7f6e\u4ee5\u9002\u5e94\u672c\u571f\u5316\u9700\u6c42\u3002\u5177\u4f53\u8bbe\u7f6e\u89e3\u6790\u8be6\u89c1\u6210\u679c\u8bba\u6587\u3002 \u56fe1 \u57fa\u4e8eIFC\u6807\u51c6\u7684\u8def\u7ebf\u4fe1\u606f\u6a21\u578b \u56fe2 IFC\u7ebf\u5143\u5b9e\u4f53\u5c5e\u6027\u7ee7\u627f\u56fe","title":"\u57fa\u4e8eIFC 4.1\u6807\u51c6\u7684\u8def\u7ebf\u4fe1\u606f\u6a21\u578b"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#eicadifcalignment","text":"","title":"\u4ee5\u5c0f\u89c1\u5927\uff0c\u521d\u7aa5\u795e\u5a01\uff1aEICAD\u6570\u636e\u4e0eIfcAlignment\u7684\u8f6c\u6362"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#eicad","text":"EICAD\u662f\u4e00\u6b3e\u57fa\u4e8eAutoCAD\u5e73\u53f0\u7684\u96c6\u6210\u4ea4\u4e92\u5f0f\u9053\u8def\u4e0e\u7acb\u4ea4\u8bbe\u8ba1\u8f6f\u4ef6\uff0c\u5176\u8def\u7ebf\u8bbe\u8ba1\u6210\u679c\u53ef\u5bfc\u51fa\u4e3a\u76f8\u5e94\u7684\u6587\u672c\u6587\u4ef6\u8fdb\u884c\u5b58\u50a8\u548c\u4f20\u9012\uff0c\u5176\u4e2d\u5305\u62ec\u4ea4\u70b9\u8bbe\u8ba1\u6587\u4ef6 .JD\u3001\u79ef\u6728\u6cd5\u7ebf\u5143\u5355\u5143\u6587\u4ef6 .ICD\u3001\u7ad6\u66f2\u7ebf\u6587\u4ef6 .SQX\u4ee5\u53ca\u6869\u53f7\u65ad\u94fe\u6587\u4ef6 .DL\u7b49\u3002\u5bf9\u4e8e\u5e73\u66f2\u7ebf\u800c\u8a00\uff0cEICAD\u63d0\u4f9b\u4e86\u4ea4\u70b9\u6cd5\u548c\u79ef\u6728\u6cd5\u4e24\u79cd\u8f93\u51fa\u65b9\u5f0f\uff0c\u800cIFC\u6807\u51c6\u4e2d\u7684\u8def\u7ebf\u8868\u8fbe\u5219\u91c7\u7528\u7684\u662f\u7ebf\u5143\u6cd5\u7684\u601d\u60f3\uff0c\u4e0e\u79ef\u6728\u6cd5\u7c7b\u4f3c\uff0c\u6240\u4ee5\u672c\u6587\u4ec5\u4ee5ICD\u6587\u4ef6\u4f5c\u4e3a\u5e73\u66f2\u7ebf\u7684\u6210\u679c\u6587\u4ef6\u5c55\u5f00\u7814\u7a76\uff0c\u5177\u4f53\u8bba\u8ff0\u8be6\u89c1\u6210\u679c\u8bba\u6587\u3002 \u56fe3 EICAD\u5b9e\u4f8b\u6587\u4ef6 \u88681 EICAD\u4e0eIFC\u7ebf\u5143\u63cf\u8ff0\u5bf9\u7167\u8868","title":"EICAD\u6570\u636e\u89e3\u6790"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#ifc_2","text":"\u5bf9\u6bd4EICAD\u8def\u7ebf\u8f93\u51fa\u6587\u4ef6\uff08\u56fe3\uff09\u4e0eIFC\u7ebf\u5143\u5b9e\u4f53\u5c5e\u6027\u7ee7\u627f\uff08\u56fe2\uff09\uff0c\u4e0d\u96be\u53d1\u73b0\u4e24\u8005\u5747\u901a\u8fc7\u8bb0\u5f55\u8def\u7ebf\u7ebf\u578b\u5355\u5143\u7684\u51e0\u4f55\u7279\u5f81\u6570\u636e\u6765\u63cf\u8ff0\u8def\u7ebf\u4fe1\u606f\uff0c\u56e0\u6b64\u5728\u7ebf\u5143\u53c2\u6570\u65b9\u9762\u5b58\u5728\u4e00\u4e9b\u4ea4\u96c6\u3002\u4f46\u662f\uff0c\u6b63\u5982\u524d\u6587\u6240\u8ff0\uff0c\u57fa\u4e8e\u79ef\u6728\u6cd5\u548c\u4ea4\u70b9\u6cd5\u7684\u8def\u7ebf\u8bbe\u8ba1\u601d\u8def\u5927\u5927\u7b80\u5316\u4e86EICAD\u5e73\u7ad6\u66f2\u7ebf\u7684\u6587\u4ef6\u6570\u636e\uff0c\u800cIFC\u8def\u7ebf\u4fe1\u606f\u7684\u63cf\u8ff0\u65b9\u5f0f\u867d\u91c7\u7528\u4e86\u7ebf\u5143\u6cd5\u7684\u8bbe\u8ba1\u7406\u5ff5\uff0c\u4f46\u5404\u4e2a\u7ebf\u5143\u7684\u53c2\u6570\u8868\u8fbe\u66f4\u52a0\u5b8c\u6574\uff08\u88682\uff09\uff0c\u5373\u6bcf\u4e2a\u7ebf\u578b\u5355\u5143\u53ef\u72ec\u7acb\u5b58\u5728\uff0c\u56e0\u6b64\u5728\u6570\u636e\u6620\u5c04\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u7ecf\u8fc7\u516c\u5f0f\u6362\u7b97\u624d\u80fd\u83b7\u5f97\u5b8c\u6574\u7684IFC\u7ebf\u5143\u5c5e\u6027\u503c\uff0c\u5177\u4f53\u516c\u5f0f\u89c1\u6210\u679c\u8bba\u6587\u3002 \u88682 EICAD\u7ebf\u5143\u53c2\u6570\u4e0eIFC\u7ebf\u5143\u5c5e\u6027\u7684\u5bf9\u6bd4","title":"IFC\u7ebf\u5143\u5c5e\u6027\u503c\u6620\u5c04"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#_3","text":"\u4e3a\u4e86\u9a8c\u8bc1\u4e0a\u8ff0\u65b9\u6cd5\u7684\u53ef\u884c\u6027\uff0c\u6211\u9662\u81ea\u4e3b\u5f00\u53d1\u4e86\u57fa\u4e8eIFC 4.1\u6807\u51c6\u7684EICAD\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u7a0b\u5e8f\uff0c\u8be5\u7a0b\u5e8f\u4e3b\u8981\u5206\u4e3a3\u4e2a\u6a21\u5757\uff1a\u2460\u8f93\u5165\u6a21\u5757\uff0c\u8be5\u6a21\u5757\u7528\u4e8e\u8f93\u5165EICAD\u5e73\u7ad6\u66f2\u7ebf\u8bbe\u8ba1\u6587\u4ef6\u4ee5\u53ca\u65ad\u94fe\u8bbe\u8ba1\u6587\u4ef6\uff1b\u2461\u6570\u636e\u8f6c\u6362\u6a21\u5757\uff0c\u662f\u7a0b\u5e8f\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u627f\u62c5\u5bf9\u8f93\u5165\u6570\u636e\u7684\u53cd\u5e8f\u5217\u5316\u548c\u53c2\u6570\u6620\u5c04\u7684\u4efb\u52a1\uff1b\u2462\u8f93\u51fa\u6a21\u5757\uff0c\u8be5\u6a21\u5757\u501f\u52a9\u4e8exBIM\u89e3\u6790\u5de5\u5177\u5305\u5b9e\u73b0IFC\u5b9e\u4f53\u7684\u521b\u5efa\u3001\u5c5e\u6027\u8d4b\u503c\u4ee5\u53ca\u6570\u636e\u5bfc\u51fa\u7684\u529f\u80fd\u3002 \u91c7\u75283DEXPERIENCE R2019x\u5bf9\u5bfc\u51fa\u7684IFC\u6587\u4ef6\u8fdb\u884c\u9a8c\u8bc1\uff0c\u8be5\u8f6f\u4ef6\u652f\u6301IFC 4.1\u8def\u7ebf\u5bfc\u5165\u529f\u80fd\u3002\u5728\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u7a0b\u5e8f\u80fd\u591f\u5feb\u901f\u5730\u5b8c\u6210\u6570\u636e\u8f6c\u6362\u5de5\u4f5c\u3002\u5c06\u8f6c\u6362\u540e\u7684IFC\u6587\u4ef6\u5bfc\u5165CATIA\u8f6f\u4ef6\u540e\u7684\u53ef\u89c6\u5316\u6548\u679c\u5982\u56fe4\u6240\u793a\u3002\u7ed3\u679c\u8868\u660eCATIA\u80fd\u591f\u51c6\u786e\u5730\u8bc6\u522b\u51faIFC\u8def\u7ebf\u4fe1\u606f\uff0c\u5e76\u5728\u7ed3\u6784\u6811\u4e2d\u4fdd\u7559\u5e73\u7ad6\u66f2\u7ebf\u7684\u5b9a\u4e49\uff0c\u4e14\u751f\u6210\u7684\u8def\u7ebf\u5177\u6709\u53ef\u7f16\u8f91\u6027\u3002 \u56fe4 IFC\u8def\u7ebf\u5bfc\u5165\u7ed3\u679c","title":"\u7a0b\u5e8f\u5b9e\u73b0\u4e0e\u5e94\u7528\u6848\u4f8b"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#_4","text":"\u6211\u9662\u6240\u5f00\u53d1\u7684\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u7a0b\u5e8f\u89e3\u51b3\u4e86\u5229\u7528\u8fbe\u7d22\u7cfb\u7edf3DEXPERIENCE\u5e73\u53f0\u8fdb\u884c\u4e8c\u4e09\u7ef4\u534f\u540c\u8bbe\u8ba1\u65f6\u8def\u7ebf\u6570\u636e\u65e0\u6cd5\u6709\u6548\u4f20\u9012\u7684\u95ee\u9898\uff0c\u5177\u6709\u7cbe\u5ea6\u9ad8\u3001\u517c\u5bb9\u6027\u5f3a\u3001\u9ad8\u5ea6\u96c6\u6210\u7b49\u4f18\u70b9\uff0c\u4e14\u80fd\u591f\u8f83\u4e3a\u5b8c\u6574\u5730\u8fd8\u539f\u8def\u7ebf\u8bbe\u8ba1\u4fe1\u606f\uff0c\u5bf9\u63a8\u8fdb\u7ebf\u6027\u5de5\u7a0b\u9879\u76ee\u7684\u6b63\u5411\u8bbe\u8ba1\u548c\u57fa\u4e8eBIM\u6a21\u578b\u7684\u8def\u7ebf\u8bbe\u8ba1\u5408\u89c4\u5ba1\u67e5\u5177\u6709\u91cd\u8981\u610f\u4e49","title":"\u7ed3\u8bed"},{"location":"ISE-AEC/CIV-Tunnel%20R%26D%20Process/Tunnel%20R%26D%20Process/","text":"\u96a7\u9053\u521b\u5efa/Tunnel R&D Process \u52a0\u8f7dPC\u6a21\u677f \u8bbe\u7f6e\u8f93\u5165\u6761\u4ef6 \u96a7\u9053\u4e2d\u5fc3\u7ebf \u8d77\u59cb\u8f74\u7cfb \u534a\u5f84\u53c2\u6570 \u539a\u5ea6\u53c2\u6570 DS CODE Let i ( Integer ) Let obj1 ( Feature ) Let Axs ( AxisSystem ) Let Agl ( ANGLE ) i = 1 let rootFeat ( PartFeature ) let repRef ( VPMRepReference ) let temp ( Feature ) let Destination_Body ( BodyFeature ) let testangle ( ANGLE ) repRef = GetPLMOwner ( ` xy \u5e73\u9762 ` ) rootFeat = repRef -> Find ( \"PartFeature\" , \"\" , TRUE ) Destination_Body = new ( \"OpenBodyFeature\" , \"UDF_Rings\" , rootFeat ) For i while i <= int ( length ( ` \u5bf9\u9f50\u96c6 .2 \\ \u5bf9\u9f50 .2 \\ 3D \u5bf9\u9f50 .1 ` , First_Axis \\ First_Ring_Position , Pattern_Limit \\ Last_Ring_Limit ) / (( 2 * Lmax - p ) / 2 )) { set obj1 = CreateOrModifyTemplate ( \"Resource1\" , Destination_Body , ` \u5173\u7cfb \\ KP_Rings_Instantiation \\ \u5217\u8868 .1 ` , i ) if i == 1 { obj1 -> SetAttributeObject ( \"Axis System\" , ` First_Axis \\ \u8f74\u7cfb .984 ` ) obj1 -> SetAttributeObject ( \"3D_Alignment\" , ` \u5bf9\u9f50\u96c6 .2 \\ \u5bf9\u9f50 .2 \\ 3D \u5bf9\u9f50 .1 ` ) obj1 -> SetAttributeDimension ( \"Rotation_computed_from_previous_ring\" , 0d eg , \"ANGLE\" ) obj1 -> SetAttributeDimension ( \"Lmax\" , Lmax , \"LENGTH\" ) obj1 -> SetAttributeDimension ( \"p\" , p , \"LENGTH\" ) obj1 -> SetAttributeDimension ( \"Thickness\" , Thickness , \"LENGTH\" ) obj1 -> SetAttributeReal ( \"Coef\" , Coef ) obj1 -> SetAttributeDimension ( \"Radius\" , Radius , \"LENGTH\" ) } else { obj1 -> SetAttributeObject ( \"Axis System\" , Axs ) obj1 -> SetAttributeObject ( \"3D_Alignment\" , ` \u5bf9\u9f50\u96c6 .2 \\ \u5bf9\u9f50 .2 \\ 3D \u5bf9\u9f50 .1 ` ) obj1 -> SetAttributeDimension ( \"Radius\" , Radius , \"LENGTH\" ) obj1 -> SetAttributeDimension ( \"Lmax\" , Lmax , \"LENGTH\" ) obj1 -> SetAttributeDimension ( \"p\" , p , \"LENGTH\" ) obj1 -> SetAttributeDimension ( \"Thickness\" , Thickness , \"LENGTH\" ) obj1 -> SetAttributeDimension ( \"Rotation_computed_from_previous_ring\" , Agl , \"ANGLE\" ) obj1 -> SetAttributeReal ( \"Coef\" , Coef ) } EndModifyTemplate ( obj1 ) obj1 . Name = \"Ring #\" + ToString ( i ) Axs = obj1 -> GetAttributeObject ( \"Output_Axis_System\" ) testangle = obj1 -> GetAttributeReal ( \"Angle_for_next_ring\" ) /* we force a 30deg angle betwen 2 rings to avoid having the keystone ring segment at the same position between 2 consecutive rings */ if testangle < 30 deg Agl = ( testangle + 30 deg ) * 180 deg / PI else if testangle > 330 deg Agl = ( testangle - 30 deg ) * 180 deg / PI else Agl = testangle /*Notify(\"angle #\",Agl)*/ i = i + 1 }","title":"\u96a7\u9053\u521b\u5efa/Tunnel R&D Process"},{"location":"ISE-AEC/CIV-Tunnel%20R%26D%20Process/Tunnel%20R%26D%20Process/#tunnel-rd-process","text":"\u52a0\u8f7dPC\u6a21\u677f \u8bbe\u7f6e\u8f93\u5165\u6761\u4ef6 \u96a7\u9053\u4e2d\u5fc3\u7ebf \u8d77\u59cb\u8f74\u7cfb \u534a\u5f84\u53c2\u6570 \u539a\u5ea6\u53c2\u6570","title":"\u96a7\u9053\u521b\u5efa/Tunnel R&amp;D Process"},{"location":"ISE-AEC/CIV-Tunnel%20R%26D%20Process/Tunnel%20R%26D%20Process/#ds-code","text":"Let i ( Integer ) Let obj1 ( Feature ) Let Axs ( AxisSystem ) Let Agl ( ANGLE ) i = 1 let rootFeat ( PartFeature ) let repRef ( VPMRepReference ) let temp ( Feature ) let Destination_Body ( BodyFeature ) let testangle ( ANGLE ) repRef = GetPLMOwner ( ` xy \u5e73\u9762 ` ) rootFeat = repRef -> Find ( \"PartFeature\" , \"\" , TRUE ) Destination_Body = new ( \"OpenBodyFeature\" , \"UDF_Rings\" , rootFeat ) For i while i <= int ( length ( ` \u5bf9\u9f50\u96c6 .2 \\ \u5bf9\u9f50 .2 \\ 3D \u5bf9\u9f50 .1 ` , First_Axis \\ First_Ring_Position , Pattern_Limit \\ Last_Ring_Limit ) / (( 2 * Lmax - p ) / 2 )) { set obj1 = CreateOrModifyTemplate ( \"Resource1\" , Destination_Body , ` \u5173\u7cfb \\ KP_Rings_Instantiation \\ \u5217\u8868 .1 ` , i ) if i == 1 { obj1 -> SetAttributeObject ( \"Axis System\" , ` First_Axis \\ \u8f74\u7cfb .984 ` ) obj1 -> SetAttributeObject ( \"3D_Alignment\" , ` \u5bf9\u9f50\u96c6 .2 \\ \u5bf9\u9f50 .2 \\ 3D \u5bf9\u9f50 .1 ` ) obj1 -> SetAttributeDimension ( \"Rotation_computed_from_previous_ring\" , 0d eg , \"ANGLE\" ) obj1 -> SetAttributeDimension ( \"Lmax\" , Lmax , \"LENGTH\" ) obj1 -> SetAttributeDimension ( \"p\" , p , \"LENGTH\" ) obj1 -> SetAttributeDimension ( \"Thickness\" , Thickness , \"LENGTH\" ) obj1 -> SetAttributeReal ( \"Coef\" , Coef ) obj1 -> SetAttributeDimension ( \"Radius\" , Radius , \"LENGTH\" ) } else { obj1 -> SetAttributeObject ( \"Axis System\" , Axs ) obj1 -> SetAttributeObject ( \"3D_Alignment\" , ` \u5bf9\u9f50\u96c6 .2 \\ \u5bf9\u9f50 .2 \\ 3D \u5bf9\u9f50 .1 ` ) obj1 -> SetAttributeDimension ( \"Radius\" , Radius , \"LENGTH\" ) obj1 -> SetAttributeDimension ( \"Lmax\" , Lmax , \"LENGTH\" ) obj1 -> SetAttributeDimension ( \"p\" , p , \"LENGTH\" ) obj1 -> SetAttributeDimension ( \"Thickness\" , Thickness , \"LENGTH\" ) obj1 -> SetAttributeDimension ( \"Rotation_computed_from_previous_ring\" , Agl , \"ANGLE\" ) obj1 -> SetAttributeReal ( \"Coef\" , Coef ) } EndModifyTemplate ( obj1 ) obj1 . Name = \"Ring #\" + ToString ( i ) Axs = obj1 -> GetAttributeObject ( \"Output_Axis_System\" ) testangle = obj1 -> GetAttributeReal ( \"Angle_for_next_ring\" ) /* we force a 30deg angle betwen 2 rings to avoid having the keystone ring segment at the same position between 2 consecutive rings */ if testangle < 30 deg Agl = ( testangle + 30 deg ) * 180 deg / PI else if testangle > 330 deg Agl = ( testangle - 30 deg ) * 180 deg / PI else Agl = testangle /*Notify(\"angle #\",Agl)*/ i = i + 1 }","title":"DS CODE"},{"location":"ISE-AEC/DRW-Drafting/%E5%87%BA%E5%9B%BE/","text":"\u51fa\u56fe 1\u3001\u6574\u4f53\u6a21\u578b\u7684\u89c6\u56fe\u5982\u4f55\u548c\u5c40\u90e8\u96f6\u4ef6\u7684\u89c6\u56fe\u7ec4\u7ec7\u5728\u4e00\u5f20\u56fe\u7eb8\u4e2d\uff1f \u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff1a \u9009\u62e9\u51fa\u56fe\u6309\u94ae\uff1b \u9009\u62e9\u4f60\u60f3\u8981\u7684\u72ec\u7acb\u6784\u4ef6\uff1b \u5982\u679c\u76f4\u63a5\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff0c\u5c06\u751f\u6210\u6240\u6709\u7684\u6784\u4ef6\u7ec4\u5408\u7684\u56fe\u7eb8\uff1b \u5982\u679c\u5148\u9009\u62e9\u6784\u4ef6\uff0c\u518d\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff0c\u5982\u679c\u51fa\u56fe\u5728\u4e00\u4e2apart \u5185\uff0c\u5148\u9009\u51e0\u4f55\u56fe\u5f62\u96c6\uff0c\u518d\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff1b \u6700\u7ec8\u7ed3\u679c\u5982\u4e0b\uff0c\u5177\u4f53\u4f4d\u7f6e\u5982\u679c\u60f3\u5355\u72ec\u5c55\u793a\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u53e0\u5408\uff1b 2\u3001\u6807\u6ce8\u80fd\u5b9e\u73b0\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u81ea\u52a8\u5316\u5417\uff1f\u5982\u679c\u80fd\uff0c\u7528\u4ec0\u4e48\u6280\u672f\uff1f \u53c2\u8003\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u5728\u5efa\u6a21\u73af\u5883\u4e2d\uff0c\u91ca\u653e\u51fa\u6807\u6ce8\u7684\u5173\u952e\u70b9\u4f4d\uff0c \u5982\u679c\u60f3\u901a\u8fc7\u5f00\u53d1\u53bb\u81ea\u52a8\u6807\u6ce8\uff0c\u9700\u8981\u4ee3\u7801\u5148\u56de\u5230\u7b2c\u4e00\u4e2a\u4ea7\u54c1\u7684\u7b2c\u4e00\u4e2a\u96f6\u4ef6\uff0c\u83b7\u5f97\u6807\u6ce8\u70b9\u6240\u5728\u76843D\u5750\u6807\u503c\uff0c\u7136\u540e\u56de\u52302D\u56fe\u7eb8\u4e2d\uff0c\u83b7\u5f97\u5750\u6807\u503c\u7684\u4e24\u4e2a\u7ef4\u5ea6\u7684\u503c\uff0c\u5b83\u4eec\u90fd\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u518d\u6839\u636eAPI\u63a5\u53e3\u8fdb\u884c\u6839\u636e\u5750\u6807\u503c\uff0c\u91cd\u65b0\u7ed8\u5236\u4e24\u4e2a\u70b9\uff0c\u5bf9\u8fd9\u4e24\u4e2a\u70b9\u8fdb\u884c\u6807\u6ce8\uff1b \u6240\u6709\u89d2\u5ea6\u6807\u6ce8\uff0c\u6587\u5b57\u6807\u6ce8\u90fd\u9700\u8981\u8fdb\u884c\u4ee5\u4e0a\u7684\u64cd\u4f5c\uff1b \u5bf9\u4e8e\u672c\u4f8b\u6765\u8bf4\u6ca1\u6709\u5fc5\u8981\uff0c\u5b83\u4eec\u7684\u53d8\u5316\u90fd\u662f\u5c3a\u5bf8\u8303\u56f4\u5185\u7684\uff0c\u628a\u6807\u6ce8\u505a\u5728\u6a21\u677f\u6587\u4ef6\u91cc\u9762\uff0c\u5b9e\u4f8b\u5316\u540e\u5373\u53ef\u81ea\u52a8\u751f\u6210\u6807\u6ce8\uff0c\u4e5f\u80fd\u81ea\u52a8\u66f4\u65b0\uff1b \u53ea\u6709\u5728\u52a8\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u9002\u7528\u4e0e\u4ee3\u7801\u8fdb\u884c\u6807\u6ce8\uff0c\u4f8b\u5982\u4f60\u60f3\u751f\u6210\u8fde\u7eed\u6881\u7684\u7acb\u9762\u5c55\u5f00\u56fe\uff0c\u5728\u5e76\u4e0d\u786e\u5b9a\u6709\u591a\u5c11\u8de8\u6881\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u52a8\u5f00\u53d1\u6807\u6ce8\uff1b 3\u3001\u50cf\u6841\u67b6\u8282\u6bb5\u8fd9\u6837\u7684\u7ed3\u6784\u662f\u4e0d\u65ad\u91cd\u590d\u7684\u7ed3\u6784\uff0c\u5176\u4e8c\u7ef4\u56fe\u80fd\u505a\u6210\u6a21\u677f\u5417\uff1f \u53c2\u8003 1 \u7684\u6b65\u9aa4\uff0c\u7136\u540e\u5bf9\u6784\u4ef6\u8fdb\u884c\u6807\u6ce8\uff0c\u628a\u8fd9\u4e9b\u6574\u4f53\u505a\u6210\u5de5\u7a0b\u6a21\u677f\uff0c\u5b9e\u4f8b\u5316\u4e4b\u540e\u5373\u53ef\u81ea\u52a8\u751f\u6210\u56fe\u7eb8\u3002","title":"\u51fa\u56fe"},{"location":"ISE-AEC/DRW-Drafting/%E5%87%BA%E5%9B%BE/#_1","text":"1\u3001\u6574\u4f53\u6a21\u578b\u7684\u89c6\u56fe\u5982\u4f55\u548c\u5c40\u90e8\u96f6\u4ef6\u7684\u89c6\u56fe\u7ec4\u7ec7\u5728\u4e00\u5f20\u56fe\u7eb8\u4e2d\uff1f \u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff1a \u9009\u62e9\u51fa\u56fe\u6309\u94ae\uff1b \u9009\u62e9\u4f60\u60f3\u8981\u7684\u72ec\u7acb\u6784\u4ef6\uff1b \u5982\u679c\u76f4\u63a5\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff0c\u5c06\u751f\u6210\u6240\u6709\u7684\u6784\u4ef6\u7ec4\u5408\u7684\u56fe\u7eb8\uff1b \u5982\u679c\u5148\u9009\u62e9\u6784\u4ef6\uff0c\u518d\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff0c\u5982\u679c\u51fa\u56fe\u5728\u4e00\u4e2apart \u5185\uff0c\u5148\u9009\u51e0\u4f55\u56fe\u5f62\u96c6\uff0c\u518d\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff1b \u6700\u7ec8\u7ed3\u679c\u5982\u4e0b\uff0c\u5177\u4f53\u4f4d\u7f6e\u5982\u679c\u60f3\u5355\u72ec\u5c55\u793a\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u53e0\u5408\uff1b 2\u3001\u6807\u6ce8\u80fd\u5b9e\u73b0\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u81ea\u52a8\u5316\u5417\uff1f\u5982\u679c\u80fd\uff0c\u7528\u4ec0\u4e48\u6280\u672f\uff1f \u53c2\u8003\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u5728\u5efa\u6a21\u73af\u5883\u4e2d\uff0c\u91ca\u653e\u51fa\u6807\u6ce8\u7684\u5173\u952e\u70b9\u4f4d\uff0c \u5982\u679c\u60f3\u901a\u8fc7\u5f00\u53d1\u53bb\u81ea\u52a8\u6807\u6ce8\uff0c\u9700\u8981\u4ee3\u7801\u5148\u56de\u5230\u7b2c\u4e00\u4e2a\u4ea7\u54c1\u7684\u7b2c\u4e00\u4e2a\u96f6\u4ef6\uff0c\u83b7\u5f97\u6807\u6ce8\u70b9\u6240\u5728\u76843D\u5750\u6807\u503c\uff0c\u7136\u540e\u56de\u52302D\u56fe\u7eb8\u4e2d\uff0c\u83b7\u5f97\u5750\u6807\u503c\u7684\u4e24\u4e2a\u7ef4\u5ea6\u7684\u503c\uff0c\u5b83\u4eec\u90fd\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u518d\u6839\u636eAPI\u63a5\u53e3\u8fdb\u884c\u6839\u636e\u5750\u6807\u503c\uff0c\u91cd\u65b0\u7ed8\u5236\u4e24\u4e2a\u70b9\uff0c\u5bf9\u8fd9\u4e24\u4e2a\u70b9\u8fdb\u884c\u6807\u6ce8\uff1b \u6240\u6709\u89d2\u5ea6\u6807\u6ce8\uff0c\u6587\u5b57\u6807\u6ce8\u90fd\u9700\u8981\u8fdb\u884c\u4ee5\u4e0a\u7684\u64cd\u4f5c\uff1b \u5bf9\u4e8e\u672c\u4f8b\u6765\u8bf4\u6ca1\u6709\u5fc5\u8981\uff0c\u5b83\u4eec\u7684\u53d8\u5316\u90fd\u662f\u5c3a\u5bf8\u8303\u56f4\u5185\u7684\uff0c\u628a\u6807\u6ce8\u505a\u5728\u6a21\u677f\u6587\u4ef6\u91cc\u9762\uff0c\u5b9e\u4f8b\u5316\u540e\u5373\u53ef\u81ea\u52a8\u751f\u6210\u6807\u6ce8\uff0c\u4e5f\u80fd\u81ea\u52a8\u66f4\u65b0\uff1b \u53ea\u6709\u5728\u52a8\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u9002\u7528\u4e0e\u4ee3\u7801\u8fdb\u884c\u6807\u6ce8\uff0c\u4f8b\u5982\u4f60\u60f3\u751f\u6210\u8fde\u7eed\u6881\u7684\u7acb\u9762\u5c55\u5f00\u56fe\uff0c\u5728\u5e76\u4e0d\u786e\u5b9a\u6709\u591a\u5c11\u8de8\u6881\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u52a8\u5f00\u53d1\u6807\u6ce8\uff1b 3\u3001\u50cf\u6841\u67b6\u8282\u6bb5\u8fd9\u6837\u7684\u7ed3\u6784\u662f\u4e0d\u65ad\u91cd\u590d\u7684\u7ed3\u6784\uff0c\u5176\u4e8c\u7ef4\u56fe\u80fd\u505a\u6210\u6a21\u677f\u5417\uff1f \u53c2\u8003 1 \u7684\u6b65\u9aa4\uff0c\u7136\u540e\u5bf9\u6784\u4ef6\u8fdb\u884c\u6807\u6ce8\uff0c\u628a\u8fd9\u4e9b\u6574\u4f53\u505a\u6210\u5de5\u7a0b\u6a21\u677f\uff0c\u5b9e\u4f8b\u5316\u4e4b\u540e\u5373\u53ef\u81ea\u52a8\u751f\u6210\u56fe\u7eb8\u3002","title":"\u51fa\u56fe"},{"location":"ISE-AEC/ISE-%E9%92%A2%E7%BB%93%E6%9E%84/%E9%92%A2%E7%BB%93%E6%9E%84%E6%A2%81/","text":"\u94a2\u7ed3\u6784\u6881\u5efa\u6a21\u601d\u8003 \u5148\u6784\u9020\u51fa\u5916\u56f4\u77e9\u5f62\u5708\uff1b \u5728\u5916\u56f4\u56db\u4e2a\u66f2\u9762\u7ed8\u5236\u51fa\u52a0\u5f3a\u808b\u677f\uff1b \u57fa\u4e8e\u5df2\u7ecf\u751f\u6210\u7684\u808b\u677f\u5b9e\u4f8b\u5316\u8d2f\u7a7f\u5b54\u66f2\u7ebf\u548c\u56db\u4e2a\u62d0\u89d2\u901a\u710a\u5b54\uff1b \u586b\u5145\u5916\u56f4\u66f2\u9762\uff1b \u8ba9\u586b\u5145\u7684\u66f2\u9762\u4e0e\u8d2f\u7a7f\u5b54\u66f2\u7ebf\u505a\u9012\u5f52\u4fee\u526a\uff1b \u52a0\u539a\u6240\u6709\u66f2\u9762\uff1b","title":"\u94a2\u7ed3\u6784\u6881\u5efa\u6a21\u601d\u8003"},{"location":"ISE-AEC/ISE-%E9%92%A2%E7%BB%93%E6%9E%84/%E9%92%A2%E7%BB%93%E6%9E%84%E6%A2%81/#_1","text":"\u5148\u6784\u9020\u51fa\u5916\u56f4\u77e9\u5f62\u5708\uff1b \u5728\u5916\u56f4\u56db\u4e2a\u66f2\u9762\u7ed8\u5236\u51fa\u52a0\u5f3a\u808b\u677f\uff1b \u57fa\u4e8e\u5df2\u7ecf\u751f\u6210\u7684\u808b\u677f\u5b9e\u4f8b\u5316\u8d2f\u7a7f\u5b54\u66f2\u7ebf\u548c\u56db\u4e2a\u62d0\u89d2\u901a\u710a\u5b54\uff1b \u586b\u5145\u5916\u56f4\u66f2\u9762\uff1b \u8ba9\u586b\u5145\u7684\u66f2\u9762\u4e0e\u8d2f\u7a7f\u5b54\u66f2\u7ebf\u505a\u9012\u5f52\u4fee\u526a\uff1b \u52a0\u539a\u6240\u6709\u66f2\u9762\uff1b","title":"\u94a2\u7ed3\u6784\u6881\u5efa\u6a21\u601d\u8003"},{"location":"ISE-AEC/REBAR-%E5%9F%BA%E4%BA%8E%E9%92%A2%E7%AD%8B%E7%9A%84%E5%BB%BA%E6%A8%A1%E8%AE%BA%E6%96%87/%E6%95%B0%E5%AD%97%E5%8C%96%E8%BE%85%E5%8A%A9%E8%AE%BE%E8%AE%A1%E6%A1%A5%E6%A2%81%E9%92%A2%E7%AD%8B%E5%BB%BA%E6%A8%A1/","text":"\u57fa\u4e8eCATIA \u7684\u94a2\u7b4b\u5efa\u6a21 \u9876\u90e8\u76d6\u6881\u94a2\u7b4b\u521b\u5efa\u65b9\u6cd5 let icount ( integer ) let i ( integer ) let pt ( point ) let ln , ln1 , ln2 ( line ) let pln ( plane ) let crv , ocrv ( curve ) let surf ( surface ) ln = ` TOP_REBAR \\ CONSTRUCTION \\ \u76f4\u7ebf .1 ` surf = ` \u51e0\u4f55\u56fe\u5f62\u96c6 .6 \\ TOP_SURF ` icount = length ( ln ) / 150 mm i = 1 for i while i <= icount { pt = CreateOrModifyDatum ( \"Point\" , TOP_REBAR \\ KP_DATUM \\ POINTS , TOP_REBAR \\ KP_GEN_REBAR \\ Point , i ) pt = pointoncurveRatio ( ln , NULL ,( i - 1 ) / ( icount - 1 ), false ) pt . Name = \"PT_\" + ToString ( i ) pln = CreateOrModifyDatum ( \"plane\" , TOP_REBAR \\ KP_DATUM \\ PLANES , TOP_REBAR \\ KP_GEN_REBAR \\ Plane , i ) pln = planenormal ( ln , pt ) pln . Name = \"PLN_\" + ToString ( i ) crv = intersect ( pln , surf ) ln1 = linetangent ( crv , pointoncurveRatio ( crv , NULL , 0 , false ), - 400 mm , 0 mm , false ) ln2 = linetangent ( crv , pointoncurveRatio ( crv , NULL , 1 , false ), - 400 mm , 0 mm , true ) ocrv = CreateOrModifyDatum ( \"curve\" , TOP_REBAR \\ KP_DATUM \\ CURVES , TOP_REBAR \\ KP_GEN_REBAR \\ Curves , i ) ocrv = assemble ( ln1 , ln2 , crv ) ocrv . Name = \"CRV_\" + ToString ( i ) } \u94a2\u7b4b\u5957\u7b52\u7684\u521b\u5efa\u65b9\u6cd5 \u94a2\u7b4b\u5957\u7b52\u53ef\u4ee5\u4e0e\u6df7\u51dd\u571f\u653e\u5728\u4e00\u8d77\u521b\u5efa\uff0c\u6700\u7ec8\u751f\u6210\u7684\u5b54\u6d1e\u4e0e\u6df7\u51dd\u571f\u5b9e\u4f53\u8fdb\u884c\u5e03\u5c14\u8fd0\u7b97\uff0c\u81ea\u52a8\u5c31\u526a\u6389\u591a\u4f59\u7684\u6df7\u51dd\u571f\u3002 \u6321\u5757\u7684\u5efa\u6a21","title":"\u6570\u5b57\u5316\u8f85\u52a9\u8bbe\u8ba1\u6865\u6881\u94a2\u7b4b\u5efa\u6a21"},{"location":"ISE-AEC/REBAR-%E5%9F%BA%E4%BA%8E%E9%92%A2%E7%AD%8B%E7%9A%84%E5%BB%BA%E6%A8%A1%E8%AE%BA%E6%96%87/%E6%95%B0%E5%AD%97%E5%8C%96%E8%BE%85%E5%8A%A9%E8%AE%BE%E8%AE%A1%E6%A1%A5%E6%A2%81%E9%92%A2%E7%AD%8B%E5%BB%BA%E6%A8%A1/#catia","text":"","title":"\u57fa\u4e8eCATIA \u7684\u94a2\u7b4b\u5efa\u6a21"},{"location":"ISE-AEC/REBAR-%E5%9F%BA%E4%BA%8E%E9%92%A2%E7%AD%8B%E7%9A%84%E5%BB%BA%E6%A8%A1%E8%AE%BA%E6%96%87/%E6%95%B0%E5%AD%97%E5%8C%96%E8%BE%85%E5%8A%A9%E8%AE%BE%E8%AE%A1%E6%A1%A5%E6%A2%81%E9%92%A2%E7%AD%8B%E5%BB%BA%E6%A8%A1/#_1","text":"let icount ( integer ) let i ( integer ) let pt ( point ) let ln , ln1 , ln2 ( line ) let pln ( plane ) let crv , ocrv ( curve ) let surf ( surface ) ln = ` TOP_REBAR \\ CONSTRUCTION \\ \u76f4\u7ebf .1 ` surf = ` \u51e0\u4f55\u56fe\u5f62\u96c6 .6 \\ TOP_SURF ` icount = length ( ln ) / 150 mm i = 1 for i while i <= icount { pt = CreateOrModifyDatum ( \"Point\" , TOP_REBAR \\ KP_DATUM \\ POINTS , TOP_REBAR \\ KP_GEN_REBAR \\ Point , i ) pt = pointoncurveRatio ( ln , NULL ,( i - 1 ) / ( icount - 1 ), false ) pt . Name = \"PT_\" + ToString ( i ) pln = CreateOrModifyDatum ( \"plane\" , TOP_REBAR \\ KP_DATUM \\ PLANES , TOP_REBAR \\ KP_GEN_REBAR \\ Plane , i ) pln = planenormal ( ln , pt ) pln . Name = \"PLN_\" + ToString ( i ) crv = intersect ( pln , surf ) ln1 = linetangent ( crv , pointoncurveRatio ( crv , NULL , 0 , false ), - 400 mm , 0 mm , false ) ln2 = linetangent ( crv , pointoncurveRatio ( crv , NULL , 1 , false ), - 400 mm , 0 mm , true ) ocrv = CreateOrModifyDatum ( \"curve\" , TOP_REBAR \\ KP_DATUM \\ CURVES , TOP_REBAR \\ KP_GEN_REBAR \\ Curves , i ) ocrv = assemble ( ln1 , ln2 , crv ) ocrv . Name = \"CRV_\" + ToString ( i ) }","title":"\u9876\u90e8\u76d6\u6881\u94a2\u7b4b\u521b\u5efa\u65b9\u6cd5"},{"location":"ISE-AEC/REBAR-%E5%9F%BA%E4%BA%8E%E9%92%A2%E7%AD%8B%E7%9A%84%E5%BB%BA%E6%A8%A1%E8%AE%BA%E6%96%87/%E6%95%B0%E5%AD%97%E5%8C%96%E8%BE%85%E5%8A%A9%E8%AE%BE%E8%AE%A1%E6%A1%A5%E6%A2%81%E9%92%A2%E7%AD%8B%E5%BB%BA%E6%A8%A1/#_2","text":"\u94a2\u7b4b\u5957\u7b52\u53ef\u4ee5\u4e0e\u6df7\u51dd\u571f\u653e\u5728\u4e00\u8d77\u521b\u5efa\uff0c\u6700\u7ec8\u751f\u6210\u7684\u5b54\u6d1e\u4e0e\u6df7\u51dd\u571f\u5b9e\u4f53\u8fdb\u884c\u5e03\u5c14\u8fd0\u7b97\uff0c\u81ea\u52a8\u5c31\u526a\u6389\u591a\u4f59\u7684\u6df7\u51dd\u571f\u3002","title":"\u94a2\u7b4b\u5957\u7b52\u7684\u521b\u5efa\u65b9\u6cd5"},{"location":"ISE-AEC/REBAR-%E5%9F%BA%E4%BA%8E%E9%92%A2%E7%AD%8B%E7%9A%84%E5%BB%BA%E6%A8%A1%E8%AE%BA%E6%96%87/%E6%95%B0%E5%AD%97%E5%8C%96%E8%BE%85%E5%8A%A9%E8%AE%BE%E8%AE%A1%E6%A1%A5%E6%A2%81%E9%92%A2%E7%AD%8B%E5%BB%BA%E6%A8%A1/#_3","text":"","title":"\u6321\u5757\u7684\u5efa\u6a21"},{"location":"ISE-AEC/SLN-drafting/%E5%87%BA%E5%9B%BE/","text":"\u51fa\u56fe/Drafting Q&A \u6574\u4f53\u6a21\u578b\u7684\u89c6\u56fe\u5982\u4f55\u548c\u5c40\u90e8\u96f6\u4ef6\u7684\u89c6\u56fe\u7ec4\u7ec7\u5728\u4e00\u5f20\u56fe\u7eb8\u4e2d\uff1f \u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff1a \u9009\u62e9\u51fa\u56fe\u6309\u94ae\uff1b \u9009\u62e9\u4f60\u60f3\u8981\u7684\u72ec\u7acb\u6784\u4ef6\uff1b \u5982\u679c\u76f4\u63a5\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff0c\u5c06\u751f\u6210\u6240\u6709\u7684\u6784\u4ef6\u7ec4\u5408\u7684\u56fe\u7eb8\uff1b \u5982\u679c\u5148\u9009\u62e9\u6784\u4ef6\uff0c\u518d\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff0c\u5982\u679c\u51fa\u56fe\u5728\u4e00\u4e2apart \u5185\uff0c\u5148\u9009\u51e0\u4f55\u56fe\u5f62\u96c6\uff0c\u518d\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff1b \u6700\u7ec8\u7ed3\u679c\u5982\u4e0b\uff0c\u5177\u4f53\u4f4d\u7f6e\u5982\u679c\u60f3\u5355\u72ec\u5c55\u793a\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u53e0\u5408\uff1b \u6807\u6ce8\u80fd\u5b9e\u73b0\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u81ea\u52a8\u5316\u5417\uff1f\u5982\u679c\u80fd\uff0c\u7528\u4ec0\u4e48\u6280\u672f\uff1f \u53c2\u8003\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u5728\u5efa\u6a21\u73af\u5883\u4e2d\uff0c\u91ca\u653e\u51fa\u6807\u6ce8\u7684\u5173\u952e\u70b9\u4f4d\uff0c \u5982\u679c\u60f3\u901a\u8fc7\u5f00\u53d1\u53bb\u81ea\u52a8\u6807\u6ce8\uff0c\u9700\u8981\u4ee3\u7801\u5148\u56de\u5230\u7b2c\u4e00\u4e2a\u4ea7\u54c1\u7684\u7b2c\u4e00\u4e2a\u96f6\u4ef6\uff0c\u83b7\u5f97\u6807\u6ce8\u70b9\u6240\u5728\u76843D\u5750\u6807\u503c\uff0c\u7136\u540e\u56de\u52302D\u56fe\u7eb8\u4e2d\uff0c\u83b7\u5f97\u5750\u6807\u503c\u7684\u4e24\u4e2a\u7ef4\u5ea6\u7684\u503c\uff0c\u5b83\u4eec\u90fd\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u518d\u6839\u636eAPI\u63a5\u53e3\u8fdb\u884c\u6839\u636e\u5750\u6807\u503c\uff0c\u91cd\u65b0\u7ed8\u5236\u4e24\u4e2a\u70b9\uff0c\u5bf9\u8fd9\u4e24\u4e2a\u70b9\u8fdb\u884c\u6807\u6ce8\uff1b \u6240\u6709\u89d2\u5ea6\u6807\u6ce8\uff0c\u6587\u5b57\u6807\u6ce8\u90fd\u9700\u8981\u8fdb\u884c\u4ee5\u4e0a\u7684\u64cd\u4f5c\uff1b \u5bf9\u4e8e\u672c\u4f8b\u6765\u8bf4\u6ca1\u6709\u5fc5\u8981\uff0c\u5b83\u4eec\u7684\u53d8\u5316\u90fd\u662f\u5c3a\u5bf8\u8303\u56f4\u5185\u7684\uff0c\u628a\u6807\u6ce8\u505a\u5728\u6a21\u677f\u6587\u4ef6\u91cc\u9762\uff0c\u5b9e\u4f8b\u5316\u540e\u5373\u53ef\u81ea\u52a8\u751f\u6210\u6807\u6ce8\uff0c\u4e5f\u80fd\u81ea\u52a8\u66f4\u65b0\uff1b \u53ea\u6709\u5728\u52a8\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u9002\u7528\u4e0e\u4ee3\u7801\u8fdb\u884c\u6807\u6ce8\uff0c\u4f8b\u5982\u4f60\u60f3\u751f\u6210\u8fde\u7eed\u6881\u7684\u7acb\u9762\u5c55\u5f00\u56fe\uff0c\u5728\u5e76\u4e0d\u786e\u5b9a\u6709\u591a\u5c11\u8de8\u6881\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u52a8\u5f00\u53d1\u6807\u6ce8\uff1b \u50cf\u6841\u67b6\u8282\u6bb5\u8fd9\u6837\u7684\u7ed3\u6784\u662f\u4e0d\u65ad\u91cd\u590d\u7684\u7ed3\u6784\uff0c\u5176\u4e8c\u7ef4\u56fe\u80fd\u505a\u6210\u6a21\u677f\u5417\uff1f \u53c2\u8003 1 \u7684\u6b65\u9aa4\uff0c\u7136\u540e\u5bf9\u6784\u4ef6\u8fdb\u884c\u6807\u6ce8\uff0c\u628a\u8fd9\u4e9b\u6574\u4f53\u505a\u6210\u5de5\u7a0b\u6a21\u677f\uff0c\u5b9e\u4f8b\u5316\u4e4b\u540e\u5373\u53ef\u81ea\u52a8\u751f\u6210\u56fe\u7eb8\u3002","title":"\u51fa\u56fe/Drafting Q&A"},{"location":"ISE-AEC/SLN-drafting/%E5%87%BA%E5%9B%BE/#drafting-qa","text":"","title":"\u51fa\u56fe/Drafting Q&amp;A"},{"location":"ISE-AEC/SLN-drafting/%E5%87%BA%E5%9B%BE/#_1","text":"\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff1a \u9009\u62e9\u51fa\u56fe\u6309\u94ae\uff1b \u9009\u62e9\u4f60\u60f3\u8981\u7684\u72ec\u7acb\u6784\u4ef6\uff1b \u5982\u679c\u76f4\u63a5\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff0c\u5c06\u751f\u6210\u6240\u6709\u7684\u6784\u4ef6\u7ec4\u5408\u7684\u56fe\u7eb8\uff1b \u5982\u679c\u5148\u9009\u62e9\u6784\u4ef6\uff0c\u518d\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff0c\u5982\u679c\u51fa\u56fe\u5728\u4e00\u4e2apart \u5185\uff0c\u5148\u9009\u51e0\u4f55\u56fe\u5f62\u96c6\uff0c\u518d\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff1b \u6700\u7ec8\u7ed3\u679c\u5982\u4e0b\uff0c\u5177\u4f53\u4f4d\u7f6e\u5982\u679c\u60f3\u5355\u72ec\u5c55\u793a\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u53e0\u5408\uff1b","title":"\u6574\u4f53\u6a21\u578b\u7684\u89c6\u56fe\u5982\u4f55\u548c\u5c40\u90e8\u96f6\u4ef6\u7684\u89c6\u56fe\u7ec4\u7ec7\u5728\u4e00\u5f20\u56fe\u7eb8\u4e2d\uff1f"},{"location":"ISE-AEC/SLN-drafting/%E5%87%BA%E5%9B%BE/#_2","text":"\u53c2\u8003\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u5728\u5efa\u6a21\u73af\u5883\u4e2d\uff0c\u91ca\u653e\u51fa\u6807\u6ce8\u7684\u5173\u952e\u70b9\u4f4d\uff0c \u5982\u679c\u60f3\u901a\u8fc7\u5f00\u53d1\u53bb\u81ea\u52a8\u6807\u6ce8\uff0c\u9700\u8981\u4ee3\u7801\u5148\u56de\u5230\u7b2c\u4e00\u4e2a\u4ea7\u54c1\u7684\u7b2c\u4e00\u4e2a\u96f6\u4ef6\uff0c\u83b7\u5f97\u6807\u6ce8\u70b9\u6240\u5728\u76843D\u5750\u6807\u503c\uff0c\u7136\u540e\u56de\u52302D\u56fe\u7eb8\u4e2d\uff0c\u83b7\u5f97\u5750\u6807\u503c\u7684\u4e24\u4e2a\u7ef4\u5ea6\u7684\u503c\uff0c\u5b83\u4eec\u90fd\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u518d\u6839\u636eAPI\u63a5\u53e3\u8fdb\u884c\u6839\u636e\u5750\u6807\u503c\uff0c\u91cd\u65b0\u7ed8\u5236\u4e24\u4e2a\u70b9\uff0c\u5bf9\u8fd9\u4e24\u4e2a\u70b9\u8fdb\u884c\u6807\u6ce8\uff1b \u6240\u6709\u89d2\u5ea6\u6807\u6ce8\uff0c\u6587\u5b57\u6807\u6ce8\u90fd\u9700\u8981\u8fdb\u884c\u4ee5\u4e0a\u7684\u64cd\u4f5c\uff1b \u5bf9\u4e8e\u672c\u4f8b\u6765\u8bf4\u6ca1\u6709\u5fc5\u8981\uff0c\u5b83\u4eec\u7684\u53d8\u5316\u90fd\u662f\u5c3a\u5bf8\u8303\u56f4\u5185\u7684\uff0c\u628a\u6807\u6ce8\u505a\u5728\u6a21\u677f\u6587\u4ef6\u91cc\u9762\uff0c\u5b9e\u4f8b\u5316\u540e\u5373\u53ef\u81ea\u52a8\u751f\u6210\u6807\u6ce8\uff0c\u4e5f\u80fd\u81ea\u52a8\u66f4\u65b0\uff1b \u53ea\u6709\u5728\u52a8\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u9002\u7528\u4e0e\u4ee3\u7801\u8fdb\u884c\u6807\u6ce8\uff0c\u4f8b\u5982\u4f60\u60f3\u751f\u6210\u8fde\u7eed\u6881\u7684\u7acb\u9762\u5c55\u5f00\u56fe\uff0c\u5728\u5e76\u4e0d\u786e\u5b9a\u6709\u591a\u5c11\u8de8\u6881\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u52a8\u5f00\u53d1\u6807\u6ce8\uff1b","title":"\u6807\u6ce8\u80fd\u5b9e\u73b0\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u81ea\u52a8\u5316\u5417\uff1f\u5982\u679c\u80fd\uff0c\u7528\u4ec0\u4e48\u6280\u672f\uff1f"},{"location":"ISE-AEC/SLN-drafting/%E5%87%BA%E5%9B%BE/#_3","text":"\u53c2\u8003 1 \u7684\u6b65\u9aa4\uff0c\u7136\u540e\u5bf9\u6784\u4ef6\u8fdb\u884c\u6807\u6ce8\uff0c\u628a\u8fd9\u4e9b\u6574\u4f53\u505a\u6210\u5de5\u7a0b\u6a21\u677f\uff0c\u5b9e\u4f8b\u5316\u4e4b\u540e\u5373\u53ef\u81ea\u52a8\u751f\u6210\u56fe\u7eb8\u3002","title":"\u50cf\u6841\u67b6\u8282\u6bb5\u8fd9\u6837\u7684\u7ed3\u6784\u662f\u4e0d\u65ad\u91cd\u590d\u7684\u7ed3\u6784\uff0c\u5176\u4e8c\u7ef4\u56fe\u80fd\u505a\u6210\u6a21\u677f\u5417\uff1f"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/","text":"\u57fa\u4e8e\u8fbe\u7d22\u7cfb\u7edf\u5e73\u53f0\u7684\u76fe\u6784\u96a7\u9053\u5feb\u901f\u51fa\u56fe\u5e94\u7528(SZJY) \u4f5c\u8005\uff1aXXX\u3001\u738b\u5229\u5f3a\u3001\u5218\u8fea\u3001\u7530\u826f 1.\u6458\u8981 2.\u5f15\u8a00 3.\u7814\u53d1\u8def\u7ebf 3.1\u53c2\u6570\u5316\u6a21\u578b 3.1\u8d44\u6599\u7ba1\u7406 3.2\u8bbe\u8ba1\u6570\u636e\u540c\u6b65 4.\u56fe\u7eb8\u751f\u6210 5.\u9879\u76ee\u5e94\u7528 6.\u7ed3\u8bed 7.\u4f5c\u8005\u7b80\u4ecb 8.\u611f\u8c22\u8bed \u8fbe\u7d22\u7cfb\u7edf\u611f\u8c22XXX\u6295\u7a3f\u4ebaXXXX\u5148\u751f\u548c\u8fbe\u8d62\u4fe1\u606f\u5408\u4f5c\u4f19\u4f34\u738b\u5229\u5f3a\u5148\u751f\u3001\u5218\u8fea\u5148\u751f\u3001\u7530\u826f\u5148\u751f\u8d21\u732e\u7684\u9ad8\u8d28\u91cf\u6587\u7ae0\uff0c\u8fbe\u667a\u6c47\u4e09\u91cd\u798f\u5229\u5c06\u5373\u65f6\u5949\u4e0a\u3002\u79ef\u6c99\u6210\u6ee9\uff0c\u79ef\u6d41\u6210\u6e0a\u3002\u8fbe\u7d22\u7cfb\u7edf\u5c06\u5168\u5e74\u6301\u7eed\u9762\u5411\u57fa\u7840\u8bbe\u65bd\u884c\u4e1a\u5e7f\u53ec\u82f1\u96c4\u5e16\uff0c\u5f81\u96c63DEXPERIENCE\u5e73\u53f0\u4f18\u79c0\u884c\u4e1a\u6587\u7ae0\uff0c\u5171\u540c\u6253\u9020\u884c\u4e1a\u77e5\u8bc6\u5171\u4eab\u3001\u7ecf\u9a8c\u4ea4\u6d41\u7684\u65b0\u751f\u6001\uff0c\u52a9\u529b\u6570\u5b57\u5316\u8f6c\u578b\u3002","title":"\u57fa\u4e8e\u8fbe\u7d22\u7cfb\u7edf\u5e73\u53f0\u7684\u76fe\u6784\u96a7\u9053\u5feb\u901f\u51fa\u56fe\u5e94\u7528(SZJY)"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#szjy","text":"\u4f5c\u8005\uff1aXXX\u3001\u738b\u5229\u5f3a\u3001\u5218\u8fea\u3001\u7530\u826f","title":"\u57fa\u4e8e\u8fbe\u7d22\u7cfb\u7edf\u5e73\u53f0\u7684\u76fe\u6784\u96a7\u9053\u5feb\u901f\u51fa\u56fe\u5e94\u7528(SZJY)"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#1","text":"","title":"1.\u6458\u8981"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#2","text":"","title":"2.\u5f15\u8a00"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#3","text":"","title":"3.\u7814\u53d1\u8def\u7ebf"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#31","text":"","title":"3.1\u53c2\u6570\u5316\u6a21\u578b"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#31_1","text":"","title":"3.1\u8d44\u6599\u7ba1\u7406"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#32","text":"","title":"3.2\u8bbe\u8ba1\u6570\u636e\u540c\u6b65"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#4","text":"","title":"4.\u56fe\u7eb8\u751f\u6210"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#5","text":"","title":"5.\u9879\u76ee\u5e94\u7528"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#6","text":"","title":"6.\u7ed3\u8bed"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#7","text":"","title":"7.\u4f5c\u8005\u7b80\u4ecb"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#8","text":"\u8fbe\u7d22\u7cfb\u7edf\u611f\u8c22XXX\u6295\u7a3f\u4ebaXXXX\u5148\u751f\u548c\u8fbe\u8d62\u4fe1\u606f\u5408\u4f5c\u4f19\u4f34\u738b\u5229\u5f3a\u5148\u751f\u3001\u5218\u8fea\u5148\u751f\u3001\u7530\u826f\u5148\u751f\u8d21\u732e\u7684\u9ad8\u8d28\u91cf\u6587\u7ae0\uff0c\u8fbe\u667a\u6c47\u4e09\u91cd\u798f\u5229\u5c06\u5373\u65f6\u5949\u4e0a\u3002\u79ef\u6c99\u6210\u6ee9\uff0c\u79ef\u6d41\u6210\u6e0a\u3002\u8fbe\u7d22\u7cfb\u7edf\u5c06\u5168\u5e74\u6301\u7eed\u9762\u5411\u57fa\u7840\u8bbe\u65bd\u884c\u4e1a\u5e7f\u53ec\u82f1\u96c4\u5e16\uff0c\u5f81\u96c63DEXPERIENCE\u5e73\u53f0\u4f18\u79c0\u884c\u4e1a\u6587\u7ae0\uff0c\u5171\u540c\u6253\u9020\u884c\u4e1a\u77e5\u8bc6\u5171\u4eab\u3001\u7ecf\u9a8c\u4ea4\u6d41\u7684\u65b0\u751f\u6001\uff0c\u52a9\u529b\u6570\u5b57\u5316\u8f6c\u578b\u3002","title":"8.\u611f\u8c22\u8bed"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91%E6%B5%81%E7%A8%8B/%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/","text":"tunnel","title":"tunnel"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91%E6%B5%81%E7%A8%8B/%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/#tunnel","text":"","title":"tunnel"},{"location":"ISE-AEC/Tunnel%20R%26D%20Process/Tunnel%20R%26D%20Process/","text":"Tunnel R&D Process","title":"Tunnel R&D Process"},{"location":"ISE-AEC/Tunnel%20R%26D%20Process/Tunnel%20R%26D%20Process/#tunnel-rd-process","text":"","title":"Tunnel R&amp;D Process"},{"location":"%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/CRDC/%E6%BC%AB%E6%B8%B8%E8%99%9A%E5%8C%96/","text":"\u95ee\u9898\u540d\u79f0 \u6f2b\u6e38\u865a\u5316 \u63d0\u51fa\u90e8\u95e8 \u63d0\u51fa\u4eba\u5458 \u8bb0\u5f55\u65f6\u95f4 2021/08/13 \u95ee\u9898\u63cf\u8ff0 @\u84dd\u8272\u6cb8\u70b9\u2005\u5173\u4e8e\u6f2b\u6e38\u65f6\u5019\u6a21\u578b\u865a\u5316\u7684\u95ee\u9898\uff0c\u662f\u4e0d\u662f\u5f97\u4e13\u9898\u7814\u7a76\u4e00\u4e0b\u554a\uff1f\u6211\u7528\u4e00\u5c0f\u6bb5\u6d4b\u8bd5\u4e86\u4e00\u4e0b\uff0c\u6cbf3d alignment\u6f2b\u6e38\u7684\u65b9\u6cd5\u5012\u662f\u53ef\u884c\uff0c\u4f46\u662f\u64cd\u4f5c\u8d77\u6765\u975e\u5e38\u9ebb\u70e6\uff0c\u9700\u8981\u91cd\u65b0\u628a\u7ebf\u8def\u4e13\u4e1a\u7684\u7ebf\u4f4d\u5168\u90e8\u6574\u7406\u4e00\u904d\uff0c\u5728\u8fbe\u7d22\u91cc\u518d\u91cd\u65b0\u88c5\u5728\u4e00\u8d77\u3002\u8fd8\u6709\u4e2a\u95ee\u9898\uff0c\u4e0d\u5149\u6211\u6709\u8fd9\u4e2a\u6f2b\u6e38\u7684\u9700\u6c42\uff0c\u5f88\u591a\u4e13\u4e1a\u81ea\u5df1\u4e5f\u9700\u8981\u5f55\u5c4f\uff0cwalk through\u7684\u65b9\u5f0f\u6bd4\u8f83\u5f97\u5fc3\u5e94\u624b\uff0c\u6548\u7387\u9ad8\uff0c\u64cd\u4f5c\u65b9\u4fbf\uff0c\u8fd8\u662f\u66f4\u4e60\u60ef\u8fd9\u79cd\u65b9\u5f0f\u3002 \u56de\u590d \u662f\u7684\uff0c\u8fd9\u4e2a\u4e5f\u8981\u4e13\u95e8\u7814\u7a76\u4e0b\u7684\u3002 1. \u5f53\u524d\u5148\u6392\u67e5\u548c\u89e3\u51b3\u4e0bwalk through\u6f2b\u6e38\u865a\u5316\u7684\u539f\u56e0\u3002 \u8fd9\u4e2a\u65b0\u529f\u80fd\u8fd8\u662f\u9762\u5411\u7ebf\u8def\u4e13\u4e1a\u6216\u603b\u4f53\u4e13\u4e1a\uff0c\u5982\u679c\u524d\u671f\u7ebf\u8def\u521b\u5efa\u6216\u8005\u5bfc\u5165\u65f6\uff0c\u6ce8\u610f\u4fdd\u7559\u4e86\u7ebf\u8def\u7279\u5f81\u7684\u8bdd\uff0c\u8fd8\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684\u3002\u53ef\u4ee5\u4e00\u952e\u6cbf\u7ebf\u8def\u81ea\u52a8\u53bb\u6f2b\u6e38\uff0c\u4e0d\u7528\u952e\u76d8\u64cd\u4f5c\u4e86\u3002 \u5176\u4ed6\u4e13\u4e1a\u5982\u679c\u662f\u7ebf\u6027\u6f2b\u6e38\uff0c\u8ba4\u4e3a\u8fd9\u4e2a\u529f\u80fd\u6709\u53ef\u53d6\u4e4b\u5904\u7684\u8bdd\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u804a\u4e00\u4e0b\uff0c\u662f\u600e\u6837\u4e00\u4e2a\u573a\u666f\u3002 \u4e4b\u524d\u8fd9\u8fb9\uff0c\u505a\u8fc7\u5982\u4e0b\u64cd\u4f5c\uff0c\u6ca1\u6709\u6548\u679c\uff1a \u8bbe\u7f6e\u663e\u793a\u7cbe\u5ea6 Visual Quality\u89c6\u89c9\u8d28\u91cf\u8c03\u6574 \u6211\u4e00\u822c\u8bbe\u7f6e6-11 Status Owner ER/SR/Methodology SR/ER ID Category","title":"\u6f2b\u6e38\u865a\u5316"},{"location":"%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/CRDC/%E6%BC%AB%E6%B8%B8%E8%99%9A%E5%8C%96/#_1","text":"\u6f2b\u6e38\u865a\u5316","title":"\u95ee\u9898\u540d\u79f0"},{"location":"%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/CRDC/%E6%BC%AB%E6%B8%B8%E8%99%9A%E5%8C%96/#_2","text":"","title":"\u63d0\u51fa\u90e8\u95e8"},{"location":"%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/CRDC/%E6%BC%AB%E6%B8%B8%E8%99%9A%E5%8C%96/#_3","text":"","title":"\u63d0\u51fa\u4eba\u5458"},{"location":"%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/CRDC/%E6%BC%AB%E6%B8%B8%E8%99%9A%E5%8C%96/#_4","text":"2021/08/13","title":"\u8bb0\u5f55\u65f6\u95f4"},{"location":"%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/CRDC/%E6%BC%AB%E6%B8%B8%E8%99%9A%E5%8C%96/#_5","text":"@\u84dd\u8272\u6cb8\u70b9\u2005\u5173\u4e8e\u6f2b\u6e38\u65f6\u5019\u6a21\u578b\u865a\u5316\u7684\u95ee\u9898\uff0c\u662f\u4e0d\u662f\u5f97\u4e13\u9898\u7814\u7a76\u4e00\u4e0b\u554a\uff1f\u6211\u7528\u4e00\u5c0f\u6bb5\u6d4b\u8bd5\u4e86\u4e00\u4e0b\uff0c\u6cbf3d alignment\u6f2b\u6e38\u7684\u65b9\u6cd5\u5012\u662f\u53ef\u884c\uff0c\u4f46\u662f\u64cd\u4f5c\u8d77\u6765\u975e\u5e38\u9ebb\u70e6\uff0c\u9700\u8981\u91cd\u65b0\u628a\u7ebf\u8def\u4e13\u4e1a\u7684\u7ebf\u4f4d\u5168\u90e8\u6574\u7406\u4e00\u904d\uff0c\u5728\u8fbe\u7d22\u91cc\u518d\u91cd\u65b0\u88c5\u5728\u4e00\u8d77\u3002\u8fd8\u6709\u4e2a\u95ee\u9898\uff0c\u4e0d\u5149\u6211\u6709\u8fd9\u4e2a\u6f2b\u6e38\u7684\u9700\u6c42\uff0c\u5f88\u591a\u4e13\u4e1a\u81ea\u5df1\u4e5f\u9700\u8981\u5f55\u5c4f\uff0cwalk through\u7684\u65b9\u5f0f\u6bd4\u8f83\u5f97\u5fc3\u5e94\u624b\uff0c\u6548\u7387\u9ad8\uff0c\u64cd\u4f5c\u65b9\u4fbf\uff0c\u8fd8\u662f\u66f4\u4e60\u60ef\u8fd9\u79cd\u65b9\u5f0f\u3002","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/CRDC/%E6%BC%AB%E6%B8%B8%E8%99%9A%E5%8C%96/#_6","text":"\u662f\u7684\uff0c\u8fd9\u4e2a\u4e5f\u8981\u4e13\u95e8\u7814\u7a76\u4e0b\u7684\u3002 1. \u5f53\u524d\u5148\u6392\u67e5\u548c\u89e3\u51b3\u4e0bwalk through\u6f2b\u6e38\u865a\u5316\u7684\u539f\u56e0\u3002 \u8fd9\u4e2a\u65b0\u529f\u80fd\u8fd8\u662f\u9762\u5411\u7ebf\u8def\u4e13\u4e1a\u6216\u603b\u4f53\u4e13\u4e1a\uff0c\u5982\u679c\u524d\u671f\u7ebf\u8def\u521b\u5efa\u6216\u8005\u5bfc\u5165\u65f6\uff0c\u6ce8\u610f\u4fdd\u7559\u4e86\u7ebf\u8def\u7279\u5f81\u7684\u8bdd\uff0c\u8fd8\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684\u3002\u53ef\u4ee5\u4e00\u952e\u6cbf\u7ebf\u8def\u81ea\u52a8\u53bb\u6f2b\u6e38\uff0c\u4e0d\u7528\u952e\u76d8\u64cd\u4f5c\u4e86\u3002 \u5176\u4ed6\u4e13\u4e1a\u5982\u679c\u662f\u7ebf\u6027\u6f2b\u6e38\uff0c\u8ba4\u4e3a\u8fd9\u4e2a\u529f\u80fd\u6709\u53ef\u53d6\u4e4b\u5904\u7684\u8bdd\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u804a\u4e00\u4e0b\uff0c\u662f\u600e\u6837\u4e00\u4e2a\u573a\u666f\u3002 \u4e4b\u524d\u8fd9\u8fb9\uff0c\u505a\u8fc7\u5982\u4e0b\u64cd\u4f5c\uff0c\u6ca1\u6709\u6548\u679c\uff1a \u8bbe\u7f6e\u663e\u793a\u7cbe\u5ea6 Visual Quality\u89c6\u89c9\u8d28\u91cf\u8c03\u6574 \u6211\u4e00\u822c\u8bbe\u7f6e6-11","title":"\u56de\u590d"},{"location":"%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/CRDC/%E6%BC%AB%E6%B8%B8%E8%99%9A%E5%8C%96/#status","text":"","title":"Status"},{"location":"%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/CRDC/%E6%BC%AB%E6%B8%B8%E8%99%9A%E5%8C%96/#owner","text":"","title":"Owner"},{"location":"%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/CRDC/%E6%BC%AB%E6%B8%B8%E8%99%9A%E5%8C%96/#ersrmethodology","text":"","title":"ER/SR/Methodology"},{"location":"%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/CRDC/%E6%BC%AB%E6%B8%B8%E8%99%9A%E5%8C%96/#srer-id","text":"","title":"SR/ER ID"},{"location":"%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/CRDC/%E6%BC%AB%E6%B8%B8%E8%99%9A%E5%8C%96/#category","text":"","title":"Category"}]}