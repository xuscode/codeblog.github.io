{"config":{"lang":["en","ru","ja"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HOME","text":""},{"location":"#_1","title":"\u8f6f\u4ef6\u652f\u6301","text":"<p>\u5728\u7ebf\u95ee\u9898\u54a8\u8be2</p> <ul> <li> <p>\u667a\u80fd\u95ee\u7b54\u5e73\u53f0</p> </li> <li> <p>\u5982\u679c\u6709\u95ee\u9898\uff0c\u8bf7\u76f4\u63a5\u5728\u6b64\u9875\u9762\u8fdb\u884c\u63d0\u95ee\uff0c\u51e0\u4e4e\u6bcf\u5929\u90fd\u7ef4\u62a4</p> </li> <li>\u8f93\u5165\u8f6c\u4eba\u5de5\uff0c\u4e4b\u540e\uff0c\u5199\u4e0a\u4f60\u7684\u8be6\u7ec6\u95ee\u9898\uff0c\u6211\u7684\u5fae\u4fe1\u5c31\u4f1a\u6536\u5230\u4f60\u7684\u63d0\u95ee\uff0c\u6211\u5c06\u56de\u590d\u60a8\u7684\u95ee\u9898</li> </ul>"},{"location":"AUTOCAD/","title":"HOME","text":""},{"location":"AUTOCAD/#_1","title":"\u8f6f\u4ef6\u652f\u6301","text":"<p>\u5728\u7ebf\u95ee\u9898\u54a8\u8be2</p> <ul> <li> <p>\u667a\u80fd\u95ee\u7b54\u5e73\u53f0</p> </li> <li> <p>\u5982\u679c\u6709\u95ee\u9898\uff0c\u8bf7\u76f4\u63a5\u5728\u6b64\u9875\u9762\u8fdb\u884c\u63d0\u95ee\uff0c\u51e0\u4e4e\u6bcf\u5929\u90fd\u7ef4\u62a4</p> </li> <li>\u8f93\u5165\u8f6c\u4eba\u5de5\uff0c\u4e4b\u540e\uff0c\u5199\u4e0a\u4f60\u7684\u8be6\u7ec6\u95ee\u9898\uff0c\u6211\u7684\u5fae\u4fe1\u5c31\u4f1a\u6536\u5230\u4f60\u7684\u63d0\u95ee\uff0c\u6211\u5c06\u56de\u590d\u60a8\u7684\u95ee\u9898</li> </ul>"},{"location":"Blender/","title":"HOME","text":""},{"location":"Blender/#_1","title":"\u8f6f\u4ef6\u652f\u6301","text":"<p>\u5728\u7ebf\u95ee\u9898\u54a8\u8be2</p> <ul> <li> <p>\u667a\u80fd\u95ee\u7b54\u5e73\u53f0</p> </li> <li> <p>\u5982\u679c\u6709\u95ee\u9898\uff0c\u8bf7\u76f4\u63a5\u5728\u6b64\u9875\u9762\u8fdb\u884c\u63d0\u95ee\uff0c\u51e0\u4e4e\u6bcf\u5929\u90fd\u7ef4\u62a4</p> </li> <li>\u8f93\u5165\u8f6c\u4eba\u5de5\uff0c\u4e4b\u540e\uff0c\u5199\u4e0a\u4f60\u7684\u8be6\u7ec6\u95ee\u9898\uff0c\u6211\u7684\u5fae\u4fe1\u5c31\u4f1a\u6536\u5230\u4f60\u7684\u63d0\u95ee\uff0c\u6211\u5c06\u56de\u590d\u60a8\u7684\u95ee\u9898</li> </ul>"},{"location":"DS-CODE/Automation/AddLouvreWithEndOffsetByCurveFro/","title":"AddLouvreWithEndOffsetByCurveFro","text":"CC++VBAPythonVB.NETC#EKL <pre><code>#include &lt;stdio.h&gt;\nint main(void) {\nprintf(\"Hello world!\\n\");\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\nint main(void) {\nstd::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre> <pre><code>Function AddLouvreWithEndOffsetByCurveFromOriginAxis(SketchProfileREF As Reference, GuideCurve As Variant, OffsetDim As Double, ConstSet As HybridBody, FinalSet As HybridBody) As HybridShapeSweepExplicit \nDim EndPt1 As HybridShapePointOnCurve\nSet EndPt1 = MyHSFactory.AddNewPointOnCurveFromDistance(GuideCurve, OffsetDim, True) ConstSet.AppendHybridShape EndPt1\nMyHSFactory.GSMVisibility EndPt1, 0\nDim EndPt3 As HybridShapePointOnCurve\nSet EndPt3 = MyHSFactory.AddNewPointOnCurveFromDistance(GuideCurve, OffsetDim, False) ConstSet.AppendHybridShape EndPt3\nMyHSFactory.GSMVisibility EndPt3, 0\nDim MSupSpl1 As HybridShapeSplit\nSet MSupSpl1 = MyHSFactory.AddNewHybridSplit(GuideCurve, EndPt3, 1) MSupSpl1.AddElementToKeep EndPt1\nConstSet.AppendHybridShape MSupSpl1\nMyHSFactory.GSMVisibility MSupSpl1, 0\nDim MSupSpl2 As HybridShapeSplit\nSet MSupSpl2 = MyHSFactory.AddNewHybridSplit(MSupSpl1, EndPt1, 1) MSupSpl2.AddElementToKeep EndPt3\nConstSet.AppendHybridShape MSupSpl2\nMyHSFactory.GSMVisibility MSupSpl2, 0\nDim MSupFirstPt As HybridShapePointOnCurve\nSet MSupFirstPt = MyHSFactory.AddNewPointOnCurveFromPercent(MSupSpl2, 0, True) ConstSet.AppendHybridShape MSupFirstPt\n'MyHSFactory.GSMVisibility MSupFirstPt, 0\nDim MSubStartDirLin As HybridShapeLineTangency Set MSubStartDirLin = MyHSFactory.AddNewLineTangency(MSupSpl2, MSupFirstPt, 0, 25.4, True) ConstSet.AppendHybridShape MSubStartDirLin\nMyPart.UpdateObject MSubStartDirLin\n'MyHSFactory.GSMVisibility MSubStartDirLin, 0\nDim MSubNormPlane As HybridShapeLineNormal 'As HybridShapePlane2Lines Set MSubNormPlane = MyHSFactory.AddNewLineNormal(DriverSrf, MSupFirstPt, 0, 10, True) 'AddNewPlane2Lines(MSubStartDirLin, Zaxis) ConstSet.AppendHybridShape MSubNormPlane\nMyPart.UpdateObject MSubNormPlane\n'MyHSFactory.GSMVisibility MSubNormPlane, 0\nDim MSub2LinesPlane As HybridShapePlane2Lines\nSet MSub2LinesPlane = MyHSFactory.AddNewPlane2Lines(MSubStartDirLin, MSubNormPlane) ConstSet.AppendHybridShape MSub2LinesPlane\nMyPart.UpdateObject MSub2LinesPlane\n'MyHSFactory.GSMVisibility MSub2LinesPlane, 0\nDim axisSystems1 As AxisSystems\nSet axisSystems1 = MyPart.AxisSystems\nDim axisSystem1 As AxisSystem\nSet axisSystem1 = axisSystems1.Add()\naxisSystem1.OriginType = catAxisSystemOriginByPoint axisSystem1.OriginPoint = MSupFirstPt\naxisSystem1.XAxisType = catAxisSystemAxisOppositeDirection axisSystem1.XAxisDirection = MSubNormPlane\naxisSystem1.YAxisType = catAxisSystemAxisOppositeDirection\n'Dim hybridShapePlaneExplicit1 As HybridShapePlaneExplicit\n'Set hybridShapePlaneExplicit1 = MyPart.OriginElements.PlaneXY\n'axisSystem1.YAxisDirection = hybridShapePlaneExplicit1\naxisSystem1.YAxisDirection = MSub2LinesPlane\naxisSystem1.ZAxisType = catAxisSystemAxisSameDirection axisSystem1.ZAxisDirection = MSubStartDirLin\n'SafeHide axisSystem1 'x flips\nDim MainAxisSysREF As Reference\nSet MainAxisSysREF = MyPart.CreateReferenceFromObject(MainAxisSys) Dim axisSystem1REF As Reference\nSet axisSystem1REF = MyPart.CreateReferenceFromObject(axisSystem1) Dim NAxis2Axis As HybridShapeAxisToAxis\nSet NAxis2Axis = MyHSFactory.AddNewAxisToAxis(SketchProfileREF, MainAxisSysREF, axisSystem1REF) ConstSet.AppendHybridShape NAxis2Axis\n'MyHSFactory.GSMVisibility NAxis2Axis, 0\nDim LouvreSweep As HybridShapeSweepExplicit\nSet LouvreSweep = MyHSFactory.AddNewSweepExplicit(NAxis2Axis, MSupSpl2) LouvreSweep.SubType = 1\nLouvreSweep.Reference = MyPart.OriginElements.PlaneXY\nLouvreSweep.SetAngleRef 1, 0#\nLouvreSweep.SolutionNo = 0\nLouvreSweep.SmoothActivity = False\nLouvreSweep.GuideDeviationActivity = False\nFinalSet.AppendHybridShape LouvreSweep\n'MyPart.UpdateObject LouvreSweep\nLouvreSweep.Name = GuideCurve.Name &amp; \"_MULLGEOM\"\n'MoveAxisSystemXDirFartherFromCoord axisSystem1, LouvreSweep, 0, 0, 0\nSet AddLouvreByCurveFromOriginAxis = LouvreSweep IsUpdatable LouvreSweep\nEnd Function\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre>"},{"location":"DS-CODE/Automation/AddNewPointOnCurveSmall/","title":"AddNewPointOnCurveSmall","text":"VB.NET <pre><code>'AddNewPointOnCurveSmall\n\nFunction AddNewPointOnCurveSmall(InputCurve As Variant, RatioNum As Double, tempset As HybridBody, NameStr As String) As HybridShapePointOnCurve\nDim ADN As HybridShapePointOnCurve\nSet ADN = MyHSFactory.AddNewPointOnCurveFromPercent(InputCurve, RatioNum, True)\ntempset.AppendHybridShape ADN\nADN.Name = NameStr\nIsUpdatable ADN\nMyHSFactory.GSMVisibility ADN, 0\nSet AddNewPointOnCurveSmall = ADN\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/AddObjectToList/","title":"AddObjectToList","text":"VB.NET <pre><code>Function AddObjectToList(part, hb, list)\n\nDim sel  As INFITF.Selection\nSet sel = CATIA.ActiveEditor.Selection\n\nsel.Clear\nsel.Add hb\n'sel.Search (\"Type='Ifc Reinforcing bar common',sel\")\nsel.Search (\"Name ='Reinforcing bars wire*',sel\")\n\nDim lst As ListParameter\nSet lst = list\n\nFor i = 1 To sel.Count\n    lst.ValueList.Add sel.Item(i).Value\nNext\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/AddObjectTolistFromSearch/","title":"AddObjectTolistFromSearch","text":"VB <pre><code>Attribute VB_Name = \"AddObjectTolistFromSearch\"\nDim CATIA As INFITF.Application\nSub CATMain()\n\nSet CATIA = GetObject(, \"CATIA.Application\")\n\nDim part As MECMOD.part\nSet part = CATIA.ActiveEditor.ActiveObject\n\nDim sel  As INFITF.Selection\nSet sel = CATIA.ActiveEditor.Selection\n\nDim lst As ListParameter\nSet lst = sel.Item(1).Value\n\n'a -- gailianggangj\nAddObjectToList part, part.FindObjectByName(\"\u627f\u53f0\u94a2\u7b4b\"), lst\n\n\npart.Update\n\n\n\nEnd Sub\n\nFunction AddObjectToList(part, hb, list)\n\nDim sel  As INFITF.Selection\nSet sel = CATIA.ActiveEditor.Selection\n\nsel.Clear\nsel.Add hb\nsel.Search (\"Type='Ifc Reinforcing bar common',sel\")\n'sel.Search (\"Name ='Reinforcing bars wire*',sel\")\n\nDim lst As ListParameter\nSet lst = list\n\nFor i = 1 To sel.Count\n    lst.ValueList.Add sel.Item(i).Value\n\nNext\n\n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/AddSetIfNotThere/","title":"AddSetIfNotThere","text":"VBPythonC#.NETVB.NETCAA <pre><code>Function AddSetIfNotThere(ContainerSet As Variant, HBName As String) As HybridBody\nDim JKL As HybridBody\nIf ContainerSet.HybridBodies.Count = 0 Then\n    Set JKL = ContainerSet.HybridBodies.Add\n    JKL.Name = HBName\n    Set AddSetIfNotThere = JKL\n    Exit Function\nEnd If\n\nDim SetCounter As Integer\nSetCounter = 1\nWhile SetCounter &lt;= ContainerSet.HybridBodies.Count\n    If ContainerSet.HybridBodies.Item(SetCounter).Name = HBName Then\n        Set JKL = ContainerSet.HybridBodies.Item(HBName)\n        Set AddSetIfNotThere = JKL\n        Exit Function\n    End If\n    SetCounter = SetCounter + 1\nWend\nSet JKL = ContainerSet.HybridBodies.Add\nJKL.Name = HBName\nSet AddSetIfNotThere = JKL\n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/AppendStringParm/","title":"AppendStringParm","text":"VB <pre><code>Sub AppendStringParm(CurObj As Variant, ParmName As String, ParmValue As String, CurPart As Part)\nDim CFParms As Parameters\nSet CFParms = CurPart.Parameters.SubList(CurObj, True)\nDim CFStrParm As Parameter\nSet CFStrParm = CFParms.CreateString(ParmName, ParmValue)\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/BrowseForFile/","title":"BrowseForFile","text":"VB <pre><code>Function BrowseForFile(FileTypeName as String) as String\nFilePath = CATIA.FileSelectionBox(\"Select a text file\", \"*.\" &amp; FileTypeName , CatFileSelectionModeOpen)\nBrowseForFile = FilePath\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/BrowseForFolder/","title":"BrowseForFolder","text":"VB <pre><code>Dim FolderName As String\nDim RootPath\nFolderName = GetFolderName(\"Select a folder\")\nIf FolderName = \"\" Then\n    MsgBox \"You didn't select a folder.\"\nElse\n    RootPath = FolderName &amp; \"\\\"\n    TextBoxSavePath.Value = RootPath\n    'MsgBox \"You selected this folder: \" &amp; RootPath\nEnd If\n</code></pre>"},{"location":"DS-CODE/Automation/CATApp/","title":"CATApp","text":""},{"location":"DS-CODE/Automation/CATApp/#v5","title":"V5","text":""},{"location":"DS-CODE/Automation/CATApp/#vbnet","title":"VB.NET","text":"<pre><code>Option Explicit Off\n#Region \"Import\"\nImports MECMOD\nImports HybridShapeTypeLib\nImports SPATypeLib\nImports INFITF\nImports AnnotationTypeLib\n\n#End Region\n\nPublic Class CATApp\n\nPublic Shared CATIA As INFITF.Application = GetObject(, \"CATIA.Application\")\nPublic Shared MyDoc As PartDocument = CATIA.ActiveDocument\nPublic Shared MyPart As Part = MyDoc.Part\nPublic Shared MyHSFactory As HybridShapeFactory = MyPart.HybridShapeFactory\nPublic Shared MyHybridBodies As HybridBodies = MyPart.HybridBodies\nPublic Shared MySel As Selection = CATIA.ActiveDocument.Selection\nPublic Shared Zaxis = MyHSFactory.AddNewDirectionByCoord(0, 0, 1)\nPublic Shared XYPln = MyPart.OriginElements.PlaneXY\nPublic Shared YZPln = MyPart.OriginElements.PlaneYZ\nPublic Shared ZXPln = MyPart.OriginElements.PlaneZX\nPublic Shared TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n\nEnd Class\n</code></pre>"},{"location":"DS-CODE/Automation/CATApp/#v5_1","title":"V5","text":""},{"location":"DS-CODE/Automation/CATApp/#vba","title":"VBA","text":""},{"location":"DS-CODE/Automation/CATApp/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/CATApp/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/CATApp/#vbnet_1","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/CATApp/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/CATApp/#v6","title":"V6","text":""},{"location":"DS-CODE/Automation/CATApp/#vba_1","title":"VBA","text":""},{"location":"DS-CODE/Automation/CATApp/#python_1","title":"Python","text":""},{"location":"DS-CODE/Automation/CATApp/#cnet_1","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/CATApp/#vbnet_2","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/CATApp/#caa_1","title":"CAA","text":""},{"location":"DS-CODE/Automation/CanGetAngle/","title":"CanGetAngle","text":"VBAVB.NETCAAVBAPythonC#.NET <pre><code>Function CanGetAngle(SampleCrv As Variant, SecondCrv As Variant) As Boolean\n  On Error GoTo Blast2\n  Dim CMeas\n  Set CMeas = TheSPAWorkbench.GetMeasurable(SecondCrv)\n  Dim CCC As Double\n  CCC = CMeas.GetAngleBetween(SampleCrv)\n\n  CanGetAngle = True\n  Exit Function\n  Blast2:\n  CanGetAngle = False\nEnd Function\n</code></pre> <pre><code>Public Shared Function CanGetAngle(SampleCrv As Object, SecondCrv As Object) As Boolean\n  On Error GoTo Blast2\n  Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n  Dim CMeas\n  CMeas = TheSPAWorkbench.GetMeasurable(SecondCrv)\n  Dim CCC As Double\n  CCC = CMeas.GetAngleBetween(SampleCrv)\n\n  CanGetAngle = True\n  Exit Function\nBlast2:\n  CanGetAngle = False\nEnd Function\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre>"},{"location":"DS-CODE/Automation/CheckExcelDuplicates/","title":"CheckExcelDuplicates","text":"VB <pre><code>Function CheckExcelDuplicates(ColumnNo As Integer, EndRow As Integer, CheckEmptyStrings As Boolean) As Boolean\nDim ColStrArr()\nReDim ColStrArr(0)\nFor X = 1 To EndRow\n    Dim XCounter As Integer\n    XCounter = 0\n    Dim CurCellStr As String\n    CurCellStr = CStr(CurCells(X, ColumnNo).Value)\n    While XCounter &lt; UBound(ColStrArr)\n        If ColStrArr(XCounter) = CurCellStr Then\n            CheckExcelDuplicates = True\n            CurCells(X, ColumnNo).Font.colorindex = 41\n            Exit Function\n        End If\n        XCounter = XCounter + 1\n    Wend\n\n    If CheckEmptyStrings = False And CurCellStr = \"\" Then\n    Else\n        ColStrArr(UBound(ColStrArr)) = CurCellStr\n        ReDim Preserve ColStrArr(UBound(ColStrArr) + 1)\n    End If\nNext X\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/CheckFill/","title":"CheckFill","text":"VBVB.NET <pre><code>Function CheckFill(BoundaryObj As Variant) As Boolean\nOn Error GoTo NNN\nDim CF As HybridShapeFill\nSet CF = MyHSFactory.AddNewFill()\nCF.AddBound BoundaryObj\nMyPart.UpdateObject CF\nCheckFill = True\nExit Function\nNNN:\nCheckFill = False\nEnd Function\n</code></pre> <pre><code>Public Shared Function CheckFill(BoundaryObj As Object, MyPart As Part) As Boolean\n    On Error GoTo NNN\n    Dim CF As HybridShapeFill\n    CF = MyPart.HybridShapeFactory.AddNewFill()\n    CF.AddBound(BoundaryObj)\n    MyPart.UpdateObject(CF)\n    CheckFill = True\n    Exit Function\nNNN:\n    CheckFill = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/CheckFolders/","title":"CheckFolders","text":"VB <pre><code>Sub CheckFolders(CurDirectoryStr As String)\n    Dim curFolderStr As String\n    curFolderStr = CurDirectoryStr       \n    If FS.FolderExists(curFolderStr) = False Then\n        If curFolderStr &lt;&gt; \"\" Then\n            If FolderVerify(curFolderStr) Then\n                FS.CreateFolder (curFolderStr)\n            Else\n                harr = Split(curFolderStr, \"\\\")\n                Dim HName As String\n                HName = harr(0)\n                For X2 = 1 To UBound(harr)\n                    HName = HName &amp; \"\\\" &amp; harr(X2)\n                    If FS.FolderExists(HName) = False Then\n                        FS.CreateFolder HName\n                    End If\n                Next X2\n            End If\n        End If\n    End If\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/CheckIfTwoObjectsAreDuplicates/","title":"CheckIfTwoObjectsAreDuplicates","text":"VB <pre><code> Public Shared Function CheckIfTwoObjectsAreDuplicates(input1 As Object, input2 As Object, CurPart As Part, CurHSFactory As HybridShapeFactory, cur_set As HybridBody) As Boolean\n\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n\n    Dim CMeas1 'As Measurable\n    CMeas1 = TheSPAWorkbench.GetMeasurable(input1)\n    Dim CMeas2\n    CMeas2 = TheSPAWorkbench.GetMeasurable(input2)\n    If CMeas1.GeometryName = CMeas2.GeometryName Then\n        Dim surface_check As Boolean\n        surface_check = False\n        If CMeas1.GeometryName = CatMeasurableName.CatMeasurableSurface Then\n            Dim Coord1()\n            ReDim Coord1(2)\n            CMeas1.GetCOG(Coord1)\n            Dim Coord2()\n            ReDim Coord2(2)\n            CMeas2.GetCOG(Coord2)\n            If Coord1(0) = Coord2(0) And Coord1(1) = Coord2(1) And Coord1(2) = Coord2(2) Then\n                surface_check = True\n            Else\n                surface_check = False\n            End If\n        Else\n            surface_check = True\n        End If\n        If surface_check = True Then\n            If CheckIntersectionWithMoreOptions(input1, input2, CurPart) = True Then\n                CurHSFactory = CurPart.HybridShapeFactory\n                Dim ref1 As Reference\n                ref1 = CurPart.CreateReferenceFromObject(input1)\n                Dim ref2 As Reference\n                ref2 = CurPart.CreateReferenceFromObject(input2)\n                Dim new_int As HybridShapeIntersection\n                new_int = CurHSFactory.AddNewIntersection(ref1, ref2)\n                cur_set.AppendHybridShape(new_int)\n                CurPart.UpdateObject(new_int)\n                Dim CMeas3\n                CMeas3 = TheSPAWorkbench.GetMeasurable(new_int)\n                If CMeas3.GeometryName = CMeas1.GeometryName Then\n                    CheckIfTwoObjectsAreDuplicates = True\n                    CurHSFactory.DeleteObjectForDatum(new_int)\n                    Exit Function\n                Else\n                    CheckIfTwoObjectsAreDuplicates = False\n                    CurHSFactory.DeleteObjectForDatum(new_int)\n                    Exit Function\n                End If\n            Else\n                CheckIfTwoObjectsAreDuplicates = False\n                Exit Function\n            End If\n        End If 'end of surface_check = true condition\n    Else\n        CheckIfTwoObjectsAreDuplicates = False\n        Exit Function\n    End If\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/CheckInfiniteLineNormalIntersection/","title":"CheckInfiniteLineNormalIntersection","text":"VB <pre><code>Function CheckInfiniteLineNormalIntersection(PtObj As Variant, SurfObj As Variant, ConstSet As HybridBody) As Boolean\nOn Error GoTo blast\nDim TestInt As HybridShapeLineNormal\nSet TestInt = MyHSFactory.AddNewLineNormal(SurfObj, PtObj, 0, 5, True)\nTestInt.SetLengthType 1\nConstSet.AppendHybridShape TestInt\nCATIA.ActiveDocument.Part.UpdateObject TestInt\nIf CheckIntersection(TestInt, SurfObj) Then\n    CheckInfiniteLineNormalIntersection = True\nElse\n    CheckInfiniteLineNormalIntersection = False\nEnd If\nMyHSFactory.DeleteObjectForDatum TestInt\nExit Function\nblast:\nMyHSFactory.DeleteObjectForDatum TestInt\nCheckInfiniteLineNormalIntersection = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/CheckIntersection/","title":"CheckIntersection","text":""},{"location":"DS-CODE/Automation/CheckIntersection/#_1","title":"\u68c0\u67e5\u5143\u7d20\u662f\u5426\u76f8\u4ea4","text":"<p>\u4e00\u822c\u4f1a\u9009\u62e9\u4e24\u4e2a\u4ee5\u4e0a\u5143\u7d20\u8fdb\u884c\u76f8\u4ea4\u8ba1\u7b97</p> VB\u591a\u9009\u9879\u76f8\u4ea4VB.NETC#.NET <pre><code>Function CheckIntersection(Object1 As Variant, Object2 As Variant) As Boolean\nOn Error GoTo Blast\nDim TestInt As HybridShapeIntersection\nSet TestInt = MyHSFactory.AddNewIntersection(Object1, Object2)\nCATIA.ActiveDocument.Part.UpdateObject TestInt\nCheckIntersection = True\nExit Function\nBlast:\nCheckIntersection = False\nEnd Function\n</code></pre> <pre><code>Function CheckIntersectionWithMoreOptions(Object1 As Variant, Object2 As Variant, CurPart As Part, CurHSFactory As HybridShapeFactory) As Boolean\nOn Error GoTo Blast\nDim TestInt As HybridShapeIntersection\nSet TestInt = CurHSFactory.AddNewIntersection(Object1, Object2)\nCurPart.UpdateObject TestInt\nCheckIntersectionWithMoreOptions = True\nExit Function\nBlast:\nCheckIntersectionWithMoreOptions = False\nEnd Function\n</code></pre> <pre><code>    Public Shared Function CheckIntersection(Object1 As Object, Object2 As Object\uff0c MyPart As Part) As Boolean\n        On Error GoTo Blast\n        Dim TestInt As HybridShapeIntersection\n        TestInt = MyPart.HybridShapeFactory.AddNewIntersection(Object1, Object2)\n        TestInt.Compute()\n        MyPart.UpdateObject(TestInt)\n\n        CheckIntersection = True\n        Exit Function\nBlast:\n        CheckIntersection = False\n    End Function\n</code></pre> <pre><code>public Boolean CheckIntersection(Object Object1, Object Object2, MECMOD.Part Part)\n{\ntry\n{\nHybridShapeIntersection TestInt;\nHybridShapeFactory hsf = (HybridShapeFactory)Part.HybridShapeFactory;\nTestInt = hsf.AddNewIntersection((INFITF.Reference)Object1, (Reference)Object2);\nTestInt.Compute();\nPart.UpdateObject(TestInt);\n\nreturn true;\n}\ncatch\n{\nreturn false;\n}\n}\n</code></pre>"},{"location":"DS-CODE/Automation/CheckLineNormal/","title":"CheckLineNormal","text":"VB <pre><code>Function CheckLineNormal(PtObj As Variant, SurfObj As Variant) As Boolean\nOn Error GoTo Blast\nDim TestInt As HybridShapeLineNormal\nSet TestInt = MyHSFactory.AddNewLineNormal(SurfObj, PtObj, 0, 5, True)\nCATIA.ActiveDocument.Part.UpdateObject TestInt\nCheckLineNormal = True\nExit Function\nBlast:\nCheckLineNormal = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/CheckProduct/","title":"CheckProduct","text":"VB <pre><code>Function CheckProduct(InputProduct As Variant) As Boolean\nOn Error GoTo Blast\nSet InputProduct2 = InputProduct.Parent.Parent\nCheckProduct = True\nExit Function\nBlast:\nCheckProduct = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/CheckProjection/","title":"CheckProjection","text":"VB <pre><code>Function CheckProjection(CElement As Variant, CSupport As Variant) As Boolean\nOn Error GoTo Blast\nDim TestInt As HybridShapeProject\nSet TestInt = MyHSFactory.AddNewProject(CElement, CSupport)\nCATIA.ActiveDocument.Part.UpdateObject TestInt\nCheckProjection = True\nExit Function\nBlast:\nCheckProjection = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/CheckProjectionByDirection/","title":"CheckProjectionByDirection","text":"VB <pre><code>Function CheckProjectionByDirection(PointObj As Variant, LineObj As Variant, TargetObj As Variant) As Boolean\nOn Error GoTo Blast\nDim Pr As HybridShapeProject\nSet Pr = MyHSFactory.AddNewProject(PointObj, TargetObj)\nPr.Direction = MyHSFactory.AddNewDirection(LineObj)\nCheckProjectionByDirection = True\nExit Function\nBlast:\nCheckProjectionByDirection = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/CivilSplitRoadSurf/","title":"CivilSplitRoadSurf","text":"VB <pre><code>Function CivilSplitRoadSurf(part, surf1, crv1, opt)\n\n' \u8f93\u5165\u6761\u4ef6\uff1a part\uff0c\u8def\u9762\uff0c\u4e2d\u5fc3\u7ebf\uff0c\u4ea4\u70b9\n\nDim hsf As HybridShapeFactory\nSet hsf = part.HybridShapeFactory\n\nDim hb As HybridBody\nSet hb = part.HybridBodies.Add\nhb.Name = \"\u5e73\u4ea4\u53e3\u9053\u8def\u66f2\u9762\"\n\n'\nDim hybridShapeSphere1 As HybridShapeSphere\nSet hybridShapeSphere1 = hsf.AddNewSphere(opt, Nothing, 45000, -45, 45, 0, 180)\nhybridShapeSphere1.Compute\nhybridShapeSphere1.Limitation = 1\n'hb.AppendHybridShape hybridShapeSphere1\n\n'\u521b\u5efa\u65b9\u5411\u5224\u65ad\n\nDim hybridShapeLineTangency1 As HybridShapeLineTangency\nSet hybridShapeLineTangency1 = hsf.AddNewLineTangency(crv1, opt, -100#, 1000#, False)\nhybridShapeLineTangency1.Compute\n\nDim hybridShapeLineTangency2 As HybridShapeLineTangency\nSet hybridShapeLineTangency2 = hsf.AddNewLineTangency(crv1, opt, -100#, -1000#, False)\nhybridShapeLineTangency2.Compute\n\n'hb.AppendHybridShape hybridShapeLineTangency1\n'hb.AppendHybridShape hybridShapeLineTangency2\n\n\nDim hybridShapeIntersection2 As HybridShapeIntersection\nSet hybridShapeIntersection2 = hsf.AddNewIntersection(hybridShapeSphere1, crv1)\nhybridShapeIntersection2.PointType = 0\n'hb.AppendHybridShape hybridShapeIntersection2\n\n'\nDim hybridShapeNear1 As HybridShapeNear\nSet hybridShapeNear1 = hsf.AddNewNear(hybridShapeIntersection2, hybridShapeLineTangency1)\nhb.AppendHybridShape hybridShapeNear1\nhybridShapeNear1.Name = \"End_pt1\"\n\nDim hybridShapeNear2 As HybridShapeNear\nSet hybridShapeNear2 = hsf.AddNewNear(hybridShapeIntersection2, hybridShapeLineTangency2)\nhb.AppendHybridShape hybridShapeNear2\nhybridShapeNear2.Name = \"End_pt2\"\n\n' \u521b\u5efa\u5e73\u9762\nDim pln1 As HybridShape\nSet pln1 = hsf.AddNewPlaneNormal(crv1, hybridShapeNear1)\npln1.Compute\n\nDim pln2 As HybridShape\nSet pln2 = hsf.AddNewPlaneNormal(crv1, hybridShapeNear2)\npln2.Compute\n\npln1.Name = \"Start_Pln\"\npln2.Name = \"End_Pln\"\n\nhb.AppendHybridShape pln1\nhb.AppendHybridShape pln2\n\nDim split1 As HybridShapeSplit\nSet split1 = hsf.AddNewHybridSplit(surf1, pln1, False)\nsplit1.BothSidesMode = True\nsplit1.Compute\n\nhsf.GSMVisibility split1.GetOtherSide, 0\n\nDim split2 As HybridShapeSplit\nSet split2 = hsf.AddNewHybridSplit(split1.GetOtherSide, pln2, True)\nsplit2.BothSidesMode = False\nsplit2.Compute\n\nsplit1.Name = \"Rd_Surf_1\"\nsplit2.Name = \"Rd_Surf_2\"\n\nhb.AppendHybridShape split1\nhb.AppendHybridShape split2\n\n\n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/CleanOGS/","title":"CleanOGS","text":"VB <pre><code>Sub CleanOGS(CurOGS As OrderedGeometricalSet)\nDim SecondPart As Part\nSet SecondPart = GetContainingPart(CurOGS)\nIf CATIA.ActiveDocument.Selection.Count &lt;&gt; 0 Then\n    CATIA.ActiveDocument.Selection.Clear\nEnd If\nFor X = 1 To CurOGS.Bodies.Count\n    CATIA.ActiveDocument.Selection.Add CurOGS.Bodies.Item(X)\n    CATIA.ActiveDocument.Selection.Delete\nNext\nFor X = 1 To CurOGS.HybridShapes.Count\n    SecondPart.HybridShapeFactory.DeleteObjectForDatum CurOGS.HybridShapes.Item(1)\nNext\nFor X = 1 To CurOGS.OrderedSketches.Count\n    CATIA.ActiveDocument.Selection.Add CurOGS.OrderedSketches.Item(X)\n    CATIA.ActiveDocument.Selection.Delete\nNext \nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/ClosestPoints/","title":"ClosestPoints","text":"VB <pre><code>Sub ClosestPoints(Point1 As Variant, Point2 As Variant)\n\nDim SmallestDist As Double\nSmallestDist = 100000000\nDim WinHH, WinJJ As Integer\nWinHH = 0: WinJJ = 0\n\nFor HH = 0 To 1\n    For jj = 0 To 1\n        Point1.Ratio.Value = HH\n        Point2.Ratio.Value = jj\n        CATIA.ActiveDocument.Part.UpdateObject Point1\n        CATIA.ActiveDocument.Part.UpdateObject Point2\n\n        Dim MeasuredDist As Double\n        Dim CMeas\n        Set CMeas = TheSPAWorkbench.GetMeasurable(Point1)\n        MeasuredDist = CMeas.GetMinimumDistance(Point2)\n\n        If MeasuredDist &lt; SmallestDist Then\n            SmallestDist = MeasuredDist\n            WinHH = HH\n            WinJJ = jj\n        End If\n    Next jj\nNext HH\n\nPoint1.Ratio.Value = WinHH\nPoint2.Ratio.Value = WinJJ\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/Color_to_RGB/","title":"Color to RGB","text":"VB <pre><code>Function Color_to_RGB(Color As Long) As Variant\nDim CurRGB() As Integer\nReDim CurRGB(2)\n  CurRGB(0) = Color Mod 256\n  CurRGB(1) = (Color \\ 256) Mod 256\n  CurRGB(2) = (Color \\ 256 \\ 256) Mod 256\nColor_to_RGB = CurRGB\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/ContainingPart/","title":"ContainingPart","text":"VB <pre><code>Function ContainingPart(ByVal CatObject)\n    Dim found As Boolean\n    Dim Current\n    Set Current = CatObject\n    found = False\n    Do While found = False\n        Set Current = Current.Parent\n        If TypeName(Current) = \"Part\" Then\n            found = True\n        End If\n    Loop\n    Set ContainingPart = Current\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/CreateAxisAlongCurve/","title":"CreateAxisAlongCurve","text":"C# <pre><code>public AxisSystem CreateAxisAlongCurve(Part Part, HybridShape Curve, HybridShape Point, double AxisRotateAngle)\n{\nHybridShapeFactory hsf = (HybridShapeFactory)Part.HybridShapeFactory;\nHybridShapeDirection zdir = hsf.AddNewDirection((Reference)Part.OriginElements.PlaneXY);\nHybridShape zln = hsf.AddNewLinePtDir((INFITF.Reference)Point, zdir, -100, 500, false); zln.Compute();\nHybridShape pln = hsf.AddNewPlaneOffsetPt((Reference)Part.OriginElements.PlaneXY, (Reference)Point); pln.Compute();\nHybridShapeLineTangency tarln = hsf.AddNewLineTangency((Reference)Curve, (Reference)Point, -100, 300, false); tarln.Compute();\nHybridShapeProject xdirln = hsf.AddNewProject((Reference)tarln, (Reference)pln); xdirln.Compute();\nxdirln.SolutionType = 0;\nxdirln.Normal = false;\nxdirln.SmoothingType = 0;\nxdirln.Direction = zdir;\nxdirln.ExtrapolationMode = 0;\n\nReference reference1 = Part.CreateReferenceFromObject(xdirln);\nHybridShapeRotate hybridShapeRotate1 = hsf.AddNewEmptyRotate();\nhybridShapeRotate1.ElemToRotate = reference1;\nhybridShapeRotate1.VolumeResult = false;\nhybridShapeRotate1.RotationType = 0;\nhybridShapeRotate1.Compute();\nhybridShapeRotate1.Axis = (Reference)zln;\nhybridShapeRotate1.AngleValue = AxisRotateAngle;\nhybridShapeRotate1.set_Name(\"Roatate_ln_\" + Convert.ToString(AxisRotateAngle));\nhybridShapeRotate1.Compute();\n\nAxisSystem axis = Part.AxisSystems.Add();\naxis.OriginType = CATAxisSystemOriginType.catAxisSystemOriginByPoint;\naxis.OriginPoint = (Reference)Point;\n\naxis.XAxisType = CATAxisSystemAxisType.catAxisSystemAxisSameDirection;\naxis.XAxisDirection = (Reference)hybridShapeRotate1;\n\naxis.YAxisType = CATAxisSystemAxisType.catAxisSystemAxisOppositeDirection;\n\naxis.ZAxisType = CATAxisSystemAxisType.catAxisSystemAxisSameDirection;\naxis.ZAxisDirection = (Reference)zln;\nPart.UpdateObject(axis);\naxis.IsCurrent = true;\n\naxis.set_Name(Point.get_Name());\nPart.UpdateObject(axis);\n\n\nreturn axis;\n}\n</code></pre>"},{"location":"DS-CODE/Automation/CrossProduct/","title":"CrossProduct","text":"VB <pre><code>Function CrossProduct(PtAx As Double, PtAy As Double, PtAz As Double, PtBx As Double, PtBy As Double, PtBz As Double, PtCx As Double, PtCy As Double, PtCz As Double) As Variant \nDim Vec1()\nReDim Vec1(2)\nDim Vec2()\nReDim Vec2(2)\nVec1(0) = PtAx - PtBx\nVec1(1) = PtAy - PtBy\nVec1(2) = PtAz - PtBz\nVec2(0) = PtCx - PtBx\nVec2(1) = PtCy - PtBy\nVec2(2) = PtCz - PtBz\n'Ax As Double, Ay As Double, Az As Double, Bx As Double, By As Double, Bz As Double\nDim CrossArr()\nReDim CrossArr(2)\nCrossArr(0) = Vec1(1) * Vec2(2) - Vec2(1) * Vec1(2)\nCrossArr(1) = Vec1(2) * Vec2(0) - Vec2(2) * Vec1(0)\nCrossArr(2) = Vec1(0) * Vec2(1) - Vec2(0) * Vec1(1)\nCrossProduct = CrossArr\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/CrvCheck/","title":"CrvCheck","text":"VB <pre><code>Function CrvCheck(SampleCrv As Variant) As Boolean\n    On Error GoTo Blast2 \n    Dim CMeas\n    Set CMeas = TheSPAWorkbench.GetMeasurable(SampleCrv) \n\n    Dim ALen As Double\n    ALen = CMeas.Length\n    CrvCheck = True\n    Exit Function\n    Blast2:\n    CrvCheck = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/CutObjectAndPaste/","title":"CutObjectAndPaste","text":"<pre><code>Function CutObjectAndPaste(Obj1 As Variant, DestSet As HybridBody) As Variant\nIf MySel.Count &lt;&gt; 0 Then\n    MySel.Clear\nEnd If\nMySel.Add Obj1\nMySel.Cut\nIf MySel.Count &lt;&gt; 0 Then\n    MySel.Clear\nEnd If\nMySel.Add DestSet\nMySel.Paste\nDim TempObj\nSet TempObj = DestSet.HybridShapes.Item(DestSet.HybridShapes.Count)\nSet CutObjectAndPaste = TempObj\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/CutObjectAndPaste/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/CutObjectAndPaste/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/CutObjectAndPaste/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/CutObjectAndPaste/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/DeleteDuplicateHybridShapesInGeomSet/","title":"DeleteDuplicateHybridShapesInGeomSet","text":""},{"location":"DS-CODE/Automation/DeleteDuplicateHybridShapesInGeomSet/#v5","title":"V5","text":"<pre><code>Public Shared Sub DeleteDuplicateHybridShapesInGeomSet(geom_set As HybridBody, cur_part As Part, cur_HSF As HybridShapeFactory)\n    Dim numb_set As Integer\n    numb_set = geom_set.HybridShapes.Count\n    Dim array_1()\n    ReDim array_1(numb_set - 1)\n    Dim loop1 As Integer\n    For loop1 = 0 To (numb_set - 1)\n        array_1(loop1) = geom_set.HybridShapes.Item(loop1 + 1)\n    Next loop1\n    Dim loop2 As Integer\n    For loop2 = 0 To (numb_set - 1)\n        Dim compare_obj1 As HybridShape\n        If Microsoft.VisualBasic.Information.IsNothing(array_1(loop2)) = False Then\n            compare_obj1 = array_1(loop2)\n            Dim compare_obj2 As HybridShape\n            Dim loop3 As Integer\n            For loop3 = 0 To (numb_set - 1)\n                If Microsoft.VisualBasic.Information.IsNothing(array_1(loop3)) = False Then\n                    compare_obj2 = array_1(loop3)\n                    If compare_obj1.Name = compare_obj2.Name Then\n                    ElseIf CheckIfTwoObjectsAreDuplicates(compare_obj1, compare_obj2, cur_part, cur_HSF, geom_set) = True Then\n                        cur_HSF.DeleteObjectForDatum(compare_obj2)\n                    End If\n                End If\n            Next loop3\n        End If\n    Next loop2\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/DeleteHSObjectsArray/","title":"DeleteHSObjectsArray","text":"<pre><code>Sub DeleteHSObjectsArray(InputArray As Variant)\nIf UBound(InputArray) = 0 Then\n    Exit Sub\nEnd If\nFor X = 0 To UBound(InputArray) - 1\n    MyHSFactory.DeleteObjectForDatum InputArray(X)\nNext X\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/DeleteHSObjectsArray/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/DeleteHSObjectsArray/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/DeleteHSObjectsArray/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/DeleteHSObjectsArray/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/DeleteNonSurfaceFromArray/","title":"DeleteNonSurfaceFromArray","text":"<pre><code>Sub DeleteNonSurfaceFromArray(InputObj As Variant)\nOn Error GoTo KBlast\nDim KMeas\nSet KMeas = TheSPAWorkbench.GetMeasurable(InputObj)\nIf KMeas.GeometryName &lt;&gt; CatMeasurableSurface Then\n    MyHSFactory.DeleteObjectForDatum InputObj\nEnd If\nExit Sub\nKBlast:\nIf MySel.Count &lt;&gt; 0 Then\n     MySel.Clear\nEnd If\nMySel.Add InputObj\nMySel.Delete\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/DeleteNonSurfaceFromArray/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/DeleteNonSurfaceFromArray/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/DeleteNonSurfaceFromArray/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/DeleteNonSurfaceFromArray/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/DeleteNonSurfacesFromGeomSet/","title":"DeleteNonSurfacesFromGeomSet","text":"<pre><code>Sub DeleteNonSurfacesFromGeomSet(InputHS As Variant)\nDim ObjArr()\nReDim ObjArr(InputHS.HybridShapes.Count - 1)\nFor X = 0 To InputHS.HybridShapes.Count - 1\n    Set ObjArr(X) = InputHS.HybridShapes.Item(X + 1)\nNext \n\nFor Inputcounter = 1 To UBound(ObjArr)\n    Dim KObj\n    Set KObj = ObjArr(Inputcounter - 1)\n    Dim KMeas\n    Set KMeas = TheSPAWorkbench.GetMeasurable(KObj)\n    If KMeas.GeometryName &lt;&gt; CatMeasurableSurface Then\n        MyHSFactory.DeleteObjectForDatum KObj\n    End If\nNext\nExit Sub\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/DeleteNonSurfacesFromGeomSet/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/DeleteNonSurfacesFromGeomSet/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/DeleteNonSurfacesFromGeomSet/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/DeleteNonSurfacesFromGeomSet/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/DeleteObject/","title":"DeleteObject","text":""},{"location":"DS-CODE/Automation/DeleteObject/#v5","title":"V5","text":""},{"location":"DS-CODE/Automation/DeleteObject/#vba","title":"VBA","text":""},{"location":"DS-CODE/Automation/DeleteObject/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/DeleteObject/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/DeleteObject/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/DeleteObject/#caa","title":"CAA","text":"<pre><code>void DeleteObject(CATISpecObject_var ispiObject)\n{\nCATISpecObject_var spiObj = ispiObject;\nCATTry\n{\nCATIDescendants_var spiDescendants = spiObj-&gt;GetFather();\nif (spiDescendants != NULL_var)\n{\nspiDescendants-&gt;RemoveChild(spiObj);\n}\n}\nCATCatch(CATMfErrUpdate,error)\n{\nFlush(error);\n}\nCATEndTry;\n}\n</code></pre>"},{"location":"DS-CODE/Automation/DeleteObject/#v6","title":"V6","text":""},{"location":"DS-CODE/Automation/DeleteObject/#vba_1","title":"VBA","text":""},{"location":"DS-CODE/Automation/DeleteObject/#python_1","title":"Python","text":""},{"location":"DS-CODE/Automation/DeleteObject/#cnet_1","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/DeleteObject/#vbnet_1","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/DeleteObject/#caa_1","title":"CAA","text":""},{"location":"DS-CODE/Automation/DistanceFromEquationOfLine/","title":"DistanceFromEquationOfLine","text":"<pre><code>Function DistanceFromEquationOfLine(LineSlope As Variant, Line_Y_Intersept As Variant, Pt_X_Coord As Double, Pt_Y_Coord As Double) As Double\nDistanceFromEquationOfLine = Abs(Pt_Y_Coord - (LineSlope * Pt_X_Coord) - Line_Y_Intersept) / Sqr((LineSlope * LineSlope) + 1)\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/DistanceFromEquationOfLine/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/DistanceFromEquationOfLine/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/DistanceFromEquationOfLine/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/DistanceFromEquationOfLine/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/DoArcWallsIntersect/","title":"DoArcWallsIntersect","text":"<pre><code>Function DoArcWallsIntersect(Wall1 As ArcWall, Wall2 As ArcWall, constSet As HybridBody) As Boolean\nOn Error GoTo Blast\nDim W1OGS As OrderedGeometricalSet\nSet W1OGS = Wall1\nDim W2OGS As OrderedGeometricalSet\nSet W2OGS = Wall2\nDim W1Body As Body\nSet W1Body = W1OGS.Bodies.Item(\"Envelope Body\")\nDim W2Body As Body\nSet W2Body = W2OGS.Bodies.Item(\"Envelope Body\")\n\nDim W1Ext 'As HybridShapeExtract\nSet W1Ext = MyHSFactory.AddNewExtract(MyPart.CreateReferenceFromObject(W1Body))\nconstSet.AppendHybridShape W1Ext\nIsUpdatable W1Ext\nDim W2Ext 'As HybridShapeExtract\nSet W2Ext = MyHSFactory.AddNewExtract(MyPart.CreateReferenceFromObject(W2Body))\nconstSet.AppendHybridShape W2Ext\nIsUpdatable W2Ext\n\nIf CheckIntersection(W1Ext, W2Ext) Then\n    DoArcWallsIntersect = True\nElse\n    DoArcWallsIntersect = False\nEnd If\nMyHSFactory.DeleteObjectForDatum W1Ext\nMyHSFactory.DeleteObjectForDatum W2Ext\nExit Function\nBlast:\nDoArcWallsIntersect = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/DoArcWallsIntersect/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/DoArcWallsIntersect/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/DoArcWallsIntersect/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/DoArcWallsIntersect/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/DotProduct/","title":"DotProduct","text":"<pre><code>Function DotProduct(U, V)\ntemp = U(0) * V(0) + U(1) * V(1) + U(2) * V(2)\nDotProduct = temp\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/DotProduct/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/DotProduct/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/DotProduct/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/DotProduct/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/EmailNotify/","title":"EmailNotify","text":"<pre><code>Sub EmailNotify(FromEmailAddress As String, ToEmailAddress As String, ServerName As String, SubjectStr As String, BodyStr As String)\n    On Error GoTo blast\n    Set objEmail = CreateObject(\"CDO.Message\")\n    objEmail.From = FromEmailAddress\n    objEmail.To = ToEmailAddress\n    objEmail.Subject = SubjectStr\n    objEmail.Textbody = BodyStr\n    objEmail.Configuration.Fields.Item _\n        (\"http://schemas.microsoft.com/cdo/configuration/sendusing\") = 2\n    objEmail.Configuration.Fields.Item _\n        (\"http://schemas.microsoft.com/cdo/configuration/smtpserver\") = _\n            ServerName\n    objEmail.Configuration.Fields.Item _\n        (\"http://schemas.microsoft.com/cdo/configuration/smtpserverport\") = 25\n    objEmail.Configuration.Fields.Update\n    objEmail.Send\n    Exit Sub\nblast:\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/EmailNotify/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/EmailNotify/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/EmailNotify/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/EmailNotify/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/ExistsInArray/","title":"ExistsInArray","text":"<pre><code>Function ExistsInArray(CurName As String, NameArray As Variant) As Boolean\nIf UBound(NameArray) = 0 Then\n    ExistsInArray = False\n    Exit Function\nEnd If\nFor X = 0 To UBound(NameArray)\n    If IsEmpty(NameArray(X)) = False Then\n        If CurName = NameArray(X) Then\n            ExistsInArray = True\n            Exit Function\n        End If\n    End If\nNext X \nExistsInArray = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/ExportPtCoordToXLS/","title":"ExportPtCoordToXLS","text":""},{"location":"DS-CODE/Automation/ExportPtCoordToXLS/#vba","title":"VBA","text":"<pre><code>Sub ExportPtCoordToXLS(CurPtObj As Variant)\nIf IsUpdatable(CurPtObj) Then\n    Dim CIMeas\n    Set CIMeas = TheSPAWorkbench.GetMeasurable(CurPtObj)\n    Dim CICoords()\n    ReDim CICoords(2)\n    CIMeas.GetPoint CICoords\n    CurCells(CSVCounter, 1).Value = CurPtObj.Name\n    CurCells(CSVCounter, 2).Value = CICoords(0)\n    CurCells(CSVCounter, 3).Value = CICoords(1)\n    CurCells(CSVCounter, 4).Value = CICoords(2)\n\n    CSVCounter = CSVCounter + 1\nEnd If\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/ExportPtCoordToXLS/#vbnet","title":"VB.NET","text":"<pre><code>    Public Shared Sub ExportPtCoordToXLS(CurPtObj As Object, ByVal CurCells As Object, ByVal CSVCounter As Integer, mypart As Part)\n        If IsUpdatable(CurPtObj, mypart) Then\n            Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n            Dim CIMeas\n            CIMeas = TheSPAWorkbench.GetMeasurable(CurPtObj)\n            Dim CICoords()\n            ReDim CICoords(2)\n            CIMeas.GetPoint(CICoords)\n\n            CurCells(CSVCounter, 1).Value = CurPtObj.Name\n            CurCells(CSVCounter, 2).Value = CICoords(0)\n            CurCells(CSVCounter, 3).Value = CICoords(1)\n            CurCells(CSVCounter, 4).Value = CICoords(2)\n\n            CSVCounter = CSVCounter + 1\n        End If\n    End Sub\n</code></pre>"},{"location":"DS-CODE/Automation/ExportToPDF/","title":"ExportToPDF","text":"<pre><code>Sub PrintToPDF(SaveFolder As String)\n\n    Dim oDrawing As DrawingDocument\n    Set oDrawing = CATIA.ActiveDocument\n\n    Dim SaveFile As String\n    Set SaveFile = SaveFolder &amp; oDrawing.Name &amp; \".pdf\"\n\n    oDrawing.ExportData SaveFile, \"pdf\"\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/FilletCheck/","title":"FilletCheck","text":"<pre><code>Function FilletCheck(FilletObj As Variant, Orientation1, Orientation2, TOri1, TOri2) As Boolean\nOn Error GoTo Blast3\nDim MyPart As Part\nSet MyPart = CATIA.ActiveDocument.Part\nFilletObj.TangentOrientation1 = TOri1\nFilletObj.TangentOrientation2 = TOri2\nFilletObj.Orientation1 = Orientation1\nFilletObj.Orientation2 = Orientation2\nMyPart.UpdateObject FilletObj\nFilletCheck = True\nExit Function\nBlast3:\nFilletCheck = False \nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/FilletStabilizer/","title":"FilletStabilizer","text":"<pre><code>Function FilletStabilizer(CurveBefore As Variant, CurveAfter As Variant, InPlane As Variant, FilletRad As Double, GeomSet As HybridBody, SurfName As String) As Boolean\nFilletStabilizer = True\n\nDim MyPart As Part\nSet MyPart = CATIA.ActiveDocument.Part\nDim MyHSFactory As HybridShapeFactory\nSet MyHSFactory = MyPart.HybridShapeFactory\n\nDim FilletObj As HybridShapeCircleBitangentRadius\nSet FilletObj = MyHSFactory.AddNewCircleBitangentRadius(CurveBefore, CurveAfter, Nothing, FilletRad, 1, 1)\nFilletObj.DiscriminationIndex = 1\n'DestSet.AppendHybridShape FilletObj\nFilletObj.BeginOfCircle = 2\nFilletObj.SetLimitation 2\nFilletObj.TrimMode = 0\n'FilletObj.EndAngle = 180\n'FilletObj.StartAngle = 0\nGeomSet.AppendHybridShape FilletObj\nFilletObj.Name = SurfName &amp; \"Fillet_edge_line\"\n\nDim FC As Boolean\nFC = False\n\nDim SuperMatrix\nReDim SuperMatrix(15)\nSuperMatrix(0) = Array(1, 1, 1, 1)\nSuperMatrix(1) = Array(-1, 1, 1, 1)\nSuperMatrix(2) = Array(1, -1, 1, 1)\nSuperMatrix(3) = Array(-1, -1, 1, 1) '\nSuperMatrix(4) = Array(1, 1, -1, 1)\nSuperMatrix(5) = Array(-1, 1, -1, 1)\nSuperMatrix(6) = Array(1, -1, -1, 1)\nSuperMatrix(7) = Array(-1, -1, -1, 1) '\nSuperMatrix(8) = Array(1, 1, 1, -1)\nSuperMatrix(9) = Array(-1, 1, 1, -1)\nSuperMatrix(10) = Array(1, -1, 1, -1)\nSuperMatrix(11) = Array(-1, -1, 1, 1) '\nSuperMatrix(12) = Array(1, 1, -1, -1)\nSuperMatrix(13) = Array(-1, 1, -1, -1)\nSuperMatrix(14) = Array(1, -1, -1, -1)\nSuperMatrix(15) = Array(-1, -1, -1, -1)\n\nDim FCCounter As Integer\nFCCounter = 0\nWhile FC = False And FCCounter &lt; 16\n    FC = FilletCheck(FilletObj, SuperMatrix(FCCounter)(0),  SuperMatrix(FCCounter)(1),SuperMatrix(FCCounter)(2), SuperMatrix(FCCounter)(3))\n    FCCounter = FCCounter + 1\nWend\n\nIf FC = False Then\n    FilletStabilizer = False\n    Exit Function\nEnd If\n\n'FilletObj.Support = inplane\n\nMyPart.InWorkObject = FilletObj\nMyPart.UpdateObject FilletObj\n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/FindClosestObjectInGeomSet/","title":"FindClosestObjectInGeomSet","text":"<pre><code>Function FindClosestObjectInGeomSet(GeomSet As HybridBody, CurrentPt As Variant) As Variant\nDim WinningDist As Double\nWinningDist = 1000000000\n\nDim CMeas 'As Measurable\nSet CMeas = theSPAWorkbench.GetMeasurable(CurrentPt)\nFor xxx = 1 To GeomSet.HybridShapes.Count\n    Dim CurLine 'As HybridShape\n    Set CurLine = GeomSet.HybridShapes.Item(xxx)\n\n    Dim TempDist As Double\n    TempDist = CMeas.GetMinimumDistance(CurLine)\n\n    If TempDist &lt; WinningDist Then\n        WinningDist = TempDist\n        Set winningObj = CurLine\n    End If\nNext xxx\n\nSet FindClosestObjectInGeomSet = winningObj\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/","title":"FindObjByStringInGeomSet","text":""},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#v5","title":"V5","text":""},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#vba","title":"VBA","text":""},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function FindObjByStringInGeomSet(GeoSet As HybridBody, StrSeg As String) As HybridShape\n    Dim numb_set As Integer\n    numb_set = GeoSet.HybridShapes.Count\n    Dim loop_x As Integer\n    For loop_x = 1 To numb_set\n        If InStr(GeoSet.HybridShapes.Item(loop_x).Name, StrSeg) &lt;&gt; 0 Then\n            FindObjByStringInGeomSet = GeoSet.HybridShapes.Item(loop_x)\n            loop_x = numb_set\n        End If\n    Next loop_x\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#v6","title":"V6","text":""},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#vba_1","title":"VBA","text":""},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#python_1","title":"Python","text":""},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#cnet_1","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#vbnet_1","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/FindObjByStringInGeomSet/#c","title":"C++","text":"<pre><code>/**\n* \u5728\u51e0\u4f55\u56fe\u5f62\u96c6\u4e2d\u6839\u636e\u540d\u79f0\u67e5\u627e\u7269\u4f53\n* @param iGeometricalSets\n* \u96c6\u5408\u56fe\u5f62\u96c6\n* @param iString\n* \u7279\u5f81\u540d\u79f0\n*/\n\nHRESULT CATObjectModelerClass::FindObjByStringInGeomSet(CATIPartRequest* piPartRequest,CATUnicodeString iInputName, CATLISTV(CATBaseUnknown_var) &amp;pResultSurfaceListV)\n{\nHRESULT hr=S_FALSE;\nCATLISTV(CATBaseUnknown_var) SurfacicSetList;\npiPartRequest-&gt;GetSurfBodies(\"\",SurfacicSetList);\ncout&lt;&lt;\"Hybridbody count is : \"&lt;&lt; SurfacicSetList.Size() &lt;&lt;\"!\"&lt;&lt;endl;\nint size = SurfacicSetList.Size();\nfor (int i = 1;i &lt;= size;i++)\n{\nCATBaseUnknown_var spCurrentSet = SurfacicSetList[i];\nif (spCurrentSet == NULL_var){\ncout&lt;&lt;\"Set List \"&lt;&lt;i&lt;&lt;\" is NULL !\"&lt;&lt;endl;\nreturn E_FAIL;\n}\n\nCATIAlias_var spiAlias = spCurrentSet;\nCATUnicodeString stdName = spiAlias-&gt;GetAlias();\nif(stdName == iInputName)\n{\nCATIBodyRequest *piBodyRequestOnCurrentSet = NULL;\nhr = spCurrentSet-&gt;QueryInterface(IID_CATIBodyRequest, (void**)&amp;piBodyRequestOnCurrentSet);\nif ( SUCCEEDED(hr) )\n{   hr = piBodyRequestOnCurrentSet-&gt;GetResults(\"\", pResultSurfaceListV);\nif ( FAILED(hr) || pResultSurfaceListV.Size() &lt;= 0)\n{\ncout&lt;&lt;\"Geometrical set.1 Surface Element Number is 0 ! error !\"&lt;&lt;endl;\nhr = E_FAIL;\n}\npiBodyRequestOnCurrentSet-&gt;Release();\npiBodyRequestOnCurrentSet = NULL;\n}\nbreak;\n}\n}\n\nreturn S_OK;\n}\n</code></pre>"},{"location":"DS-CODE/Automation/FixInstanceFactory/","title":"FixInstanceFactory","text":"<pre><code>Sub FixInstanceFactory(NameOfReference As String, NameOfDocument As String)\nOn Error GoTo blast\nInstFactory.BeginInstanceFactory NameOfReference, NameOfDocument\nExit Sub\nblast:\nInstFactory.EndInstanceFactory\nInstFactory.BeginInstanceFactory NameOfReference, NameOfDocument\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/FolderVerify/","title":"FolderVerify","text":"<pre><code>Function FolderVerify(curFolderStr As String) As Boolean\nOn Error GoTo blast\nHHH = FS.CreateFolder(curFolderStr)\nFolderVerify = True\nExit Function\nblast:\nFolderVerify = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/ForceColorArray/","title":"ForceColorArray","text":"<pre><code>Sub ForceColorArray(InputArray As Variant, R As Integer, G As Integer, B As Integer, LineTypeNo As  Integer, PointTypeNo As Integer, ThicknessNo As Integer) \nDim VizProp As VisPropertySet\nSet VizProp = MySel.VisProperties\n\nIf MySel.Count &lt;&gt; 0 Then\n    MySel.Clear\nEnd If \n\nFor gg = 0 To UBound(InputArray) - 1\n    MySel.Add InputArray(gg)\nNext gg\n\nIf R &lt;&gt; 1000 Or G &lt;&gt; 1000 Or B &lt;&gt; 1000 Then\n     VizProp.SetVisibleColor R, G, B, 1\nEnd If\nIf LineTypeNo &lt;&gt; 1000 Then\n    VizProp.SetVisibleLineType LineTypeNo, 1\nEnd If\nIf PointTypeNo &lt;&gt; 1000 Then\n    VizProp.SetSymbolType PointTypeNo\nEnd If\nIf ThicknessNo &lt;&gt; 1000 Then\n    VizProp.SetVisibleWidth ThicknessNo, 1\nEnd If\nMySel.Clear\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/ForceColorArrayUgly/","title":"ForceColorArrayUgly","text":"<pre><code>Sub ForceColorArrayUgly(InputArray As Variant, R As Integer, G As Integer, B As Integer, LineTypeNo As Integer, PointTypeNo As Integer, ThicknessNo As Integer)\nDim VizProp As VisPropertySet\nSet VizProp = MySel.VisProperties\n\nIf MySel.Count &lt;&gt; 0 Then\n    MySel.Clear\nEnd If\n\nFor gg = 0 To UBound(InputArray) - 1\n    'StatusBarShort gg, UBound(InputArray) - 1, \"Coloring Elements...  \"\n    MySel.Add InputArray(gg)\n    If R &lt;&gt; 1000 Or G &lt;&gt; 1000 Or B &lt;&gt; 1000 Then\n         VizProp.SetVisibleColor R, G, B, 1\n    End If\n    If LineTypeNo &lt;&gt; 1000 Then\n        VizProp.SetVisibleLineType LineTypeNo, 1\n    End If\n    If PointTypeNo &lt;&gt; 1000 Then\n        VizProp.SetSymbolType PointTypeNo\n    End If\n    If ThicknessNo &lt;&gt; 1000 Then\n        VizProp.SetVisibleWidth ThicknessNo, 1\n    End If\n    MySel.Clear\nNext gg\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/ForceColorObjUgly/","title":"ForceColorObjUgly","text":"<pre><code>Sub ForceColorObjUgly(InputObj As Variant, R As Integer, G As Integer, B As Integer, LineTypeNo As Integer, PointTypeNo As Integer, ThicknessNo As Integer, TransparencyVal as Integer)\nDim VizProp As VisPropertySet\nSet VizProp = MySel.VisProperties\n\nIf MySel.Count &lt;&gt; 0 Then\n    MySel.Clear\nEnd If\n\nMySel.Add InputObj\nIf R &lt;&gt; 1000 Or G &lt;&gt; 1000 Or B &lt;&gt; 1000 Then\n     VizProp.SetVisibleColor R, G, B, 1\nEnd If\nIf LineTypeNo &lt;&gt; 1000 Then\n    VizProp.SetVisibleLineType LineTypeNo, 1\nEnd If\nIf PointTypeNo &lt;&gt; 1000 Then\n    VizProp.SetSymbolType PointTypeNo\nEnd If\nIf ThicknessNo &lt;&gt; 1000 Then\n    VizProp.SetVisibleWidth ThicknessNo, 1\nEnd If\nIf TransparencyVal &lt;&gt; 1000 Then\n    VizProp.SetVisibleOpacity TransparencyVal, 1\nEnd If\nMySel.Clear\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/FurthestPoints/","title":"FurthestPoints","text":"<pre><code>Function FurthestPoints(Point1A As Variant, Point2A As Variant, Point1B As Variant) As Variant\n\nDim SmallestDist As Double\nSmallestDist = 0\nDim WinHH, WinJJ As Integer\nWinHH = 0: WinJJ = 0\n\nCATIA.ActiveDocument.Part.UpdateObject Point1A\nCATIA.ActiveDocument.Part.UpdateObject Point2A\n\nDim MeasuredDist() As Double\nReDim MeasuredDist(1)\nDim CMeas1\nSet CMeas1 = TheSPAWorkbench.GetMeasurable(Point1A)\nMeasuredDist(0) = CMeas1.GetMinimumDistance(Point1B)\nDim CMeas2\nSet CMeas2 = TheSPAWorkbench.GetMeasurable(Point2A)\nMeasuredDist(1) = CMeas2.GetMinimumDistance(Point1B)\n\nFor cM = 0 To 1\n    If MeasuredDist(cM) &gt; SmallestDist Then\n        SmallestDist = MeasuredDist(cM)\n        WinNum = cM\n    End If\nNext cM\n\nIf WinNum = 0 Then\n    Set FurthestPoints = Point1A\nElseIf WinNum = 1 Then\n    Set FurthestPoints = Point2A\nEnd If\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GenerateCATPartFromProduct/","title":"GenerateCATPartFromProduct","text":"<pre><code>Sub GenerateCATPartFromProduct()\nDim ActDoc As ProductDocument\nSet ActDoc = CATIA.ActiveDocument\nDim MySel As Selection\nSet MySel = CATIA.ActiveDocument.Selection\nMySel.Add ActDoc.Product         '.Products.Item(1) \n\nCATIA.RefreshDisplay = True\nCATIA.StartCommand \"Generate CATPart from Product...\"\nCATIA.RefreshDisplay = True \n\nDim PauseTime, Start, Finish, TotalTime\nPauseTime = 0.5\nStart = Timer\nDo While Timer &lt; Start + PauseTime\n    DoEvents\nLoop\nFinish = Timer\nTotalTime = Finish - Start \n\nCATIA.RefreshDisplay = True\nSendKeys \"{Enter}\", True\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/GenerateLengthParametersFromDblArray/","title":"GenerateLengthParametersFromDblArray","text":"<pre><code>Function GenerateLengthParametersFromDblArray(ParmList As Parameters, DblArr As Variant) As Variant\n'Default units are mm.\nDim ParmArr()\nReDim ParmArr(UBound(DblArr))\nFor X = 0 To UBound(DblArr)\n    Set ParmArr(X) = ParmList.CreateDimension(\"STD_Rad\" &amp; Format(X, \"00\"), \"LENGTH\", DblArr(X))\nNext X\nGenerateLengthParametersFromDblArray = ParmArr\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GeneratePublication/","title":"GeneratePublication","text":"<pre><code>Function GeneratePublication(CurPart As Part, CurObj As Variant) As Publication\nDim GBool As Boolean\nGBool = False\nDim CurSel\nSet CurSel = CurObj \n\nDim partDocument1 As PartDocument\nSet partDocument1 = AvailDocs.Item(CurPart.Name &amp; \".CATPart\")\nDim product1 As Product\nSet product1 = partDocument1.GetItem(CurPart.Name)\nDim reference1 As Reference\nSet reference1 = product1.CreateReferenceFromName(CurPart.Name &amp; \"/!\" &amp; CurSel.Name)                '\"T01_DRV/!Plane.1\")\n\nDim Pubs As Publications\nSet Pubs = product1.Publications \n\nFor Z = 1 To Pubs.Count\n    If Pubs.Item(Z).Name = CurSel.Name Then\n        GBool = True\n    End If\nNext Z\nIf GBool = False Then\n    Dim publication1 As Publication\n    Set publication1 = Pubs.Add(CurSel.Name)\n    Pubs.SetDirect CurSel.Name, reference1\nEnd If\nSet GeneratePublication = publication1\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GenerateRealParametersFromDblArray/","title":"GenerateRealParametersFromDblArray","text":"<pre><code>Function GenerateRealParametersFromDblArray(ParmList As Parameters, DblArr As Variant) As Variant\nDim ParmArr()\nReDim ParmArr(UBound(DblArr))\nFor X = 0 To UBound(DblArr)\n    Set ParmArr(X) = ParmList.CreateReal(\"STD_Rad\" &amp; Format(X, \"00\"),  DblArr(X))\nNext X\nGenerateRealParametersFromDblArray = ParmArr\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetAcuteAngle/","title":"GetAcuteAngle","text":""},{"location":"DS-CODE/Automation/GetAcuteAngle/#vba","title":"VBA","text":"<pre><code>Function GetAcuteAngle(Line1 As Variant, Line2 As Variant) As Double\nDim AMeas\nSet AMeas = TheSPAWorkBench.GetMeasurable(Line1)\nDim AAng As Double\nAAng = AMeas.GetAngleBetween(Line2)\nIf AAng &gt; 135 Then\n    GetAcuteAngle = 180 - AAng\nElse\n    GetAcuteAngle = AAng\nEnd If\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetAcuteAngle/#vbnet","title":"VB.NET","text":"<pre><code>    Public Shared Function GetAcuteAngle(objA As Object, objB As Object) As Double\n        Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n\n        Dim AMeas As Measurable\n        AMeas = TheSPAWorkbench.GetMeasurable(objA)\n        ' On Error Resume Next\n        Dim AAng As Double\n        AAng = AMeas.GetAngleBetween(objB)\n        If AAng &gt; 135 Then\n            GetAcuteAngle = 180 - AAng\n        Else\n            GetAcuteAngle = AAng\n        End If\n    End Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetAllPlnFromAxis/","title":"GetAllPlnFromAxis","text":""},{"location":"DS-CODE/Automation/GetAllPlnFromAxis/#cnet","title":"C#.NET","text":"<pre><code> public void GetAllPlnFromAxis(Part part, MECMOD.AxisSystem refaxis, out HybridShape xypln, out HybridShape yzpln, out HybridShape zxpln)\n{\n\nHybridShapeFactory hsf = (HybridShapeFactory)part.HybridShapeFactory;\n\nobject[] vectorXCoord = new object[3];\nobject[] vectorYCoord = new object[3];\nobject[] vectorZCoord = new object[3];\n\nobject[] vectorOCoord = new object[3];\n\nrefaxis.GetOrigin(vectorOCoord);\nrefaxis.GetXAxis(vectorXCoord);\nrefaxis.GetYAxis(vectorYCoord);\nrefaxis.GetZAxis(vectorZCoord);\n\nHybridShapePointCoord opt = hsf.AddNewPointCoord(Convert.ToDouble(vectorOCoord[0]), Convert.ToDouble(vectorOCoord[1]), Convert.ToDouble(vectorOCoord[2]));\nopt.Compute();\n\nHybridShapeDirection xdirl = hsf.AddNewDirectionByCoord(Convert.ToDouble(vectorXCoord[0]), Convert.ToDouble(vectorXCoord[1]), Convert.ToDouble(vectorXCoord[2]));\nxdirl.Compute();\n\nHybridShapeDirection ydirl = hsf.AddNewDirectionByCoord(Convert.ToDouble(vectorYCoord[0]), Convert.ToDouble(vectorYCoord[1]), Convert.ToDouble(vectorYCoord[2]));\nydirl.Compute();\n\nHybridShapeDirection zdirl = hsf.AddNewDirectionByCoord(Convert.ToDouble(vectorZCoord[0]), Convert.ToDouble(vectorZCoord[1]), Convert.ToDouble(vectorZCoord[2]));\nzdirl.Compute();\n\nHybridShapeLinePtDir xln = hsf.AddNewLinePtDir((Reference)opt, xdirl, 10, -20, false); xln.Compute();\nHybridShapeLinePtDir yln = hsf.AddNewLinePtDir((Reference)opt, ydirl, 10, -20, false); yln.Compute();\nHybridShapeLinePtDir zln = hsf.AddNewLinePtDir((Reference)opt, zdirl, 10, -20, false); zln.Compute();\n\nxypln = hsf.AddNewPlaneNormal((Reference)zln, (Reference)opt); xypln.Compute();\nyzpln = hsf.AddNewPlaneNormal((Reference)xln, (Reference)opt); yzpln.Compute();\nzxpln = hsf.AddNewPlaneNormal((Reference)yln, (Reference)opt); zxpln.Compute();\n\n//HybridShapePlaneNormal xypln = hsf.AddNewPlaneNormal((Reference)zln, (Reference)opt); xypln.Compute();\n//HybridShapePlaneNormal yzpln = hsf.AddNewPlaneNormal((Reference)xln, (Reference)opt); yzpln.Compute();\n//HybridShapePlaneNormal zxpln = hsf.AddNewPlaneNormal((Reference)yln, (Reference)opt); zxpln.Compute();\n\n//---------------------------\n}\n</code></pre>"},{"location":"DS-CODE/Automation/GetAngle/","title":"GetAngle","text":""},{"location":"DS-CODE/Automation/GetAngle/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function GetAngle(Line1 As Object, Line2 As Object) As Double\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n    Dim AMeas\n    AMeas = TheSPAWorkbench.GetMeasurable(Line1)\n    'On Error Resume Next\n    Dim AAng As Double\n    AAng = AMeas.GetAngleBetween(Line2)\n    If AAng &lt; 180 Then\n        GetAngle = 180 - AAng\n    Else\n        GetAngle = AAng\n    End If\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetAngle/#vbnet_1","title":"VB.NET","text":"<pre><code>public double GetAngle(AnyObject obj1, AnyObject obj2)\n{\nObject[] aaa1 = new Object[1];\nObject[] aaa2 = new Object[1];\n\naaa1[0] = obj1;\naaa2[0] = obj2;\n\n//Dim theMeasureService As MeasureService\nMeasureService theMeasureService = (MeasureService)catia.ActiveEditor.GetService(\"MeasureService\");\nMeasureBetween theMeasureBetween = (MeasureBetween)theMeasureService.GetMeasureBetween(aaa1, aaa2);\ntheMeasureBetween.Compute();\n\nDouble result = theMeasureBetween.GetAngle();\n\nreturn result;\n}\n</code></pre>"},{"location":"DS-CODE/Automation/GetAngleBetween/","title":"GetAngleBetween","text":""},{"location":"DS-CODE/Automation/GetAngleBetween/#vba","title":"VBA","text":"<pre><code>Function GetAngleBetween(PtAx As Variant, PtAy As Variant, PtAz As Variant, PtBx As Variant, PtBy As Variant, PtBz As Variant, PtCx As Variant, PtCy As Variant, PtCz As Variant) As Double\nDim Vec1()\nReDim Vec1(2)\nDim Vec2()\nReDim Vec2(2)\nVec1(0) = PtAx - PtBx\nVec1(1) = PtAy - PtBy\nVec1(2) = PtAz - PtBz\nVec2(0) = PtCx - PtBx\nVec2(1) = PtCy - PtBy\nVec2(2) = PtCz - PtBz\nLength1 = Sqr(Vec1(0) * Vec1(0) + Vec1(1) * Vec1(1) + Vec1(2) * Vec1(2))\nLength2 = Sqr(Vec2(0) * Vec2(0) + Vec2(1) * Vec2(1) + Vec2(2) * Vec2(2))\nDotP = (Vec1(0) * Vec2(0) + Vec1(1) * Vec2(1) + Vec1(2) * Vec2(2))\nCalc = DotP / (Length1 * Length2)\n'Arccos (77)\nGetAngleBetween = (Atn(-Calc / Sqr(-Calc * Calc + 1)) + 2 * Atn(1)) * (180 / PI)\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetAngleBetween/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/GetAngleBetween/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetAngleBetween/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function GetAngleBetween(PtAx As Object, PtAy As Object, PtAz As Object, PtBx As Object, PtBy As Object, PtBz As Object, PtCx As Object, PtCy As Object, PtCz As Object) As Double\n    Dim Vec1()\n    ReDim Vec1(2)\n    Dim Vec2()\n    ReDim Vec2(2)\n    Vec1(0) = PtAx - PtBx\n    Vec1(1) = PtAy - PtBy\n    Vec1(2) = PtAz - PtBz\n    Vec2(0) = PtCx - PtBx\n    Vec2(1) = PtCy - PtBy\n    Vec2(2) = PtCz - PtBz\n    Length1 = System.Math.Sqrt(Vec1(0) * Vec1(0) + Vec1(1) * Vec1(1) + Vec1(2) * Vec1(2))\n    Length2 = System.Math.Sqrt(Vec2(0) * Vec2(0) + Vec2(1) * Vec2(1) + Vec2(2) * Vec2(2))\n    DotP = (Vec1(0) * Vec2(0) + Vec1(1) * Vec2(1) + Vec1(2) * Vec2(2))\n    Calc = DotP / (Length1 * Length2)\n    'Arccos (77)\n    GetAngleBetween = (System.Math.Atan(-Calc / System.Math.Sqrt(-Calc * Calc + 1)) + 2 * System.Math.Atan(1)) * (180 / System.Math.PI)\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetAngleBetween/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/GetAngleThreePt/","title":"GetAngleThreePt","text":""},{"location":"DS-CODE/Automation/GetAngleThreePt/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function GetAngleThreePt(p1, p2, p3, MyHSFactory) As Double\n\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n\n    Dim ln1, ln2 As HybridShape\n    ln1 = MyHSFactory.AddNewLinePtPt(p2, p1)\n    ln1.Compute()\n    ln2 = MyHSFactory.AddNewLinePtPt(p2, p3)\n    ln2.Compute()\n\n    Dim AMeas\n    AMeas = TheSPAWorkbench.GetMeasurable(ln1)\n    On Error Resume Next\n\n    Dim AAng As Double\n    AAng = AMeas.GetAngleBetween(ln2)\n\n    'If 90 &gt; AAng &gt; 45 Then\n    '    GetAngleThreePt = AAng\n    'Else\n    '    GetAngleThreePt = 180 + AAng\n    'End If\n\n    If AAng &gt; 180 Then\n        GetAngleThreePt = 360 - AAng\n    Else\n        GetAngleThreePt = AAng\n    End If\n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetArc/","title":"GetArc","text":""},{"location":"DS-CODE/Automation/GetArc/#v5","title":"V5","text":""},{"location":"DS-CODE/Automation/GetArc/#vbnet","title":"VB.NET","text":"<pre><code> Function GetArc(ByVal hb, ByVal line, ByVal MyHSFactory)\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n    Dim mmeasureln As Measurable\n    mmeasureln = TheSPAWorkbench.GetMeasurable(line)\n\n    Dim coordinates(8)\n    mmeasureln.GetPointsOnCurve(coordinates)\n\n    Dim pts, ptm, pte, arc\n\n    pts = MyHSFactory.AddNewPointCoord(coordinates(0), coordinates(1), coordinates(2))\n    pts.compute()\n\n    ptm = MyHSFactory.AddNewPointCoord(coordinates(3), coordinates(4), coordinates(5))\n    ptm.compute()\n\n    pte = MyHSFactory.AddNewPointCoord(coordinates(6), coordinates(7), coordinates(8))\n    pte.compute()\n\n    arc = MyHSFactory.AddNewCircle3Points(pts, ptm, pte)\n\n    hb.appendhybridshape(arc)\n\n    arc.compute()\n\n    GetArc = arc\n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetArc/#v6","title":"V6","text":""},{"location":"DS-CODE/Automation/GetArc/#vbnet_1","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/GetArc/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetArc/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/GetArea/","title":"GetArea","text":""},{"location":"DS-CODE/Automation/GetArea/#v5","title":"V5","text":"<pre><code>Public Shared Function GetArea(ByVal obj As Object) As Double\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n    Dim a As Measurable\n    a = TheSPAWorkbench.GetMeasurable(obj)\n    Dim b As Double\n    b = Format(a.Area, \"0.000\")\n    GetArea = b\n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetArea/#v6","title":"V6","text":""},{"location":"DS-CODE/Automation/GetArea/#cnet","title":"C#.NET","text":"<pre><code>public double GetArea(AnyObject surface)\n{\nMeasurableService theMeasureService = (MeasurableService)catia.ActiveEditor.GetService(\"MeasurableService\");\nMeasurableSurface theMeasuresurface = (MeasurableSurface)theMeasureService.GetMeasurable(surface, CATMeasurableType.CAAMeasurableSurface);\n\nDouble result = theMeasuresurface.GetArea();\nreturn result;\n}\n</code></pre>"},{"location":"DS-CODE/Automation/GetBisCrv/","title":"GetBisCrv","text":""},{"location":"DS-CODE/Automation/GetBisCrv/#v5","title":"V5","text":""},{"location":"DS-CODE/Automation/GetBisCrv/#vba","title":"VBA","text":""},{"location":"DS-CODE/Automation/GetBisCrv/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/GetBisCrv/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetBisCrv/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function GetBisCrv(ByVal l1 As HybridShape, ByVal l2 As HybridShape, ByVal pln As HybridShape, ByVal intPt As HybridShape, ByVal hsf As HybridShapeFactory) As HybridShape\n\n    Dim ThisRadius As Double = 120\n    Dim sph As HybridShapeSphere = hsf.AddNewSphere(intPt, Nothing, ThisRadius, -90, 180, 0, 360)\n    sph.Compute()\n\n    Dim int1 As HybridShapeIntersection = hsf.AddNewIntersection(sph, l1)\n    int1.Compute()\n\n    Dim int2 As HybridShapeIntersection = hsf.AddNewIntersection(sph, l2)\n    int2.Compute()\n\n    Dim hybridShapeCircle2PointsRad1 As HybridShapeCircle2PointsRad\n    hybridShapeCircle2PointsRad1 = hsf.AddNewCircle2PointsRad(int1, int2, pln, False, ThisRadius, 1)\n    hybridShapeCircle2PointsRad1.SetLimitation(2)\n    hybridShapeCircle2PointsRad1.Name = \"Arc\"\n\n    Dim ctpt As HybridShapePointOnCurve = hsf.AddNewPointOnCurveFromPercent(hybridShapeCircle2PointsRad1, 0.5, True)\n\n    ctpt.Compute()\n\n    Dim lnn As HybridShapeLinePtPt = hsf.AddNewLinePtPtExtended(ctpt, intPt, 500, 200)\n    lnn.Compute()\n\n    lnn.Name = \"Bisecting\"\n    'hb.AppendHybridShape(lnn)\n\n    Return lnn\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetBisCrv/#v6","title":"V6","text":""},{"location":"DS-CODE/Automation/GetBisCrv/#vba_1","title":"VBA","text":""},{"location":"DS-CODE/Automation/GetBisCrv/#python_1","title":"Python","text":""},{"location":"DS-CODE/Automation/GetBisCrv/#cnet_1","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetBisCrv/#vbnet_1","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/GetCOGFromArray/","title":"GetCOGFromArray","text":"<pre><code>Function GetCOGFromArray(ObjArr As Variant) As Variant\nDim TotArr(2)\nDim TotCounter As Integer\nTotCounter = 0\nFor X = 0 To UBound(ObjArr)\n    If IsEmpty(ObjArr(X)) = False Then\n        Dim CurObj\n        Set CurObj = ObjArr(X)\n        Dim COMeas\n        Set COMeas = TheSPAWorkbench.GetMeasurable(CurObj)\n        Dim COGCoords(2)\n        COMeas.GetCOG COGCoords\n\n        TotCounter = TotCounter + 1\n        TotArr(0) = TotArr(0) + COGCoords(0)\n        TotArr(1) = TotArr(1) + COGCoords(1)\n        TotArr(2) = TotArr(2) + COGCoords(2)\n    End If\nNext X\nTotArr(0) = TotArr(0) / TotCounter\nTotArr(1) = TotArr(1) / TotCounter\nTotArr(2) = TotArr(2) / TotCounter\nGetCOGFromArray = TotArr\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetCOGFromArray/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/GetCOGFromArray/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetCOGFromArray/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/GetCOGFromArray/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/GetCatia/","title":"GetCatia","text":"<p>Sub GetCatia()     On Error Resume Next     '\u5982\u679cCATIA\u542f\u52a8\uff0c\u7528GetObject\u8fde\u63a5\u5230CATIA     Set CATIA = GetObject(, \"CATIA.Application\")     '\u5982\u679cCATIA\u6ca1\u6709\u8fd0\u884c\uff0c\u5219\u5148\u7528Create Object\u542f\u52a8CATIA     If Err.Number &lt;&gt; 0 Then       Set CATIA = CreateObject(\"CATIA.Application\")       CATIA.Visible = True     End If     On Error GoTo 0 End Sub</p>"},{"location":"DS-CODE/Automation/GetCenterPoint/","title":"GetCenterPoint","text":""},{"location":"DS-CODE/Automation/GetCenterPoint/#v5","title":"V5","text":""},{"location":"DS-CODE/Automation/GetCenterPoint/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function GetCenterPoint(ByVal objname As String, ByVal srf As HybridShape, MyHSFactory As HybridShapeFactory)\n\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n    Dim measure As Measurable\n    measure = TheSPAWorkbench.GetMeasurable(srf)\n\n    Dim thecoords(2)\n    measure.GetCOG(thecoords)\n\n    cntrpoint = MyHSFactory.AddNewPointCoord(thecoords(0), thecoords(1), thecoords(2))\n    cntrpoint.name = objname\n    cntrpoint.compute()\n    GetCenterPoint = cntrpoint\n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetColor/","title":"GetColor","text":""},{"location":"DS-CODE/Automation/GetColor/#v5","title":"V5","text":""},{"location":"DS-CODE/Automation/GetColor/#vba","title":"VBA","text":""},{"location":"DS-CODE/Automation/GetColor/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/GetColor/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetColor/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function GetColor(obj)\n\n    Dim a() As Double\n    ReDim a(2)\n    a(0) = 0\n    a(1) = 0\n    a(2) = 0\n\n    CATIA.ActiveDocument.Selection.Clear()\n    CATIA.ActiveDocument.Selection.Add(obj)\n    CATIA.ActiveDocument.Selection.VisProperties.GetRealColor(a(0), a(1), a(2))\n\n    GetColor = a\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetColor/#v6","title":"V6","text":""},{"location":"DS-CODE/Automation/GetColor/#vba_1","title":"VBA","text":""},{"location":"DS-CODE/Automation/GetColor/#python_1","title":"Python","text":""},{"location":"DS-CODE/Automation/GetColor/#cnet_1","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetColor/#vbnet_1","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/GetContainingPart/","title":"GetContainingPart","text":"<pre><code>Function GetContainingPart(oObj) \nSet Current = oObj \nfound = False \nWhile found = False \nSet Current = Current.Parent \nIf TypeName(Current) = \"Part\" Then    \n    found = True \nEnd If Wend \nSet GetContainingPart = Current \nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetContainingPart/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/GetContainingPart/#cnet","title":"C#.NET","text":"<pre><code>public Part GetContainingPart(AnyObject obj)\n{\ntry\n{\nINFITF.AnyObject current = (INFITF.AnyObject)obj; ;\nbool found = false;\nwhile (found == false)\n{\ncurrent = (INFITF.AnyObject)current.Parent;\nif (Microsoft.VisualBasic.Information.TypeName(current) == \"Part\")\n{\nfound = true;\n}\n}\nreturn (MECMOD.Part)current;\n}\ncatch\n{\nINFITF.AnyObject OldObj = obj.Application.ActiveEditor.ActiveObject;\nMECMOD.Part part = (MECMOD.Part)OldObj;\nreturn part;\n}\n}\n</code></pre>"},{"location":"DS-CODE/Automation/GetContainingPart/#vbnet","title":"VB.NET","text":"<pre><code> Public Shared Function GetContainingPart(oObj)\n        Current = oObj\n        found = False\n        While found = False\n            Current = Current.Parent\n            If TypeName(Current) = \"Part\" Then\n                found = True\n            End If\n        End While\n\n        GetContainingPart = Current\n    End Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetContainingPart/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/GetCurrentDoc_TopProduct/","title":"GetCurrentDoc TopProduct","text":""},{"location":"DS-CODE/Automation/GetCurrentDoc_TopProduct/#caa","title":"CAA","text":"<pre><code>//\u6279\u5904\u7406\u6a21\u5f0f\u83b7\u5f97\u6587\u4ef6\u7684rootProduct\nHRESULT GetCurrentDoc_TopProduct( CATIProduct_var &amp; spTopProd)\n{\n//--------------------------------------------------------------------\n// 1. Prologue \n//--------------------------------------------------------------------\ncout &lt;&lt; endl &lt;&lt; flush;\ncout &lt;&lt; endl &lt;&lt; flush;\ncout &lt;&lt; \"----------------------------------------------------------------\" &lt;&lt; endl &lt;&lt; flush;\ncout &lt;&lt; endl &lt;&lt; flush;\n\n// --- Creating the Session:  A session must always be created in a batch\nchar *sessionName = \"CAA_EhiFilter_Session\";\nCATSession *pSession = NULL;\nHRESULT rc = ::Create_Session(sessionName,pSession);\nif ((SUCCEEDED(rc)) &amp;&amp; (NULL != pSession))\n{\ncout &lt;&lt; \"&gt; session created : \" &lt;&lt; sessionName &lt;&lt;endl &lt;&lt; flush;\n}\nelse\n{\ncout &lt;&lt; \"ERROR in creating session\" &lt;&lt; sessionName &lt;&lt; endl &lt;&lt; flush;\nreturn 1;\n}\n\n// --- Opening an existing document \n//     The input parameter to this sample program must contain \n//     the entire path and name of the document that is to be opened.  \n\nCATDocument *pDoc = NULL;  // pDoc is a pointer to the document \n\ncout &lt;&lt; \"&gt; open document :\"&lt;&lt; argv[1] &lt;&lt; argv[2] &lt;&lt; endl &lt;&lt; flush;\nrc = CATDocumentServices::OpenDocument(CATUnicodeString(argv[1])+CATUnicodeString(argv[2]), pDoc);\n\nCATLockDocument(*pDoc);\n\nif (SUCCEEDED(rc) &amp;&amp; (NULL != pDoc))\n{\ncout &lt;&lt; \"&gt; document opened \" &lt;&lt; endl &lt;&lt; flush;\n}\nelse\n{\ncout &lt;&lt; \"ERROR in opening document\" &lt;&lt; endl &lt;&lt; flush;\nreturn 2;\n}\n\n// --- Retrieving root product of the opened document \nCATIProduct* piRootProduct = NULL; // piRootProduct is a handle to document root product  \n//  \nCATIDocRoots * piDocRoots = NULL;\nrc = pDoc-&gt;QueryInterface(IID_CATIDocRoots,(void**) &amp;piDocRoots);\nif ( FAILED(rc) || (NULL==piDocRoots) ) {\ncout &lt;&lt; \"ERROR : Failed to query CATIDocRoots\" &lt;&lt; endl;\nreturn 3;\n}\nCATListValCATBaseUnknown_var* pListRootProduct = piDocRoots-&gt;GiveDocRoots();\npiDocRoots-&gt;Release();\npiDocRoots=NULL;\n\nif ( pListRootProduct &amp;&amp; pListRootProduct-&gt;Size() )\n{  CATBaseUnknown_var hUnk = (*pListRootProduct)[1];\n\nif (NULL_var != hUnk) rc = hUnk-&gt;QueryInterface(IID_CATIProduct,(void**) &amp;piRootProduct );\nif (pListRootProduct) delete pListRootProduct;\npListRootProduct = NULL;\n//\nif  (SUCCEEDED(rc) &amp;&amp; (NULL != piRootProduct))\n{\ncout &lt;&lt; \"&gt; root product found in document \" &lt;&lt; endl &lt;&lt; flush;\nspTopProd = piProductOnRoot;\nCATUnicodeString partNumber = piProductOnRoot-&gt;GetPartNumber();\ncout &lt;&lt; \"Working with '\" &lt;&lt; partNumber.ConvertToChar() &lt;&lt; \"'\" &lt;&lt; endl;\nreturn S_OK;\n}\nelse\n{\ncout &lt;&lt; \"ERROR : Root product not found in document \" &lt;&lt; endl &lt;&lt; flush;\nreturn 3;\n}\n}\n</code></pre>"},{"location":"DS-CODE/Automation/GetDataFromExcel/","title":"GetDataFromExcel","text":""},{"location":"DS-CODE/Automation/GetDataFromExcel/#c","title":"c++","text":"<pre><code>//===================================================================\n// COPYRIGHT Dassault Systemes 2021/05/30\n//===================================================================\n// CATExcelDataClass.cpp\n// Header definition of class CATExcelDataClass\n//===================================================================\n//\n// Usage notes:\n//\n//===================================================================\n//  2021/05/30 Creation: Code generated by the 3DS wizard\n//===================================================================\n\n#include \"CATExcelDataClass.h\"\n\n#include \"libxl.h\"\nusing namespace libxl;\n\n//#include \"CATObjectModelerClass.h\"\n//\n//CATObjectModelerClass aa;\n\nHRESULT CAAGetFileExtension(CATUnicodeString&amp; iosData)\n{\nHRESULT rc = E_FAIL;\n\nif (!(iosData.IsNull()))\n{\nint dIndex = iosData.SearchSubString(\".\", 1, CATUnicodeString::CATSearchModeBackward);\nif (dIndex != -1)\n{\niosData = iosData.SubString(dIndex + 1, iosData.GetLengthInChar() - dIndex - 1);\ncout &lt;&lt; \"Index : \" &lt;&lt; dIndex &lt;&lt; \",\" &lt;&lt; iosData &lt;&lt; endl;\nif (!(iosData.IsNull()))\n{\nrc = S_OK;\n}\n}\n}\n\nreturn rc;\n}\nHRESULT GetDataFromExcel(CATUnicodeString iExcelPath, int iStartRow, int iColumn, CATListOfCATUnicodeString &amp;osDataListVec)\n{\nBook* book;\n\nCATUnicodeString xlsPath = iExcelPath;\nCATUnicodeString ftype = xlsPath;\nHRESULT rc = CAAGetFileExtension(ftype);\n\ncout &lt;&lt; \"File extension is \" &lt;&lt; ftype &lt;&lt; endl;\n\nif (SUCCEEDED(rc))\n{\nif (ftype == \"xlsx\") {\nbook = xlCreateXMLBook();\n}\nelse if (ftype == \"xls\") {\nbook = xlCreateBook();\n}\nelse\nreturn E_FAIL;\n}\n\nif (book)\n{\nconst wchar_t * x = L\"Halil Kural\";\nconst wchar_t * y = L\"windows-2723210a07c4e90162b26966a8jcdboe\";\nbook-&gt;setKey(x, y);\n\nwchar_t* wExcelPath = new wchar_t[xlsPath.GetLengthInChar() + 1];\nxlsPath.ConvertToWChar(wExcelPath);\n\nif (book-&gt;load(wExcelPath))\n{\nSheet* sheet = book-&gt;getSheet(0);\nif (sheet)\n{\nwhile (true)\n{\n//CATListOfDouble sDataList;\nconst wchar_t* wStr1 = sheet-&gt;readStr(iStartRow, iColumn);\nCATUnicodeString strText1;\nstrText1.BuildFromWChar(wStr1);\n\n// cout &lt;&lt; strText1 &lt;&lt; \"\\t\"  &lt;&lt; \"\\n\";\n\nif (strText1.IsNull())\nbreak;\n\nosDataListVec.Append(strText1);\niStartRow++;\n}\n}\n}\nbook-&gt;release();\n}\nreturn rc;\n}\n</code></pre>"},{"location":"DS-CODE/Automation/GetDistance/","title":"GetDistance","text":""},{"location":"DS-CODE/Automation/GetDistance/#v5","title":"V5","text":""},{"location":"DS-CODE/Automation/GetDistance/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function GetDistance(EdgeRef1, EdgeRef2) As Double\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n    Dim CurrentMeasurable As Measurable\n    Dim TempDistance\n    CurrentMeasurable = TheSPAWorkbench.GetMeasurable(EdgeRef1)\n    TempDistance = CurrentMeasurable.GetMinimumDistance(EdgeRef2)\n    GetDistance = TempDistance\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetDistance/#vba","title":"VBA","text":"<pre><code>Function GetDistance(EdgeRef1, EdgeRef2) As Double\n    Dim TheSPAWorkbench As SPAWorkbench\n    Set TheSPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n    Dim CurrentMeasurable As Measurable\n    Set CurrentMeasurable = TheSPAWorkbench.GetMeasurable(EdgeRef1)\n    Dim TempDistance As Double\n    TempDistance = CurrentMeasurable.GetMinimumDistance(EdgeRef2)\n    GetDistance = TempDistance\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetDistance/#v6","title":"V6","text":""},{"location":"DS-CODE/Automation/GetDistance/#cnet","title":"C#.NET","text":"<pre><code>public double GetDistance(AnyObject obj1, AnyObject obj2)\n{\ntry\n{\nObject[] aaa1 = new Object[1];\nObject[] aaa2 = new Object[1];\n\naaa1[0] = obj1;\naaa2[0] = obj2;\n\n//Dim theMeasureService As MeasureService\nMeasureService theMeasureService = (MeasureService)catia.ActiveEditor.GetService(\"MeasureService\");\nMeasureBetween theMeasureBetween = (MeasureBetween)theMeasureService.GetMeasureBetween(aaa1, aaa2);\ntheMeasureBetween.Compute();\n\nDouble result = theMeasureBetween.GetDistance();\nreturn result;\n}\ncatch\n{\nreturn 0;\n}\n\n}\n</code></pre> <pre><code> Function GetDistance(obj1, obj2) As Double\n\n        Dim aaa1(0) As Object\n        Dim aaa2(0) As Object\n\n        aaa1(0) = obj1\n        aaa2(0) = obj2\n\n        'Dim theMeasureService As MeasureService\n        Dim theMeasureService 'As MeasureService\n        theMeasureService = CATIA.ActiveEditor.GetService(\"MeasureService\")\n        Dim theMeasureBetween As MeasureBetween\n        theMeasureBetween = theMeasureService.GetMeasureBetween(aaa1, aaa2)\n        theMeasureBetween.Compute()\n\n        Dim result As Double = theMeasureBetween.GetDistance()\n        Return result\n\n    End Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetFirstInstanceInExcel/","title":"GetFirstInstanceInExcel","text":"<pre><code>Function GetFirstInstanceInExcel(InputVal As String, ColumnNo As Integer, EndRow As Integer) As Integer\nDim LCounter As Integer\nLCounter = 2\nWhile LCounter &lt;= EndRow\n    CurCellStr = CStr(CurCells(LCounter, ColumnNo).Value)\n    If CurCellStr = InputVal Then\n        GetFirstInstanceInExcel = LCounter\n        Exit Function\n    End If\n    LCounter = LCounter + 1\nWend\nGetFirstInstanceInExcel = -1\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetLength/","title":"GetLength","text":""},{"location":"DS-CODE/Automation/GetLength/#v5","title":"V5","text":""},{"location":"DS-CODE/Automation/GetLength/#vba","title":"VBA","text":""},{"location":"DS-CODE/Automation/GetLength/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/GetLength/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetLength/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function GetLength(ByVal obj As Object) As Double\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n    Dim a As Measurable\n    a = TheSPAWorkbench.GetMeasurable(obj)\n    Dim b As Double\n    b = Format(a.Length, \"0.000\")\n    GetLength = b\n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetLength/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/GetLength/#v6","title":"V6","text":""},{"location":"DS-CODE/Automation/GetLength/#vba_1","title":"VBA","text":""},{"location":"DS-CODE/Automation/GetLength/#python_1","title":"Python","text":""},{"location":"DS-CODE/Automation/GetLength/#cnet_1","title":"C#.NET","text":"<p><pre><code>public double GetLength(AnyObject obj)\n{\nMeasurableService theMeasureService = (MeasurableService)catia.ActiveEditor.GetService(\"MeasurableService\");\nMeasurableCurve theMeasureItem = (MeasurableCurve)theMeasureService.GetMeasurable(obj, CATMeasurableType.CAAMeasurableCurve);\nDouble result = theMeasureItem.GetLength();\n\nreturn result;\n}\n</code></pre> <pre><code>public double GetLineLength(AnyObject obj)\n{\nMeasurableService theMeasureService = (MeasurableService)catia.ActiveEditor.GetService(\"MeasurableService\");\nMeasurableLine theMeasureItem = (MeasurableLine)theMeasureService.GetMeasurable(obj, CATMeasurableType.CAAMeasurableLine);\n\nDouble result = theMeasureItem.GetLength();\n\nreturn result;\n}\n</code></pre></p>"},{"location":"DS-CODE/Automation/GetLength/#vbnet_1","title":"VB.NET","text":"<pre><code>Function GetLength(ByVal obj1 As AnyObject) As Double\n\n'    Dim a(0)\n'    Dim b(0)\n'    a(0) = obj1\n'    b(0) = obj2\n    'On Error Resume Next\n    Dim oMeasurableService As MeasurableService\n    Set oMeasurableService = _\n     CATIA.ActiveEditor.GetService(\"MeasurableService\")\n\n    Dim theMeasureLine As MeasurableLine\n    Set theMeasureLine = oMeasurableService.GetMeasurable(obj1, CAAMeasurableLine)\n    Dim aa As Double\n    aa = theMeasureLine.GetLength\n    GetLength = aa\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetLength/#caa_1","title":"CAA","text":"<pre><code>HRESULT GetLength(CATBaseUnknown_var spObject, double&amp; idLength)\n{\nHRESULT rc = E_FAIL;\ndouble dis = -1;\nCATIMeasurableInContext_var spiMeasurableContextObject = spObject;\nif (spiMeasurableContextObject != NULL_var)\n{\nrc = spiMeasurableContextObject-&gt;GetLength(dis);\nif (FAILED(rc))\n{\ncout &lt;&lt; \"Error : Get GetLength Failed \u00a3\u00a1\" &lt;&lt; endl;\nrc = E_FAIL;\n}\nelse\n{\nrc = S_OK;\n}\n}\nelse {\ncout &lt;&lt; \"Error : CATIMeasurableInContext NULL ! \" &lt;&lt; endl;\nrc = E_FAIL;\n}\nidLength = dis;\nreturn rc;\n\n}\n</code></pre>"},{"location":"DS-CODE/Automation/GetMaxProjDistance/","title":"GetMaxProjDistance","text":"<pre><code>Function GetMaxProjDistance(CrvObj1 As Variant, Obj2 As Variant, IntervalDist As Double, ConstSet As HybridBody) As Double\nDim Floater As HybridShapePointOnCurve\nSet Floater = MyHSFactory.AddNewPointOnCurveFromDistance(CrvObj1, 0, True)\nConstSet.AppendHybridShape Floater\nIf IsUpdatable(Floater) = False Then\n    GetMaxProjDistance = -1\n    MyHSFactory.DeleteObjectForDatum Floater\n    Exit Function\nEnd If\n\nDim LargestVal As Double\nLargestVal = 0\nDim CMeas\nSet CMeas = TheSPAWorkbench.GetMeasurable(CrvObj1)\nDim CLength As Double\nCLength = CMeas.Length\nDim LCounter As Double\nLCounter = 0\nWhile LCounter &lt; CLength\n    Floater.Offset.Value = LCounter\n    MyPart.UpdateObject Floater\n    If CheckProjection(Floater, Obj2) Then\n        Dim TempProj As HybridShapeProject\n        Set TempProj = MyHSFactory.AddNewProject(Floater, Obj2)\n        ConstSet.AppendHybridShape TempProj\n        MyPart.UpdateObject TempProj\n\n        Dim TempMeas\n        Set TempMeas = TheSPAWorkbench.GetMeasurable(TempProj)\n        Dim CurDist As Double\n        CurDist = TempMeas.GetMinimumDistance(Floater)\n\n        If CurDist &gt; LargestVal Then\n            LargestVal = CurDist\n        End If\n        MyHSFactory.DeleteObjectForDatum TempProj\n    End If\n\n    LCounter = LCounter + IntervalDist\nWend\n\nMyHSFactory.DeleteObjectForDatum Floater\nGetMaxProjDistance = LargestVal\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetMaxProjDistance/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/GetMaxProjDistance/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetMaxProjDistance/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/GetMaxProjDistance/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/GetMinimumDistanceApart/","title":"GetMinimumDistanceApart","text":""},{"location":"DS-CODE/Automation/GetMinimumDistanceApart/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function GetMinimumDistanceApart(Obj1 As Object, Obj2 As Object) As Double\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n\n    Dim L1Meas\n    L1Meas = TheSPAWorkbench.GetMeasurable(Obj1)\n    Dim Di As Double\n    Di = L1Meas.GetMinimumDistance(Obj2)\n    GetMinimumDistanceApart = Di\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetMinimumDistanceAtLineEndPts/","title":"GetMinimumDistanceAtLineEndPts","text":"<pre><code>Function GetMinimumDistanceAtLineEndPts(Line1 As Variant, Line2 As Variant) As Double\nIsUpdatable Line1\nIsUpdatable Line2\nDim L1Meas\nSet L1Meas = TheSPAWorkbench.GetMeasurable(Line1)\nDim L1Coords()\nReDim L1Coords(8)\nL1Meas.GetPointsOnCurve L1Coords \n\nDim L2Meas\nSet L2Meas = TheSPAWorkbench.GetMeasurable(Line2)\nDim L2Coords() \nReDim L2Coords(8)\nL2Meas.GetPointsOnCurve L2Coords\n\nDim Di As Double\nDi = find3DDistance(L1Coords(6), L1Coords(7), L1Coords(8), L2Coords(6), L2Coords(7), L2Coords(8))\nGetMinimumDistanceAtLineEndPts = Di\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetMinimumDistanceAtLineEndPts/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/GetMinimumDistanceAtLineEndPts/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetMinimumDistanceAtLineEndPts/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/GetMinimumDistanceAtLineEndPts/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/GetNormalAngle/","title":"GetNormalAngle","text":""},{"location":"DS-CODE/Automation/GetNormalAngle/#vba","title":"VBA","text":"<pre><code>Function getnormalangle(ByVal hb, ByVal centerpoint, ByVal normal, ByVal arc, ByVal MyHSFactory)\n\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n\n    Dim cpt, oln\n    cpt = MyHSFactory.AddNewPointCenter(arc)\n    cpt.compute()\n\n    oln = MyHSFactory.AddNewLinePtPt(centerpoint, cpt)\n    oln.compute()\n\n    Dim mlin As Measurable\n    mlin = TheSPAWorkbench.GetMeasurable(oln)\n\n    Dim angle As Double\n    angle = mlin.GetAngleBetween(normal)\n\n    getnormalangle = angle\n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetNormalAngle/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/GetNormalAngle/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetNormalAngle/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/GetPartFromName/","title":"GetPartFromName","text":"<pre><code>Function GetPartFromName(InputStr As String) As Part\nFor X = 1 To CATIA.Documents.Count\n    If TypeName(CATIA.Documents.Item(X)) = \"PartDocument\" Then\n        If CATIA.Documents.Item(X).Part.Name = InputStr Then\n            Set GetPartFromName = CATIA.Documents.Item(X).Part\n        End If\n    End If\nNext X\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetPartFromName/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/GetPartFromName/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetPartFromName/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/GetPartFromName/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/GetPointCoord/","title":"GetPointCoord","text":""},{"location":"DS-CODE/Automation/GetPointCoord/#vb","title":"VB","text":""},{"location":"DS-CODE/Automation/GetPointCoord/#how-to-use-it","title":"How to use it?","text":"<pre><code> Sub Main()\n    CATIA = GetObject(, \"CATIA.Application\")\n    ' getPrd()\n\n    Dim sel As INFITF.Selection = CATIA.ActiveEditor.Selection\n    Dim obj = sel.Item(1).Value\n\n    Dim aa(2) As Double\n\n    aa = GetPointCoordinate(obj)\n\n    MsgBox(aa(0) &amp; \",\" &amp; aa(1) &amp; \",\" &amp; aa(2))\n\nEnd Sub\n</code></pre> <pre><code> Function GetPointCoordinate(iPoint) As Double()\n\n    Dim aaa1(0) As Object\n    aaa1(0) = iPoint\n\n    Dim theMeasureService As MeasurableService\n    theMeasureService = CATIA.ActiveEditor.GetService(\"MeasurableService\")\n    Dim theMeasurablePoint As MeasurablePoint\n    theMeasurablePoint = theMeasureService.GetMeasurable(aaa1(0), CATMeasurableType.CAAMeasurablePoint)\n    Dim theXPoint As Double\n    Dim theYPoint As Double\n    Dim theZPoint As Double\n    theMeasurablePoint.GetPoint(theXPoint, theYPoint, theZPoint)\n\n    Dim oCoord(2) As Double\n    oCoord(0) = theXPoint\n    oCoord(1) = theYPoint\n    oCoord(2) = theZPoint\n    Return oCoord\nEnd Function\n</code></pre> <pre><code>Dim parms As Parameters\nparms = part1.Parameters.SubList(hb1, True)\n'MsgBox(\"PARMS:\" &amp; CStr(parms.Count))\n\nDim listparm1 As ListParameter\nlistparm1 = parms.Item(\"PTS\")\n\nIf listparm1 Is Nothing Then\n    MsgBox(\"CAN'T FIND LIST.\", Title:=\"F**K\")\n    Exit Sub\nEnd If\n\nMsgBox(listparm1.ValueList.Count)\n\nDim NoLabelPos11(2)\nlistparm1.ValueList.Item(1).GetCoordinates(NoLabelPos11)\nDim NoLabelPos22(2)\nlistparm1.ValueList.Item(2).GetCoordinates(NoLabelPos22)\n\nConsole.WriteLine(\"XYZ:\" &amp; NoLabelPos11(0) &amp; \",\" &amp; NoLabelPos11(1) &amp; \",\" &amp; NoLabelPos11(2) &amp; vbCrLf &amp;\n\"XYZ:\" &amp; NoLabelPos22(0) &amp; \",\" &amp; NoLabelPos22(1) &amp; \",\" &amp; NoLabelPos22(2))\n\n'\u6d4b\u8bd5\u6d4b\u91cf\u51fd\u6570\nDim aaq As Double = GetDistance(pt1, pt2)\nConsole.WriteLine(\"DISTANCE: \" &amp; CStr(aaq))\n</code></pre>"},{"location":"DS-CODE/Automation/GetRadius/","title":"GetRadius","text":""},{"location":"DS-CODE/Automation/GetRadius/#v5","title":"V5","text":""},{"location":"DS-CODE/Automation/GetRadius/#vba","title":"VBA","text":""},{"location":"DS-CODE/Automation/GetRadius/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/GetRadius/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetRadius/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function GetRadius(ByVal obj As Object) As Double\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n    Dim a As Measurable\n    a = TheSPAWorkbench.GetMeasurable(obj)\n    Dim b As Double\n    b = Format(a.Radius, \"0.000\")\n    GetRadius = b\n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetRadius/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/GetRadius/#v6","title":"V6","text":""},{"location":"DS-CODE/Automation/GetRadius/#vba_1","title":"VBA","text":""},{"location":"DS-CODE/Automation/GetRadius/#python_1","title":"Python","text":""},{"location":"DS-CODE/Automation/GetRadius/#cnet_1","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetRadius/#vbnet_1","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/GetRadius/#caa_1","title":"CAA","text":""},{"location":"DS-CODE/Automation/GetSlope/","title":"GetSlope","text":"<pre><code>Function GetSlope(X1 As Variant, X2 As Variant, Y1 As Variant, Y2 As Variant) As Double\nGetSlope = (Y1 - Y2) / (X1 - X2)\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetSlope/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/GetSlope/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetSlope/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/GetSlope/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/GetSubGSListFromParentGS/","title":"GetSubGSListFromParentGS","text":""},{"location":"DS-CODE/Automation/GetSubGSListFromParentGS/#csharp","title":"CSharp","text":""},{"location":"DS-CODE/Automation/GetSubGSListFromParentGS/#vb","title":"VB","text":""},{"location":"DS-CODE/Automation/GetSubGSListFromParentGS/#c","title":"C++","text":"<pre><code>HRESULT GetSubGSListFromParentGS(CATIPrtPart_var iPart,CATUnicodeString iGSName ,CATListValCATBaseUnknown_var &amp;spOGeometrySet)\n{\nHRESULT hr = E_FAIL;\nCATIPartRequest* piPartRequest = NULL;\nhr = iPart-&gt;QueryInterface(IID_CATIPartRequest, (void**)&amp;piPartRequest);\nif (FAILED(hr) || piPartRequest == NULL)\n{\ncout &lt;&lt; \"QI CATIPartRequest Failed !\" &lt;&lt; endl;\nreturn hr;\n}\nCATLISTV(CATBaseUnknown_var) SurfacicSetList;\npiPartRequest-&gt;GetSurfBodies(\"\", SurfacicSetList);\nint size = SurfacicSetList.Size();\nfor (int i = 1; i &lt;= size; i++)\n{\nCATBaseUnknown_var spCurrentSet = SurfacicSetList[i];\nCATIAlias_var spiAlias = spCurrentSet;\nif (spiAlias-&gt;GetAlias() == iGSName)//PIER\n{\nCATINavigateObject_var spiNavObj1 = spCurrentSet;\nCATListValCATBaseUnknown_var* pChildrenListV1 = spiNavObj1-&gt;GetChildren();\nfor (int k = 1; k &lt;= pChildrenListV1-&gt;Size(); k++)\n{\nCATBaseUnknown_var spFeature = (*pChildrenListV1)[k];\nspiAlias = spFeature;   spOGeometrySet.Append(spFeature);       }\n}\n}\nreturn hr;\n}\n</code></pre>"},{"location":"DS-CODE/Automation/GetTechnologicalObjectParameters/","title":"GetTechnologicalObjectParameters","text":"<pre><code>AnnotatedViews\nArrangementProduct\nAssemblyFeatures\nCATAnnotationSets\nClashResults\nClashes\nDMUReviews\nDistances\nGroups\nHumanWorkbench\nInertia\nMarker3Ds\nMechanisms\nMechanisms_provider\nMerges\nOffsets\nPresentationBrowser\nResourceProgramManager\nSIMColorActions\nSIMExperiments\nSIMSequences\nSIMVisibilityActions\nSampleds\nScenesCollection\nSections\nSilhouettes\nSimplifications\nSpatialQuery\nStructureFoundations\nStructureMembers\nStructureObjectFactory\nStructurePlates\nSweptVolumes\nTagGroupFactory\nThicknesses\nThreeDCuts\nTracks\nVibrationVolumes\nWrappings\n\n\n\n\nAssemblyFeatures libCATAssemblyFeature\nArrangementProduct libCATArrangementAuto\nArrangementArea libCATArrangementAuto\nArrangementRectangle libCATArrangementAuto\nArrangementItemReservation libCATArrangementAuto\nArrangementRun libCATArrangementAuto\nArrangementPathway libCATArrangementAuto\nArrangementBoundary libCATArrangementAuto\nPspWorkbench libCATPspIDLImpl\n-PspAttribute libCATPspIDLImpl\n-PspLogicalLine libCATPspIDLImpl\nSchematicRoot libCATSchIDLBasicImpl\nCATAnnotationSets libCATTPSMODEL\nHumanWorkbench libSWKHumanModelingBase\nManikin libSWKHumanModelingBase\nTag libDNBIgpSetupModel\nTagGroup libDNBIgpSetupModel\nTagFactory libDNBIgpSetupModel\nTagGroupFactory libDNBIgpSetupModel\nMountManager libDNBIgpSetupModel\nRobotTaskFactory libDNBIgpSetupModel\nOperation libDNBIgpSetupModel\nRobotMotion libDNBIgpSetupModel\nRobotTask libDNBIgpSetupModel\nActiveTask libDNBResourceProgramModel\nResourceProgramManager libDNBResourceProgramModel\nDNBIARobGenericController libDNBRobotBase\nRobControllerFactory libDNBRobotBase\nTracks libCATFittingSimulation\nSampleds libCATFittingSimulation\nMechanisms_provider libCATMechanisms\nMechanisms libCATMechanisms\nDressups_provider libCATMechanisms\nGroups libCATDMUBase\nAnnotatedViews libCATDMUBase\nMarker3Ds libCATDMUBase\nDMUReviews libCATDMUReviewModel\nPresentations libCATDMUPres\nPresentationBrowser libCATDMUPres\nScenesCollection libCATNewScenesObject\nSIMExperiments libCATSIMExperimentModel\nSIMSequences libCATSIMSequenceModel\nSIMColorActions libCATSIMColorActionModel\nSIMVisibilityActions libCATSIMVisibilityActionModel\nSections libCATSpaCAA\nDistances libCATSpaCAA\nClashes libCATSpaCAA\nInertia libCATSpaCAA\nClashResults libCATSpaCAA\nSilhouettes libCATSMTCAA\nWrappings libCATSMTCAA\nThicknesses libCATSMTCAA\nOffsets libCATSMTCAA\nSweptVolumes libCATSMTCAA\nVibrationVolumes libCATSMTCAA\nThreeDCuts libCATSMTCAA\nSpatialQuery libCATSMTCAA\nSimplifications libCATSMTCAA\nMerges libCATSMTCAA\nStructureMembers libCATStructure\nStructurePlates libCATStructure\nStructureObjectFactory libCATStructure\nStructureFoundations libCATStructure </code></pre>"},{"location":"DS-CODE/Automation/GetXYZFromArray/","title":"GetXYZFromArray","text":"<pre><code>Function GetXYZFromArray(PtArr As Variant, XVal As Double, YVal As Double, ZVal As Double, Closest1Farthest0 As Integer) As Integer\nDim WinningVal As Double\nIf Closest1Farthest0 = 1 Then\n    WinningVal = 1000000023\nElse\n    WinningVal = -1000000023\nEnd If\nDim WinningInt As Integer\nWinningInt = 0\n\nFor X = 0 To UBound(PtArr)\n    Dim CurDistVal As Double\n    CurDistVal = find3DDistance(XVal, YVal, ZVal, PtArr(X)(0), PtArr(X)(1), PtArr(X)(2))\n    If Closest1Farthest0 = 1 Then\n        If WinningVal &gt; CurDistVal Then\n            WinningVal = CurDistVal\n            WinningInt = X\n        End If\n    Else\n        If WinningVal &lt; CurDistVal Then\n            WinningVal = CurDistVal\n            WinningInt = X\n        End If\n    End If\nNext X\nGetXYZFromArray = WinningInt\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetXYZFromArray/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/GetXYZFromArray/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetXYZFromArray/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/GetXYZFromArray/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/GetXYZFromPoint/","title":"GetXYZFromPoint","text":"<pre><code>Function GetXYZFromPoint(InputPt As Variant) As Variant\nDim SArr()\nReDim SArr(2)\nIf IsUpdatable(InputPt) Then\n    Dim CMeas\n    Set CMeas = TheSPAWorkbench.GetMeasurable(InputPt)\n    CMeas.GetPoint SArr\n    GetXYZFromPoint = SArr\n    Exit Function\nEnd If\nSArr(0) = 0\nSArr(1) = 0\nSArr(2) = 0\nGetXYZFromPoint = SArr\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetXYZFromPoint/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/GetXYZFromPoint/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetXYZFromPoint/#vbnet","title":"VB.NET","text":"<pre><code> Public Shared Function GetXYZFromPoint(InputPt As Object, mypart As Part) As Object\n        Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n\n        Dim SArr()\n        ReDim SArr(2)\n        If IsUpdatable(InputPt, mypart) Then\n            Dim CMeas\n            CMeas = TheSPAWorkbench.GetMeasurable(InputPt)\n            CMeas.GetPoint(SArr)\n            GetXYZFromPoint = SArr\n            Exit Function\n        End If\n        SArr(0) = 0\n        SArr(1) = 0\n        SArr(2) = 0\n        GetXYZFromPoint = SArr\n    End Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetXYZFromPoint/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/GetYIntercept/","title":"GetYIntercept","text":"<pre><code>Function GetYIntercept(X1 As Variant, X2 As Variant, Y1 As Variant, Y2 As Variant) As Double\nGetYIntercept = Y1 - (X1 * (Y1 - Y2) / (X1 - X2))\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/GetYIntercept/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/GetYIntercept/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/GetYIntercept/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/GetYIntercept/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/HasAngleBetween/","title":"HasAngleBetween","text":"<pre><code>Function HasAngleBetween(Obj1 As Variant, Obj2 As Variant) As Double\nOn Error GoTo Blast\nSet C2 = TheSPAWorkbench.GetMeasurable(Obj1)\nAngleVal = C2.GetAngleBetween(Obj2)\nHasAngleBetween = AngleVal\nExit Function\nBlast:\nHasAngleBetween = 1000\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/HasAngleBetween/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/HasAngleBetween/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/HasAngleBetween/#vbnet","title":"VB.NET","text":"<pre><code>    Public Shared Function HasAngleBetween(Obj1 As Object, Obj2 As Object) As Double\n        On Error GoTo Blast\n        Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n        C2 = TheSPAWorkbench.GetMeasurable(Obj1)\n        AngleVal = C2.GetAngleBetween(Obj2)\n        HasAngleBetween = AngleVal\n        Exit Function\nBlast:\n        HasAngleBetween = 1000\n    End Function\n</code></pre>"},{"location":"DS-CODE/Automation/HasAngleBetween/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/HasArea/","title":"HasArea","text":"<pre><code>Function HasArea(InputSurf As Variant) As Boolean\nOn Error GoTo Blast2\nDim CMEAS\nSet CMEAS = TheSPAWorkbench.GetMeasurable(InputSurf)\nDim AreaCalc As Double\nAreaCalc = CMEAS.Area\nHasArea = True\nExit Function\nBlast2:\nHasArea = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/HasArea/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/HasArea/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/HasArea/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function HasArea(InputSurf As Object) As Boolean\n    On Error GoTo Blast2\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n    Dim CMEAS\n    CMEAS = TheSPAWorkbench.GetMeasurable(InputSurf)\n    Dim AreaCalc As Double\n    AreaCalc = CMEAS.Area\n    HasArea = True\n    Exit Function\nBlast2:\n    HasArea = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/HasArea/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/HasCOG/","title":"HasCOG","text":"<pre><code>Function HasCOG(PointObj As Variant) As Boolean\nOn Error GoTo Blast\nDim MMeas\nSet MMeas = TheSPAWorkbench.GetMeasurable(PointObj)\nDim MM(2)\nMMeas.GetCOG MM\nHasCOG = True\nExit Function\nBlast:\nHasCOG  = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/HasCOG/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/HasCOG/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/HasCOG/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/HasCOG/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/HasHOffset/","title":"HasHOffset","text":"<pre><code>Function HasHOffset(BeamBeam As Variant) As Boolean\nOn Error GoTo Blast\nDim HS\nHS = BeamBeam.HOffset.Value\nHasHOffset = True\nExit Function\nBlast:\nHasHOffset = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/HasHOffset/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/HasHOffset/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/HasHOffset/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/HasHOffset/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/HasPackage/","title":"HasPackage","text":"<pre><code>'Dim PkgManager\n'Set PkgManager = MyPart.GetItem(\"GTCAttPkgManagerVBExt\")\n\nFunction HasPackage(InputObj As Variant) As Boolean\nOn Error GoTo Blast\nDim pkgs As AttPackages\nSet pkgs = attManager.GetAttachedPackages(InputObj)\nIf pkgs.Count = 0 Then\n    hasPackage = False\n    Exit Function\nEnd If\nHasPackage = True\nExit Function\nBlast:\nHasPackage = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/HasParent/","title":"HasParent","text":"<pre><code>Function HasParent(CurObj As Variant) As Boolean\nOn Error GoTo Blast\nDim NAParent\nSet NAParent = CurObj.Parent\nHasParent = True\nExit Function\nBlast:\nHasParent = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/HasRadius/","title":"HasRadius","text":""},{"location":"DS-CODE/Automation/HasRadius/#vba","title":"VBA","text":"<pre><code>Function HasRadius(InputCrv As Variant) As Double\n    On Error GoTo blast\n\n    Dim PtMeas\n    Dim RadiusVal As Double\n    Set PtMeas = TheSPAWorkbench.GetMeasurable(InputCrv)\n    RadiusVal = PtMeas.Radius\n\n    HasRadius = RadiusVal\n    Exit Function\n    blast:\n    HasRadius = 0\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/HasRadius/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function HasRadius(InputCrv As Object) As Double\n    On Error GoTo blast\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n    Dim PtMeas\n    Dim RadiusVal As Double\n    PtMeas = TheSPAWorkbench.GetMeasurable(InputCrv)\n    RadiusVal = PtMeas.Radius\n\n    HasRadius = RadiusVal\n    Exit Function\nblast:\n    HasRadius = 0\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/HasVolume/","title":"HasVolume","text":""},{"location":"DS-CODE/Automation/HasVolume/#vba","title":"VBA","text":"<pre><code>Function HasVolume(InputBody As Variant, CurPart As Part) As Boolean\nOn Error GoTo Blast2\nDim CMEAS\nSet CMEAS = theSPAWorkbench.GetMeasurable(CurPart.CreateReferenceFromObject(InputBody))\nDim VolCalc As Double\nVolCalc = CMEAS.Volume\nHasVolume = True\nExit Function\nBlast2:\nHasVolume = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/HasVolume/#vbnet","title":"VB.NET","text":"<pre><code> Public Shared Function HasVolume(InputBody As Object, CurPart As Part) As Boolean\n        On Error GoTo Blast2\n        Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n        Dim CMEAS\n        CMEAS = TheSPAWorkbench.GetMeasurable(CurPart.CreateReferenceFromObject(InputBody))\n        Dim VolCalc As Double\n        VolCalc = CMEAS.Volume\n        HasVolume = True\n        Exit Function\nBlast2:\n        HasVolume = False\n    End Function\n</code></pre>"},{"location":"DS-CODE/Automation/HybridShapeExists/","title":"HybridShapeExists","text":"<pre><code>Function HybridShapeExists(InputStr As String) As Boolean\nOn Error GoTo blast\nSet HHH = CurSet.HybridShapes.Item(InputStr)\nHybridShapeExists = True\nExit Function\nblast:\nHybridShapeExists = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/HybridShapeExistsInHybridBody/","title":"HybridShapeExistsInHybridBody","text":"<p>Function HybridShapeExistsInHybridBody(InputStr As String, CurSet as HybridBody) As Boolean On Error GoTo blast Set HHH = CurSet.HybridShapes.Item(InputStr) HybridShapeExists = True Exit Function blast: HybridShapeExists = False End Function</p>"},{"location":"DS-CODE/Automation/ImmediateAnnotation/","title":"ImmediateAnnotation","text":"<pre><code>Sub ImmediateAnnotation(PointObj As HybridShape, TextStr As String)\n    Dim PtMeas\n    Dim Ccoords()\n    ReDim Ccoords(2)\n    Set PtMeas = theSPAWorkbench.GetMeasurable(PointObj)\n    PtMeas.GetPoint (Ccoords)\n\n    Dim AnnFact As AnnotationFactory\n    Set AnnFact = CurAnnSet.AnnotationFactory\n    Dim UserSurf As UserSurface\n    Set UserSurf = UserSurfS.Generate(PointObj)\n    Dim GGG As Annotation\n    Set GGG = AnnFact.CreateEvoluateText(UserSurf, (Ccoords(0) * 1), (Ccoords(1) * 1), (Ccoords(2) * 1), False)    \n    Set GText = GGG.Text\n    GText.Text = TextStr\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/Is64Bit/","title":"Is64Bit","text":"<pre><code>Function Is64Bit() As Boolean\nIf InStr(CATIA.SystemConfiguration.OperatingSystem, \"64\") &lt;&gt; 0 Then\n    Is64Bit = True\nElse\n    Is64Bit = False\nEnd If\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsAppOpen/","title":"IsAppOpen","text":"<pre><code>Function IsAppOpen(AppName As String) As Boolean\nOn Error GoTo Blast\nSet MyApp = GetObject(, AppName &amp; \".Application\")\nIsAppOpen = True\nExit Function\nBlast:\nIsAppOpen = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsConvertibleToNumber/","title":"IsConvertibleToNumber","text":"<pre><code>Function IsConvertibleToNumber(InputStr As Variant) As Boolean\nOn Error GoTo Blast\nHHH = CDbl(InputStr)\nIf InputStr = \"\" Then\n    IsConvertibleToNumber = False\n    Exit Function\nEnd If\nIsConvertibleToNumber = True\nExit Function\nBlast:\nIsConvertibleToNumber = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsCurveAbove/","title":"IsCurveAbove","text":"<p>```vb Function IsCurveAbove(BottomObj As Variant, TopObj As Variant) As Boolean If IsUpdatable(BottomObj) = False Or IsUpdatable(TopObj) = False Then     IsCurveAbove = False     Exit Function End If Dim BMeas Set BMeas = TheSPAWorkbench.GetMeasurable(BottomObj) Dim TMeas Set TMeas = TheSPAWorkbench.GetMeasurable(TopObj)  </p> <p>Dim BCoord(8) Dim TCoord(8) BMeas.GetPointsOnCurve BCoord TMeas.GetPointsOnCurve TCoord If BCoord(2) &lt; TCoord(2) Then     IsCurveAbove = True Else     IsCurveAbove = False End If End Function ```</p>"},{"location":"DS-CODE/Automation/IsIntersectionResultCurve/","title":"IsIntersectionResultCurve","text":"<pre><code>Function IsIntersectionResultCurve(Obj1 As Variant, Obj2 As Variant, ConstSet As  HybridBody) As Boolean \nOn Error GoTo Blast\nIf CheckIntersection(Obj1, Obj2, MyPart, MyHSFactory) Then\n    Dim SamInt As HybridShapeIntersection\n    Set SamInt = MyHSFactory.AddNewIntersection(Obj1, Obj2)\n    ConstSet.AppendHybridShape SamInt\n\n    If CrvCheck(SamInt) Then\n        MyHSFactory.DeleteObjectForDatum SamInt\n        IsIntersectionResultCurve = True\n        Exit Function\n    End If\n    MyHSFactory.DeleteObjectForDatum SamInt\nEnd If\nBlast:\nIsIntersectionResultCurve = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsMidPtCoordToFarFromCurve/","title":"IsMidPtCoordToFarFromCurve","text":"<pre><code>Function IsMidPtCoordToFarFromCurve(Pt1 As Variant, Pt2 As Variant, CCurve As Variant, MaxDist As Double, ConstSet As  HybridBody) As Boolean \nDim MidPt As HybridShapePointBetween\nSet MidPt = MyHSFactory.AddNewPointBetween(Pt1, Pt2, 0.5, True)\nConstSet.AppendHybridShape MidPt\nIsUpdatable MidPt\nDim MMeas\nSet MMeas = TheSPAWorkbench.GetMeasurable(MidPt)\nDim MDist As Double\nMDist = MMeas.GetMinimumDistance(CCurve)\nIf MDist &lt; MaxDist Then\n    IsMidPtCoordToFarFromCurve = False\nElse\n    IsMidPtCoordToFarFromCurve = True\nEnd If\nMyHSFactory.DeleteObjectForDatum MidPt\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsNumber/","title":"IsNumber","text":"<pre><code>Function IsNumber(ValueObj As String) As Boolean\nOn Error GoTo Blast\nDim HHH As Double\nHHH = CDbl(ValueObj)\nIsNumber = True\nExit Function\nBlast:\nIsNumber = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsObjInSetWithinDist/","title":"IsObjInSetWithinDist","text":"<pre><code>Function IsObjInSetWithinDist(STRUCTSet As HybridBody, CompareObj As Variant, DistVal As Double) As Boolean\nDim MEMCounter As Integer\nMEMCounter = 1\nDim TMeas\nSet TMeas = TheSPAWorkbench.GetMeasurable(CompareObj)\nWhile MEMCounter &lt;= STRUCTSet.HybridShapes.Count\n    Dim TDist As Double\n    TDist = TMeas.GetMinimumDistance(STRUCTSet.HybridShapes.Item(MEMCounter))\n    If DistVal &gt; TDist Then\n        IsObjInSetWithinDist = True\n        Exit Function\n    End If\n    MEMCounter = MEMCounter + 1\nWend\nIsObjInSetWithinDist = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsPartDocument/","title":"IsPartDocument","text":"<pre><code>Function IsPartDocument(CurObj As Variant) As Boolean\nOn Error GoTo Blast\nDim CurPD As PartDocument\nSet CurPD = CurObj\nIsPartDocument = True\nExit Function\nBlast:\nIsPartDocument = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsPlanar/","title":"IsPlanar","text":""},{"location":"DS-CODE/Automation/IsPlanar/#_1","title":"\u68c0\u67e5\u66f2\u9762\u662f\u5426\u662f\u5e73\u9762\u7684","text":""},{"location":"DS-CODE/Automation/IsPlanar/#vba","title":"VBA","text":"<pre><code>Function IsPlanar(InputObj As Variant) As Boolean\nDim CM\nSet CM = TheSPAWorkbench.GetMeasurable(InputObj)\nIf CM.GeometryName = 7 Then\n    IsPlanar = True\nElse\n    IsPlanar = False\nEnd If\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsPlanar/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function IsPlanar(InputObj As Object) As Boolean\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n    Dim CM\n    CM = TheSPAWorkbench.GetMeasurable(InputObj)\n    If CM.GeometryName = 7 Then\n        IsPlanar = True\n    Else\n        IsPlanar = False\n    End If\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsProductActive/","title":"IsProductActive","text":"<pre><code>Function IsProductActive() As Boolean\n\nOPArr = StrangeComponent(\"Part\", \"TESTCASE1\", CATIA.ActiveDocument.Product.Products, CATIA.ActiveDocument.Product)\nSet OutputProd = OPArr(0)\nSet OutputPart = OPArr(1)\nSet ScrExtRef = OutputPart.HybridBodies.Add\nSafeHide ScrExtRef\nIf CATIA.ActiveDocument.Selection.Count &lt;&gt; 0 Then\n    CATIA.ActiveDocument.Selection.Clear\nEnd If\nCATIA.ActiveDocument.Selection.Add OutputPart\nDim JVal As CatVisPropertyShow\nCATIA.ActiveDocument.Selection.VisProperties.GetShow JVal   \nIf JVal = catVisPropertyNoShowAttr Then \n    CATIA.StartCommand \"undo\"\n    IsProductActive = True\n    Exit Function\nEnd If\nCATIA.StartCommand \"undo\"\nIsProductActive = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsProductDocument/","title":"IsProductDocument","text":"<pre><code>Function IsProductDocument(CurObj As Variant) As Boolean\nOn Error GoTo Blast\nDim CurPD As ProductDocument\nSet CurPD = CurObj\nIsProductDocument = True\nExit Function\nBlast:\nIsProductDocument = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsSmartUpdatable/","title":"IsSmartUpdatable","text":"<pre><code>Function IsSmartUpdatable(InputObj As Variant) As Boolean\nOn Error GoTo blast\nSet CurPart = GetContainingPart(InputObj)\nCurPart.UpdateObject InputObj\nIsSmartUpdatable = True\nExit Function\nblast:\nIsSmartUpdatable = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsSpace/","title":"IsSpace","text":"<pre><code>Function IsSpace(Obj1 As Variant) As Boolean\nOn Error GoTo Blast\nDim HHH As ArcSpace\nSet HHH = Obj1\nIsSpace = True\nExit Function\nBlast:\nIsSpace = False \nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsSurfaceAbove/","title":"IsSurfaceAbove","text":"<pre><code>Function IsSurfaceAbove(BottomObj As Variant, TopObj As Variant) As Boolean\nIf IsUpdatable(BottomObj) = False Or IsUpdatable(TopObj) = False Then\n    IsSurfaceAbove = False\n    Exit Function\nEnd If\nDim BMeas\nSet BMeas = TheSPAWorkbench.GetMeasurable(BottomObj)\nDim TMeas\nSet TMeas = TheSPAWorkbench.GetMeasurable(TopObj)\n\nDim BCoord(2)\nDim TCoord(2)\nBMeas.GetCOG BCoord\nTMeas.GetCOG TCoord\nIf BCoord(2) &lt; TCoord(2) Then\n    IsSurfaceAbove = True\nElse\n    IsSurfaceAbove = False\nEnd If\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsUpdatable/","title":"IsUpdatable","text":""},{"location":"DS-CODE/Automation/IsUpdatable/#vba","title":"VBA","text":"<pre><code>Function IsUpdatable(InputObj As Variant) As Boolean\nOn Error GoTo Blast2\nMyPart.UpdateObject InputObj\nIsUpdatable = True\nExit Function\nBlast2:\nIsUpdatable = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsUpdatable/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function IsUpdatable(InputObj As Object, MyPart As Part) As Boolean\n    On Error GoTo Blast2\n    MyPart.UpdateObject(InputObj)\n    IsUpdatable = True\n    Exit Function\nBlast2:\n    IsUpdatable = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/IsUpdatableInPart/","title":"IsUpdatableInPart","text":"<pre><code>Function IsUpdatableInPart(InputObj As Variant, CurPart As Part) As Boolean\nOn Error GoTo blast\nCurPart.UpdateObject InputObj\nIsUpdatableInPart= True\nExit Function\nblast:\nIsUpdatableInPart= False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/KeepBiggestSplit/","title":"KeepBiggestSplit","text":"<pre><code>Sub KeepBiggestSplit(SplitSurface As Variant)\nDim Pt1Meas 'As Measurable\nSet Pt1Meas = TheSPAWorkbench.GetMeasurable(SplitSurface)\nDim AArea As Double \nAArea = Pt1Meas.Area\n\nSplitSurface.Orientation = 1\nMyPart.UpdateObject SplitSurface\nDim Pt2Meas 'As Measurable\nSet Pt2Meas = TheSPAWorkbench.GetMeasurable(SplitSurface)\nDim BArea As Double\nBArea = Pt2Meas.Area\n\nIf AArea &gt; BArea Then\n    SplitSurface.Orientation = -1\nEnd If\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/KeepCurveSplitByLength/","title":"KeepCurveSplitByLength","text":"<pre><code>Sub KeepLongestSplit(InputSpl As HybridShapeSplit, ForSmaller0ForBigger1 As Integer)\nMyPart.UpdateObject InputSpl\nDim HMeas\nSet HMeas = theSPAWorkbench.GetMeasurable(InputSpl)\nDim FirstDim As Double\nFirstDim = HMeas.Length\nInputSpl.InvertOrientation\nMyPart.UpdateObject InputSpl\nDim SecondDim As Double\nSecondDim = HMeas.Length\nIf ForSmaller0ForBigger1 = 1 Then\n    If FirstDim &gt; SecondDim Then\n        InputSpl.InvertOrientation\n        MyPart.UpdateObject InputSpl\n    End If\nelse\n    If FirstDim &lt; SecondDim Then\n        InputSpl.InvertOrientation\n        MyPart.UpdateObject InputSpl\n    End If\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/KeepHighestLevel/","title":"KeepHighestLevel","text":"<pre><code>Sub KeepHighestLevel(LevelPlane As HybridShapePlaneOffset, TestPtObj As Variant)\nIf IsUpdatable(LevelPlane) And IsUpdatable(TestPtObj) Then\n    Dim OrigOri As Integer\n    OrigOri = LevelPlane.Orientation\n    Dim OppOri As Integer\n    OppOri = (-1) * OrigOri\n\n    Dim TMeas\n    Set TMeas  = TheSPAWorkbench.GetMeasurable(TestPtObj)\n    Dim OrigPt Coords(2)\n    TMeas.GetPoint OrigPtCoords\n\n    LevelPlane.Orientation = OppOri\n    IsUpdatable TestPtObj\n    Dim TMeas2\n    Set TMeas2 = TheSPAWorkbench.GetMeasurable(TestPtObj)\n    Dim OppPtCoords(2)\n    TMeas2.GetPoint OppPtCoords\n\n    If OppPtCoords(2) &lt; OrigPtCoords(2) Then\n        LevelPlane.Orientation = OrigOri\n        IsUpdatable TestPtObj\n    End If\nEnd If\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/KeepSmallerCurvePar/","title":"KeepSmallerCurvePar","text":"<pre><code>Sub KeepSmallerCurvePar(CurvePar As HybridShapeCurvePar)\nIf IsUpdatable(CurvePar) Then\n    Dim CMeas\n    Set CMeas = TheSPAWorkbench.GetMeasurable(CurvePar)\n    Dim FirstDist As Double\n    FirstDist = CMeas.Length\n\n    CurvePar.InvertDirection = False\n    Dim SecondDist As Double\n    If IsUpdatable(CurvePar) Then\n        Dim CMeas2\n        Set CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePar)\n        SecondDist = CMeas2.Length\n    End If\n\n    If SecondDist &gt; FirstDist Then\n        CurvePar.InvertDirection = True\n        IsUpdatable CurvePar\n    End If\nElse\n    CurvePar.InvertDirection = False\n    IsUpdatable CurvePar\nEnd If\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/KeepSmallestSplit/","title":"KeepSmallestSplit","text":"<pre><code>Sub KeepSmallestSplit(SplitSurface As Variant)\nDim Pt1Meas 'As Measurable\nSet Pt1Meas = thespaworkbench.GetMeasurable(SplitSurface)\nDim AArea As Double\nAArea = Pt1Meas.Area\n\nSplitSurface.Orientation = 1\nMyPart.UpdateObject SplitSurface\nDim Pt2Meas 'As Measurable\nSet Pt2Meas = thespaworkbench.GetMeasurable(SplitSurface)\nDim BArea As Double\nBArea = Pt2Meas.Area\n\nIf AArea &lt; BArea Then\n    SplitSurface.Orientation = -1\nEnd If\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/KeepSolidSplitByIntersection/","title":"KeepSolidSplitByIntersection","text":"<pre><code>Sub KeepSolidSplitByIntersection(SplitSolid As Split, CompareObj As Variant)\nDim Ori\nOri = SplitSolid.SplittingSide\nDim OppOri\nOppOri = Not SplitSolid.SplittingSide \n\nIf IsUpdatable(SplitSolid) Then\n    Dim TempInt As HybridShapeIntersection\n    Set TempInt = MyHSFactory.AddNewIntersection(MyPart.CreateReferenceFromObject(SplitSolid), CompareObj)\n    If IsUpdatable(TempInt) = False Then\n        SplitSolid.SplittingSide = OppOri\n        IsUpdatable SplitSolid\n    End If\nEnd If\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/KeepSolidSplitByVolume/","title":"KeepSolidSplitByVolume","text":"<pre><code>Sub KeepSolidSplitByVolume(SplitSolid As Split, ForSmaller0ForBigger1 As Integer)\nIf IsUpdatable(SplitSolid) Then\n    Dim Pt1Meas\n    Set Pt1Meas = TheSPAWorkbench.GetMeasurable(MyPart.CreateReferenceFromObject(SplitSolid))\n    Dim AVol As Double\n    AVol = Pt1Meas.Volume\n\n    SplitSolid.SplittingSide = catNegativeSide\n    If IsUpdatable(SplitSolid) = False Then\n        SplitSolid.SplittingSide = catPositiveSide\n        Exit Sub\n    End If\n    Dim Pt2Meas\n    Set Pt2Meas = TheSPAWorkbench.GetMeasurable(MyPart.CreateReferenceFromObject(SplitSolid))\n    Dim BVol As Double\n    BVol = Pt2Meas.Volume\n\n    If ForSmaller0ForBigger1 = 0 Then\n        If AVol &lt; BVol Then\n            SplitSolid.SplittingSide = catNegativeSide\n        End If\n    Else\n        If AVol &gt; BVol Then\n            SplitSolid.SplittingSide = catPositiveSide\n        End If\n    End If\nEnd If\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/KeepSolidSplitByVolumeInPart/","title":"KeepSolidSplitByVolumeInPart","text":"<pre><code>Sub KeepSolidSplitByVolumeInPart(SplitSolid As Split, ForSmaller0ForBigger1 As Integer, CurPart As Part)\nDim Ori\nOri = SplitSolid.SplittingSide\nDim OppOri\nOppOri = Not SplitSolid.SplittingSide\n\nIf IsUpdatableInPart(SplitSolid, CurPart) Then\n    Dim Pt1Meas\n    Set Pt1Meas = theSPAWorkbench.GetMeasurable(CurPart.CreateReferenceFromObject(SplitSolid))\n    If HasVolume(SplitSolid, CurPart) Then\n        Dim AVol As Double\n        AVol = Pt1Meas.Volume\n    Else\n        SplitSolid.SplittingSide = OppOri\n        IsUpdatableInPart SplitSolid, CurPart\n        Exit Sub\n    End If\n\n    SplitSolid.SplittingSide = OppOri\n    If IsUpdatableInPart(SplitSolid, CurPart) = False Then\n        SplitSolid.SplittingSide = Ori\n        Exit Sub\n    End If\n    Dim Pt2Meas\n    Set Pt2Meas = theSPAWorkbench.GetMeasurable(CurPart.CreateReferenceFromObject(SplitSolid))\n    If HasVolume(SplitSolid, CurPart) Then\n       Dim BVol As Double\n       BVol = Pt2Meas.Volume\n    Else\n        SplitSolid.SplittingSide = Ori\n        IsUpdatableInPart SplitSolid, CurPart\n        Exit Sub\n    End If\n\n    If ForSmaller0ForBigger1 = 0 Then\n        If AVol &lt; BVol Then\n            SplitSolid.SplittingSide = Ori\n        End If\n    Else\n        If AVol &gt; BVol Then\n            SplitSolid.SplittingSide = Ori\n        End If\n    End If\nEnd If\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/KeepSplitByArea/","title":"KeepSplitByArea","text":"<pre><code>Sub KeepSplitByArea(SplitSurface As Variant, ForSmaller0ForBigger1 as Integer)\nDim Pt1Meas 'As Measurable\nSet Pt1Meas = thespaworkbench.GetMeasurable(SplitSurface)\nDim AArea As Double\nAArea = Pt1Meas.Area\n\nSplitSurface.Orientation = 1\nMyPart.UpdateObject SplitSurface\nDim Pt2Meas 'As Measurable\nSet Pt2Meas = thespaworkbench.GetMeasurable(SplitSurface)\nDim BArea As Double\nBArea = Pt2Meas.Area\n\nIf ForSmaller0ForBigger1 = 0 Then\n    If AArea &lt; BArea Then\n        SplitSurface.Orientation = -1\n    End If\nElse\n    If AArea &gt; BArea Then\n        SplitSurface.Orientation = -1\n    End If\nEnd If\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/KeepTrimOrientation/","title":"KeepTrimOrientation","text":"<pre><code>Function KeepTrimOrientation(TrimObj As HybridShapeTrim, nthSmallest As Integer) As Boolean\nDim UVal As Integer\nDim VVal As Integer\nUVal = -1\nDim WinningArr(3)\nDim WinningOri(3)\nDim TempArr(1)\nDim WinArrNum As Integer\nWinArrNum = 0\nDim CMeas\nDim CLen As Double\nForceColorObjUgly TrimObj, 120, 120, 220, 1, 1000, 3, 1000\n\nWhile UVal &lt;= 1\n    VVal = -1\n    While VVal &lt;= 1\n        TrimObj.FirstOrientation = UVal\n        TrimObj.SecondOrientation = VVal\n        IsUpdatable TrimObj\n        Set CMeas = TheSPAWorkbench.GetMeasurable(TrimObj)\n        CLen = CMeas.Length\n\n        WinningArr(WinArrNum) = CLen\n        TempArr(0) = UVal\n        TempArr(1) = VVal\n        WinningOri(WinArrNum) = TempArr\n        WinArrNum = WinArrNum + 1\n        VVal = VVal + 2\n    Wend\n    UVal = UVal + 2\nWend \n\nSort2Arrays WinningArr, WinningOri \n\nTrimObj.FirstOrientation = WinningOri(nthSmallest)(0)\nTrimObj.SecondOrientation = WinningOri(nthSmallest)(1)\nIsUpdatable TrimObj \n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/LineFromArcEndPts/","title":"LineFromArcEndPts","text":"<pre><code>Function LineFromArcEndPts(ArcCrv As Variant, ConstSet As HybridBody, DestSet As HybridBody) As HybridShapeLinePtPt\nIf CrvCheck(ArcCrv) Then\nDim BPt As HybridShapePointOnCurve\nSet BPt = MyHSFactory.AddNewPointOnCurveFromPercent(ArcCrv, 0, True)\nConstSet.AppendHybridShape BPt\nBPt.Name = ArcCrv.Name &amp; \"_BPT\"\nMyHSFactory.GSMVisibility BPt, 0\nDim EPt As HybridShapePointOnCurve\nSet EPt = MyHSFactory.AddNewPointOnCurveFromPercent(ArcCrv, 1, True)\nConstSet.AppendHybridShape EPt\nEPt.Name = ArcCrv.Name &amp; \"_EPT\"\nMyHSFactory.GSMVisibility EPt, 0 \n\nDim LineObj As HybridShapeLinePtPt\nSet LineObj = MyHSFactory.AddNewLinePtPt(BPt, EPt)\nDestSet.AppendHybridShape LineObj\nLineObj.Name = ArcCrv.Name &amp; \"_FINLINE\"\nIsUpdatable LineObj\nSet LineFromArcEndPts = LineObj\nEnd If\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/LoadExtRef/","title":"LoadExtRef","text":""},{"location":"DS-CODE/Automation/LoadExtRef/#vba","title":"VBA","text":"<pre><code>Function LoadExtRef(OldObj As Variant, ExtRefSet As HybridBody) As Variant\nIf MySel.Count &lt;&gt; 0 Then\n    MySel.Clear\nEnd If\nMySel.Add OldObj\nMySel.Copy \n\nIf MySel.Count &lt;&gt; 0 Then\n    MySel.Clear\nEnd If\nMySel.Add ExtRefSet            'DRVExtRefSet\nMySel.PasteSpecial \"CATPrtResult\"\nIf MySel.Count &lt;&gt; 0 Then\n    MySel.Clear\nEnd If\nDim ExtRefMainSurf\nSet ExtRefMainSurf = ExtRefSet.HybridShapes.Item(ExtRefSet.HybridShapes.Count)\n\nSet LoadExtRef = ExtRefMainSurf\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/LoadExtRef/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Function LoadExtRef(OldObj As Object, ExtRefSet As HybridBody\uff0c MySel As Selection) As Object\n    If MySel.Count &lt;&gt; 0 Then\n        MySel.Clear()\n    End If\n    MySel.Add(OldObj)\n    MySel.Copy()\n\n    If MySel.Count &lt;&gt; 0 Then\n        MySel.Clear()\n    End If\n\n    MySel.Add(ExtRefSet) 'DRVExtRefSet\n    MySel.PasteSpecial(\"CATPrtResult\")\n    If MySel.Count &lt;&gt; 0 Then\n        MySel.Clear()\n    End If\n\n    Dim ExtRefMainSurf\n    ExtRefMainSurf = ExtRefSet.HybridShapes.Item(ExtRefSet.HybridShapes.Count)\n    LoadExtRef = ExtRefMainSurf\n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/LoadExtRef/#c","title":"C","text":"<pre><code>public INFITF.AnyObject LoadExtRef(INFITF.Selection sel, INFITF.AnyObject OldObj, MECMOD.HybridBody ExtRefSet)\n{\n\nsel.Clear();\nsel.Add(OldObj);\nsel.Copy();\n\nsel.Clear();\nsel.Add(ExtRefSet); //DRVExtRefSet\nsel.PasteSpecial(\"CATPrtResult\");\nsel.Clear();\n\nINFITF.AnyObject Obj = ExtRefSet.HybridShapes.Item(ExtRefSet.HybridShapes.Count);\nreturn Obj;\n\n}\n</code></pre>"},{"location":"DS-CODE/Automation/MakeArrayFromExcelColumn/","title":"MakeArrayFromExcelColumn","text":"<pre><code>Function MakeArrayFromExcelColumn(ColumnNo As Integer, TotalRows As Integer) As Variant\nDim CurArr()\nReDim CurArr(1)\nCurArr(0) = \"\"\n\nFor MK = 2 To TotalRows\n    Dim CurStr As String\n    CurStr = CStr(CurCells(MK, ColumnNo).Value)\n\n    Dim WCounter As Integer\n    WCounter = 0\n    While WCounter &lt; UBound(CurArr) And CurStr &lt;&gt; CurArr(WCounter)\n        WCounter = WCounter + 1\n    Wend\n\n    If WCounter &gt;= UBound(CurArr) Then\n        CurArr(UBound(CurArr)) = CurStr\n        ReDim Preserve CurArr(UBound(CurArr) + 1)\n    End If\nNext MK \n\nMakeArrayFromExcelColumn = CurArr\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/MakeArrayFromSearch/","title":"MakeArrayFromSearch","text":"<pre><code>Function MakeArrayFromSearch(SearchStr As String) As Variant\nMySel.Search SearchStr\nDim TempArr()\nIf MySel.Count = 0 Then\n    ReDim TempArr(0)\n    MakeArrayFromSearch = TempArr\n    Exit Function\nEnd If\nReDim TempArr(MySel.Count - 1)\nFor X = 0 To MySel.Count - 1\n    Set TempArr(X) = MySel.Item(X + 1).Value\nNext X\nMakeArrayFromSearch = TempArr\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/MakeArrayMidDoubles/","title":"MakeArrayMidDoubles","text":"<pre><code>Function MakeArrayMidDoubles(InputArr As Variant) As Variant\nDim MidArr()\nReDim MidArr(UBound(InputArr) - 1)\nFor X = 0 To UBound(InputArr) - 1\n    Dim FVal\n    FVal = InputArr(X)\n    Dim SVal\n    SVal = InputArr(X + 1)\n    MidArr(X) = (CDbl(FVal) + CDbl(SVal)) / 2\nNext X\nMakeArrayMidDoubles = MidArr\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/MakeTangentLineAtPt/","title":"MakeTangentLineAtPt","text":"<pre><code>Sub MakeTangentLineAtPt(InputCrv As Variant, EndPt As Variant, DestSet As HybridBody)\nDim TangLine As HybridShapeLineTangency\nSet TangLine = MyHSFactory.AddNewLineTangency(InputCrv, EndPt, 0, 100, True)\nDestSet.AppendHybridShape TangLine\nTangLine.Name = InputCrv.Name &amp; \"_TANGLINE\"\nIsUpdatable TangLine\n\nDim Tmeas\nSet Tmeas = TheSPAWorkbench.GetMeasurable(InputCrv)\nDim PtCoords(8)\nTmeas.GetPointsOnCurve PtCoords\nMoveLineTangencyCloserToCoord TangLine, CDbl(PtCoords(3)), CDbl(PtCoords(4)), CDbl(PtCoords(5))\nIsUpdatable TangLine\nForceColorObjUgly TangLine, 30, 230, 100, 6, 1000, 1, 1000\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MatchBlendOrientationsWithEndPts/","title":"MatchBlendOrientationsWithEndPts","text":"<pre><code>Sub MatchBlendOrientations(InputBlend As HybridShapeBlend)\nDim Curve1\nSet Curve1 = MyHSFactory.GSMGetObjectFromReference(InputBlend.GetCurve(1))\nDim Curve2\nSet Curve2 = MyHSFactory.GSMGetObjectFromReference(InputBlend.GetCurve(2)) \n\nIsUpdatable Curve1\nDim C1Meas\nSet C1Meas = TheSPAWorkbench.GetMeasurable(Curve1)\nDim C1Coords()\nReDim C1Coords(8)\nC1Meas.GetPointsOnCurve C1Coords\nIsUpdatable Curve2\nDim C2Meas\nSet C2Meas = TheSPAWorkbench.GetMeasurable(Curve2)\nDim C2Coords()\nReDim C2Coords(8)\nC2Meas.GetPointsOnCurve C2Coords  \n\nDim FirstDist As Double\nFirstDist = find3DDistance(C1Coords(0), C1Coords(1), C1Coords(2), C2Coords(0), C2Coords(1), C2Coords(2))\nDim SecondDist As Double\nSecondDist = find3DDistance(C1Coords(0), C1Coords(1), C1Coords(2), C2Coords(6), C2Coords(7), C2Coords(8))\n\nIf FirstDist &gt; SecondDist Then\n    InputBlend.SetOrientation 1, 1\n    InputBlend.SetOrientation 2, -1\nEnd If\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/ModifyFeatureParameters/","title":"ModifyFeatureParameters","text":"<pre><code>Option Explicit Off\n\nImports INFITF\nImports KnowledgewareTypeLib\nImports MECMOD\n\n\n\nModule ModifyFeatureParameters\n\n    dim CATIA As INFITF.Application = GetObject(, \"CATIA.Application\")\n    dim sel As INFITF.Selection = CATIA.ActiveDocument.Selection\n\n    Sub ModFeaParm()\n\n        Console.WriteLine(\"\u9996\u5148\u6279\u91cf\u9009\u62e9\u7269\u4f53,\u7136\u540e\u6309\u56de\u8f66\u952e\u3002\")\n        console.ReadKey()\n\n        Console.WriteLine(\"\u5df2\u7ecf\u9009\u62e9\u7269\u4f53\u6570\u91cf\uff1a\" &amp; sel.Count)\n\n        'Dim coll As ArrayList = New ArrayList()\n        'coll.Clear()\n        console.WriteLine(\"\u8bf7\u8f93\u5165\u8981\u4fee\u6539\u53c2\u6570\u7684\u540d\u79f0\uff1a\")\n        dim parastr as string =console.readline()\n\n        console.WriteLine(\"\u8bf7\u8f93\u5165\u8981\u4fee\u6539\u53c2\u6570\u7684\u503c\uff1a\")\n        dim paraValue as string = console.readline()\n\n        For i = 1 To sel.Count\n            dim obj as object = sel.Item(i).VALUE\n            DIM PART AS PART =GetContainingPart(obj)\n            call ModifyAttribute(obj,part,parastr,paraValue)\n\n        Next\n        Console.ReadKey()\n    End Sub\n\n\n    Sub ModifyAttribute(obj As Object, part As Part, parmName As String, parmValue As String)\n\n        Dim pams As Parameters = part.Parameters.SubList(obj, True)\n        On Error GoTo blast\n        pams.Item(parmName).ValuateFromString(parmValue)\n        part.UpdateObject(obj)\n\nblast:\n        On Error Resume Next\n        part.UpdateObject(obj)\n    End Sub\n\n    Public Function GetContainingPart(oObj)\n        Current = oObj\n        found = False\n        While found = False\n            Current = Current.Parent\n            If TypeName(Current) = \"Part\" Then\n                found = True\n            End If\n        End While\n\n        GetContainingPart = Current\n    End Function\n\nEnd Module\n</code></pre>"},{"location":"DS-CODE/Automation/MoveArcSlabCloserToObjByInverse/","title":"MoveArcSlabCloserToObjByInverse","text":"<pre><code>Sub MoveArcSlabCloserToObjByInverse(ASlab As ArcSlab, TInverse As HybridShapeInverse, CompareObj As Variant, ConstSet As HybridBody)\nIf IsUpdatable(ASlab) = False Or IsUpdatable(TInverse) = False Then\n    Exit Sub\nEnd If\nDim CompMeas\nSet CompMeas = TheSPAWorkbench.GetMeasurable(CompareObj)\n\nDim A1Meas\nSet A1Meas = TheSPAWorkbench.GetMeasurable(MyPart.CreateReferenceFromObject(ASlab))\nDim FCoord(2)\nA1Meas.GetCOG FCoord\nDim MyPt As HybridShapePointCoord\nSet MyPt = MyHSFactory.AddNewPointCoord(FCoord(0), FCoord(1), FCoord(2))\nConstSet.AppendHybridShape MyPt\nIsUpdatable MyPt\nDim FDist 'As Double\nFDist = CompMeas.GetMinimumDistance(MyPt)\n\nDim OrigBool As Integer\nOrigBool = TInverse.Orientation\nDim OppBool As Integer\nOppBool = (-1) * OrigBool\nTInverse.Orientation = OppBool\nIsUpdatable AWall\nSet A1Meas = TheSPAWorkbench.GetMeasurable(MyPart.CreateReferenceFromObject(ASlab))\nDim SCoord(2)\nA1Meas.GetCOG SCoord\nMyPt.X.Value = SCoord(0)\nMyPt.Y.Value = SCoord(1)\nMyPt.Z.Value = SCoord(2)\nIsUpdatable MyPt\nDim SDist 'As Double\nSDist = CompMeas.GetMinimumDistance(MyPt)\n\nIf SDist &gt; FDist Then\n    TInverse.Orientation = OrigBool\n    IsUpdatable ASlab\nEnd If\nMyHSFactory.DeleteObjectForDatum MyPt\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MoveArcWallCloserToCoordByInverse/","title":"MoveArcWallCloserToCoordByInverse","text":"<pre><code>Sub MoveArcWallCloserToCoordByInverse(AWall As ArcWall, TInverse As HybridShapeInverse, XVal As Double, YVal As  Double, ZVal As Double) \nIf IsUpdatable(AWall) = False Or IsUpdatable(TInverse) = False Then\n    Exit Sub\nEnd If\nDim A1Meas\nSet A1Meas = TheSPAWorkbench.GetMeasurable(MyPart.CreateReferenceFromObject(AWall))\nDim FCoord(2)\nA1Meas.GetCOG FCoord\nDim FDist As Double\nFDist = find3DDistance(FCoord(0), FCoord(1), FCoord(2), XVal, YVal, ZVal)\n\nDim OrigBool As Integer\nOrigBool = TInverse.Orientation\nDim OppBool As Integer\nOppBool = (-1) * OrigBool\nTInverse.Orientation = OppBool\nIsUpdatable AWall\nSet A1Meas = TheSPAWorkbench.GetMeasurable(MyPart.CreateReferenceFromObject(AWall))\nDim SCoord(2)\nA1Meas.GetCOG SCoord\nDim SDist As Double\nSDist = find3DDistance(SCoord(0), SCoord(1), SCoord(2), XVal, YVal, ZVal)\n\nIf SDist &gt; FDist Then\n    TInverse.Orientation = OrigBool\n    IsUpdatable AWall\nEnd If\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MoveAxisSystemXDirFartherFromCoord/","title":"MoveAxisSystemXDirFartherFromCoord","text":"<pre><code>Sub MoveAxisSystemXDirFartherFromCoord(CurvePar As AxisSystem, ResultObj As Variant, XVal As Double, YVal As Double, ZVal As Double)\nIf IsUpdatable(CurvePar) And IsUpdatable(ResultObj) Then\n    Dim CMeas\n    Set CMeas = TheSPAWorkbench.GetMeasurable(ResultObj)\n    Dim CCoords()\n    ReDim CCoords(2)\n    CMeas.GetCOG CCoords\n\n    Dim FirstDist As Double\n    FirstDist = find3DDistance(CCoords(0), CCoords(1), CCoords(2), XVal, YVal, ZVal)\n\n    CurvePar.XAxisType = catAxisSystemAxisSameDirection\n    If IsUpdatable(ResultObj) = False Then\n        Exit Sub\n    End If\n    Dim CMeas2\n    Set CMeas2 = TheSPAWorkbench.GetMeasurable(ResultObj)\n    Dim CCoords2()\n    ReDim CCoords2(2)\n    CMeas2.GetCOG CCoords2\n\n    Dim SecondDist As Double\n    SecondDist = find3DDistance(CCoords2(0), CCoords2(1), CCoords2(2), XVal, YVal, ZVal)\n\n    If SecondDist &lt; FirstDist Then\n        CurvePar.XAxisType = catAxisSystemAxisOppositeDirection\n        If IsUpdatable(ResultObj) = False Then\n            Exit Sub\n        End If\n    End If\nEnd If\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MoveCircle2PointsRadCloserToObj/","title":"MoveCircle2PointsRadCloserToObj","text":"<pre><code>Sub MoveCircle2PointsRadCloserToObj(CurveCirc As HybridShapeCircle2PointsRad, CompareObj  As Variant)\nMyPart.UpdateObject CurveCirc\nMyPart.UpdateObject CompareObj\nDim CMeas\nSet CMeas = TheSPAWorkbench.GetMeasurable(CurveCirc)\nDim FirstDist As Double\nFirstDist = CMeas.GetMinimumDistance(CompareObj)\n\nCurveCirc.SetLimitation 3\nCurveCirc.Orientation = -1\nMyPart.UpdateObject CurveCirc\nDim CMeas2\nSet CMeas2 = TheSPAWorkbench.GetMeasurable(CurveCirc)\nDim SecondDist As Double\nSecondDist = CMeas.GetMinimumDistance(CompareObj)\n\nIf SecondDist &gt; FirstDist Then\n    CurveCirc.SetLimitation 2\n    CurveCirc.Orientation = 1\n    MyPart.UpdateObject CurveCirc\nEnd If\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MoveCurveParCloserToCoord/","title":"MoveCurveParCloserToCoord","text":"<pre><code>Sub MoveCurveParCloserToCoord(CurvePar As HybridShapeCurvePar, XVal As Double, YVal As Double, ZVal As Double)\nMyPart.UpdateObject CurvePar\nDim CMeas\nSet CMeas = TheSPAWorkbench.GetMeasurable(CurvePar)\nDim CCoords()\nReDim CCoords(8)\nCMeas.GetPointsOnCurve CCoords\n\nDim FirstDist As Double\nFirstDist = find3DDistance(CCoords(0), CCoords(1), CCoords(2), XVal, YVal, ZVal)\n\nCurvePar.InvertDirection = False\nMyPart.UpdateObject CurvePar\nDim CMeas2\nSet CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePar)\nDim CCoords2()\nReDim CCoords2(8)\nCMeas2.GetPointsOnCurve CCoords2 \n\nDim SecondDist As Double\nSecondDist = find3DDistance(CCoords2(0), CCoords2(1), CCoords2(2), XVal, YVal, ZVal) \n\nIf SecondDist &gt; FirstDist Then\n    CurvePar.InvertDirection = True\n    MyPart.UpdateObject CurvePar\nEnd If\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MoveCurveParCloserToObj/","title":"MoveCurveParCloserToObj","text":"<pre><code>Sub MoveCurveParCloserToObj(CurvePar As HybridShapeCurvePar, CompareObj As Variant)\nDim CurOri As Boolean\nCurOri = CurvePar.InvertDirection\nDim OppOri As Boolean\nOppOri = Not CurOri\nIsUpdatable CurvePar\nIsUpdatable CompareObj\nDim CMeas\nSet CMeas = TheSPAWorkbench.GetMeasurable(CurvePar)\nDim FirstDist As Double\nFirstDist = CMeas.GetMinimumDistance(CompareObj)  \n\nCurvePar.InvertDirection = OppOri\nIsUpdatable CurvePar\nDim CMeas2\nSet CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePar)\nDim SecondDist As Double\nSecondDist = CMeas.GetMinimumDistance(CompareObj) \n\nIf SecondDist &gt; FirstDist Then\n    CurvePar.InvertDirection = CurOri\n    IsUpdatable CurvePar\nEnd If  \n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MoveExtremumCloserToObj/","title":"MoveExtremumCloserToObj","text":"<pre><code>Sub MoveExtremumCloserToObj(CurExtremum As HybridShapeExtremum, CompareObj As Variant)\nMyPart.UpdateObject CurExtremum\nMyPart.UpdateObject CompareObj\nDim CMeas\nSet CMeas = TheSPAWorkbench.GetMeasurable(CurExtremum)\nDim FirstDist As Double\nFirstDist = CMeas.GetMinimumDistance(CompareObj)\n\nCurExtremum.ExtremumType = 0\nMyPart.UpdateObject CurExtremum\nDim CMeas2\nSet CMeas2 = TheSPAWorkbench.GetMeasurable(CurExtremum)\nDim SecondDist As Double\nSecondDist = CMeas.GetMinimumDistance(CompareObj)\n\nIf SecondDist &gt; FirstDist Then\n    CurExtremum.ExtremumType = 1\n    MyPart.UpdateObject CurExtremum\nEnd If \n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MoveExtrudeCloserToCoord/","title":"MoveExtrudeCloserToCoord","text":"<pre><code>Sub MoveExtrudeCloserToCoord(CurvePar As HybridShapeExtrude, XVal As Double, YVal As Double, ZVal As Double)\nMyPart.UpdateObject CurvePar\nDim CMeas\nSet CMeas = TheSPAWorkbench.GetMeasurable(CurvePar)\nDim CCoords()\nReDim CCoords(2)\nCMeas.GetCOG CCoords\n\nDim FirstDist As Double\nFirstDist = find3DDistance(CCoords(0), CCoords(1), CCoords(2), XVal, YVal, ZVal) \n\nCurvePar.EndOffset.Value = (-1) * CurvePar.EndOffset.Value\nMyPart.UpdateObject CurvePar\nDim CMeas2\nSet CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePar)\nDim CCoords2()\nReDim CCoords2(2)\nCMeas2.GetCOG CCoords2 \n\nDim SecondDist As Double\nSecondDist = find3DDistance(CCoords2(0), CCoords2(1), CCoords2(2), XVal, YVal, ZVal)\n\nIf SecondDist &gt; FirstDist Then\n    CurvePar.EndOffset.Value = (-1) * CurvePar.EndOffset.Value\n    MyPart.UpdateObject CurvePar\nEnd If\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MoveLineAngleCloserToCoord/","title":"MoveLineAngleCloserToCoord","text":"<pre><code>Sub MoveLineAngleCloserToCoord(CurvePar As HybridShapeLineAngle, XVal As Double, YVal As Double, ZVal As Double)\nMyPart.UpdateObject CurvePar\nDim CMeas\nSet CMeas = TheSPAWorkbench.GetMeasurable(CurvePar)\nDim CCoords()\nReDim CCoords(8)\nCMeas.GetPointsOnCurve CCoords                                   ' PointsOnCurve CCoords\n\nDim FirstDist As Double\nFirstDist = find3DDistance(CCoords(6), CCoords(7), CCoords(8), XVal, YVal, ZVal)\n\nCurvePar.Orientation = False\nMyPart.UpdateObject CurvePar\nDim CMeas2 \nSet CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePar)\nDim CCoords2()\nReDim CCoords2(8)\nCMeas2.GetPointsOnCurve CCoords2                                ' PointsOnCurve CCoords2\n\nDim secondDist As Double\nsecondDist = find3DDistance(CCoords2(6), CCoords2(7), CCoords2(8), XVal, YVal, ZVal) \n\nIf secondDist &gt; FirstDist Then\n    CurvePar.Orientation = True\n    MyPart.UpdateObject CurvePar\nEnd If\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MoveLineAngleCloserToObj/","title":"MoveLineAngleCloserToObj","text":"<pre><code>Sub MoveLineAngleCloserToObj(CurvePt As HybridShapeLineAngle, CompareObj As Variant)\nDim CurOri As Boolean\nCurOri = CurvePt.Orientation\nDim OppOri As Boolean\nOppOri = Not CurOri\nIsUpdatable CurvePt\nIsUpdatable CompareObj\nDim CMeas\nSet CMeas = TheSPAWorkbench.GetMeasurable(CurvePt)\nDim FirstDist As Double\nFirstDist = CMeas.GetMinimumDistance(CompareObj)\n\nCurvePt.Orientation = OppOri\nIsUpdatable CurvePt\nDim CMeas2\nSet CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePt)\nDim secondDist As Double\nsecondDist = CMeas.GetMinimumDistance(CompareObj) \n\nIf secondDist &gt; FirstDist Then\n    CurvePt.Orientation = CurOri\n    IsUpdatable CurvePt\nEnd If \n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MoveLineAngleCloserToObjByNegAngle/","title":"MoveLineAngleCloserToObjByNegAngle","text":"<pre><code>Sub MoveLineAngleCloserToObjByNegAngle(CurvePt As HybridShapeLineAngle, CompareObj As Variant)\nDim CurOri As Double\nCurOri = CurvePt.Angle.Value\nDim OppOri As Double\nOppOri = CurvePt.Angle.Value * (-1)\nIsUpdatable CurvePt\nIsUpdatable CompareObj\nDim CMeas\nSet CMeas = TheSPAWorkbench.GetMeasurable(CurvePt)\nDim FirstDist As Double\nFirstDist = CMeas.GetMinimumDistance(CompareObj) \n\nCurvePt.Angle.Value = OppOri\nIsUpdatable CurvePt\nDim CMeas2\nSet CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePt)\nDim secondDist As Double\nsecondDist = CMeas.GetMinimumDistance(CompareObj)\n\nIf secondDist &gt; FirstDist Then\n    CurvePt.Angle.Value = CurOri\n    IsUpdatable CurvePt\nEnd If \n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MoveLinePtDirCloserToObj/","title":"MoveLinePtDirCloserToObj","text":"<pre><code>Sub MoveLinePtDirCloserToObj(CurvePt As HybridShapeLinePtDir, CompareObj As Variant)\nDim CurOri As Boolean\nCurOri = CurvePt.Orientation\nDim OppOri As Boolean\nOppOri = Not CurOri\nIsUpdatable CurvePt\nIsUpdatable CompareObj\nDim CMeas\nSet CMeas = TheSPAWorkbench.GetMeasurable(CurvePt)\nDim FirstDist As Double\nFirstDist = CMeas.GetMinimumDistance(CompareObj)\n\nCurvePt.Orientation = OppOri\nIsUpdatable CurvePt\nDim CMeas2\nSet CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePt)\nDim secondDist As Double\nsecondDist = CMeas.GetMinimumDistance(CompareObj)\n\nIf secondDist &gt; FirstDist Then\n    CurvePt.Orientation = CurOri\n    IsUpdatable CurvePt\nEnd If\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MoveLineTangencyCloserToCoord/","title":"MoveLineTangencyCloserToCoord","text":"<pre><code>Sub MoveLineTangencyCloserToCoord(CurvePar As HybridShapeLineTangency, XVal As Double, YVal As Double, ZVal As Double)\nDim CurOri\nDim OppOri\nCurOri = CurvePar.Orientation\nIf CurOri = False Then\n    OppOri = True\nElse\n    OppOri = False\nEnd If\n\nMyPart.UpdateObject CurvePar\nDim CMeas\nSet CMeas = TheSPAWorkbench.GetMeasurable(CurvePar)\nDim CCoords()\nReDim CCoords(8)\nCMeas.GetPointsOnCurve CCoords \n\nDim FirstDist As Double\nFirstDist = find3DDistance(CCoords(3), CCoords(4), CCoords(5), XVal, YVal, ZVal) \n\nCurvePar.Orientation = OppOri\nIsUpdatable CurvePar\nDim CMeas2\nSet CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePar)\nDim CCoords2()\nReDim CCoords2(8)\nCMeas2.GetPointsOnCurve CCoords2\n\nDim SecondDist As Double\nSecondDist = find3DDistance(CCoords2(3), CCoords2(4), CCoords2(5), XVal, YVal, ZVal)\n\nIf SecondDist &gt; FirstDist Then\n    CurvePar.Orientation = CurOri\n    IsUpdatable CurvePar\nEnd If \n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MoveOffsetCloserToCoord/","title":"MoveOffsetCloserToCoord","text":"<pre><code>Sub MoveOffsetCloserToCoord(CurvePar As HybridShapeOffset, XVal As Double, YVal As Double, ZVal As Double)\nMyPart.UpdateObject CurvePar\nDim CMeas\nSet CMeas = TheSPAWorkbench.GetMeasurable(CurvePar)\nDim CCoords()\nReDim CCoords(2)\nCMeas.GetCOG CCoords                               \n\nDim FirstDist As Double\nFirstDist = find3DDistance(CCoords(0), CCoords(1), CCoords(2), XVal, YVal, ZVal)\n\nCurvePar.OffsetDirection = False\nMyPart.UpdateObject CurvePar\nDim CMeas2\nSet CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePar)\nDim CCoords2()\nReDim CCoords2(2)\nCMeas2.GetCOG CCoords2                                \n\nDim SecondDist As Double\nSecondDist = find3DDistance(CCoords2(0), CCoords2(1), CCoords2(2), XVal, YVal, ZVal)\n\nIf SecondDist &gt; FirstDist Then\n    CurvePar.OffsetDirection = True\n    MyPart.UpdateObject CurvePar\nEnd If\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MoveOffsetCloserToObj/","title":"MoveOffsetCloserToObj","text":"<pre><code>Sub MoveOffsetCloserToObj(OffsetSurf As HybridShapeOffset, CompareObj As Variant)\nDim CurOri As Boolean\nCurOri = OffsetSurf.OffsetDirection      '.InvertDirection\nDim OppOri As Boolean\nOppOri = Not CurOri\nIsUpdatable OffsetSurf\nIsUpdatable CompareObj\nDim CMeas\nSet CMeas = TheSPAWorkbench.GetMeasurable(OffsetSurf)\nDim FirstDist As Double\nFirstDist = CMeas.GetMinimumDistance(CompareObj)\n\nOffsetSurf.OffsetDirection = OppOri\nIsUpdatable OffsetSurf\nDim CMeas2\nSet CMeas2 = TheSPAWorkbench.GetMeasurable(OffsetSurf)\nDim SecondDist As Double\nSecondDist = CMeas.GetMinimumDistance(CompareObj) \n\nIf SecondDist &gt; FirstDist Then\n    OffsetSurf.OffsetDirection = CurOri\n    IsUpdatable OffsetSurf\nEnd If\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MovePlaneOffsetCloserToObj/","title":"MovePlaneOffsetCloserToObj","text":"<pre><code>Sub MovePlaneOffsetCloserToObj(CurvePL As HybridShapePlaneOffset, CompareObj As Variant)\nDim CurOri As Boolean\nCurOri = CurvePL.Orientation\nDim OppOri As Boolean\nOppOri = Not CurOri\nIsUpdatable CurvePL\nIsUpdatable CompareObj\nDim CMeas\nSet CMeas = TheSPAWorkbench.GetMeasurable(CurvePL)\nDim FirstDist As Double\nFirstDist = CMeas.GetMinimumDistance(CompareObj) \n\nCurvePL.Orientation = OppOri\nIsUpdatable CurvePL\nDim CMeas2\nSet CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePL)\nDim secondDist As Double\nsecondDist = CMeas.GetMinimumDistance(CompareObj)\n\nIf secondDist &gt; FirstDist Then\n    CurvePL.Orientation = CurOri\n    IsUpdatable CurvePL\nEnd If \n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MovePointOnCurveCloserToObj/","title":"MovePointOnCurveCloserToObj","text":"<pre><code>Sub MovePointOnCurveCloserToObj(CurvePt As HybridShapePointOnCurve, CompareObj As Variant)\nDim CurOri As Boolean\nCurOri = CurvePt.Orientation\nDim OppOri As Boolean\nOppOri = Not CurOri\nIsUpdatable CurvePt\nIsUpdatable CompareObj\nDim CMeas\nSet CMeas = TheSPAWorkbench.GetMeasurable(CurvePt)\nDim FirstDist As Double\nFirstDist = CMeas.GetMinimumDistance(CompareObj)\n\nCurvePt.Orientation = OppOri\nIsUpdatable CurvePt\nDim CMeas2\nSet CMeas2 = TheSPAWorkbench.GetMeasurable(CurvePt)\nDim secondDist As Double\nsecondDist = CMeas.GetMinimumDistance(CompareObj)  \n\nIf secondDist &gt; FirstDist Then\n    CurvePt.Orientation = CurOri\n    IsUpdatable CurvePt\nEnd If\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/MultiRotate/","title":"MultiRotate","text":"<pre><code>Function MultiRotate(Obj1 As Variant, RotCount As Integer, RotAngle As Double, CurSet As HybridBody, NameStr As String) As Variant\nDim RotArr()\nReDim RotArr(RotCount - 1)\nDim RotSet As HybridBody\nSet RotSet = CurSet.HybridBodies.Add\nRotSet.Name = NameStr &amp; \"_SET\"\nFor X = 1 To RotCount\n    StatusBarShort X, RotCount - 1, \"MultiRotation...   \"\n\n    Set RotArr(X - 1) = MyHSFactory.AddNewRotate(Obj1, AxisLine, RotAngle * X)\n    RotSet.AppendHybridShape RotArr(X - 1)\n    RotArr(X - 1).Name = NameStr &amp; Format(X + 1, \"00\") &amp; \"_WRF\"\n    IsUpdatable RotArr(X - 1)\n    ForceColorObjUgly RotArr(X - 1), 40, 40, 39, 6, 1000, 1, 1000\n    'MyHSFactory.GSMVisibility RotArr(X - 1), 0\nNext X\nMultiRotate = RotArr\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/ObjectVisibility/","title":"ObjectVisibility","text":""},{"location":"DS-CODE/Automation/ObjectVisibility/#_1","title":"\u5143\u7d20\u9690\u85cf\u4e0e\u663e\u793a","text":""},{"location":"DS-CODE/Automation/ObjectVisibility/#caa","title":"CAA","text":"<p><pre><code>/**\n* \u9690\u85cf\u5143\u7d20\n* @param ipListElemObj\n* \u5143\u7d20\u5217\u8868\n*/\n\nvoid HideElements(CATLISTV(CATISpecObject_var) ipListElemObj)\n{\nfor(int i=1;i&lt;ipListElemobj.Size();i++;)\n{\nCATIVisProperties* pPropONElem = NULL;\nHRESULT rc = ipListElemobj[i]-&gt;QueryInterface(IID_CATIVisProperties,(void**) &amp;pPropONElem );\nif (NULL != pPropONElem) {\nCATIVisPropertiesValues PropValue;\nCATIVisPropertyType PropTypeOnPtObj = CATVPShow;\nCATVisGeomType GeomTypeOnPtObj = CATVPGlobalType;\nPropValue.SetShowAttr(CATNOShowAttr);\nrc = pPropONElem -&gt; SetPropertiesAttr(PropValue,\nPropTypeOnPtObj,\nGeomTypeOnPtObj);\npPropONElem -&gt;Release();\npPropONElem = NULL;\n}\n}\n}\n</code></pre> <pre><code>/**\n* \u68c0\u6d4b\u5143\u7d20\u663e\u793a\u72b6\u6001\n*/\nbool CheckIsShow(CATIVisProperties_var spPropOnTreeNode)\n{\n// 5/18  add\nbool IsShow = false;\n\nCATShowAttribut oShow ;\nif ( NULL_var != spPropOnTreeNode )\n{\nif ( SUCCEEDED(GetShow(spPropOnTreeNode,oShow,2)))\n{\n// model show flag\nif (oShow == CATShowAttr)\n{\nIsShow = true;\n}\n}\n}//--- 5/18 add\n\nreturn IsShow;\n}\n</code></pre> <pre><code>/**\n* \u53d6\u5f97\u5143\u7d20\u663e\u793a\u6807\u8bc6 Show Flag\n*/\nHRESULT GetShow(CATIVisProperties_var spProp, CATShowAttribut &amp;oShow ,int Mode )\n{\nif ( spProp == NULL_var)\nreturn E_FAIL;\nCATVisPropertiesValues  MyPropertyOnFace;\nCATVisPropertyType PropTypeOnFace = CATVPShow;\nCATVisGeomType GeomTypeOnFace;\nif ( Mode == 1 )\nGeomTypeOnFace     = CATVPMesh;\nelse\nGeomTypeOnFace     = CATVPGlobalType ;\nHRESULT rc = spProp-&gt;GetPropertiesAtt(MyPropertyOnFace,PropTypeOnFace,GeomTypeOnFace);\nif ( SUCCEEDED(rc) )\n{\nHRESULT HR = MyPropertyOnFace.GetShowAttr(oShow);\nif ( FAILED(HR))\nreturn E_FAIL;\n}\nreturn S_OK;\n}\n</code></pre> <pre><code>//\u5143\u7d20\u9690\u85cf\u4e0e\u663e\u793a\n/**\n* \u9ad8\u4eae\u7279\u5f81\n* @param spSpec\n* \u9ad8\u4eae\u7279\u5f81\n*/\nHRESULT HighLightSpecObject (CATISpecObject_var spSpec, CATBoolean boolClearHistory)\n{\nHRESULT rc = E_FAIL;\nCATFrmEditor * pEditor = CATFrmEditor::GetCurrentEditor();\nif(NULL == pEditor )\nreturn rc;\nCATHSO * pHSO = pEditor-&gt;GetHSO();\nif(NULL == pHSO )\nreturn rc;  //\u4e3a1\u65f6\uff0c\u6e05\u695a\u6240\u6709\u5df2\u6709\u7684\u9ad8\u4eae\nif(boolClearHistory)\npHSO-&gt;Empty();\nCATPathElement pContext = pEditor-&gt;GetUIActiveObject();\nCATIBuildPath * piBuildPath = NULL;\nrc =spSpec-&gt;QueryInterface(IID_CATIBuildPath, (void **)&amp;piBuildPath);\nif(SUCCEEDED(rc) &amp;&amp; piBuildPath != NULL)\n{\nCATPathElement * pPathElement = NULL;\nrc = piBuildPath-&gt;ExtractPathElement(&amp;pContext, &amp;pPathElement);\nif (pPathElement != NULL)\n{\npHSO-&gt;AddElement(pPathElement);\npPathElement-&gt;Release();\npPathElement = NULL;\n}\npiBuildPath-&gt;Release();\npiBuildPath = NULL;\n}\nreturn S_OK;\n}\n</code></pre></p>"},{"location":"DS-CODE/Automation/ObjectVisibility/#vb","title":"VB","text":""},{"location":"DS-CODE/Automation/ObjectVisibility/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/ParameterFromSubName/","title":"ParameterFromSubName","text":"<pre><code>Function ParameterFromSubName(NameStr As String, ParmsList As Parameters) As Parameter\nFor X = 1 To ParmsList.Count\n    If InStr(ParmsList.Item(X).Name, NameStr) &lt;&gt; 0 Then\n        Set ParameterFromSubName = ParmsList.Item(X)\n        Exit Function\n    End If\nNext X \nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/PlacePointOnCurve/","title":"PlacePointOnCurve","text":"<pre><code>Function PlacePointOnCurve(CurLine As Variant, StartPt As Variant, CurDist As String, CurSet As HybridBody, CurName As String) As  HybridShapePointOnCurve \nDim CC As HybridShapePointOnCurve\nSet CC = MyHSFactory.AddNewPointOnCurveWithReferenceFromDistance(CurLine, StartPt, 1, True)\nCurSet.AppendHybridShape CC\nCC.Offset.ValuateFromString CurDist\nCC.Name = CurName\nIsUpdatable CC\nForceColorObjUgly CC, 254, 254, 254, 1000, 5, 1000, 1000\nMovePointOnCurveCloserToObj CC, AxisLine\nSet PlacePointOnCurve = CC\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/QuickAnnotationAtEndLine/","title":"QuickAnnotationAtEndLine","text":""},{"location":"DS-CODE/Automation/QuickAnnotationAtEndLine/#v5","title":"V5","text":""},{"location":"DS-CODE/Automation/QuickAnnotationAtEndLine/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Sub QuickAnnotationAtEndLine(GenObj As Object, TextStr As String, mypart As Part)\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n    Dim PTMeas\n    PTMeas = TheSPAWorkbench.GetMeasurable(GenObj)\n    Dim PTCOG()\n    ReDim PTCOG(8)\n    PTMeas.GetPointsOnCurve(PTCOG)\n\n    Dim UserSurf As UserSurface\n    UserSurf = mypart.UserSurfaces.Generate(GenObj)\n\n    Dim annotationSets1 As AnnotationSets = mypart.AnnotationSets\n    Dim annotationSet1 As AnnotationSet = annotationSets1.Add(\"UDS\")\n\n    Dim userSurfaces1 As UserSurfaces = mypart.UserSurfaces\n\n    Dim annotationFactory1 As AnnotationFactory = annotationSet1.AnnotationFactory\n\n    Dim GGG 'As Annotation\n    GGG = annotationFactory1.CreateEvoluateText(UserSurf, (PTCOG(6) * 1), (PTCOG(7) * 1), (PTCOG(8) * 1), False)\n\n    Dim GText As Text\n    GText = GGG.Text\n    GText.Text = TextStr\n    If CATIA.ActiveDocument.Selection.Count &lt;&gt; 0 Then\n        CATIA.ActiveDocument.Selection.Clear()\n    End If\n    CATIA.ActiveDocument.Selection.Add(GText)\n    CATIA.ActiveDocument.Selection.VisProperties.SetVisibleColor(255, 255, 255, 0)\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/QuickAnnotationAtPoint/","title":"QuickAnnotationAtPoint","text":""},{"location":"DS-CODE/Automation/QuickAnnotationAtPoint/#v5","title":"V5","text":""},{"location":"DS-CODE/Automation/QuickAnnotationAtPoint/#vbnet","title":"VB.NET","text":"<pre><code>Public Shared Sub QuickAnnotationAtPoint(GenObj As Object, TextStr As String, mypart As Part)\n    Dim TheSPAWorkbench As SPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n    Dim PTMeas\n    PTMeas = TheSPAWorkbench.GetMeasurable(GenObj)\n    Dim PTCOG()\n    ReDim PTCOG(2)\n    PTMeas.GetPoint(PTCOG)\n\n    Dim annotationSets1 As AnnotationSets = mypart.AnnotationSets\n    Dim annotationSet1 As AnnotationSet = annotationSets1.Add(\"UDS\")\n    Dim userSurfaces1 As UserSurfaces = mypart.UserSurfaces\n    Dim UserSurf As UserSurface = userSurfaces1.Generate(GenObj)\n\n    Dim annotationFactory1 As AnnotationFactory = annotationSet1.AnnotationFactory\n\n    Dim GGG As Annotation\n    GGG = annotationFactory1.CreateEvoluateText(UserSurf, (PTCOG(0) * 1), (PTCOG(1) * 1), (PTCOG(2) * 1), False)\n\n    GGG.Text.Text = TextStr\n\n    'If MySel.Count &lt;&gt; 0 Then\n    '    MySel.Clear()\n    'End If\n    'MySel.Add(GText)\n    'MySel.VisProperties.SetVisibleColor(255, 255, 255, 0)\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/RemoveChars/","title":"RemoveChars","text":"<pre><code>Function RemoveChars(InputStr As String, ArrayOfChars As Variant) As String\nDim tempStr As String\ntempStr = InputStr\nFor X = 0 To UBound(ArrayOfChars)\n    tempStr = Replace(tempStr, ArrayOfChars(X), \"\")\nNext X\nRemoveChars = tempStr\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/ReturnAllObjectsWithinDist/","title":"ReturnAllObjectsWithinDist","text":"<pre><code>Function ReturnAllObjectsWithinDist(CurObj As Variant, ObjSet As HybridBody, WithinDist As Double) As Variant\nDim tempArr()\nReDim tempArr(0)\nIf IsUpdatable(CurObj) = False Then\n    Exit Function\nEnd If \n\nDim JMeas\nSet JMeas = TheSPAWorkbench.GetMeasurable(CurObj)\nDim JDist As Double\nFor X = 1 To ObjSet.HybridShapes.Count\n    Dim Obj1 As HybridShape\n    Set Obj1 = ObjSet.HybridShapes.Item(X)\n\n    If IsUpdatable(Obj1) = True Then\n        JDist = JMeas.GetMinimumDistance(Obj1)\n\n        If JDist &lt; WithinDist Then\n            Set tempArr(UBound(tempArr)) = Obj1\n            ReDim Preserve tempArr(UBound(tempArr) + 1)\n        End If\n    End If\nNext X\n\nIf UBound(tempArr) &lt;&gt; 0 Then\n    ReDim Preserve tempArr(UBound(tempArr) - 1)\nEnd If\nReturnAllObjectsWithinDist = tempArr\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/ReturnMidCurveDist/","title":"ReturnMidCurveDist","text":"<pre><code>Function ReturnMidCurveDist(CurveObj As Variant) As Double\nIf IsUpdatable(CurveObj) Then\n    Dim TMeas\n    Set TMeas = TheSPAWorkbench.GetMeasurable(CurveObj)\n    Dim TC(8)\n    TMeas.GetPointsOnCurve TC\n    midPtCoord = ReturnMidPtCoord(CDbl(TC(0)), CDbl(TC(1)), CDbl(TC(2)), CDbl(TC(6)), CDbl(TC(7)), CDbl(TC(8)))\n    Dim FindDist As Double\n    FindDist = find3DDistance(midPtCoord(0), midPtCoord(1), midPtCoord(2), TC(3), TC(4), TC(5))\n    ReturnMidCurveDist = FindDist\nEnd If\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/ReturnMidPtCoord/","title":"ReturnMidPtCoord","text":""},{"location":"DS-CODE/Automation/ReturnMidPtCoord/#vba","title":"VBA","text":"<pre><code>Function ReturnMidPtCoord(X1 As Double, Y1 As Double, Z1 As Double, X2 As Double, Y2 As Double, Z2 As Double) As Variant\nDim FinalPt(2)\nFinalPt(0) = (X1 + X2) / 2\nFinalPt(1) = (Y1 + Y2) / 2\nFinalPt(2) = (Z1 + Z2) / 2\nReturnMidPtCoord = FinalPt\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/SelSurfDup/","title":"SelSurfDup","text":"<pre><code>Sub SelSurfDup(SurfArr As Variant)\nDim SecArr()\nReDim SecArr(0)\n\nFor X = 0 To UBound(SurfArr)\n    If HasArea(SurfArr(X)) Then\n        Dim CMeas\n        Set CMeas = TheSPAWorkbench.GetMeasurable(SurfArr(X))\n        Dim CPerimeter As Double\n        CPerimeter = CMeas.Perimeter\n        Dim CArea As Double\n        CArea = CMeas.Area\n        Dim CCOG(2)\n        CMeas.GetCOG CCOG\n\n        For Y = X + 1 To UBound(SurfArr)\n            If HasArea(SurfArr(Y)) Then\n                Dim NMeas\n                Set NMeas = TheSPAWorkbench.GetMeasurable(SurfArr(Y))\n                Dim NPerimeter As Double\n                NPerimeter = NMeas.Perimeter\n                Dim NArea As Double\n                NArea = NMeas.Area\n                Dim NCOG(2)\n                NMeas.GetCOG NCOG\n\n                If NPerimeter = CPerimeter And CArea = NArea And NCOG(0) = CCOG(0) And NCOG(1) = CCOG(1) And  NCOG(2) = CCOG(2) Then\n                    Set SecArr(UBound(SecArr)) = SurfArr(Y)\n                    ReDim Preserve SecArr(UBound(SecArr) + 1)\n                End If\n            End If\n        Next Y\n    End If\nNext X \n\nFor Z = 0 To UBound(SecArr) - 1\n    MyHSFactory.DeleteObjectForDatum SecArr(Z)\nNext Z\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Automation/UDF/","title":"UDF","text":"<pre><code>Imports MECMOD\nImports INFITF\nImports KnowledgewareTypeLib\n\nPartial Public Class Main\n\n    Private Function BEAM_UDF(ByRef partUDF As Part, ByRef HBBodyBEAM As HybridBody, ByRef TLName As String, ByRef beam As BEAM)\n\n        Dim pt1 As Object = partUDF.FindObjectByName(TLName + \"_BEAM_Point\" + beam.getPtx1_id)\n        Dim pt2 As Object = partUDF.FindObjectByName(TLName + \"_BEAM_Point\" + beam.getPtx2_id)\n        Dim plane As Object = partUDF.FindObjectByName(TLName + \"_BEAM_Level_\" + beam.getLevel.ToString)\n        Dim h As String = beam.getH\n        Dim l As String = beam.getL\n        Dim d As String = beam.getD\n        Dim b As String = beam.getB\n\n        If (Not System.IO.File.Exists(Beam_Udf_Path)) Then\n            MsgBox(\"UDF\u4e0d\u5b58\u5728\")\n            Return -1\n        End If\n\n        '**************************************************************************\n        Dim UDFName As String = \"BEAM_H\"\n        Dim instFactoryPts As InstanceFactory\n\n        Try\n            instFactoryPts = partUDF.GetCustomerFactory(\"InstanceFactory\")\n            instFactoryPts.BeginInstanceFactory(UDFName, Beam_Udf_Path)\n\n            partUDF.InWorkObject = HBBodyBEAM\n\n            instFactoryPts.BeginInstantiate()\n        Catch\n            Return 1\n        End Try\n\n        '*****************************************************************\n        Try\n            instFactoryPts.PutInputData(\"INPUT1\", plane)\n            instFactoryPts.PutInputData(\"INPUT2\", pt1)\n            instFactoryPts.PutInputData(\"INPUT3\", pt2)\n        Catch\n            Return 2\n        End Try\n        '*****************************************************************\n        Try\n            Dim parameters1 As Parameters\n            parameters1 = partUDF.Parameters\n            Dim length1 As Parameter\n            length1 = instFactoryPts.GetParameter(\"H\")\n            length1.Value = h\n\n            Dim parameters2 As Parameters\n            parameters2 = partUDF.Parameters\n            Dim length2 As Parameter\n            length2 = instFactoryPts.GetParameter(\"L\")\n            length2.Value = l\n\n            Dim parameters3 As Parameters\n            parameters3 = partUDF.Parameters\n            Dim length3 As Parameter\n            length3 = instFactoryPts.GetParameter(\"D\")\n            length3.Value = d\n\n            Dim parameters4 As Parameters\n            parameters4 = partUDF.Parameters\n            Dim length4 As Parameter\n            length4 = instFactoryPts.GetParameter(\"B\")\n            length4.Value = b\n\n            Dim parameters5 As Parameters\n            parameters5 = partUDF.Parameters\n            Dim strParam1 As Parameter\n            strParam1 = instFactoryPts.GetParameter(\"Section\")\n\n            strParam1.Value = h.ToString + \"X\" + l.ToString + \"X\" + d.ToString + \"X\" + b.ToString\n\n            partUDF.Update()\n        Catch\n        End Try\n        '*****************************************************************\n        Try\n            partUDF.InWorkObject = HBBodyBEAM\n            Dim instance As ShapeInstance = instFactoryPts.Instantiate\n        Catch\n        End Try\n        '*****************************************************************\n        Try\n            instFactoryPts.EndInstantiate()\n            instFactoryPts.EndInstanceFactory()\n            partUDF.Update()\n        Catch\n            Return 4\n        End Try\n\n        Return 0\n    End Function\nEnd Class\n</code></pre>"},{"location":"DS-CODE/Automation/UsefulCatiaVBAFunctions/","title":"UsefulCatiaVBAFunctions","text":""},{"location":"DS-CODE/Automation/UsefulCatiaVBAFunctions/#vbnet","title":"VB.NET","text":"<pre><code>Option Explicit Off\n\nPublic Class Class1\n\n    '1. Create a Module in your project And paste the code below\n    Public Shared Structure iPct\n        Dim X As Double\n        Dim Y As Double\n        Dim Z As Double\n    End Structure\n\n\n    Public Shared Structure iPlan\n        Dim Ax As Double\n        Dim By As Double\n        Dim Cz As Double\n        Dim Dt As Double\n    End Structure\n\n    Public Enum iIntVal\n            Intersectie = 0    'Intersection\n            Paralele = 1\n            Oblice = 2    'Skew\n        End Enum\n    Public Shared Structure iIntersect\n        Dim Result As iIntVal\n        Dim Val As iPct\n    End Structure\n\n    Sub CATMain()\n            Dim Q As New clsGVI\n            Dim A As iPct\n            Dim B As iPct\n            Dim C As iPct\n            Dim D As iPct\n            'intersectie\n            A.X = 1 : A.Y = 1 : A.Z = 1\n            B.X = 3 : B.Y = 3 : B.Z = 1\n            C.X = 0 : C.Y = 1 : C.Z = 4\n            D.X = 0 : D.Y = 3 : D.Z = 3\n            Dim X1 As Double\n            X1 = Q.LLDistance(A, B, C, D)\n            'Unfold.Show\n        End Sub\n\n    '2. Create a Class Module in the same project And rename it to clsGVI And paste the code below\n\n    Const PI As Double = 3.14159265358979\n\n\n    'How to get point coordinates\n\n\n    Public Function GetPointXYZ(MyPoint As Object) As iPct\n        Dim Coord(2)\n        GetPointXYZ = New iPct\n        MyPoint.GetCoordinates\uff08Coord\uff09\n        GetPointXYZ.X = Coord(0) : GetPointXYZ.Y = Coord(1) : GetPointXYZ.Z = Coord(2)\n        Erase Coord\n    End Function\n\n\n    'How to get point coordinates relative to an specified axis system\n\n\n    Public Function LCS(AxisSys As Object, Point2Measure As iPct) As iPct\n        Dim AOrig(2) : Dim Vx(2) : Dim Vy(2) : Dim Vz(2)\n        Dim iOrig As iPct : Dim iVx As iPct : Dim iVy As iPct : Dim iVz As iPct : Dim Diff As iPct\n        LCS = New iPct\n        AxisSys.GetOrigin(AOrig) : iOrig.X = AOrig(0) : iOrig.Y = AOrig(1) : iOrig.Z = AOrig(2)\n        AxisSys.GetXAxis(Vx) : iVx.X = Vx(0) : iVx.Y = Vx(1) : iVx.Z = Vx(2)\n        AxisSys.GetYAxis(Vy) : iVy.X = Vy(0) : iVy.Y = Vy(1) : iVy.Z = Vy(2)\n        AxisSys.GetZAxis(Vz) : iVz.X = Vz(0) : iVz.Y = Vz(1) : iVz.Z = Vz(2)\n        NormalizeVector(iVx, iVx)\n        NormalizeVector(iVy, iVy)\n        NormalizeVector(iVz, iVz)\n        Diff.X = Point2Measure.X - iOrig.X : Diff.Y = Point2Measure.Y - iOrig.Y : Diff.Z = Point2Measure.Z - iOrig.Z\n        LCS.X = DotProduct(Diff, iVx) : LCS.Y = DotProduct(Diff, iVy) : LCS.Z = DotProduct(Diff, iVz)\n        iOrig = Nothing\n        iVx = Nothing\n        iVy = Nothing\n        iVz = Nothing\n        Diff = Nothing\n        Erase AOrig : Erase Vx : Erase Vy : Erase Vz\n    End Function\n\n\n    'How to Normalize of a vector\n\n\n    Public Sub NormalizeVector(IVect As iPct, ByRef NVect As iPct)\n            Dim Mag As Double\n            Mag = Sqr(IVect.X ^ 2 + IVect.Y ^ 2 + IVect.Z ^ 2)\n            If Mag &lt; 0.0000001 Then Call Err.Raise(1001, , \"Zero length vector cannot be normalized\")\n            NVect.X = IVect.X / Mag\n            NVect.Y = IVect.Y / Mag\n            NVect.Z = IVect.Z / Mag\n        End Sub\n\n\n    'How to get Plane Equation\n\n\n    Public Function PlaneEquation(PartOrigin As iPct, PlaneOrigin As iPct, FirstVector As iPct, SecondVector As iPct) As iPlan\n        PlaneEquation = New iPlan\n        PlaneEquation.Ax = PartOrigin.Y * (FirstVector.Z - SecondVector.Z) + FirstVector.Y * (SecondVector.Z - PartOrigin.Z) + SecondVector.Y * (PartOrigin.Z - FirstVector.Z)\n            PlaneEquation.By = PartOrigin.Z * (FirstVector.X - SecondVector.X) + FirstVector.Z * (SecondVector.X - PartOrigin.X) + SecondVector.Z * (PartOrigin.X - FirstVector.X)\n            PlaneEquation.Cz = PartOrigin.X * (FirstVector.Y - SecondVector.Y) + FirstVector.X * (SecondVector.Y - PartOrigin.Y) + SecondVector.X * (PartOrigin.Y - FirstVector.Y)\n            PlaneEquation.Dt = PlaneOrigin.X * (FirstVector.Y * SecondVector.Z - SecondVector.Y * FirstVector.Z) + FirstVector.X * (SecondVector.Y * PlaneOrigin.Z - PlaneOrigin.Y *\n        SecondVector.Z) + SecondVector.X * (PlaneOrigin.Y * FirstVector.Z - FirstVector.Y * PlaneOrigin.Z)\n        End Function\n\n\n    'How to get plane vectors\n\n\n    Public Function GetPlaneVectors(MyPlane As Object) As iPct()\n        Dim ArrRet() As iPct : ReDim ArrRet(1)\n        Dim V1(2) : Dim V2(2)\n        MyPlane.GetFirstAxis(V1) : ArrRet(0).X = V1(0) : ArrRet(0).Y = V1(1) : ArrRet(0).Z = V1(2)\n        MyPlane.GetSecondAxis(V2) : ArrRet(1).X = V2(0) : ArrRet(1).Y = V2(1) : ArrRet(1).Z = V2(2)\n        GetPlaneVectors = ArrRet\n        Erase ArrRet : Erase V1 : Erase V2\n    End Function\n\n\n    'How to get angle between two planes - Dihedral Angle\n\n\n    Public Function DihedralAngle(FirstPlane As iPlan, SecondPlane As iPlan) As Double\n            DihedralAngle = ArcCos(FirstPlane.Ax * SecondPlane.Ax + FirstPlane.By * SecondPlane.By + FirstPlane.Cz * SecondPlane.Cz /\n        Sqr((FirstPlane.Ax ^ 2 + FirstPlane.By ^ 2 + FirstPlane.Cz ^ 2) * (SecondPlane.Ax ^ 2 + SecondPlane.By ^ 2 + SecondPlane.Cz ^ 2)))\n        End Function\n\n\n    'Nothing to comment\n\n\n    Public Function ArcCos(Radians As Double) As Double\n            If Round(Radians, 8) = 1 Then ArcCos = 0 : Exit Function\n            If Round(Radians, 8) = -1 Then ArcCos = PI : Exit Function\n            ArcCos = Atn(-Radians / Sqr(1 - Radians ^ 2)) + 2 * Atn(1)\n        End Function\n\n\n    'Nothing to comment\n\n\n    Public Function ArcSin(Radians As Double) As Double\n            If (Sqr(1 - Radians ^ 2) &lt;= 0.000000000001) And (Sqr(1 - Radians ^ 2) &gt;= -0.000000000001) Then\n                ArcSin = PI / 2\n            Else\n                ArcSin = Atn(Radians / Sqr(1 - Radians ^ 2))\n            End If\n        End Function\n\n\n    'How to get distance between two points\n\n\n    Public Function P2PDist(FirstPoint As iPct, SecondPoint As iPct) As Double\n            Distance = Sqr((SecondPoint.X - FirstPoint.X) ^ 2 + (SecondPoint.Y - FirstPoint.Y) ^ 2 + (SecondPoint.Z - FirstPoint.Z) ^ 2)\n        End Function\n\n\n    'Are two points On the same side Of the plane?\n\n\n    Public Function WhichSideOfPlane(Plane As iPlan, FirstPoint As iPct, SecondPoint As iPct) As Integer()\n            Dim ArrReturn() As Integer : ReDim ArrReturn(1)\n            ArrReturn(0) = Plane.Ax * FirstPoint.X + Plane.By * FirstPoint.Y + Plane.Cz * FirstPoint.Z - Plane.Dt\n            ArrReturn(1) = Plane.Ax * SecondPoint.X + Plane.By * SecondPoint.Y + Plane.Cz * SecondPoint.Z - Plane.Dt\n            WhichSideOfPlane = ArrReturn\n            Erase ArrReturn\n        End Function\n\n\n    'How to get the vector of line\n\n\n    Public Function GetLineVector(FirstPoint As iPct, SecondPoint As iPct) As iPct\n        Dim Dist As Double\n        GetLineVector = New iPct\n        Dist = P2PDist(FirstPoint, Seconpoint)\n            GetLineVector.X = (SecondPoint.X - FirstPoint.X) / Dist\n            GetLineVector.Y = (SecondPoint.Y - FirstPoint.Y) / Dist\n            GetLineVector.Z = (SecondPoint.Z - FirstPoint.Z) / Dist\n        End Function\n\n\n    'How to Get BrepName from Catia Selection\n\n\n    Public Function GetBrep(MyBRepName As String) As String\n            MyBRepName = Replace(MyBRepName, \"Selection_\", \"\")\n            MyBRepName = Left(MyBRepName, InStrRev(MyBRepName, \"));\"))\n            MyBRepName = MyBRepName + \");WithPermanentBody;WithoutBuildError;WithSelectingFeatureSupport;MFBRepVersion_CXR15)\"\n            '\");WithTemporaryBody;WithoutBuildError;WithInitialFeatureSupport;MonoFond;MFBRepVersion _CXR14)\"\n            GetBrep = MyBRepName\n        End Function\n\n\n    'How to determine if two lines are skew, intersecting Or parallel\n\n\n    Public Function LLIntersect(A As iPct, B As iPct, C As iPct, D As iPct) As iIntersect\n            Dim M(3, 3) As Double\n            M(0, 0) = A.X : M(0, 1) = A.Y : M(0, 2) = A.Z : M(0, 3) = 1\n            M(1, 0) = B.X : M(1, 1) = B.Y : M(1, 2) = B.Z : M(1, 3) = 1\n            M(2, 0) = C.X : M(2, 1) = C.Y : M(2, 2) = C.Z : M(2, 3) = 1\n            M(3, 0) = D.X : M(3, 1) = D.Y : M(3, 2) = D.Z : M(3, 3) = 1\n            If GetDet(M) &lt;&gt; 0 Then Erase M : LLIntersect.Result = Oblice : Exit Function    'skew lines\n            Dim CxB() As Double : Dim AxB() As Double : ReDim CxB(2) : ReDim AxB(2)\n            Dim Av(2) As Double : Dim Bv(2) As Double : Dim Cv(2) As Double\n            Av(0) = B.X - A.X : Av(1) = B.Y - A.Y : Av(2) = B.Z - A.Z\n            Bv(0) = D.X - C.X : Bv(1) = D.Y - C.Y : Bv(2) = D.Z - C.Z\n            Cv(0) = C.X - A.X : Cv(1) = C.Y - A.Y : Cv(2) = C.Z - A.Z\n            CxB = CrossProd(Cv, Bv) : AxB = CrossProd(Av, Bv)\n            Dim s As Double\n            On Error GoTo paralelele\n            s = DotProd(CxB, AxB) / Abs(DotProd(AxB, AxB))\n            Dim iInter As iPct\n            iInter.X = A.X + Av(0) * s    'X coordinate of intersection\n            iInter.Y = A.Y + Av(1) * s    'Y coordinate of intersection\n            iInter.Z = A.Z + Av(2) * s    'Z coordinate of intersection\n            LLIntersect.Result = Intersectie    'intersecting lines\n            LLIntersect.Val = iInter\nparalelele:\n            Erase CxB : Erase AxB : Erase Cv : Erase Bv : Erase Av\n            If Err.Number &lt;&gt; 0 Then LLIntersect.Result = PParalele : Err.Clear    'parallel lines\n        End Function\n\n\n    'How to get the distance between two skew lines\n\n\n    Public Function SkewLDist(A As iPct, B As iPct, C As iPct, D As iPct) As Double\n            Dim Av(2) As Double : Dim Bv(2) As Double : Dim Cv(2) As Double\n            Dim Det(2, 2) As Double\n            Av(0) = A.X - B.X : Av(1) = A.Y - B.Y : Av(2) = A.Z - B.Z\n            Bv(0) = C.X - A.X : Bv(1) = C.Y - A.Y : Bv(2) = C.Z - A.Z\n            Cv(0) = D.X - C.X : Cv(1) = D.Y - C.Y : Cv(2) = D.Z - C.Z\n            Det(0, 0) = DotProd(Cv, Cv) : Det(0, 1) = DotProd(Cv, Av) : Det(0, 2) = DotProd(Cv, Bv)\n            Det(1, 0) = DotProd(Cv, Av) : Det(1, 1) = DotProd(Av, Av) : Det(1, 2) = DotProd(Av, Bv)\n            Det(2, 0) = DotProd(Cv, Bv) : Det(2, 1) = DotProd(Av, Bv) : Det(2, 2) = DotProd(Bv, Bv)\n            Dim v As Double\n            v = GetDet(Det)\n            SkewLDist = Sqr(v / (Det(0, 0) * Det(1, 1) - Det(1, 0) ^ 2))\n        End Function\n\n\n    'How to get DOT product of two vectors - lenght must be 3\n\n\n    Public Function DotProd(V1() As Double, V2() As Double) As Double\n            DotProd = V1(0) * V2(0) + V1(1) * V2(1) + V1(2) * V2(2)\n        End Function\n\n    'How to get CROSS product of two vectors - lenght must be 3\n\n\n    Public Function CrossProd(V1() As Double, V2() As Double) As Double()\n            Dim Res() As Double\n            ReDim Res(2)\n            Res(0) = V1(1) * V2(2) - V1(2) * V2(1)\n            Res(1) = V1(2) * V2(0) - V1(0) * V2(2)\n            Res(2) = V1(0) * V2(1) - V1(1) * V2(0)\n            CrossProd = Res\n            Erase Res\n        End Function\n\n\n    'How to get inverse of an NxN matrix\n\n\n    Public Function GetInverse(M() As Double) As Double()\n            Dim RetVal() As Double : Dim Size As Integer\n            Dim Det As Double : Dim Adj() As Double\n            Dim i As Integer : Dim j As Integer\n            Size = UBound(M) : Det = GetDet(M)\n            If Det &lt;&gt; 0 Then\n                ReDim RetVal(Size, Size)\n                Adj = GetAdjoint(M)\n                For i = 0 To Size\n                    For j = 0 To Size\n                        RetVal(i, j) = Adj(i, j) / Det\n                    Next\n                Next\n                Erase Adj\n                GetInverse = RetVal\n                Erase RetVal\n            End If\n        End Function\n\n\n    'How to get Determinant of an NxN matrix\n\n\n    Public Function GetDet(M() As Double) As Double\n            Dim i As Integer : Dim j As Integer\n            Dim Size As Integer : Size = UBound(M) : Dim RetVal As Double\n            If Size = 1 Then\n                RetVal = RetVal + M(0, 0) * M(1, 1) - M(0, 1) * M(1, 0)   'daca e deteminant 2x2\n            Else\n                For i = 0 To Size\n                    RetVal = RetVal + ((-1) ^ i) * M(0, i) * GetDet(GetMinor(M, 0, i))    'daca e determinant NxN\n                Next\n            End If\n            GetDet = RetVal\n        End Function\n\n\n    'How to get Adjoint matrix - it Is used to calculate the inverse of an NxN matrix\n\n\n    Public Function GetAdjoint(M() As Double) As Double()\n            Dim i As Integer : Dim j As Integer\n            Dim Size As Integer : Size = UBound(M)\n            Dim RetVal() As Double : ReDim RV(Size, Size)\n            For i = 0 To Size\n                For j = 0 To Size\n                    RetVal(j, i) = ((-1) ^ (i + j)) * GetDet(GetMinor(M, i, j))    'RetVal(i, j)=matricea cofactor; RetVal(j, i)= transpusa matricii cofactor\n                Next\n            Next\n            GetAdjoint = RetVal\n            Erase RetVal\n        End Function\n\n\n    'How to get Minor matrix - it Is used to calculate the determinant of an NxN matrix\n\n\n    Public Function GetMinor(Min() As Double, RemRow As Integer, RemCol As Integer) As Double()\n            Dim RetVal() As Double : Dim i As Integer : Dim j As Integer\n            Dim IdxC As Integer : Dim IdxR As Integer\n            Dim Size As Integer : IdxR = 0 : Size = UBound(Min) - 1\n        ReDim RetVal(Size, Size) 'As Double\n        For i = 0 To Size + 1\n                If i &lt;&gt; RemRow Then\n                    IdxC = 0\n                    For j = 0 To Size + 1\n                        If j &lt;&gt; RemCol Then\n                            RetVal(IdxR, IdxC) = Min(i, j)\n                            IdxC = IdxC + 1\n                        End If\n                    Next\n                    IdxR = IdxR + 1\n                End If\n            Next\n            GetMinor = RetVal\n            Erase RetVal\n        End Function\n\n\n    'How to aproximate an curve using Cubic Bezier curves\n\n\n    Public Function BSpline3(CollectionOfiPcts As Collection, Increment As Double) As Collection\n            Dim i As Double : Dim t As Double\n            Dim A As iPlan : Dim B As iPlan : Dim C As iPlan : Dim Point2Add As iPct\n        BSpline3 = New Collection\n        For i = 1 To CollectionOfiPcts.Count - 3\n            A = New iPlan\n            B = New iPlan\n            C = New iPlan\n            A.Ax = (-CollectionOfiPcts(i).X + 3 * CollectionOfiPcts(i + 1).X - 3 * CollectionOfiPcts(i + 2).X + CollectionOfiPcts(i + 3).X) / 6\n                A.By = (3 * CollectionOfiPcts(i).X - 6 * CollectionOfiPcts(i + 1).X + 3 * CollectionOfiPcts(i + 2).X) / 6\n                A.Cz = (-3 * CollectionOfiPcts(i).X + 3 * CollectionOfiPcts(i + 2).X) / 6\n                A.Dt = (CollectionOfiPcts(i).X + 4 * CollectionOfiPcts(i + 1).X + CollectionOfiPcts(i + 2).X) / 6\n                B.Ax = (-CollectionOfiPcts(i).Y + 3 * CollectionOfiPcts(i + 1).Y - 3 * CollectionOfiPcts(i + 2).Y + CollectionOfiPcts(i + 3).Y) / 6\n                B.By = (3 * CollectionOfiPcts(i).Y - 6 * CollectionOfiPcts(i + 1).Y + 3 * CollectionOfiPcts(i + 2).Y) / 6\n                B.Cz = (-3 * CollectionOfiPcts(i).Y + 3 * CollectionOfiPcts(i + 2).Y) / 6\n                B.Dt = (CollectionOfiPcts(i).Y + 4 * CollectionOfiPcts(i + 1).Y + CollectionOfiPcts(i + 2).Y) / 6\n                C.Ax = (-CollectionOfiPcts(i).Z + 3 * CollectionOfiPcts(i + 1).Z - 3 * CollectionOfiPcts(i + 2).Z + CollectionOfiPcts(i + 3).Z) / 6\n                C.By = (3 * CollectionOfiPcts(i).Z - 6 * CollectionOfiPcts(i + 1).Z + 3 * CollectionOfiPcts(i + 2).Z) / 6\n                C.Cz = (-3 * CollectionOfiPcts(i).Z + 3 * CollectionOfiPcts(i + 2).Z) / 6\n                C.Dt = (CollectionOfiPcts(i).Z + 4 * CollectionOfiPcts(i + 1).Z + CollectionOfiPcts(i + 2).Z) / 6\n                For t = 0 To 1 Step Increment\n                Point2Add = New iPct\n                Point2Add.X = A.Dt + A.Cz * t + A.By * t ^ 2 + A.Ax * t ^ 3\n                    Point2Add.Y = B.Dt + B.Cz * t + B.By * t ^ 2 + B.Ax * t ^ 3\n                    Point2Add.Z = C.Dt + C.Cz * t + C.By * t ^ 2 + C.Ax * t ^ 3\n                BSpline3.Add(Point2Add)\n                Point2Add = Nothing\n            Next\n            A = Nothing\n            B = Nothing\n            C = Nothing\n        Next\n        End Function\n\n\n    'How to aproximate an curve using Quadratic Bezier curves\n\n\n    Public Function BSplineC(CollectionOfiPcts As Collection, Increment As Double) As Collection\n            Dim j As Double\n            Dim t As Double\n            Dim A As iPct : Dim B As iPct : Dim C As iPct : Dim Point2Add As iPct\n        BSplineC = New Collection\n        For j = 2 To CollectionOfiPcts.Count - 1\n            A = New iPct\n            B = New iPct\n            C = New iPct\n            A.X = (CollectionOfiPcts(j - 1).X - 2 * CollectionOfiPcts(j).X + CollectionOfiPcts(j + 1).X) / 2\n                A.Y = (-2 * CollectionOfiPcts(j - 1).X + 2 * CollectionOfiPcts(j).X) / 2\n                A.Z = (CollectionOfiPcts(j - 1).X + CollectionOfiPcts(j).X) / 2\n                B.X = (CollectionOfiPcts(j - 1).Y - 2 * CollectionOfiPcts(j).Y + CollectionOfiPcts(j + 1).Y) / 2\n                B.Y = (-2 * CollectionOfiPcts(j - 1).Y + 2 * CollectionOfiPcts(j).Y) / 2\n                B.Z = (CollectionOfiPcts(j - 1).Y + CollectionOfiPcts(j).Y) / 2\n                C.X = (CollectionOfiPcts(j - 1).Z - 2 * CollectionOfiPcts(j).Z + CollectionOfiPcts(j + 1).Z) / 2\n                C.Y = (-2 * CollectionOfiPcts(j - 1).Z + 2 * CollectionOfiPcts(j).Z) / 2\n                C.Z = (CollectionOfiPcts(j - 1).Z + CollectionOfiPcts(j).Z) / 2\n                For t = 0 To 1 Step Increment\n                Point2Add = New iPct\n                Point2Add.X = A.Z + A.Y * t + A.X * t ^ 2\n                    Point2Add.Y = B.Z + B.Y * t + B.X * t ^ 2\n                    Point2Add.Z = C.Z + C.Y * t + C.X * t ^ 2\n                BSplineC.Add(Point2Add)\n                Point2Add = Nothing\n            Next\n            A = Nothing\n            B = Nothing\n            C = Nothing\n        Next\n        End Function\n\n\n    'How to sort verctors\n\n\n    Public Sub SortVector(Array2Sort, Order As String)\n            Dim X As Integer\n            Dim Temp\n            Select Case Order\n                Case \"A\"\n                    Sorted = False\n                    Do While Not Sorted\n                        Sorted = True\n                        For X = 0 To UBound(Array2Sort) - 1\n                            If Array2Sort(X) &gt; Array2Sort(X + 1) Then\n                                Temp = Array2Sort(X + 1)\n                                Array2Sort(X + 1) = Array2Sort(X)\n                                Array2Sort(X) = Temp\n                                Sorted = False\n                            End If\n                        Next X\n                    Loop\n                Case \"D\"\n                    Sorted = False\n                    Do While Not Sorted\n                        Sorted = True\n                        For X = 0 To UBound(Array2Sort) - 1\n                            If Array2Sort(X) &lt; Array2Sort(X + 1) Then\n                                Temp = Array2Sort(X + 1)\n                                Array2Sort(X + 1) = Array2Sort(X)\n                                Array2Sort(X) = Temp\n                                Sorted = False\n                            End If\n                        Next X\n                    Loop\n                Case Else\n                MsgBox(\"Invalid parameter Value Order=A or D\")\n        End Select\n        End Sub\n\nEnd Class\n</code></pre>"},{"location":"DS-CODE/Automation/UsefulCatiaVBAFunctions/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/UsefulCatiaVBAFunctions/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/UsefulCatiaVBAFunctions/#caa","title":"CAA","text":""},{"location":"DS-CODE/Automation/checkerror/","title":"Checkerror","text":"VB.NET <pre><code>Public Shared Function checkerror(ByVal obj As Object, MyPart As Part) As Boolean\n    On Error GoTo blast\n    MyPart.UpdateObject(obj)\n    checkerror = True\n    Exit Function\nblast:\n    MyPart.Inactivate(obj)\n    checkerror = False\n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/deg_to_rad/","title":"Deg to rad","text":"<pre><code>Function deg_to_rad(InputDegrees As Double) As Double\n    deg_to_rad = InputDegrees * 3.14159265 / 180\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Automation/deg_to_rad/#python","title":"Python","text":""},{"location":"DS-CODE/Automation/deg_to_rad/#cnet","title":"C#.NET","text":""},{"location":"DS-CODE/Automation/deg_to_rad/#vbnet","title":"VB.NET","text":""},{"location":"DS-CODE/Automation/deg_to_rad/#caa","title":"CAA","text":""},{"location":"DS-CODE/CAA/Angle%20and%20radian%20conventer/","title":"Angle and radian conventer","text":"<p>\u5f27\u5ea6 = \u89d2\u5ea6 * (CATPI/180); \u89d2\u5ea6 = \u5f27\u5ea6 * (180/CATPI);</p>"},{"location":"DS-CODE/CAA/C%2B%2B%20GUID/","title":"C++ GUID","text":""},{"location":"DS-CODE/CAA/C%2B%2B%20GUID/#guid","title":"GUID","text":"<pre><code>#include \"ObjBase.h\"\n#include &lt;fstream&gt;\n#include &lt;iostream&gt;\nCATUnicodeString CopyAndGenerateGuid(CATUnicodeString isTexturePath, CATUnicodeString isCopyTexturePath)\n{\nGUID guid;\nCoCreateGuid(&amp;guid);\nchar cBuffer[64] = { 0 };\nsprintf_s(cBuffer, sizeof(cBuffer),\n\"{%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}\",\nguid.Data1, guid.Data2,\nguid.Data3, guid.Data4[0],\nguid.Data4[1], guid.Data4[2],\nguid.Data4[3], guid.Data4[4],\nguid.Data4[5], guid.Data4[6],\nguid.Data4[7]);\n\nint dIndex = isTexturePath.SearchSubString(\".\", 1, CATUnicodeString::CATSearchModeBackward);\nint dLength = isTexturePath.GetLengthInChar() - isTexturePath.SearchSubString(\".\", 1);\nCATUnicodeString sSuffix = isTexturePath.SubString(dIndex,dLength);\nCATUnicodeString sNewGuid(cBuffer);\nisCopyTexturePath += sNewGuid;\nisCopyTexturePath += sSuffix;\n\nconst char* sChar = isTexturePath.ConvertToChar();\nWCHAR buf[256];\nmemset(buf, 0, sizeof(buf));\nMultiByteToWideChar(CP_ACP, 0, sChar, strlen(sChar) + 1, buf, sizeof(buf) / sizeof(buf[0]));\n\nconst char* sNewChar = isCopyTexturePath.ConvertToChar();\nWCHAR Newbuf[256];\nmemset(Newbuf, 0, sizeof(Newbuf));\nMultiByteToWideChar(CP_ACP, 0, sNewChar, strlen(sNewChar) + 1, Newbuf, sizeof(Newbuf) / sizeof(Newbuf[0]));\n\nCopyFile(buf, Newbuf, FALSE);\nreturn isCopyTexturePath;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/C%2B%2B%E8%AE%A1%E6%97%B6%E5%99%A8/","title":"C++\u8ba1\u65f6\u5668","text":"<pre><code>{\nif (i != 1)\n{\nCOleDateTime      start_time = COleDateTime::GetCurrentTime();\nCOleDateTimeSpan  end_time = COleDateTime::GetCurrentTime() - start_time;\nwhile (end_time.GetTotalSeconds() &lt; 10)\n{\nMSG   msg;\nGetMessage(&amp;msg, NULL, 0, 0);\nTranslateMessage(&amp;msg);\nDispatchMessage(&amp;msg);\n\nend_time = COleDateTime::GetCurrentTime() - start_time;\n}\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;windows.h&gt;\n#include \"mmsystem.h\"\n#pragma comment(lib,\"Winmm.lib\")\n//\u6700\u5927\u95f4\u9694\u5341\u79d2    \nUINT wTimerRes_1ms;//\u5b9a\u4e49\u65f6\u95f4\u95f4\u9694 \nUINT wAccuracy = 1; //\u5b9a\u4e49\u5206\u8fa8\u7387 \nUINT TimerID_1ms; //\u5b9a\u4e49\u5b9a\u65f6\u5668\u53e5\u67c4\nwTimerRes_1ms = 5000;\nif ((TimerID_1ms = timeSetEvent(wTimerRes_1ms, wAccuracy, (LPTIMECALLBACK)OneMilliSecondProc, (DWORD)(1), TIME_PERIODIC)) == 0)//\u5468\u671f\u8c03\u7528\u5b9a\u65f6\u5904\u7406\u51fd\u6570\n{\nprintf(\"start!!!!!!!!!!!\\n\");\n}\nelse\n{\nprintf(\"end!!!!!!!!!!!\\n\");\n}\n\nvoid PASCAL OneMilliSecondProc(UINT wTimerID, UINT msg, DWORD dwUser, DWORD dwl, DWORD dw2)\n{\nprintf(\"11111111111\\n\");\n}\n\n//\u95f4\u9694\u65f6\u95f4\u66f4\u957f\nHANDLE  m_hTimerQueue = NULL;\nHANDLE  m_hTimerQueueTimer = NULL;\nVOID CALLBACK TimerRoutine(PVOID lpParam, BOOLEAN TimerOrWaitFired)\n{\n}\n\nif (m_hTimerQueue == NULL &amp;&amp; m_hTimerQueueTimer == NULL)\n{\nm_hTimerQueue = CreateTimerQueue();\nif (m_hTimerQueue != NULL)\n{\nif (!CreateTimerQueueTimer(&amp;m_hTimerQueueTimer, m_hTimerQueue, TimerRoutine, this, 5000, 10000, WT_EXECUTEDEFAULT))//\u4e94\u79d2\u540e\u5f00\u59cb\u8ba1\u65f6 \u95f4\u9694\u5341\u79d2\n{\nm_hTimerQueue = NULL;\nm_hTimerQueueTimer = NULL;\n}\n}\nelse\n{\nm_hTimerQueue = NULL;\nm_hTimerQueueTimer = NULL;\n}\n}               }\n</code></pre>"},{"location":"DS-CODE/CAA/CAA%20Copy/","title":"CAA Copy","text":""},{"location":"DS-CODE/CAA/CAA%20Copy/#copy","title":"copy","text":"<pre><code>CATLISTV(CATBaseUnknown_var) pInputListV;\npInputListV.Append(spiParm);\nCATLISTV(CATBaseUnknown_var) pPrintListV;\nrc = DataCommonProtocolCCPServices:: CopyAndPasteTo(pInputListV,spiParmPublisher,pPrintListV);\nif (SUCCEEDED(rc))\n{\ncout&lt;&lt;\"CopyAndPasteSpecialTo success !\"&lt;&lt;pPrintListV.Size()&lt;&lt;endl;\n}else{\ncout&lt;&lt;\"CopyAndPasteSpecialTo failed !\"&lt;&lt;endl;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/CAA%20call%20VB%20Extract/","title":"CAA call VB Extract","text":""},{"location":"DS-CODE/CAA/CAA%20call%20VB%20Extract/#vb","title":"VB\u63d0\u53d6","text":"<pre><code>HRESULT CATExtractBoundaryCmd::ExtractVBFeature(CATIGSMUseFactory_var ispiGSMUseFactory, int idDimension, CATListValCATIMmiMechanicalFeature_var &amp; ospAllExtractFeatureListV)\n{\nHRESULT rc = E_FAIL;\n\nCATLISTP(CATCell) pAllCellListP;\nCATBody_var spBody = NULL_var;\nCATIMmiUseBRepDecodeServices_var spiMmiUseBRepDecodeServices = NULL_var;\nif (SUCCEEDED(CATMmiUseServicesFactory::CreateBRepDecodeServices(spiMmiUseBRepDecodeServices))\n&amp;&amp; SUCCEEDED(CAAGetBody(_spFeature, spBody)) &amp;&amp; spBody != NULL_var)\n{\nCATIMmiMechanicalFeature_var spiPart = NULL_var;\n((CATIMmiMechanicalFeature_var)_spFeature)-&gt;GetMechanicalPart(spiPart);\nCATIAPart_var spiAPart = spiPart;\nif (spiAPart != NULL_var)\n{\nspBody-&gt;GetAllCells(pAllCellListP, idDimension);\ncout &lt;&lt; \"Cells : \" &lt;&lt; pAllCellListP.Size() &lt;&lt; endl;\n\nCATLISTP(CATCell) pAllCellListP2;\nspBody-&gt;GetAllCells(pAllCellListP2, 3);\ncout &lt;&lt; \"Cells 2 : \" &lt;&lt; pAllCellListP2.Size() &lt;&lt; endl;\n\nCATIAlias_var spiAlias = _spFeature;\nCATUnicodeString sFeatureName = spiAlias-&gt;GetAlias();\n\n/*      int dVolumn = pAllCellListP2.Size();\n            if (dVolumn &gt;= 2)\n            {\n                for (int j = 1; j &lt;= dVolumn; j++)\n                {\n                    CATLISTP(CATCell) pAllCellListP;\n                    pAllCellListP2[j]-&gt;GetAllCells(pAllCellListP, idDimension);\n                    if (pAllCellListP.Size() &gt;= 1)\n                    {\n                        for (int i = 1; i &lt;= pAllCellListP.Size(); i++)\n                        {\n                            //\n                        }\n                    }\n                }\n            }\n            else {*/\nif (pAllCellListP.Size() &gt;= 1)\n{\nfor (int i = 1; i &lt;= pAllCellListP.Size(); i++)\n{\nCATLISTP(CATCell) pAllCellListP3;\npAllCellListP[i]-&gt;GetAllCells(pAllCellListP3, idDimension);\ncout &lt;&lt; \"Cells 3 : \" &lt;&lt; pAllCellListP3.Size() &lt;&lt; endl;\n\nCATUnicodeString sNum;\nsNum.BuildFromNum(i);\nif (idDimension == 2)\n{\nCATUnicodeString sStr = \"RSur:(Face:(Brp:(\" + sFeatureName + \";%\" + sNum + \");None:();Cf11:());WithPermanentBody;WithoutBuildError;WithSelectingFeatureSupport;MFBRepVersion_CXR29)\";\nCATBSTR sBSTR;\nsStr.ConvertToBSTR(&amp;sBSTR);\n\nCATIABase* piBase = NULL;\n_spFeature-&gt;QueryInterface(IID_CATIABase, (void**)&amp;piBase);\nCATIAReference* piARef = NULL;\nspiAPart-&gt;CreateReferenceFromBRepName(sBSTR, piBase, piARef);\n\nCATBaseUnknown_var spFeature = piARef;\nCATIGSMUseExtractSolide_var spiExtractSolide = ispiGSMUseFactory-&gt;CreateExtractSolide(spFeature);\nif (spiExtractSolide != NULL_var)// &amp;&amp; SUCCEEDED(CAAUpdateFeature(spiExtractSolide)))\n{\nspiExtractSolide-&gt;SetIsFederated(FALSE);\nspiExtractSolide-&gt;SetExtractPropagType(ExtractSolide_NoPropag);\nspiExtractSolide-&gt;SetComplementaryExtract(FALSE);\nspiExtractSolide-&gt;SetSupport(_spFeature);\n//  CAAUpdateFeature(spiExtractSolide);\nospAllExtractFeatureListV.Append(spiExtractSolide);\n}\n}\n}\n}\n//  }\n}\n}\n\n\n\nif (ospAllExtractFeatureListV.Size() &gt; 0)//== pAllCellListP.Size())\n{\nrc = S_OK;\n}\n\nif (ospAllExtractFeatureListV.Size() != pAllCellListP.Size())\n{\ncout &lt;&lt; \"Error : \u67d0\u4e9b\u5143\u7d20\u672a\u63d0\u53d6\u6210\u529f \uff01\" &lt;&lt; endl;\n//      rc = E_FAIL;\n}\n//  }\nreturn rc;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/CAA%E4%B8%AD%E8%A7%86%E5%9B%BE%E7%9A%84%E5%A4%84%E7%90%86/","title":"CAA\u4e2d\u89c6\u56fe\u7684\u5904\u7406","text":""},{"location":"DS-CODE/CAA/CAA%E4%B8%AD%E8%A7%86%E5%9B%BE%E7%9A%84%E5%A4%84%E7%90%86/#caa","title":"CAA\u4e2d\u89c6\u56fe\u7684\u5904\u7406","text":"<p>CAA\u4e2d\u89c6\u56fe\u7684\u5904\u7406\u5206\u4e24\u79cd\u65b9\u5f0f\uff1a</p> <p>1\u3001CATI3DCamera \u4fd7\u79f0\u7167\u76f8\u673a\uff0c\u6b64\u65b9\u6cd5\u8fdb\u884c\u89c6\u56fe\u8f6c\u6362\u65f6\uff0c\u9644\u5e26\u65cb\u8f6c\u52a8\u4f5c\uff1b</p> <p>2\u3001CAT3DViewpoint 3D\u89c6\u89d2\uff0c\u6b64\u65b9\u6cd5\u8fdb\u884c\u89c6\u56fe\u8f6c\u6362\u65f6\uff0c\u65e0\u8f6c\u65cb\u8f6c\u52a8\u4f5c\u3002  \u5176\u4e2d\u9700\u6ce8\u610f\uff1a</p> <pre><code>vp3d.SetTarget(fOriginalTarget);\nvp3d.SetOrigin(fOriginalOrigin);\nvp3d.SetSightDirection(fOriginalSightDirection);\nvp3d.SetUpDirection(fOriginalUpDirection);\n\n\u5176\u4e2dSetTarget\u4e0eSetOrigin\u987a\u5e8f\u7684\u6539\u53d8\u4f1a\u5bfc\u81f4\u8f6c\u6362\u540e\u89c6\u89d2\u7684\u4f4d\u7f6e\u6709\u6240\u504f\u5dee\u3002\n\n\u5168\u90e8\u9002\u5e94\u529f\u80fd\uff1a\n\n//\u83b7\u5f97 main 3D viewpoint:\nCAT3DViewpoint &amp;vp3d =pViewer-&gt;GetMain3DViewpoint();\n\n//To reframe the view, we also need the representation bounding volume.\nCAT3DBagRep * rootBag = (CAT3DBagRep *)(vp3d.GetBag());\nif ( NULL == rootBag )\n{\nreturn TRUE;\n}\n//If the bounding element is invalid, let's force its calculation:\nif(rootBag-&gt;IsInvalid())\nrootBag-&gt;ComputeBoundingElement(1);\n\n//Retrieving of the bounding element:\nconst CAT3DBoundingSphere &amp;bs3d = rootBag-&gt;GetBoundingElement();\n\n//Retrieving of the bounding element radius:\nfloat radius = bs3d.GetRadius();\n\nif(radius == 0.f)\nradius = bs3d.GetRadiusMM();\n\ndouble dbAngle = vp3d.GetAngle();\ndouble dbRAngle = CATDegreeToRadian*dbAngle;\ndouble focus = 1.05f * (radius/tan(dbRAngle));\n\n\nfloat fzoom = vp3d.GetZoom();\nCATMathPointf TargetPosition;\nif (1 == _found)\n{\nTargetPosition = Origin;\n}\nelse if (0 == _found)\n{\nTargetPosition = bs3d.GetCenter();\n}\n\nCATMathPointf OriginPosition = TargetPosition- SightDir*(float)focus;\n\nvp3d.SetOrigin(OriginPosition);\nvp3d.SetSightDirection(SightDir);\nvp3d.SetTarget(TargetPosition);\nvp3d.SetUpDirection(upDir);\n</code></pre> <p>\u6b64\u529f\u80fd\u662f\u83b7\u53d6\u89c6\u56fe\u4e2d\u6240\u6709\u7279\u5f81\u7684Rep\uff0c\u627e\u53d6\u4e2d\u5fc3\uff0c\u6839\u636eRep\u7684\u663e\u793a\u5927\u5c0f\uff0c\u786e\u5b9a\u89c6\u89d2\u53c2\u6570\uff0c\u8f6c\u6362\u89c6\u89d2\u3002</p>"},{"location":"DS-CODE/CAA/CATAcquisitionFilter%E4%BB%A3%E7%90%86%E7%AD%9B%E9%80%89/","title":"CATAcquisitionFilter\u4ee3\u7406\u7b5b\u9009","text":"<pre><code>CATAcquisitionFilter* pFilter = Filter((FilterMethod) &amp; CATDRWLinearDimensionCmd::FilterCheckInterface,(void*)NULL);\n_pUDFAgent-&gt;SetFilter(pFilter);\n\nCATBoolean CATDRWLinearDimensionCmd::FilterCheckInterface( CATDialogAgent * iAgent, void * iUsefulData)\n{\ncout&lt;&lt;\"FilterCheckInterface()\"&lt;&lt;endl;\nCATBoolean bBool = FALSE;\nif ( NULL != iAgent )\n{\nCATSO* pObjSO = ((CATPathElementAgent *)iAgent)-&gt;GetListOfValues(); CATPathElement *pElemPath = NULL;\nif (NULL != pObjSO)  {\npObjSO-&gt;InitElementList();\nwhile (NULL != (pElemPath = (CATPathElement*)pObjSO-&gt;NextElement())  )\n{\nCATIUdfFeatureInstance* piElementRef = (CATIUdfFeatureInstance*)pElemPath-&gt;FindElement(IID_CATIUdfFeatureInstance);\n\nif ( NULL != piElementRef )\n{\nCATIGSMTool_var spiGSMTool = piElementRef;\nCATIMmiUseMechanicalTool_var spiTool = piElementRef;\nCATIMmiGeometricalSet_var spiSet = piElementRef;\nCATPoint_var spPoint = piElementRef;\nCATSurface_var spSurface = piElementRef;\nCATCurve_var spCurve = piElementRef;\nCATIMf3DAxisSystem_var spiAxis = piElementRef;\nif (spiSet != NULL_var || spiTool != NULL_var || spiGSMTool != NULL_var \\\n                            || spPoint != NULL_var || spSurface != NULL_var || spCurve != NULL_var || spiAxis != NULL_var)\n{\ncout&lt;&lt;\"FilterCheckInterface() FALSE\"&lt;&lt;endl;\n}else{\ncout&lt;&lt;\"FilterCheckInterface() TRUE\"&lt;&lt;endl;\nbBool = TRUE;\n}\npiElementRef-&gt;Release();piElementRef = NULL;\n}else\ncout&lt;&lt;\"pSelectedElt NULL \"&lt;&lt;endl;\n}\n}\n}else\ncout&lt;&lt;\"iAgent NULL \"&lt;&lt;endl;\n\nreturn bBool;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/Call%20exe/","title":"Call exe","text":"<pre><code>if (WinExec(\"C:\\\\Users\\\\TL\\\\Desktop\\\\KPRun_ch.exe\", SW_HIDE/*SW_SHOWMINIMIZED*/) &gt; 31)//\u8c03\u7528\u6279\u5904\u7406\u7a0b\u5e8f\n{\ncout &lt;&lt; \"WinExec \u8c03\u7528\u6210\u529f\" &lt;&lt; endl;\n}\nelse {\nCAAPromptMsgBox(\"Error : WinExec is failed !\");\n}\n</code></pre>"},{"location":"DS-CODE/CAA/Create%20knowledge%20engineering%20inspection%20specifications%20and%20parameter%20sets%20under%20products/","title":"Create knowledge engineering inspection specifications and parameter sets under products","text":""},{"location":"DS-CODE/CAA/Create%20knowledge%20engineering%20inspection%20specifications%20and%20parameter%20sets%20under%20products/#_1","title":"\u5728\u4ea7\u54c1\u4e0b\u521b\u5efa\u77e5\u8bc6\u5de5\u7a0b\u68c0\u67e5\u89c4\u8303\u548c\u53c2\u6570\u96c6","text":"<pre><code>CATBaseUnknown* pr = NULL;\nCAAGetRootProduct(&amp;pr);\nCATIParmPublisher_var spiPartParm = pr;\nCATIParmPublisher_var spiParameterSet = NULL_var;\nCATIParmPublisher_var spiRelationSet = NULL_var;\n\nCATOmbLifeCycleRootsBag mBag;\nmBag.InsertRoot(pr);\nCATIKweModelServices_var spiKweModelServices = CATCkeGlobalFunctions::GetModelServices();\nspiParameterSet = spiKweModelServices-&gt;GetCurrentSetWithRepRef(CATIKweModelServices::Parameter, spiPartParm, 1, (void*)&amp;mBag);\nspiRelationSet = spiKweModelServices-&gt;GetCurrentSetWithRepRef(CATIKweModelServices::Relation, spiPartParm, 1, (void*)&amp;mBag);\n</code></pre>"},{"location":"DS-CODE/CAA/Create%20law/","title":"Create law","text":""},{"location":"DS-CODE/CAA/Create%20law/#_1","title":"\u521b\u5efa\u6cd5\u5219","text":"<pre><code>CATIGSMUseLawDistProj_var spiLaw = spiGSMUseFactory-&gt;CreateLawDistProj(spiSketchH, spiSketch);\nif (spiLaw != NULL_var)\n{\nCAAUpdateFeature(spiLaw);\nCATBoolean bBool = TRUE;\nif (SUCCEEDED(spiLaw-&gt;SetAppliedUnitSymbol(\"%_angle\")) &amp;&amp; SUCCEEDED(spiLaw-&gt;SetMeasureUnitSymbol(\"m\")) &amp;&amp; SUCCEEDED(spiLaw-&gt;SetScalingValue(1)) &amp;&amp; SUCCEEDED(spiLaw-&gt;SetPositiveDirectionOrientation(1)) &amp;&amp; SUCCEEDED(spiLaw-&gt;SetPlaneNormal(CATMathVector::CATMathVector(0, 1, 0))) &amp;&amp; SUCCEEDED(CAAUpdateFeature(spiLaw)))\n{\n//SetPlaneNormal  \u6307\u7684\u662f\u8349\u56fe\u6240\u5728\u5e73\u9762\u7684\u6cd5\u7ebf\u65b9\u5411  \u5373  \u8349\u56fe\u652f\u6301\u9762\u4e3aXZ\u5e73\u9762\u65f6  \u6cd5\u7ebf\u65b9\u5411\u4e3a0 1 0\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/Create%20sketch/","title":"Create sketch","text":""},{"location":"DS-CODE/CAA/Create%20sketch/#_1","title":"\u521b\u5efa\u8349\u56fe","text":"<pre><code>//\u521b\u5efa\u8349\u56fe\nCATInit *piInitOnDoc = NULL;\nrc = pDoc -&gt; QueryInterface (IID_CATInit,(void**) &amp;piInitOnDoc);\nif(SUCCEEDED(rc) &amp;&amp; NULL != piInitOnDoc)\n{\n//\u83b7\u53d6Container\nconst CATIdent idCATIContainer = \"CATIPrtContainer\";\nCATIPrtContainer *piRootContainer = NULL;\npiRootContainer = (CATIPrtContainer*)\npiInitOnDoc -&gt; GetRootContainer(idCATIContainer);\nif(NULL != piRootContainer)\n{\nCATIPrtPart_var spPart = piRootContainer-&gt;GetPart();\nCATIBasicTool_var spTool= spPart-&gt;GetCurrentTool();\n\nCATIDescendants_var spDesTool = spPart;\nCATListValCATISpecObject_var  oLst ;\nspDesTool-&gt;GetAllChildren(\"CATIMechanicalTool\",oLst);\nCATISpecObject_var spMainBody = oLst[1];\nCATIAlias_var spAlias = spMainBody;\ncout &lt;&lt; spAlias-&gt;GetAlias() &lt;&lt; endl &lt;&lt; flush;\n\nCATISketchFactory_var spSketchFactory(piRootContainer);\nif(NULL_var != spSketchFactory)\n{\nCATISpecObject_var spSketchSpec=spSketchFactory-&gt;CreateSketch();\nCATISketch_var spSketch=spSketchSpec;\nif(NULL_var != spSketch)\n{\nspSketch-&gt;OpenEdition();\nCATI2DWFFactory_var sketch2DFactory(spSketch);\nif(NULL_var != sketch2DFactory)\n{\ndouble Origin[2]={0.,0.};\ndouble Radius=10;\nCATISpecObject_var spSpecCircle=\nsketch2DFactory-&gt;CreateCircle(Origin,Radius);\nif(NULL_var != spSpecCircle)\n{\ncout&lt;&lt;\"\u8349\u56fe\u4e2d\u521b\u5efa\u5706\u6210\u529f\uff01\"&lt;&lt;endl;    }\nspSketch-&gt;CloseEdition();\n\nspPart-&gt;SetCurrentFeature(spMainBody);\n\n\n//\u521b\u5efa\u51f8\u53f0\nCATIPrtFactory * piPrtFact=NULL;\nrc=piRootContainer-&gt;QueryInterface(IID_CATIPrtFactory,\n(void **)&amp;piPrtFact);\nif(SUCCEEDED(rc) &amp;&amp; NULL != piPrtFact)\n{\nCATISpecObject_var spPad=piPrtFact-&gt;CreatePad(spSketch);\nif(NULL_var != spPad)\n{\nCATIPad_var spPadPad=spPad;\nif(NULL_var != spPadPad)\n{\nspPadPad-&gt;ModifyEndType(catOffsetLimit);\nspPadPad-&gt;ModifyEndOffset(20.);\n}\n\nspPad-&gt;Update();\ncout&lt;&lt;\"\u521b\u5efa\u51f8\u53f0\u6210\u529f\uff01\"&lt;&lt;endl;\n}\npiPrtFact-&gt;Release();\npiPrtFact=NULL;\n\nCATISpecObject_var spPart = piRootContainer-&gt;GetPart();\nspPart-&gt;Update();\n}\n}\n}\n}\n\nCATISpecObject_var spParentForTool = spMainBody;\nCATIMechanicalRootFactory_var spMechRoot = piRootContainer;\nCATISpecObject_var spSpecGS1 = NULL_var;\nrc = spMechRoot -&gt; CreateGeometricalSet(\"\u65b0\u589e\u51e0\u4f55\u56fe\u5f62\u96c61\",spParentForTool,spSpecGS1);\n}\n\npiInitOnDoc-&gt;Release();\npiInitOnDoc=NULL;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/CreateBridgeSkeleton/","title":"Create Bridge Skeleton","text":""},{"location":"DS-CODE/CAA/Custom%20part%20ID/","title":"Custom part ID","text":""},{"location":"DS-CODE/CAA/Custom%20part%20ID/#id","title":"\u81ea\u5b9a\u4e49\u96f6\u4ef6ID","text":"<pre><code>int main(int iArgc, char *iArgv[])\n{\n\nint RefPos=0, RepRefPos=0;\n\nHRESULT rc = E_FAIL;\n//---------------------\n// CAAPstCreate3DPart PLM1 \n//https://r2021x.mydomain.com:443/3dspace M0QzOTFENDczRTlFNEI4REJGMUE2QjlBQUQyNUIwQjV8YWRtaW5fcGxhdGZvcm18YWRtaW5fcGxhdGZvcm18fHwwfA== VPMReference\n//---------------------\nCATUnicodeString Repository = \"PLM1\";\n//  CATUnicodeString ServerName = \"3dexpv6r2019x.3ds.com\";\nCATUnicodeString ServerName = \"r2021x.mydomain.com\";\nCATUnicodeString ServerPort = \"443\";\nCATUnicodeString ServerRootURI = \"3dspace\";\nCATUnicodeString LoginTicket = \"M0QzOTFENDczRTlFNEI4REJGMUE2QjlBQUQyNUIwQjV8YWRtaW5fcGxhdGZvcm18YWRtaW5fcGxhdGZvcm18fHwwfA==\";// \"NUEzOEEzRjNEMjI0NDVBMUI4MjE4QkExNjREQTA2QUR8YWRtaW5fcGxhdGZvcm18YWRtaW5fcGxhdGZvcm18fHwwfA==\";\n//------------------------------------------------------------------\n//2 - Sets the Connection Parameters\n//------------------------------------------------------------------\nrc = Init3DEXPERIENCESession(Repository, ServerName, ServerPort, ServerRootURI, LoginTicket);\n\nif (SUCCEEDED(rc))\n{\nCATString ConnectedUser, OrganisationId, ProjectId, RoleId;\nrc = CATAdpPublicSecurityServices::GetSecurityParameters(Repository, ConnectedUser, OrganisationId, ProjectId, RoleId);\nif (SUCCEEDED(rc))\n{\ncout &lt;&lt; endl &lt;&lt; \"Connection succeeded\" &lt;&lt; endl;\ncout &lt;&lt; \"Tips:\" &lt;&lt; ConnectedUser &lt;&lt; \"   (\" &lt;&lt; RoleId &lt;&lt; \"   \" &lt;&lt; OrganisationId &lt;&lt; \"  \" &lt;&lt; ProjectId &lt;&lt; \") is connected\" &lt;&lt; endl &lt;&lt; endl;\n}\n}\nelse\ncout &lt;&lt; endl &lt;&lt; \"Connection failed\" &lt;&lt; endl &lt;&lt; endl;\n\n//---------------------------------------------------------------------\n// 3- Retrieves the interface pointer on the 3DPart Factory\n//---------------------------------------------------------------------\nCATIPrd3DPartReferenceFactory *pIPLM3DPartFactory = NULL ;\nrc  =  CATPrdFactory::CreatePrdFactory(IID_CATIPrd3DPartReferenceFactory,\n(void  **)&amp;pIPLM3DPartFactory);\nif ( FAILED(rc) || ( NULL == pIPLM3DPartFactory))  return 1;  cout &lt;&lt;\"   A Pointer to the 3D Part factory has been found\" &lt;&lt; endl;\n\n//---------------------------------------------------------------------\n// 4- Creates the 3D Part \n//---------------------------------------------------------------------\n// Retrieve the 3DPart Type\nCATUnicodeString s3DPartRefType = \"VPMReference\";\n\n\nCATIType_var spRefType;\nrc = CATCkePLMNavPublicServices::RetrieveKnowledgeType( s3DPartRefType, spRefType );\n// Maybe it's a customer type \nif( FAILED( rc ) || ! spRefType )\nrc  = CATCkePLMNavSpecializationAccessPublicServices::RetrieveSpecializationType( s3DPartRefType, spRefType );\n\nif( FAILED( rc ) || ! spRefType ) {\ncout &lt;&lt; \" The type \" &lt;&lt; s3DPartRefType.ConvertToChar() &lt;&lt; \" doesn't exist\" &lt;&lt; endl;\nreturn 1;\n}\n\nCATIPLMProducts * pCreated3DPart  = NULL ;\nCATLISTV(CATICkeParm_var) EmptyAttrListForRef ;\nCATLISTV(CATICkeParm_var) EmptyAttrListForRepRef ;\nrc = pIPLM3DPartFactory-&gt;Create3DPart( NULL, spRefType, EmptyAttrListForRef, EmptyAttrListForRepRef, pCreated3DPart );\nif (FAILED(rc) || ( NULL == pCreated3DPart))  return 1;  cout &lt;&lt;\"   The PLM 3D Part has been created \" &lt;&lt; endl;\n\n//----------------------------------------------------------\n// 5- Manages 3DPart Lifecycle\n//---------------------------------------------------------\nCATOmbLifeCycleRootsBag Bag;\nrc = Bag.InsertRoot(pCreated3DPart);\nif (FAILED(rc))   return 1;\n\ncout &lt;&lt; \"   Success in setting the created 3DPart in the bag\" &lt;&lt; endl &lt;&lt; endl;\n\nCATICkeObject_var spInstanciated = pCreated3DPart;\nif (!!spInstanciated)\n{\nrc = CATCkeObjectAttrWriteServices::SetValueWithString(spInstanciated, \"PLM_ExternalID\", \"ABC-123456\");//Moify Name\nif (FAILED(rc)) {\ncout &lt;&lt; \"Error : Moify Name FAILED\" &lt;&lt; endl;\nreturn rc;\n}\n\nrc = CATCkeObjectAttrWriteServices::SetValueWithString(spInstanciated, \"V_Name\", \"\u54c8\u54c8\u54c8\");//Moify Name\nif (FAILED(rc)) {\ncout &lt;&lt; \"Error : Moify Name FAILED\" &lt;&lt; endl;\nreturn rc;\n}\n}\n\n\npIPLM3DPartFactory-&gt;Release(); pIPLM3DPartFactory = NULL ;\n\n//------------------------------------------------------------------\n// 8- Saves the session\n//------------------------------------------------------------------\nCATAdpSaver saver;\nrc = saver.Save();\nif (FAILED(rc) ) return 1;\n\ncout &lt;&lt;\"   Session saved successfully \" &lt;&lt; endl;\n\nrc = Bag.RemoveAll();\nif (FAILED(rc))   return 1;\n\n//------------------------------------------------------------------\n// 9- Closes the session\n//------------------------------------------------------------------\nif (SUCCEEDED(CATPLMSessionServices::ClosePLMSession()))\ncout &lt;&lt; \"-&gt; PLM session closed\" &lt;&lt; endl &lt;&lt; endl &lt;&lt; endl;\nelse\n{\ncout &lt;&lt; \"-&gt; ERROR in closing PLM session\" &lt;&lt; endl &lt;&lt; endl;\nif (SUCCEEDED(rc))  rc = E_FAIL;\n}\n\ncout &lt;&lt;\"   Session closed successfully \" &lt;&lt; endl;\n\ncout &lt;&lt; endl &lt;&lt; \"The CAAPstCreate3DPart main program ends ....\"&lt;&lt; endl &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/Dlgmultilist%20set%20header%20resource/","title":"Dlgmultilist set header resource","text":"<pre><code>CATString sCatalog = \"CATCivilPrdRenameCmd\";\nCATUnicodeString sMessageNoSelection = CATMsgCatalog::BuildMessage(sCatalog, \"MessageNoSelection.Title\", NULL, 0, \"No Selection\");\n</code></pre>"},{"location":"DS-CODE/CAA/Extract%20BRep/","title":"Extract BRep","text":"<pre><code>{\n//CATMmrRelimited \u8003\u8651BRep\u7684\u9650\u5236\uff0c\u9650\u5236\u8303\u56f4\n//CATMmrFunctional \u521d\u59cb\u5f62\u72b6\uff0c\u6bd4\u5982\u5982\u679c\u8f93\u5165\u7684BRep\u662f\u4e00\u4e2a\u5206\u5272\uff0c\u5219\u7279\u5f81\u5316\u540e\u5f97\u5230\u7684\u662f\u5206\u9694\u7684\u7236\u7ea7\uff0c\u800c\u4e0d\u662f\u5206\u5272\u4e4b\u540e\u7684\u7ed3\u679c\n\nCATBody_var spCurveBody = NULL_var;\nrc = CAAGetBody(_spCurve, spCurveBody);\nif (SUCCEEDED(rc))\n{\nCATLISTP(CATCell) pAllCellListP;\nspCurveBody-&gt;GetAllCells(pAllCellListP, 1);\ncout &lt;&lt; \"Cells : \" &lt;&lt; pAllCellListP.Size() &lt;&lt; endl;\nif (pAllCellListP.Size() &gt;= 1)\n{\nfor (int i = 1; i &lt;= pAllCellListP.Size(); i++)\n{\nCATBaseUnknown_var spppp = NULL_var; CATIMmiUseBRepAccess_var spiMmiUseBRepAccess1 = NULL_var;\nCATIMmiUseBRepDecodeServices_var spiMmiUseBRepDecodeServices = NULL_var;\nCATMmiUseServicesFactory::CreateBRepDecodeServices(spiMmiUseBRepDecodeServices); //          spiMmiUseBRepDecodeServices-&gt;DecodeCellInBody(spiMmiUseBRepAccess1, pAllCellListP[i], spCurveBody);\nspiMmiUseBRepDecodeServices-&gt;DecodeExtremity(spiMmiUseBRepAccess1, pAllCellListP[i], (CATIMmiUseGeometricalElement_var)_spCurve);//, CATMfBRepDecodeType::MfDecodeWire);\n\nCATIMmiUseFeaturize_var spiFeaturize = spiMmiUseBRepAccess1;\nCATIMmiUseMfBRep_var spiBRep = NULL_var;\nif (SUCCEEDED(spiFeaturize-&gt;Featurize(spiBRep, MfPermanentBody | MfLastFeatureSupport | MfRelimitedFeaturization, CATMmrFunctional)))\n{\nspppp = spiBRep;\nCATIAlias_var sA = spppp;\ncout &lt;&lt; \"ppppppppppppppppppppppp =========== \" &lt;&lt; sA-&gt;GetAlias() &lt;&lt; endl &lt;&lt; endl;\n\nCATIGSMUseExtractSolide_var spiExtractSolide = spiGSMUseFactory-&gt;CreateExtractSolide(spppp);\nif (spiExtractSolide != NULL_var)//&amp;&amp; SUCCEEDED(CAAUpdateFeature(spiExtractSolide)))\n{\nCAASetInsert(spiExtractSolide, spiBasicTool);\n}\nelse\ncout &lt;&lt; \"Error : CreateExtractSolide is Failed !\" &lt;&lt; endl &lt;&lt; endl;\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/Find%20the%20extreme%20point%20of%20the%20curve/","title":"Find the extreme point of the curve","text":""},{"location":"DS-CODE/CAA/Find%20the%20extreme%20point%20of%20the%20curve/#_1","title":"\u6c42\u53d6\u66f2\u7ebf\u6781\u503c\u70b9","text":"<pre><code>CATIMmiPrtContainer_var spiPrtContainer = NULL_var;\nif (SUCCEEDED(CAAGetPrtContainerFromFeature(spFeature,spiPrtContainer)))\n{\nCATBody_var spBody = NULL_var;\nCAAGetBody(spFeature, spBody);\nCATGeoFactory_var spGeoFactory = spBody-&gt;GetContainer();\nif (spGeoFactory != NULL_var)\n{\nCATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration();\nCATTopData topdata(pConfig, NULL);\nCATICGMTopBodyExtremum* piCGMTopBodyExtremum = ::CATCGMCreateDirNewBodyExtremum(\nspGeoFactory, &amp;topdata, spBody, CATMinMax::CATMaximum,\nCATMathVector::CATMathVector(1, 0, 1), CATMathPoint::CATMathPoint(0,0,0));\nif (piCGMTopBodyExtremum)\n{\npiCGMTopBodyExtremum-&gt;Run();\nCATBody_var spBody = piCGMTopBodyExtremum-&gt;GetResult();\nif (spBody != NULL_var)\n{\nCATIMmiUseDatumFactory_var spDatumFac = spiPrtContainer;\nCATIMmiMechanicalFeature* pM = NULL;\nspDatumFac-&gt;InstanciateDatum(spBody, pM);\n\nCATIMmiMechanicalFeature_var spF = spFeature;\nspF-&gt;GetMechanicalFather(spF);\nCAASetInsert(pM, spF);\n}\n}\n/*\n\n            CATICGMTopBodyExtremum * CATCGMCreateDirNewBodyExtremum(    CATGeoFactory*  iFactory,\n            CATTopData*     iTopData,\n            CATBody*    iBody,\n            CATMinMax   iTypeOfExtremum,\n            const CATMathVector&amp;    iDirection,\n            const CATMathPoint&amp;     iPtOrig)\n        */\n}\n//CATGeoFactory_var spGeoFactory = CATCreateCGMContainer();\n//CATCloseCGMContainer (_piGeomFactory);\n}\n</code></pre>"},{"location":"DS-CODE/CAA/GSMFactory/","title":"GSMFactory","text":"<p>CreateLoft\uff1b//\u591a\u622a\u9762\u66f2\u9762 CreateAssemble //\u63a5\u5408</p>"},{"location":"DS-CODE/CAA/Get%20Material/","title":"Get Material","text":"<pre><code>{\nCATAdpOpenParameters params_Nav(CATAdpExpandParameters::Navigation);\nparams_Nav.SetMaterialLoadingMode(TRUE);//\u6253\u5f00\u96f6\u4ef6\u65f6\u52a0\u8f7d\u6750\u8d28\n\nCATIPLMNavReference  *piNavRefOnComp = NULL;\nCATOmbLifeCycleRootsBag LifeCycleRootsBag;\nHRESULT hr = CAAOpenPLMComponent(PLMType.ConvertToChar(), PartName, PartVersion, IID_CATIPLMNavReference,(void**)&amp;piNavRefOnComp, LifeCycleRootsBag, TRUE);\nif (SUCCEEDED(hr))\n{\nCATBaseUnknown* ppRef = NULL;\nCATIPrdObject * piRootPrdObject = NULL;\nif (SUCCEEDED(piNavRefOnComp-&gt;QueryInterface(IID_CATIPrdObject, (void **)&amp;piRootPrdObject)))\n{\npiRootPrdObject-&gt;GetReferenceObject(ppRef, IID_CATBaseUnknown);\npiRootPrdObject-&gt;Release();\npiRootPrdObject = NULL;\n}\n\nCATLISTP(CATIPLMComponent) pathOfInstances;\nCATIPLMComponent * piRepInstance = NULL;\nCATBaseUnknown* pTarget = ppRef;\nCATOmbObjectInContext* pObjectInContext = NULL;\nHRESULT hr = CATOmbObjectInContext::CreateObjectInContext(pathOfInstances, piRepInstance, pTarget, pObjectInContext);\nif (SUCCEEDED(hr))\n{\nCATBaseUnknown* pRef1 = NULL;\nCATMatAppliedAccess::GetMaterialCore(pObjectInContext, pRef1, CATIMaterialReference::ClassName());\nif (pRef1 != NULL)\n{\nCATIAlias_var spiAlias = pRef1;\ncout &lt;&lt; \"------------&gt;\" &lt;&lt; spiAlias-&gt;GetAlias() &lt;&lt; endl;\n}\nelse\ncout &lt;&lt; \"Error : GetMaterialCore is Failed \" &lt;&lt; endl;\n\nCATListPtrCATBaseUnknown p1;\nCATMatAppliedAccess::GetAllMaterialCovering(pObjectInContext, p1, CATIMaterialReference::ClassName());\nif (p1.Size() &gt; 0)\n{\nCATIAlias_var spiAlias = p1[1];\ncout &lt;&lt; \"---GetAllMaterialCovering---------&gt;\" &lt;&lt; spiAlias-&gt;GetAlias() &lt;&lt; endl;\n}\nelse\ncout &lt;&lt; \"Error : GetAllMaterialCovering is Failed \" &lt;&lt; endl;\n\n}\nelse\ncout &lt;&lt; \"Error : CreateObjectInContext is Failed \" &lt;&lt; endl;\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/Get%20radius%20of%20curvature/","title":"Get radius of curvature","text":""},{"location":"DS-CODE/CAA/Get%20radius%20of%20curvature/#_1","title":"\u83b7\u53d6\u66f2\u7387\u534a\u5f84","text":"<p>//-----------------------------------------------------------------------------  //\u83b7\u53d6\u66f2\u7387\u534a\u5f84  //-----------------------------------------------------------------------------  HRESULT NIOEStampingMRCheckMaxSurfaceCurvature3DGeovVisu::GetSurfaceCurvature(CATSurface * ipSurface, CATMathPoint iMathCenterPt, double &amp;odCurt)  {      if (!ipSurface)      {          return E_FAIL;      } </p> <pre><code>HRESULT hr = S_OK; \nCATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration(); \nCATICGMDistanceMinPtSur * pMinDisPtSur = ::CATCGMCreateDistanceMin(ipSurface-&gt;GetContainer(), pConfig, iMathCenterPt, ipSurface); \nif (!pMinDisPtSur); \nCATSurParam surParam; \nCATICGMLocalAnalysis2D * p2DAns = ::CATCGMCreateLocalAnalysis(pConfig, ipSurface, surParam); \nif (!!p2DAns) \n{ \n    /*double dMin, dMax; \n    CATMathVector2D mathMin2D, mathMax2D; \n    CATMathVector mathMin, mathMax; \n    p2DAns-&gt;GetMinMaxCurvaturesAndDirections(dMin, dMax, mathMin2D, mathMax2D, mathMin, mathMax); \n    odCurt = max(fabs(dMin), fabs(dMax)); \n    omathVec = fabs(dMin) &lt; fabs(dMax) ? mathMax : mathMin;*/ \n    odCurt = 1./p2DAns-&gt;GetMeanCurvature(); \n}\n\nreturn hr;\n</code></pre> <p>} //PS :\u66f2\u7387\u534a\u5f84 = \u66f2\u7387\u7684\u5012\u6570\u3002</p>"},{"location":"DS-CODE/CAA/Get%20the%20edge%20line%2C%20construct%20the%20curve%20and%20combine%20it/","title":"Get the edge line, construct the curve and combine it","text":""},{"location":"DS-CODE/CAA/Get%20the%20edge%20line%2C%20construct%20the%20curve%20and%20combine%20it/#get-the-edge-line-construct-the-curve-and-combine-it","title":"Get the edge line, construct the curve and combine it","text":"<pre><code>CATListPtrCATCell pCellListP;\nspFillOldBody-&gt;GetAllCells(pCellListP, 2);\nif (pCellListP.Size() == 1)\n{\nCATCell_var spCell = pCellListP[1];\npCellListP.RemoveAll();\n\nspCell-&gt;GetAllCells(pCellListP, 1);\n\nint dSize = pCellListP.Size();\nCATCurve** pCurves = new CATCurve*[dSize];\nCATCrvLimits* pCrvLimits = new CATCrvLimits[dSize];\nshort* dShort = new short[dSize];\n\nfor (int i = 1; i &lt;= dSize; i++)\n{\nCATEdge_var spEdge = pCellListP[i];\nif (spEdge != NULL_var)\n{\nCATEdgeCurve_var spEdgeCurve = spEdge-&gt;GetCurve();\nif (spEdgeCurve != NULL_var)\n{\nCATCurve* pCurve = spEdgeCurve-&gt;GetRefCurve();\nif (pCurve != NULL)\n{\nCATIMeasurableCurve_var spiMeCurve = pCurve;\nif (!!spiMeCurve)\n{\ndouble dLength = 0;\nspiMeCurve-&gt;GetLength(dLength);\ncout &lt;&lt; \"636 : \" &lt;&lt; dLength &lt;&lt; endl;\n}\npCurves[i - 1] = pCurve;\npCrvLimits[i - 1] = pCurve-&gt;GetLimits();    dShort[i - 1] = 1;\n}\n}\n}\n}\n\nCATListPtrCATBody pWireLsitP;\nfor (int i = 0; i &lt; dSize; i++)\n{\nCATICGMTopWire* pWire = ::CATCGMCreateTopWire(piGeomFactory, &amp;TopData, 1, &amp;(pCurves[i]), &amp;(pCrvLimits[i]), &amp;(dShort[i]));\nif (pWire != NULL)\n{\npWire-&gt;Run();\npWireLsitP.Append(pWire-&gt;GetResult());\n}\n}\n\nCATICGMHybAssemble* piAssemble = ::CATCGMCreateNewTopAssemble(piGeomFactory, &amp;TopData, &amp;pWireLsitP);\nif (piAssemble)\n{\npiAssemble-&gt;Run();\nspFillOldBody = piAssemble-&gt;GetResult();\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/Get%20the%20names%20of%20all%20files%20in%20the%20folder/","title":"Get the names of all files in the folder","text":""},{"location":"DS-CODE/CAA/Get%20the%20names%20of%20all%20files%20in%20the%20folder/#c","title":"C++","text":"<pre><code>void Manage::GetAllFiles( string path, vector&lt;string&gt;&amp; files)//\u83b7\u53d6\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u6587\u4ef6\n{\nlong   hFile   =   0;\n//\u6587\u4ef6\u4fe1\u606f\nstruct _finddata_t fileinfo;\nstring p;\nif((hFile = _findfirst(p.assign(path).append(\"\\\\*\").c_str(),&amp;fileinfo)) !=  -1)\n{\ndo\n{\nif((fileinfo.attrib &amp;  _A_SUBDIR))\n{\nif(strcmp(fileinfo.name,\".\") != 0  &amp;&amp;  strcmp(fileinfo.name,\"..\") != 0)\n{\nfiles.push_back(p.assign(path).append(\"\\\\\").append(fileinfo.name) );\nGetAllFiles( p.assign(path).append(\"\\\\\").append(fileinfo.name), files );\n}\n}\nelse\n{\nfiles.push_back(p.assign(path).append(\"\\\\\").append(fileinfo.name) );\n}\n\n}while(_findnext(hFile, &amp;fileinfo)  == 0);\n\n_findclose(hFile);\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/Get%20the%20names%20of%20all%20files%20in%20the%20folder/#caa","title":"CAA","text":"<pre><code>int CATAECAddActionsComboDlg::GetAllFiles(CATUnicodeString sPath, CATListOfCATUnicodeString&amp; osFilePathList)\n{\nint dStatus = 0;\nCATDirectory pDir;\n\nCATLibStatus status = CATOpenDirectory(sPath.ConvertToChar(), &amp;pDir);\nif (CATLibSuccess == status)\n{\nint EndOfDir = 0;\nCATDirectoryEntry Entry;\n\nwhile ((EndOfDir != 1) &amp;&amp; (CATLibSuccess == status))\n{\nstatus = ::CATReadDirectory(&amp;pDir, &amp;Entry, &amp;EndOfDir);\nif ((CATLibSuccess == status) &amp;&amp; (EndOfDir != 1))\n{\nCATUnicodeString sTextName(Entry.name);\nif (!(sTextName.IsNull()) &amp;&amp; sTextName != \".\" &amp;&amp; sTextName != \"..\")\n{\nosFilePathList.Append(sTextName);\n}\n}\n}\n\nstatus = ::CATCloseDirectory(&amp;pDir);\nif (CATLibError == status)\ndStatus = 0;\nelse if (osFilePathList.Size() &gt; 0)\ndStatus = 1;\n}\nelse {\ncout &lt;&lt; \"Error : CATOpenDirectory is Failed !\" &lt;&lt; endl;\ndStatus = 0;\n}\n\nreturn dStatus;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/Get%20time/","title":"Get time","text":"<pre><code>CATTime pTime;\nint dYear = pTime.GetYear();\nint dMonth = pTime.GetMonth();\nint dDay = pTime.GetDay();\nCATUnicodeString sYear, sMonth, sDay;\nsYear.BuildFromNum(dYear);\nsMonth.BuildFromNum(dMonth);\nsDay.BuildFromNum(dDay);\n\nCATTime pTime;\nCATUnicodeString sFormat(\"%Y/%m/%d %I:%M:%S\");\nCATUnicodeString sTime = pTime.ConvertToString(sFormat);\n//2012/12/02 12:12:13\n</code></pre>"},{"location":"DS-CODE/CAA/GetcmdStatus/","title":"GetcmdStatus","text":""},{"location":"DS-CODE/CAA/GetcmdStatus/#caa-copy","title":"caa copy","text":"<pre><code>CATCommandHeader* pCommandHeader = NULL;\nCATAfrGetCommandHeader(\"Test1\", pCommandHeader);\nif (pCommandHeader != NULL_var)\n{\nif (pCommandHeader-&gt;GetCmdState() == 0)\n{\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/GetcmdStatus/#vb-copy","title":"vb copy","text":"<pre><code>HRESULT CATAECSetParmsCmd::CutAndPasteParm(CATBaseUnknown_var ispObj,CATBaseUnknown_var ispTarget)///???\n{\n    HRESULT rc = E_FAIL;\n\n    CATFrmEditor* pEdit = CATFrmEditor::GetCurrentEditor();\n    if (pEdit != NULL)\n    {\n        CATIAEditor_var spiAEditor = pEdit;\n        if (spiAEditor != NULL_var)\n        {\n            CATIASelection* piASelection1 = NULL;\n            rc = spiAEditor-&gt;get_Selection(piASelection1);\n            if (SUCCEEDED(rc))\n            {\n                rc = piASelection1-&gt;Clear();\n                if (SUCCEEDED(rc))\n                {\n                    CATIABase_var spiABase1 = ispObj;\n                    if (spiABase1 != NULL_var)\n                    {\n                        rc = piASelection1-&gt;Add(spiABase1);\n                        if (FAILED(rc))\n                        {\n                            cout&lt;&lt;\"Error : Add 1 Failed !\"&lt;&lt;endl;\n                            return rc;\n                        }\n                        else\n                            cout &lt;&lt; \"Error : Add is NULL !\" &lt;&lt; endl;\n                    }\n                    else\n                        cout &lt;&lt; \"Error : CATIABase is NULL !\" &lt;&lt; endl;\n                }\n                piASelection1-&gt;Cut();\n            }\n\n            CATIASelection* piASelection2 = NULL;\n            rc = spiAEditor-&gt;get_Selection(piASelection2);\n            if (SUCCEEDED(rc))\n            {\n                rc = piASelection2-&gt;Clear();\n                if (SUCCEEDED(rc))\n                {\n                    CATIABase_var spiABase1 = ispTarget;\n                    if (spiABase1 != NULL_var)\n                    {\n                        rc = piASelection2-&gt;Add(spiABase1);\n                        if (FAILED(rc))\n                        {\n                            cout&lt;&lt;\"Error : Add 2 Failed !\"&lt;&lt;endl;\n                            return rc;\n                        }\n                        else\n                            cout &lt;&lt; \"Error : Add is NULL !\" &lt;&lt; endl;\n                    }\n                    else\n                        cout &lt;&lt; \"Error : CATIABase is NULL !\" &lt;&lt; endl;\n                }\n                rc = piASelection2-&gt;Paste();\n                if (FAILED(rc))\n                {\n                    cout &lt;&lt; \"Error : Paste is Failed !\" &lt;&lt; endl;\n                }\n            }\n        }\n    }else\n        cout&lt;&lt;\"Error : Editor is NULL !\"&lt;&lt;endl;\n\n    return rc;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/HRESULT/","title":"HRESULT","text":"<p>HRESULT\u5373\u51fd\u6570\u8fd4\u56de\u503c\uff0c \u662f\u4e00\u79cd\u7b80\u5355\u7684\u6570\u636e\u7c7b\u578b\uff0c\u901a\u5e38\u88ab\u5c5e\u6027\u548c ATL \u7528\u4f5c\u8fd4\u56de\u503c\u3002</p> <ul> <li>\u5916\u6587\u540d     HRESULT</li> <li>\u6027\u8d28     \u79d1\u5b66 </li> <li>\u7c7b\u522b     \u8ba1\u7b97\u673a\u5b66 </li> </ul> <p>A value returned from a function call to an interface, consisting of a severity code, context information, a facility code, and a status code that describes the result. For 16-bit Windows systems, the HRESULT is an opaque result handle defined to be zero for a successful return from a function, and nonzero if error or status information is to be returned. To convert an HRESULT into a more detailed SCODE (or return value), applications call GetSCode(). See SCODE. \u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u662f\u6267\u884c\u5b8c\u8fd4\u56de\u7684\u8bdd\u5c06\u5305\u542b\u5177\u6709\u5b9e\u9645\u610f\u4e49\u7684\u6570\u636e\uff0c\u5982\u679c\u7acb\u5373\u8fd4\u56de\u5219\u5305\u542b\u72b6\u6001\u4fe1\u606f--\u53d1\u9001\u6210\u529f\u4e0e\u5426\uff0c\u5e76\u4e0d\u80fd\u8bf4\u660e\u6267\u884c\u7684\u5982\u4f55\u3002\u4e0b\u8868\u8bf4\u660e\u5404\u79cd\u4e0d\u540c\u7684\u503c\u3002\u5934\u6587\u4ef6 winerror.h \u4e2d\u5305\u542b\u66f4\u591a\u7684\u503c\u3002</p> <p>\u540d\u79f0    \u8bf4\u660e    \u503c</p> <pre><code>S_OK \u64cd\u4f5c\u6210\u529f 0x00000000\nE_UNEXPECTED \u610f\u5916\u7684\u5931\u8d25 0x8000FFFF\nE_NOTIMPL \u672a\u5b9e\u73b0 0x80004001\nE_OUTOFMEMORY \u672a\u80fd\u5206\u914d\u6240\u9700\u7684\u5185\u5b58 0x8007000E\nE_INVALIDARG \u4e00\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\u65e0\u6548 0x80070057\nE_NOINTERFACE \u4e0d\u652f\u6301\u6b64\u63a5\u53e3 0x80004002\nE_POINTER \u65e0\u6548\u6307\u9488 0x80004003\nE_HANDLE \u65e0\u6548\u53e5\u67c4 0x80070006\nE_ABORT \u64cd\u4f5c\u5df2\u4e2d\u6b62 0x80004004\nE_FAIL \u672a\u6307\u5b9a\u7684\u5931\u8d25 0x80004005\nE_ACCESSDENIED \u4e00\u822c\u7684\u8bbf\u95ee\u88ab\u62d2\u7edd\u9519\u8bef 0x80070005\n</code></pre> <p>\u4e0d\u80fd\u7b80\u5355\u5730\u628a\u8fd4\u56de\u503c\u4e0e S_OK \u548c E_FAIL \u6bd4\u8f83\uff0c\u800c\u8981\u7528 SUCCEEDED \u548c FAILED \u5b8f\u8fdb\u884c\u5224\u65ad\u3002 HRESULT \u5176\u5b9e\u662f\u4e00\u4e2a32\u4f4d\u7684\u503c\uff0c\u5176\u6700\u9ad8\u4f4d(bit)\u5982\u679c\u662f0\u8868\u793a\u6210\u529f\uff0c1\u8868\u793a\u9519\u8bef\u3002\u5177\u4f53\u53c2\u89c1 MSDN \u4e4b\"Structure of COM Error Codes\"\u8bf4\u660e\u3002\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u5982\u679c\u9700\u8981\u5224\u65ad\u8fd4\u56de\u503c\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u6bd4\u8f83\u8fd0\u7b97\u7b26\u53f7\uff1bswitch\u5f00\u5173\u8bed\u53e5\uff1b\u4e5f\u53ef\u4ee5\u4f7f\u7528VC\u63d0\u4f9b\u7684\u5b8f\uff1a HRESULT hr = \u8c03\u7528\u7ec4\u4ef6\u51fd\u6570;</p> <pre><code>if( SUCCEEDED( hr ) ){...} // \u5982\u679c\u6210\u529f\n......\nif( FAILED( hr ) ){...} // \u5982\u679c\u5931\u8d25\n......\n</code></pre>"},{"location":"DS-CODE/CAA/Material%20acquisition%20at%20different%20locations/","title":"Material acquisition at different locations","text":"<pre><code>How to create CATOmbObjectInContext depending on the various application usage for Core material application:\n\nApply on Product Reference  //\u4ea7\u54c1\u4e0b\u8f93\u5165\u4ea7\u54c1\u7684\u53c2\u8003\u8282\u70b9\nCATLISTP(CATIPLMComponent) pathOfInstances; // ALWAYS Empty \nCATIPLMComponent * piRepInstance = NULL;\nCATIPLMComponent * pTarget = input Product Reference; Apply on Product Representation instance (Ex: 3D shape) //3D shape\u4e0b\u8f93\u5165\u5bf9\u5e94\u7684\u5b9e\u4f8b\nCATLISTP(CATIPLMComponent) pathOfInstances; // ALWAYS Empty \nCATIPLMComponent * piRepInstance = input Product Representation instance\nCATIPLMComponent * pTarget = NULL; Apply on Features in a 3D Shape (body, 1D, 2D and 3D elements) or in a FEMRep (SIMULIA properties) CATLISTP(CATIPLMComponent) pathOfInstances; // ALWAYS Empty //\u5185\u90e8\u7279\u5f81\u4e0b\u8f93\u5165\u5bf9\u5e94\u7684\u7279\u5f81\u4ee5\u53ca\u5bf9\u5e94\u76843D Shape\u5b9e\u4f8b\nCATIPLMComponent * piRepInstance = Product Representation instance containing the feature\nCATIPLMComponent * pTarget = input feature in representation ; Apply on Simulation connection property of an engineering connection.\nCATLISTP(CATIPLMComponent) pathOfInstances; // ALWAYS Empty \nCATIPLMComponent * piRepInstance = NULL;\nCATIPLMComponent * pTarget = input feature managed by the Engineering connection </code></pre>"},{"location":"DS-CODE/CAA/Progress%20bar/","title":"Progress bar","text":"<pre><code>//\u8fdb\u5ea6\u6761\nint mCount = mProdInstances.size();\ndouble d1 = (i + 1) * 90 / mCount;\ndouble d2 = mCount * 90 / mCount;\ndouble m1 = d1 / d2 * 90;\n\n//\u8fdb\u5ea6\u6761\u663e\u793a\u767e\u5206\u6bd4\u7684Label\u5e94\u8be5\u653e\u5728\u4e00\u4e2a\u5355\u72ec\u7684Frame\u4e2d\u4ee5\u4fbf\u4e8e\u5237\u65b0\u767e\u5206\u6bd4\n//Label\u7684Title\u5927\u6982\u53ea\u80fd\u8bbe\u7f6e\u4e00\u6b21\uff0c\u591a\u6b21\u8bbe\u7f6e\u4f1a\u9020\u6210\u4e0d\u53ef\u89c1\n_pDlgProgress = new CATDlgProgress(this, \"DlgProgress\");\n_pDlgProgress-&gt;SetGridConstraints(4, 1, 1, 1, CATGRID_4SIDES);\n_pDlgProgress-&gt;SetRange(0, 100);       // progress \n_pDlgProgress-&gt;SetStep(1);             // with 1% steps \n_pDlgProgress-&gt;SetPos(0);\n\n_pDlgFrame = new CATDlgFrame(this, (const char*)\"Frame4\", 0 | CATDlgFraNoTitle | CATDlgFraNoFrame | CATDlgGridLayout);\n_pDlgFrame-&gt;SetGridConstraints(4, 3, 1, 1, 0 | CATGRID_LEFT | CATGRID_RIGHT | CATGRID_TOP);\n_pDlgLabel = new CATDlgLabel(_pDlgFrame, \"pDlgLabel\");\n_pDlgLabel-&gt;SetGridConstraints(4, 3, 1, 1, CATGRID_4SIDES);\nvoid UploadModeDlg::SetProgressPosition(int iPos)\n{\n_pDlgProgress-&gt;SetPos(iPos);\n\nCATUnicodeString strPos;\nstrPos.BuildFromNum(iPos);\nif(iPos == 0)\nstrPos = \"Step : \" + strPos + \" %    \";//\u591a\u51fa\u4e24\u4e2a\u5b57\u7b26\uff0c\u9632\u6b62\u767e\u5206\u6bd4\u5b57\u7b26\u53d8\u591a\u65f6\u663e\u793a\u6548\u679c\u4e0d\u597d\nelse\nstrPos = \"Step : \" + strPos + \" %\";\n_pDlgFrame-&gt;ResetLetterObject();\n_pDlgLabel-&gt;SetTitle(strPos);\n_pDlgLabel-&gt;Refresh();\n_pDlgProgress-&gt;Refresh();\n}\n</code></pre>"},{"location":"DS-CODE/CAA/Sets%20the%20geometry%20set%20to%20ordered%20or%20unordered/","title":"Sets the geometry set to ordered or unordered","text":""},{"location":"DS-CODE/CAA/Sets%20the%20geometry%20set%20to%20ordered%20or%20unordered/#_1","title":"\u8bbe\u7f6e\u51e0\u4f55\u56fe\u5f62\u96c6\u4e3a\u6709\u5e8f\u6216\u65e0\u5e8f","text":"<pre><code>CATIGSMTool_var spiGsmTool = spiArcGridElevation;\nif (spiGsmTool != NULL_var)\n{\nspiGsmTool-&gt;SetPrivate(0);\ncout &lt;&lt; \"SetPrivate OK \" &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/Setting%20error/","title":"Setting error","text":""},{"location":"DS-CODE/CAA/Setting%20error/#myerror","title":"MyError","text":"<pre><code>{\nHRESULT CATAECAddActionsCmd::MyError()\n{\nHRESULT rc = E_FAIL;\n\nCATIMmiUpdateError *piUpdateErrorOnThis = NULL;\nCATTry{\nrc = _spRelationSet-&gt;QueryInterface(IID_CATIMmiUpdateError , (void**)&amp;piUpdateErrorOnThis);\nif (SUCCEEDED(rc))\npiUpdateErrorOnThis-&gt;UnsetMmiUpdateError();\n\nRaiseAnError(CATUnicodeString::CATUnicodeString(\"AAA\"));\n}\nCATCatch(CATError, pError)\n{\nCATError * pErrorToThrow = NULL;\n\n// Create access to Update Error\nCATIMmiErrUpdate *piErrorAccess = NULL;\nrc = CATMmiExtendServicesFactory::CreateUpdateErrorAccess(piErrorAccess);\n\nif (NULL != piErrorAccess)\n{\n// Check if the error is already an update error or not\nif (S_OK == piErrorAccess-&gt;IsAnUpdateError(pError))\n{\n// Associates the error with the MultiMeasure\nif (NULL != piUpdateErrorOnThis)\n{\npiUpdateErrorOnThis-&gt;SetMmiUpdateError(pError);\n\npiUpdateErrorOnThis-&gt;Release();\npiUpdateErrorOnThis = NULL;\n}\n}\nelse\n{\n// Builds a new update error.\npiErrorAccess-&gt;CreateNewError(pErrorToThrow);\npiErrorAccess-&gt;SetMmiDiagnostic(pErrorToThrow, pError-&gt;GetNLSMessage());\n\n// Clean-up\n::Flush(pError);\n\n// Associates the error with the MultiMeasure\nif (NULL != piUpdateErrorOnThis)\n{\npiUpdateErrorOnThis-&gt;SetMmiUpdateError(pErrorToThrow);\n\npiUpdateErrorOnThis-&gt;Release();\npiUpdateErrorOnThis = NULL;\n}\n}\n}\nif (piUpdateErrorOnThis)\n{\npiUpdateErrorOnThis-&gt;Release();\npiUpdateErrorOnThis = NULL;\n}\n}// end CATCatch\n\n\nCATEndTry\n\nreturn rc;\n}\n\nvoid CATAECAddActionsCmd::RaiseAnError(CATUnicodeString&amp; iErrorLabel)\n{\nCATIMmiErrUpdate *piErrorAccess = NULL;\nHRESULT rc = CATMmiExtendServicesFactory::CreateUpdateErrorAccess(piErrorAccess);\n\nif (NULL != piErrorAccess)\n{\nCATError * pError = NULL;\npiErrorAccess-&gt;CreateNewError(pError);\n\nCATUnicodeString Diagnostic(iErrorLabel);\npiErrorAccess-&gt;SetMmiDiagnostic(pError, Diagnostic);\n\npiErrorAccess-&gt;Release();\npiErrorAccess = NULL;\n\nCATThrow(pError);\n}\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/ShowOrHide/","title":"ShowOrHide","text":""},{"location":"DS-CODE/CAA/ShowOrHide/#_1","title":"\u663e\u793a\u6216\u8005\u9690\u85cf\u7269\u4f53","text":"<pre><code>    //.....\n\nCATIVisProperties * pPropOnPoint = NULL ;\nHRESULT rc = spObjpt-&gt;QueryInterface(IID_CATIVisProperties, (void**)&amp;pPropOnPoint);\nif(NULL!=pPropOnPoint) {\nCATVisPropertiesValues PropValue;\nCATVisPropertyType PropTypeOnOnPtObj = CATVPShow ;\nCATVisGeomType GeomTypeOnPtObj = CATVPGlobalType ;\nPropValue.SetShowAttr(CATNoShowAttr);\nrc = pPropOnPoint-&gt;SetPropertiesAtt(PropValue, PropTypeOnOnPtObj, GeomTypeOnPtObj);                                                pPropOnPoint-&gt;Release();\npPropOnPoint=NULL;    }\n</code></pre>"},{"location":"DS-CODE/CAA/SimpleDIalog/","title":"SimpleDIalog","text":""},{"location":"DS-CODE/CAA/SimpleDIalog/#case","title":"case","text":"<pre><code>CATBoolean CATPRDUDFdataImportAndExportCmd::aaa(void *)\n{\nCATApplicationFrame *pApplication = CATApplicationFrame::GetFrame();\nif (NULL != pApplication)\n{\nCATDlgWindow * pMainWindow = pApplication-&gt;GetMainWindow();\nCATDlgNotify *pNotifyDlg = new CATDlgNotify(pMainWindow, \"Warnning MessageBox\", CATDlgNfyOKCancel);\nif (NULL != pNotifyDlg)\n{\npNotifyDlg-&gt;SetText(\"Parameter has repeated ! \\n Whether to recreate ?\");\npNotifyDlg-&gt;SetVisibility(CATDlgShow);\n\nAddAnalyseNotificationCB(pNotifyDlg,\npNotifyDlg-&gt;GetNfyCancelNotification(),\n(CATCommandMethod)&amp;CATPRDUDFdataImportAndExportCmd::bbb, NULL);\n\n//pNotifyDlg-&gt;RequestDelayedDestruction(); \n}\n}\nreturn TRUE;\n}\n\nvoid CATPRDUDFdataImportAndExportCmd::bbb(CATCommand           * iCmd,\nCATNotification      * iNotif,\nCATCommandClientData   iUsefulData)\n{\ncout &lt;&lt; \"------------------------------------------------------------------------Hello World!\" &lt;&lt; endl;\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/Sketch%20construction%20elements/","title":"Sketch construction elements","text":""},{"location":"DS-CODE/CAA/Sketch%20construction%20elements/#_1","title":"\u8349\u56fe\u6784\u9020\u5143\u7d20","text":"<pre><code>CATIAGeometry2D_var spiAGeometry2D = spiPoint;\nif (spiAGeometry2D != NULL_var)\n{\nspiAGeometry2D-&gt;put_Construction(TRUE);\n}\n</code></pre>"},{"location":"DS-CODE/CAA/Sketches%20create%20point%20lines%20and%20create%20constraints%20to%20edit%20formulas/","title":"Sketches create point lines and create constraints to edit formulas","text":""},{"location":"DS-CODE/CAA/Sketches%20create%20point%20lines%20and%20create%20constraints%20to%20edit%20formulas/#_1","title":"\u8349\u56fe\u521b\u5efa\u70b9\u7ebf\u5e76\u521b\u5efa\u7ea6\u675f\u8fdb\u884c\u7f16\u8f91\u516c\u5f0f","text":"<pre><code>HRESULT CATCIVRoadLawCmd::StartCreate()\n{\ncout &lt;&lt; \"CATCIVRoadLawCmd::StartCreate()\" &lt;&lt; endl;\nHRESULT rc = E_FAIL;\n\nCATIMmiPrtContainer_var spiPrtContainer = NULL_var;\nrc = CAAGetPrtContainer(spiPrtContainer);\nif (FAILED(rc))\n{\ncout &lt;&lt; \"Error : CAAGetPrtContainer is Failed !\" &lt;&lt; endl;\nreturn rc;\n}\n\nCATIGSMUseFactory_var spiGSMFactory = spiPrtContainer;\nCATICkeParmFactory_var spiCkeParmFactory = spiPrtContainer;\nCATIMmiUseSetFactory_var spiMmiUseSetFactory = spiPrtContainer;\nCATICkeRelationFactory_var spiCkeRelationFactory = spiPrtContainer;\nif (spiGSMFactory != NULL_var &amp;&amp; spiCkeParmFactory != NULL_var &amp;&amp; spiMmiUseSetFactory != NULL_var &amp;&amp; spiCkeRelationFactory != NULL_var)\n{\n\nCATIMmiMechanicalFeature_var spiPart = NULL_var;\nrc = spiPrtContainer-&gt;GetMechanicalPart(spiPart);\nif (spiMmiUseSetFactory != NULL_var &amp;&amp; SUCCEEDED(rc))\n{\nCATIMmiUsePrtPart_var spiPrtPart = spiPart;\nif (spiPrtPart == NULL_var)\n{\ncout &lt;&lt; \"Error : CATIMmiUsePrtPart is NULL !\" &lt;&lt; endl;\nreturn E_FAIL;\n}\n\nCATIMmiMechanicalFeature_var spiRootSet = NULL_var;\nrc = spiMmiUseSetFactory-&gt;CreateGeometricalSet(\"\u9053\u8def\u6cd5\u5219\", spiPart, spiRootSet);\nif (FAILED(rc) || spiRootSet == NULL_var)\n{\ncout &lt;&lt; \"Error : Create \u9053\u8def\u6cd5\u5219 Set FAILED !\" &lt;&lt; endl;\nreturn E_FAIL;\n}\n\nCATIParmPublisher_var spiPartParm = spiRootSet;\nCATIKweModelServices_var spiKweModelServices = CATCkeGlobalFunctions::GetModelServices();\nCATIParmPublisher_var spiParameterSet = spiKweModelServices-&gt;GetCurrentSet(CATIKweModelServices::Parameter, spiPartParm, 1);\nCATIParmPublisher_var spiHSet = spiKweModelServices-&gt;GetCurrentSet(CATIKweModelServices::Parameter, spiParameterSet, 1);\nCATIParmPublisher_var spiVSet = spiKweModelServices-&gt;GetCurrentSet(CATIKweModelServices::Parameter, spiParameterSet, 1);\nCATIParmPublisher_var spiRelationSet = spiKweModelServices-&gt;GetCurrentSet(CATIKweModelServices::Relation, spiPartParm, 1);\n\nCATIMmiMechanicalFeature_var spiResultSet = NULL_var;\nrc = spiMmiUseSetFactory-&gt;CreateGeometricalSet(\"RESULT\", spiRootSet, spiResultSet,0);\nif (FAILED(rc) || spiResultSet == NULL_var || spiParameterSet == NULL_var || spiHSet == NULL_var || spiVSet == NULL_var || spiRelationSet == NULL_var)\n{\ncout &lt;&lt; \"Error : Create RESULT Set or ParamSet is FAILED !\" &lt;&lt; endl;\nreturn E_FAIL;\n}\n\nCATIAlias_var spiAlias = spiParameterSet;\nif (spiAlias != NULL_var)\n{\nspiAlias-&gt;SetAlias(\"PARAMETRES\");\n}\n\nspiAlias = spiHSet;\nif (spiAlias != NULL_var)\n{\nspiAlias-&gt;SetAlias(\"\u6c34\u5e73\");\n}\n\nspiAlias = spiVSet;\nif (spiAlias != NULL_var)\n{\nspiAlias-&gt;SetAlias(\"\u5782\u76f4\");\n}\n\nspiAlias = spiRelationSet;\nif (spiAlias != NULL_var)\n{\nspiAlias-&gt;SetAlias(\"RELATIONS\");\n}\n\nspiPrtPart-&gt;SetInWorkObject(spiResultSet);\n\n\nCATBaseUnknown_var spYZ = NULL_var;\nCATBaseUnknown_var spOrigin = NULL_var;\nrc = _spAxis-&gt;RetrievePlaneBRepAccess(CATAxisSystemXNumber, spYZ);\nrc = _spAxis-&gt;RetrieveOriginPointBRepAccess(spOrigin);\nif (SUCCEEDED(rc))\n{\nCATISktUseSketchFactory_var spiSketchFactory = spiPrtContainer;\nif (spiSketchFactory != NULL_var)\n{\nCATIMmiMechanicalFeature_var spSpecSketch = spiSketchFactory-&gt;CreateSketch();\nif (NULL_var != spSpecSketch)\n{\nCATISktUseSketchPositioning* piSktUseSketchPositioning = NULL;\nif (SUCCEEDED(spSpecSketch-&gt;QueryInterface(IID_CATISktUseSketchPositioning, (void**)&amp;piSktUseSketchPositioning)))\n{\npiSktUseSketchPositioning-&gt;SetSupportMode(CATSktSupOnePlane);\npiSktUseSketchPositioning-&gt;SetOriginMode(CATSktOriProjectionOfAPoint);\nCATLISTV(CATBaseUnknown_var) spSupportListV;\nCATLISTV(CATBaseUnknown_var) spOrigintationListV;\nspSupportListV.Append(spYZ);\nspOrigintationListV.Append(spOrigin);\npiSktUseSketchPositioning-&gt;SetSupportReferences(spSupportListV);\npiSktUseSketchPositioning-&gt;SetOriginReferences(spOrigintationListV);\npiSktUseSketchPositioning-&gt;Release(); piSktUseSketchPositioning = NULL;\n}\n\nCATISktUseSketch_var spiSketch = spSpecSketch;\nif (spiSketch != NULL_var &amp;&amp; SUCCEEDED(spiSketch-&gt;OpenEdition()))\n{\nCATISktUse2DAxis_var spiSketchAxis = NULL_var;\nrc = spiSketch-&gt;GetAbsolute2DAxis(spiSketchAxis);\n\nCATISktUse2DWFFactory_var spi2DGeomFactory = spiSketch;\nCATISktUse2DConstraintFactory_var spi2DConstraintFactory = spiSketch;\nif (spi2DGeomFactory != NULL_var &amp;&amp; spi2DConstraintFactory != NULL_var &amp;&amp; SUCCEEDED(rc))\n{\nspiAlias = spiSketch;\nspiAlias-&gt;SetAlias(\"\u6cd5\u5219\u8349\u56fe\");\nCATIMmiMechanicalFeature_var spiSketchH = spiSketchAxis-&gt;GetHDirection();\nCATIMmiMechanicalFeature_var spiSketchV = spiSketchAxis-&gt;GetVDirection();\nCAAUpdateFeature(spiSketchH);\nCAAUpdateFeature(spiSketchV);\n\nCATListValCATISktUse2DPoint_var spPointListV;\n\nvector&lt;CATListOfCATUnicodeString&gt; iopDataVec;\nrc = CAAGetDataFromText(_pCATCIVRoadLawDlg-&gt;GetSelectPath(), iopDataVec);\nif (SUCCEEDED(rc))\n{\nfor (int i = 1; i &lt; iopDataVec.size(); i++)\n{\nCATListOfCATUnicodeString sStringList = iopDataVec[i];\n\nfor (int j = 1; j &lt;= sStringList.Size(); j++)\n{\ncout &lt;&lt; sStringList[j] &lt;&lt; \"\\t\";\n}\ncout &lt;&lt; endl;\n\nCATUnicodeString sID = sStringList[1];\nCATUnicodeString sH = sStringList[2];\nCATUnicodeString sV = sStringList[3];\n\nif (sH.IsNull() || sV.IsNull() || sID.IsNull())\nreturn E_FAIL;\n\ndouble dH = 0, dV = 0;\nif (sH.ConvertToNum(&amp;dH) == 0 || sV.ConvertToNum(&amp;dV) == 0 || sID.IsNull())\nreturn E_FAIL;\n\nCATUnicodeString sIndex;\nsIndex.BuildFromNum(i);\nCATICkeParm_var spiH = spiCkeParmFactory-&gt;CreateLength(\"H\" + sIndex, dH / 1000);\nCATICkeParm_var spiV = spiCkeParmFactory-&gt;CreateLength(\"V\" + sIndex, dV / 1000);\nspiHSet-&gt;AppendElement(spiH);\nspiVSet-&gt;AppendElement(spiV);\n\ndouble dPoint[2] = {dH,dV};\nCATIMmiMechanicalFeature_var spiPoint = spi2DGeomFactory-&gt;CreatePoint(dPoint);\nspiAlias = spiPoint;\nspiAlias-&gt;SetAlias(sID);\n\nCATIAGeometry2D_var spiAGeometry2D = spiPoint;\nif (spiAGeometry2D != NULL_var)\n{\nspiAGeometry2D-&gt;put_Construction(TRUE);\n}\n\nCATIPartConstraint_var spiPartConstraint1 = spi2DConstraintFactory-&gt;CreateConstraint(spiPoint, NULL, spiSketchH, NULL, NULL, NULL, NULL,Cst2DType_Distance, 0, 0);\nCATIPartConstraint_var spiPartConstraint2 = spi2DConstraintFactory-&gt;CreateConstraint(spiPoint, NULL, spiSketchV, NULL, NULL, NULL, NULL, Cst2DType_Distance, 0, 0);\nif (spiPartConstraint1 != NULL_var &amp;&amp; spiPartConstraint2 != NULL_var)\n{\nCATICkeParm_var spiOffset1 = (spiPartConstraint1-&gt;GetValues())[1];\nCATICkeParm_var spiOffset2 = (spiPartConstraint2-&gt;GetValues())[1];\n//                                          spiPartConstraint1-&gt;SetRealValue(1,dV);\n//                                          spiPartConstraint2-&gt;SetRealValue(1, dH);\n\nCATCkeListOfParm pParamList1 = new CATListValCATBaseUnknown_var[2];\npParamList1-&gt;Append(spiV); pParamList1-&gt;Append(spiOffset1);\n\nCATICkeRelation_var spFormula1 = spiCkeRelationFactory-&gt;CreateFormula(\"\u516c\u5f0fV\"+sID,\n\"\",\n\"\",\nspiOffset1,\npParamList1,\n\"a1\",\nNULL_var,\nCATCke::False);//\u5f53\u524d\u4e0d\u6839\u636e\u53c2\u6570\u540d\u79f0\u5339\u914d\n\nCATCkeListOfParm pParamList2 = new CATListValCATBaseUnknown_var[2];\npParamList2-&gt;Append(spiH); pParamList2-&gt;Append(spiOffset2);\n\nCATICkeRelation_var spFormula2 = spiCkeRelationFactory-&gt;CreateFormula(\"\u516c\u5f0fH\" + sID,\n\"\",\n\"\",\nspiOffset2,\npParamList2,\n\"a1\",\nNULL_var,\nCATCke::False);//\u5f53\u524d\u4e0d\u6839\u636e\u53c2\u6570\u540d\u79f0\u5339\u914d\n\nif (spFormula1 == NULL_var || spFormula2 == NULL_var)\n{\ncout &lt;&lt; \"Error : CreateFormula is Failed !\" &lt;&lt; endl;\nspiSketch-&gt;CloseEdition();\nreturn rc;\n}\nspiRelationSet-&gt;AppendElement(spFormula1);\nspiRelationSet-&gt;AppendElement(spFormula2);\n\n\nspPointListV.Append(spiPoint);\n}\nelse\ncout &lt;&lt; \"Error : CATIPartConstraint is NULL \" &lt;&lt; endl;\n}\n\nif (spPointListV.Size() == iopDataVec.size() -1 )\n{\nfor (int i = 1;i &lt;= spPointListV.Size()-1;i++)\n{\ndouble dCoor1[2] = {};\ndouble dCoor2[2] = { 1,1 };\nCATISktUse2DCurve_var spi2DCurve = spi2DGeomFactory-&gt;CreateLine(dCoor1, dCoor2);\nif (spi2DCurve != NULL_var)\n{\nspi2DCurve-&gt;SetStartPoint(spPointListV[i]);\nspi2DCurve-&gt;SetEndPoint(spPointListV[i + 1]);\n}\n}\n}\n}\nelse\ncout &lt;&lt; \"Error : CAAGetDataFromText is Falied !\" &lt;&lt; endl;\n\nif (SUCCEEDED(spiSketch-&gt;CloseEdition()))\n{\nif (SUCCEEDED(CAAUpdateFeature(spiSketch)))\n{\n//\nCATIGSMUseLawDistProj_var spiLaw = spiGSMFactory-&gt;CreateLawDistProj(spiSketchH, spiSketch);\nif (spiLaw != NULL_var &amp;&amp; SUCCEEDED(CAAUpdateFeature(spiLaw)))\n{\nspiAlias = spiLaw;\nspiAlias-&gt;SetAlias(\"\u6cd5\u5219\u66f2\u7ebf\");\nCAASetInsert(spiSketch, spiResultSet);\nCAASetInsert(spiLaw, spiResultSet);\n}   }\n}\n}\n}\n}\n}\n}\n}\n}\n\nreturn rc;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/Tese%20feature%20type/","title":"Tese feature type","text":"<p>CATICGMUnknown -&gt;  IsATypeOf;</p>"},{"location":"DS-CODE/CAA/Update%20structure%20tree/","title":"Update structure tree","text":""},{"location":"DS-CODE/CAA/Update%20structure%20tree/#_1","title":"\u66f4\u65b0\u7ed3\u6784\u6811","text":"<pre><code>CATISpecObject_var spSpecOnProduct = spRootProductOfProduct;\n//ObjectUpdate(spSpecOnProduct);//-&gt;Update();\nspiRootObj = spRootProductOfProduct;\ncout &lt;&lt; \"Redrawing the 3D view\" &lt;&lt; endl;\nCATIModelEvents_var spModelEventOnProduct(spRootProductOfProduct);\n//\u4f7f\u7ec4\u4ef6\u4e0e\u5176\u53ef\u89c6\u5316\u901a\u4fe1\u7684\u63a5\u53e3\uff0c\u5373\u5b83\u4eec\u7684\u56fe\u5f62\u8868\u793a\u3002\n\nCATModify event((CATBaseUnknown*)spRootProductOfProduct);\n//\u8868\u793a\u5173\u4e8e\u4e00\u4e2a\u5bf9\u8c61\u7684\u4efb\u4f55\u7c7b\u578b\u7684\u4fee\u6539\u7684\u57fa\u672c\u7c7b\u578b\u7684\u53ef\u89c6\u5316\u4e8b\u4ef6\u7684\u7c7b\u3002\nspModelEventOnProduct-&gt;Dispatch(event);//\u53d1\u9001\u53ef\u89c6\u5316\u4e8b\u4ef6\u3002\n\nCATIRedrawEvent_var spRedrawEventOnProduct(spRootProductOfProduct);\n//\u63a5\u53e3\uff0c\u4ee5\u5141\u8bb8\u5728\u9700\u8981\u65f6\u7684\u66f2\u7ebf\u56fe\u91cd\u7ed8\u3002\nspRedrawEventOnProduct-&gt;Redraw();\n//\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u53ca\u5176\u5b50\u8282\u70b9\u3002\n</code></pre>"},{"location":"DS-CODE/CAA/V5%20obtains%20the%20sketch%20outline%20or%20the%20corresponding%20body%20and%20determines%20whether%20it%20is%20closed/","title":"V5 obtains the sketch outline or the corresponding body and determines whether it is closed","text":""},{"location":"DS-CODE/CAA/V5%20obtains%20the%20sketch%20outline%20or%20the%20corresponding%20body%20and%20determines%20whether%20it%20is%20closed/#v5-body","title":"V5 \u83b7\u53d6\u8349\u56fe\u8f6e\u5ed3\u6216\u5bf9\u5e94\u7684Body\u4ee5\u53ca\u5224\u65ad\u662f\u5426\u4e3a\u5c01\u95ed","text":"<pre><code>CATIPrtProfile_var spiPrtProfile = spiSketch;\nif (SUCCEEDED(rc) &amp;&amp; spiPrtProfile != NULL_var)\n{\nint nbContour = spiPrtProfile-&gt;GetContourCount();\nif (nbContour == 1)\n{\nCATBody_var spLocalBody = NULL_var;\nspiPrtProfile-&gt;GetBody(0, spLocalBody);\nif (spLocalBody != NULL_var)\n{\nCATDomain * pDomain = spLocalBody-&gt;GetDomain(1);\nCATWire_var spWireOnDomain(pDomain);\nif (spWireOnDomain != NULL_var)\n{\nCATBoolean isClosed = spWireOnDomain-&gt;IsClosed();\nif (TRUE != isClosed)\n{\ncout&lt;&lt;\"\u975e\u5c01\u95ed\u8f6e\u5ed3\"&lt;&lt;endl;\n}\nelse\n{\nspiPrtProfile-&gt;GetBody(1, spSketchBody);\n}\n}\n}\n}\n\nint dElements = spiPrtProfile-&gt; GetElementCount();\nCATISpecObject_var spiElement = NULL_var;\nif(dElements &gt; 0)\nspiPrtProfile-&gt; GetElement(1,spiElement);\n}\n</code></pre>"},{"location":"DS-CODE/CAA/V5%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AERep%2C%E4%BA%8C%E7%BB%B4%E5%90%8C%E7%90%86/","title":"V5\u8bbe\u7f6e\u540e\u53f0\u6570\u636eRep,\u4e8c\u7ef4\u540c\u7406","text":"<pre><code>CAT3DRep* EnterDlg::GetRepFromDoc(CATUnicodeString iFilePath)\n{\ncout&lt;&lt;\"=====&gt; GetRepFromDoc... \"&lt;&lt;endl;\nHRESULT hr = S_OK;\n\nconst char* OldPath = iFilePath.ConvertToChar();\nconst char* NewPath = \"C:\\\\Templates\\\\Admin\\\\Old.CATPart\";\n\nWCHAR   wstr[MAX_PATH]={0};\nMultiByteToWideChar(CP_ACP,0,OldPath,-1,wstr,sizeof(wstr));\nWCHAR   wstr1[MAX_PATH]={0};\nMultiByteToWideChar(CP_ACP,0,NewPath,-1,wstr1,sizeof(wstr1));\n\nbool a = CopyFile(wstr,wstr1,FALSE);//\u590d\u5236\nif(a == true)\n{\ncout&lt;&lt;\"Part\u6587\u4ef6\u590d\u5236\u6210\u529f\"&lt;&lt;endl;\n}else{\ncout&lt;&lt;\"Part\u6587\u4ef6\u590d\u5236\u5931\u8d25\"&lt;&lt;endl;\n}\n_pStrPath = NewPath;\nCATUnicodeString OpenFilePath(NewPath);\n\nCATDocument* pRefDoc = NULL;\nhr = CATDocumentServices::OpenDocument(OpenFilePath,pRefDoc);\nif (!pRefDoc)\n{\ncout&lt;&lt;\"open doc fail\"&lt;&lt;endl;\nreturn NULL;\n}\n\nCATInit_var spiInit = pRefDoc;\nif (spiInit == NULL_var)\n{\ncout&lt;&lt;\"fail to init\"&lt;&lt;endl;\nreturn NULL;\n}\n\nCATIPrtContainer_var spiPrtContainer  = spiInit-&gt;GetRootContainer(\"CATIPrtContainer\");\nif (spiPrtContainer == NULL_var)\n{\ncout&lt;&lt;\"fail to get spiPrtContainer\"&lt;&lt;endl;\nreturn NULL;\n}\n\nCATISpecObject_var spiSpecOnPart = spiPrtContainer-&gt;GetPart();\nif (spiSpecOnPart == NULL_var)\n{\ncout&lt;&lt;\"fail to get SpecPrt\"&lt;&lt;endl;\nreturn NULL;\n}\n\n\n///\nCATPathElement* pRootPath = new CATPathElement(spiSpecOnPart);\n\n//\u83b7\u53d6\u53ef\u89c6\u5316\u7ba1\u7406\u63a5\u53e3\nCATVisManager* pVisManager =  CATVisManager::GetVisManager();\n\n//\u7528\u6765\u5c55\u793a\u8fd9\u4e2a\u6a21\u578b\u7684CATIVisu\u63a5\u53e3\u5217\u8868\nlist&lt;IID&gt; ListIVisu3d; IID * pIIDInf = new IID(IID_CATI3DGeoVisu);\nListIVisu3d.fastadd(pIIDInf);\n\n//\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u76843D\u89c6\u70b9\nCAT3DViewpoint* p3DViewer = new CAT3DViewpoint();\n\n//\u8fde\u63a5\u5230CATVisManager\nif (pVisManager)\n{\nhr = pVisManager-&gt;AttachTo(pRootPath,p3DViewer,ListIVisu3d);\n}\n\nVisualizationTextRep(pVisManager,ListIVisu3d,p3DViewer,spiPrtContainer,pRefDoc);\ndelete pIIDInf,pIIDInf=NULL;\nListIVisu3d.empty();\npRootPath-&gt;Release();pRootPath=NULL;\n///\n\n//\u83b7\u53d6\u673a\u68b0\u96f6\u4ef6\u7684\u56fe\u5f62\u8868\u793a\u63a5\u53e3\nCATI3DGeoVisu_var spi3DGeoVisu = spiSpecOnPart;\nif (spi3DGeoVisu == NULL_var)\n{\ncout&lt;&lt;\"Fail to get spi3DGeoVisu\"&lt;&lt;endl;\nreturn NULL;\n}\n\nCATRep* pRep = spi3DGeoVisu-&gt;GiveRep();\nif (!pRep)\n{\ncout&lt;&lt;\"fail to get Rep\"&lt;&lt;endl;\nreturn NULL;\n}\n\nCAT3DRep*   pRep3D = (CAT3DRep*)pRep;\n\n\nreturn pRep3D;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/V5%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AERep%2C%E4%BA%8C%E7%BB%B4%E5%90%8C%E7%90%86/#aaa","title":"aaa","text":"<pre><code>  CATDocument* pRefDoc = sPartDocList[1];\nCATIDftDocumentServices *piDftDocServices = NULL;                                    //\u83b7\u53d6\u5de5\u7a0b\u56fe\u7684\u7ed8\u56fe\u6587\u6863\u63a5\u53e3\u6307\u9488\npRefDoc-&gt;QueryInterface(IID_CATIDftDocumentServices, (void**)&amp;piDftDocServices); //\u83b7\u53d6\u5de5\u7a0b\u56fe\u7684\u7ed8\u56fe\u529f\u80fd\u63a5\u53e3\n\nCATIDftDrawing *piDftDrawing = NULL;                                                 //\u5de5\u7a0b\u56fe\u6307\u9488\npiDftDocServices-&gt;GetDrawing(IID_CATIDftDrawing, (void**)&amp;piDftDrawing);    //\u83b7\u5f97\u5de5\u7a0b\u56fe\u6307\u9488\n\nCATIDrawing_var spD = piDftDrawing;\n\nCATISheet_var piS = spD-&gt;GetCurrentSheet();\nCATPathElement* pRootPath = new CATPathElement(piS);\n\n//\u83b7\u53d6\u53ef\u89c6\u5316\u7ba1\u7406\u63a5\u53e3\nCATVisManager* pVisManager = CATVisManager::GetVisManager();\n\n//\u7528\u6765\u5c55\u793a\u8fd9\u4e2a\u6a21\u578b\u7684CATIVisu\u63a5\u53e3\u5217\u8868\nlist&lt;IID&gt; ListIVisu3d;\nIID * pIIDInf = new IID(IID_CATI2DGeoVisu);\nListIVisu3d.fastadd(pIIDInf);\n\n//\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u76843D\u89c6\u70b9\nCAT2DViewpoint* p3DViewer = new CAT2DViewpoint();\n\n//\u8fde\u63a5\u5230CATVisManager\nif (pVisManager)\n{\npVisManager-&gt;AttachTo(pRootPath, p3DViewer, ListIVisu3d);\n}\n\ndelete pIIDInf, pIIDInf = NULL;\nListIVisu3d.empty();\npRootPath-&gt;Release(); pRootPath = NULL;\n\n//\u83b7\u53d6\u673a\u68b0\u96f6\u4ef6\u7684\u56fe\u5f62\u8868\u793a\u63a5\u53e3\nCATI2DGeoVisu_var spi3DGeoVisu = piS;\n\nCATRep* pRep = spi3DGeoVisu-&gt;GiveRep();\n</code></pre>"},{"location":"DS-CODE/CAA/V6%E5%AF%BC%E5%87%BAcgr%E6%96%87%E4%BB%B6/","title":"V6\u5bfc\u51facgr\u6587\u4ef6","text":""},{"location":"DS-CODE/CAA/V6%E5%AF%BC%E5%87%BAcgr%E6%96%87%E4%BB%B6/#v6cgr","title":"V6\u5bfc\u51facgr\u6587\u4ef6","text":"<pre><code>{\nCATIPLMNavReference* pBoltOccurrence = NULL;\nCATOmbLifeCycleRootsBag iBag;\nHRESULT rc = CAAOpenPLMComponent(\"VPMReference\", \"prd-94417684-00019505\", \"A.1\", IID_CATIPLMNavReference, (void**)&amp;pBoltOccurrence, iBag, TRUE);\n\nif (FAILED(rc))\n{\ncout &lt;&lt; \"CAAOpenPLMComponent is failed\" &lt;&lt; endl;\n}\n\nCATIPLMNavReference_var piBoltReference = pBoltOccurrence;\nCATIPLMNavOccurrence_var spBoltOccurrence;\nCATIPrdOccurrenceMngt * piPrdOccurrenceMngt = NULL;\nif (SUCCEEDED(rc))\n{\nrc = CATPrdGetOccurrenceMngt(piPrdOccurrenceMngt);\nif (SUCCEEDED(rc))\n{\nrc = piPrdOccurrenceMngt-&gt;GetOrCreateRootOccurrence(piBoltReference, spBoltOccurrence);\nif (SUCCEEDED(rc))\ncout &lt;&lt; \"2-a- Get Bolt occurence OK\" &lt;&lt; endl;\nelse\ncout &lt;&lt; \"2-a- ERROR in getting Bolt occurence\" &lt;&lt; endl &lt;&lt; endl;\n}\n}\n\nCATIAlias_var spiAlias = spBoltOccurrence;\ncout &lt;&lt; \"Root PRODUCT Name:\" &lt;&lt; spiAlias-&gt;GetAlias() &lt;&lt; endl;\n\nCATI3DGeoVisu_var spi3DGeoVisu = spBoltOccurrence;\nif (spi3DGeoVisu == NULL_var)\n{\ncout &lt;&lt; \"Fail to get spi3DGeoVisu\" &lt;&lt; endl;\nreturn ;\n}\n\nCATRep* pRep = spi3DGeoVisu-&gt;GiveRep();\nif (!pRep)\n{\ncout &lt;&lt; \"fail to get Rep\" &lt;&lt; endl;\nreturn ;\n}\n\nchar* sPath = \"C:\\\\Users\\\\TL\\\\Desktop\\\\B1\\\\Test.cgr\";\n::CATWriteCgr(pRep, sPath);\n}\n</code></pre>"},{"location":"DS-CODE/CAA/VB%E6%90%9C%E7%B4%A2%E5%B9%B6%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4/","title":"VB\u641c\u7d22\u5e76\u542f\u52a8\u4e00\u4e2a\u547d\u4ee4","text":"<pre><code>Sub CATMain()\n\n    Dim kpcoll As New Collection\n    CATIA.ActiveEditor.Selection.Clear\n    CATIA.ActiveEditor.Selection.Search (\"Name=* &amp; Knowledgeware.'Knowledge Pattern',all\")\n    CATIA.StartCommand (\"Execute and upgrade\")\n    Next\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/CAA/View%20processing%20in%20CAA/","title":"View processing in CAA","text":"<p>CAA\u4e2d\u89c6\u56fe\u7684\u5904\u7406\u5206\u4e24\u79cd\u65b9\u5f0f\uff1a</p> <p>1\u3001CATI3DCamera \u4fd7\u79f0\u7167\u76f8\u673a\uff0c\u6b64\u65b9\u6cd5\u8fdb\u884c\u89c6\u56fe\u8f6c\u6362\u65f6\uff0c\u9644\u5e26\u65cb\u8f6c\u52a8\u4f5c\uff1b</p> <p>2\u3001CAT3DViewpoint 3D\u89c6\u89d2\uff0c\u6b64\u65b9\u6cd5\u8fdb\u884c\u89c6\u56fe\u8f6c\u6362\u65f6\uff0c\u65e0\u8f6c\u65cb\u8f6c\u52a8\u4f5c\u3002  \u5176\u4e2d\u9700\u6ce8\u610f\uff1a</p> <p>vp3d.SetTarget(fOriginalTarget); vp3d.SetOrigin(fOriginalOrigin); vp3d.SetSightDirection(fOriginalSightDirection); vp3d.SetUpDirection(fOriginalUpDirection);</p> <p>\u5176\u4e2dSetTarget\u4e0eSetOrigin\u987a\u5e8f\u7684\u6539\u53d8\u4f1a\u5bfc\u81f4\u8f6c\u6362\u540e\u89c6\u89d2\u7684\u4f4d\u7f6e\u6709\u6240\u504f\u5dee\u3002</p> <p>\u5168\u90e8\u9002\u5e94\u529f\u80fd\uff1a</p> <pre><code>//\u83b7\u5f97 main 3D viewpoint:\nCAT3DViewpoint &amp;vp3d =pViewer-&gt;GetMain3DViewpoint();\n\n//To reframe the view, we also need the representation bounding volume.\nCAT3DBagRep * rootBag = (CAT3DBagRep *)(vp3d.GetBag());\nif ( NULL == rootBag )\n{\nreturn TRUE;\n}\n//If the bounding element is invalid, let's force its calculation:\nif(rootBag-&gt;IsInvalid())\nrootBag-&gt;ComputeBoundingElement(1);\n\n//Retrieving of the bounding element:\nconst CAT3DBoundingSphere &amp;bs3d = rootBag-&gt;GetBoundingElement();\n\n//Retrieving of the bounding element radius:\nfloat radius = bs3d.GetRadius();\n\nif(radius == 0.f)\nradius = bs3d.GetRadiusMM();\n\ndouble dbAngle = vp3d.GetAngle();\ndouble dbRAngle = CATDegreeToRadian*dbAngle;\ndouble focus = 1.05f * (radius/tan(dbRAngle));\n\n\nfloat fzoom = vp3d.GetZoom();\nCATMathPointf TargetPosition;\nif (1 == _found)\n{\nTargetPosition = Origin;\n}\nelse if (0 == _found)\n{\nTargetPosition = bs3d.GetCenter();\n}\n\nCATMathPointf OriginPosition = TargetPosition- SightDir*(float)focus;\n\nvp3d.SetOrigin(OriginPosition);\nvp3d.SetSightDirection(SightDir);\nvp3d.SetTarget(TargetPosition);\nvp3d.SetUpDirection(upDir);\n</code></pre> <p>\u6b64\u529f\u80fd\u662f\u83b7\u53d6\u89c6\u56fe\u4e2d\u6240\u6709\u7279\u5f81\u7684Rep\uff0c\u627e\u53d6\u4e2d\u5fc3\uff0c\u6839\u636eRep\u7684\u663e\u793a\u5927\u5c0f\uff0c\u786e\u5b9a\u89c6\u89d2\u53c2\u6570\uff0c\u8f6c\u6362\u89c6\u89d2\u3002</p>"},{"location":"DS-CODE/CAA/auto%28%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%29/","title":"Auto(\u7c7b\u578b\u63a8\u65ad)","text":"<pre><code>127\u3001auto(\u7c7b\u578b\u63a8\u65ad)\nint a[3] = {1,2,3};\nfor (auto i:a)\n{\ncout&lt;&lt;i&lt;&lt;endl;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/build/","title":"CMD BUILD","text":""},{"location":"DS-CODE/CAA/build/#_1","title":"\u914d\u7f6e","text":"<pre><code>CATIA \u7248\u672c    VS \u7248\u672c   \u5907\u6ce8\nV5R25~27    VS2012  VS \u52fe\u9009\u5168\u90e8\nV5R28~29    VS2015  VS \u52fe\u9009\u5168\u90e8C++\nV5R30~31    VS2017  \u53c2\u8003\u6587\u4ef6\u5939\u5185\u7684xml ,\u5b89\u88c5\u65f6\u5019\u6709\u5bfc\u5165\u914d\u7f6e\u9009\u9879\nV5R32~  VS2019  \u53c2\u8003\u6587\u4ef6\u5939\u5185\u7684xml ,\u5b89\u88c5\u65f6\u5019\u6709\u5bfc\u5165\u914d\u7f6e\u9009\u9879\n</code></pre>"},{"location":"DS-CODE/CAA/build/#cmd","title":"CMD\u7f16\u8f91","text":"<p>\u4f9d\u6b21\u8fd0\u884c\u5982\u4e0b\u64cd\u4f5c</p> <ul> <li>\"C:\\Program Files\\Dassault Systemes\\B423_RADE\\win_b64\\code\\command\\tck_init.bat\"</li> <li>tck_profile V6R2021x_B423</li> <li>cd C:\\XUS\\200-CODE\\Dassault_Systemes\\3DEXPERIENCE_XUS_Code\\B423_Civil</li> <li>mkmk  -a -g -u  -brief &amp;&amp; mkrtv</li> </ul> <p></p>"},{"location":"DS-CODE/CAA/build/#_2","title":"\u754c\u9762\u64cd\u4f5c","text":"<ul> <li> <p>\u5b89\u88c5VS \u63d2\u4ef6 \"C:\\Program Files\\Dassault Systemes\\B32_RADE\\win_b64\\code\\bin\\3DSOpenNativeAppsExt2019.vsix\"</p> </li> <li> <p>\u8bbe\u7f6eVS \u73af\u5883 C:\\Program Files\\Dassault Systemes\\B29_RADE\\win_b64\\code\\command\\tck_init.bat</p> </li> </ul> <p> </p>"},{"location":"DS-CODE/CAA/char%E8%BD%ACwchar_t/","title":"Char\u8f6cwchar t","text":""},{"location":"DS-CODE/CAA/char%E8%BD%ACwchar_t/#case","title":"case","text":"<pre><code>// \u9700\u8981\u5c06\u5b57\u7b26\u4e32\u4eceunicode\u8f6c\u4e3autf-8\n//  wchar_t* pwchar = NULL;\n//  pwchar = new wchar_t((sPath.GetLengthInChar() + 1) * sizeof(wchar_t));\n//  sPath.ConvertToWChar(pwchar);\n\n//  MultiByteToWideChar(CP_OEMCP, NULL, sPath.ConvertToChar(), strlen(sPath.ConvertToChar()), pwchar, sPath.GetLengthInChar());\n//  pwchar[sPath.GetLengthInChar()] = '\\0';\n\nwchar_t *WStr;//\u6700\u540e\u4e00\u79cd\u6bd4\u8f83\u597d\nsize_t converted = 0;\nWStr = (wchar_t*)malloc((sPath.GetLengthInChar() + 1) * sizeof(wchar_t));\nmbstowcs_s(&amp;converted, WStr, sPath.GetLengthInChar()+1, sPath.ConvertToChar(), _TRUNCATE);\n</code></pre>"},{"location":"DS-CODE/CAA/double%E5%8F%96%E4%B8%89%E4%BD%8D%E5%B0%8F%E6%95%B0/","title":"Double\u53d6\u4e09\u4f4d\u5c0f\u6570","text":""},{"location":"DS-CODE/CAA/double%E5%8F%96%E4%B8%89%E4%BD%8D%E5%B0%8F%E6%95%B0/#case","title":"case","text":"<pre><code>#include &lt;math.h&gt;\ndouble dDis = 0.123678;\ndDis = floor(dDis * 1000.000f + 0.5) / 1000.000f;\n//out : dDis = 0.124;\n</code></pre>"},{"location":"DS-CODE/CAA/lib/","title":"Lib","text":"<pre><code>{\nfatal error C1189: #error :WINDOWS.H already included.  \u89e3\u51b3\u65b9\u6cd5\uff1a\u6700\u9876\u7aef\u5b9a\u4e49\u9884\u7f16\u8bd1\u7684\u5b8f*/\n#ifdef _WINDOWS_\n#undef _WINDOWS_     #include &lt;afx.h&gt;\n#endif\n\nCAA\u5e38\u7528\u4ee3\u7801\u6784\u4ef6\n#include&lt;afxwin.h&gt;\nAfcMessageBox(_T(\"hello!Point Command\"));\n\n//\u53d8\u91cf\u548c\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n//\u4f7f\u7528\u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26\u6765\u5b9e\u73b0\u8f6c\u6362\u8f93\u51fa\u5b9a\u4e49\n#define PR(x) cout&lt;&lt;#x\"=\"&lt;&lt;x&lt;&lt;\"\\n\";\n\n//\u4e00\u3001\u5f39\u51fa\u5bf9\u8bdd\u6846\n//1\u3001CATDlgNotify\nCATDlgNotify _OpenNotify;\nCATUnicodeString NotifyText;\n//NotifyText.BuildFromNum(iInputAllocatedSize);\n_OpenNotify = new CATDlgNotify(this, \"TEST\", CATDlgNfyWarning|CATDlgNfyOK);\n_OpenNotify-&gt;SetText(NotifyText);\n_OpenNotify-&gt;SetVisibility(CATDlgShow);\n\n//2\u3001MessageBox CATUnicodeString --&gt;LPSTR \u5229\u7528CString  afxstr;\nCATUnicodeString InstanceName;\nspProduct-&gt;GetPrdInstanceName(InstanceName);\nCString name=InstanceName.ConvertToChar();\nMessageBox(NULL,name,L\"OK\",MB_OK | MB_SYSTEMMODAL);\nMessageBox(NULL,L\"Hello World!\",L\"\u6210\u529f\",MB_OK | MB_SYSTEMMODAL);\n\n//\u4e8c\u3001\u83b7\u53d6CATIA\u73af\u5883\u53d8\u91cf\uff1a\nCATUnicodeString oPreviewFileName,TmpDir,File;\nchar *slash_tmp = NULL;\nif (CATGetEnvValue(\"CATInstallPath\", &amp;slash_tmp) == CATLibSuccess)\noPreviewFileName = slash_tmp;\nif (slash_tmp) free(slash_tmp); slash_tmp=NULL;\n#ifndef _WINDOWS_SOURCE\noPreviewFileName.Append(\"\\\\\");\n#else\noPreviewFileName.Append(\"/\");\n#endif\noPreviewFileName.Append(\"CAAxPDMPreview.jpg\");\n\n// get System environment variable\nchar *pathvar;\npathvar = getenv(\"PATH\");\ncout &lt;&lt; pathvar &lt;&lt; endl\n\n/*CATIA CAA 32\u4f4d\u548c64\u4f4d\u7f16\u8bd1\n        \u4fee\u6539\u73af\u5883\u53d8\u91cf\uff1a\n        _MkmkOS_BitMode  =  32   // Win32\u4f4d\u7f16\u8bd1\n        _MkmkOS_BitMode  =  64   // Win64\u4f4d\u7f16\u8bd1\n     */\n\n\n//\u4e94\u3001\u5c5e\u6027\u83b7\u53d6   \nCATIAttributesDescription *piAttrDesc = NULL;\nrc = spRootProduct-&gt;QueryInterface(IID_CATIAttributesDescription, (void **) &amp;piAttrDesc);\nif (FAILED(rc) || (NULL == piAttrDesc))\n{\ncout &lt;&lt; \"QueryInterface CATIAttributesDescription error\" &lt;&lt; endl;\nreturn 4;\n}\nCATIInstance *piInstance = NULL;\nrc = spRootProduct-&gt;QueryInterface(IID_CATIInstance, (void **) &amp;piInstance);\nif (FAILED(rc) || (NULL == piInstance))\n{\ncout &lt;&lt; \"QueryInterface CATIInstance error\" &lt;&lt; endl;\nreturn 4;\n}\nCATListValCATAttributeInfos attrInfoList; piAttrDesc-&gt;List(&amp;attrInfoList);\nfor (int i = 1; i &lt;= attrInfoList.Size(); i++)\n{\nCATAttributeInfos attrInfo = attrInfoList[i];\nconst CATUnicodeString&amp; propertyName = attrInfo.Name(); //\u5c5e\u6027\u540d\nconst CATUnicodeString&amp; valueType = attrInfo.Type()-&gt;Name(); //\u5c5e\u6027\u7c7b\u578b\nCATIValue *pValue = piInstance-&gt;GetValue(propertyName); //\u83b7\u5f97\u5bf9\u5e94\u5c5e\u6027\u540d\u7684\u5c5e\u6027\u503c\nCATUnicodeString value = \"\";\npValue-&gt;AsString(value);\ncout &lt;&lt; propertyName &lt;&lt; \"-\" &lt;&lt; valueType &lt;&lt; \"-\" &lt;&lt; value &lt;&lt; endl;\nif (pValue)\n{\npValue-&gt;Release();\npValue = NULL;\n}\n}\n\n//\u516d\u3001CATSystemInfo \u4e3b\u673a\u4fe1\u606f\u83b7\u53d6\n/*\u5168\u5c40\u65b9\u6cd5CATGetSystemInfo\uff0c\u83b7\u5f97\u4e00\u4e2aCATSystemInfo\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e3b\u673a\u540d\u5b57\u3001\u4e3b\u673a\u7cfb\u7edf\u540d\u5b57\u3001\u7cfb\u7edf\u7248\u672c\u7b49\u4e3b\u673a\u4fe1\u606f\u3002*/\nCATSystemInfo host;\n::CATGetSystemInfo(&amp;host);\n\ncout &lt;&lt; \"HostName:\" &lt;&lt; host.HostName &lt;&lt; endl;\ncout &lt;&lt; \"OSName:\" &lt;&lt; host.OSName &lt;&lt; endl;\ncout &lt;&lt; \"OSVersion:\" &lt;&lt; host.OSVersion &lt;&lt; endl;\ncout &lt;&lt; \"OSType:\" &lt;&lt; host.OSType &lt;&lt; endl;\ncout &lt;&lt; \"MinorVersion:\" &lt;&lt; host.MinorVersion &lt;&lt; endl;\ncout &lt;&lt; \"MajorVersion:\" &lt;&lt; host.MajorVersion &lt;&lt; endl;\n\n\nCATTime CATTime timeNow = CATTime::GetCurrentLocalTime();\nCATUnicodeString timeStr = timeNow.ConvertToString(\"%Y/%m/%d-%H:%M:%S\");\nstd::cout &lt;&lt; \"Current Time:\" &lt;&lt; timeStr.ConvertToChar() &lt;&lt; std::endl;\n\n//\u4e03\u3001C\uff03 C++ \u5b57\u7b26\u96c6\u8f6c\u6362  \u5b57\u8282\u6d41\nstring  str=\"\u5ba2\u670d\u7aef\u662f\u7528c#\u5199\u7684\uff0c\u670d\u52a1\u7aef\u662fc++\";\nsend(str);\npublic void send(msg)\n{\nstring hexstr=StringToHexString(str)\nchar[] chars= hexstr.ToCharArray();\nbyte[] byteData = Encoding.Default.GetBytes(chars);  socket.write(byteData ,0,byteData.length);\n}\n//\u5b57\u7b26\u4e32\u8f6c\u4e3a16\u8fdb\u5236\npublic string StringToHexString(string message)\n{\n//\u6309\u7167\u6307\u5b9a\u7f16\u7801\u5c06string\u7f16\u7a0b\u5b57\u8282\u6570\u7ec4\nbyte[] b = Encoding.UTF8.GetBytes(message);\nstring result = string.Empty;\nfor (int i = 0; i &lt; b.Length; i++)\n{\nresult += Convert.ToString(b[i], 16);\n}\nreturn result.ToUpper();\n}\n</code></pre>"},{"location":"DS-CODE/CAA/pAddedHuman%E4%B8%BA%E8%A2%AB%E5%A4%8D%E5%88%B6%E7%9A%84Product%20Reference%2CpDuplactedHuman%E4%B8%BA%E6%96%B0%E5%A4%8D%E5%88%B6%E7%9A%84Product%20Reference/","title":"pAddedHuman\u4e3a\u88ab\u590d\u5236\u7684Product Reference,pDuplactedHuman\u4e3a\u65b0\u590d\u5236\u7684Product Reference","text":"<pre><code>CATAdpDuplicator duplicator;\nCATIPLMComponent_var spComponent = pAddedHuman;\nCATIAdpPLMIdentificator *pAddedHumanId = NULL;\nspComponent -&gt; GetAdpID(pAddedHumanId);\nhr = duplicator.AddElement(pAddedHumanId);\nCATAdpComponentsAssociation association;\nhr = duplicator.Duplicate(association);\nCATIAdpPLMIdentificator *pDuplicated = NULL;\nCATAdpOpener  adpOpener(Bag);\nCATIPLMProducts *pDuplactedHuman = NULL;\nif(S_OK == association.GetAssociated(pAddedHumanId, pDuplicated))\n{\nhr=adpOpener.CompleteAndOpen(pDuplicated,IID_CATIPLMProducts,(void**)&amp;pDuplactedHuman);\nif(hr != S_OK){\n::MessageBoxString(\"\u590d\u5236\u5f15\u7528\u5931\u8d25!\");\nreturn;\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/preview/","title":"Preview","text":""},{"location":"DS-CODE/CAA/preview/#_1","title":"\u9884\u89c8","text":"<pre><code>CAT3DBagRep  * BagRep = new CAT3DBagRep ();  CAAIMyFrontView* piMyFrontView = NULL;\nHRESULT rc = QueryInterface(IID_CAAIMyFrontView, (void**) &amp; piMyFrontView);\nCATISpecObject_var spiView = NULL_var;\npiMyFrontView-&gt;GetView(spiView);\nCATI2DGeoVisu_var spi2DVisu =  spiView;\nif (spi2DVisu != NULL_var)\n{\ncout&lt;&lt;\"CATI2DGeoVisu_var 80\"&lt;&lt;endl;\nCATRep* pRep  = spi2DVisu-&gt;GiveRep();\nif (pRep != NULL)\n{\nCAT2DTo3DRep* p2DTo3DRep = CAT2DTo3DRep::CreateRep();\nif (p2DTo3DRep != NULL)\n{\np2DTo3DRep-&gt;AddChild(*pRep);\nBagRep -&gt; AddChild(*p2DTo3DRep);\n}\n}\n}else\ncout&lt;&lt;\"CATI2DGeoVisu_var 82\"&lt;&lt;endl;\n</code></pre> <pre><code>void CATAECBDGEnvDlg::This3DViewShow()\n{\nCATNavigation3DViewer* pNavigation3DViewer = new CATNavigation3DViewer(_Frame2, (const char*)\"Navigation3DViewer1\", 0, 600, 400, 0);\npNavigation3DViewer-&gt;SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);\n_Frame2-&gt;SetGridColumnResizable(0);\n\nif (pNavigation3DViewer != NULL)\n{\nCATFrmLayout* pLayout = CATFrmLayout::GetCurrentLayout();\nif (pLayout != NULL)\n{\nCATFrmWindow* pWindow = pLayout-&gt;GetCurrentWindow();\nif (pWindow != NULL)\n{\nCATViewer* pViewer = pWindow-&gt;GetViewer();\nfloat r = 0, g = 0, b = 0;\nif (pViewer != NULL)\n{\npViewer-&gt;GetBackgroundColor(&amp;r, &amp;g, &amp;b);\npNavigation3DViewer-&gt;SetBackgroundColor(r, g, b);//\u8bbe\u7f6eCATNavigation3DViewer\u80cc\u666f\u8272\u4e0e\u4e3b\u754c\u9762\u80cc\u666f\u8272\u76f8\u540c\n}\n}\n}\n\nCATIMmiPrtContainer_var spiPrtCont = NULL_var;\nif (SUCCEEDED(CAAGetPrtContainer(spiPrtCont)))\n{\nCATIMmiMechanicalFeature_var spPart = NULL_var;\nif (FAILED(spiPrtCont-&gt;GetMechanicalPart(spPart)))\n{\ncout &lt;&lt; \"Error : Get Part Failed !\" &lt;&lt; endl;\nreturn;\n}\n\nCATI3DGeoVisu_var spi3DGeoVisu = spPart;\nif (spi3DGeoVisu == NULL_var)\n{\ncout &lt;&lt; \"Fail to get spi3DGeoVisu\" &lt;&lt; endl;\nreturn;\n}\n\nCATRep* pRep = spi3DGeoVisu-&gt;GiveRep();\nif (!pRep)\n{\ncout &lt;&lt; \"fail to get Rep\" &lt;&lt; endl;\nreturn;\n}\n\nCAT3DRep*   pRep3D = (CAT3DRep*)pRep;\n\npNavigation3DViewer-&gt;AddRep(pRep3D);\npNavigation3DViewer-&gt;Draw();\npNavigation3DViewer-&gt;Reframe();\n}\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E4%B8%8D%E8%83%BD%E7%94%A8int%E5%BC%BA%E8%BD%ACCATCommandClientData/","title":"\u4e0d\u80fd\u7528int\u5f3a\u8f6cCATCommandClientData","text":""},{"location":"DS-CODE/CAA/%E4%B8%8D%E8%83%BD%E7%94%A8int%E5%BC%BA%E8%BD%ACCATCommandClientData/#intcatcommandclientdata","title":"\u4e0d\u80fd\u7528int\u5f3a\u8f6cCATCommandClientData","text":"<pre><code>#include \"CATDataType.h\"\nint SelectNum = CATPtrToINT32(data);\n</code></pre>"},{"location":"DS-CODE/CAA/%E4%B8%B4%E6%97%B6%E5%85%83%E7%B4%A0/","title":"\u4e34\u65f6\u5143\u7d20","text":""},{"location":"DS-CODE/CAA/%E4%B8%B4%E6%97%B6%E5%85%83%E7%B4%A0/#case","title":"case","text":"<pre><code>CAT3DArcCircleGP* pCircleGP = new CAT3DArcCircleGP(CATMathPointf::CATMathPointf(mPoint),\nCATMathVectorf::CATMathVectorf(mPlane.GetNormal())\n, dHeight, CATMathVectorf::CATMathVectorf(mLine.GetDirection()),\n0 , dAngle / 57.29577951308233 );\n//\u53c2\u65701\u3001\u5706\u5fc3\n//\u53c2\u65702\u3001\u652f\u6301\u9762\n//\u53c2\u65703\u3001\u534a\u5f84\n//\u53c2\u65704\u3001\u53c2\u8003\u8f74\uff0c\u5373\u89d2\u5ea6\u4ece\u54ea\u91cc\u5f00\u59cb\uff0c\u4e0e\u5f00\u59cb\u89d2\u5ea6\u7684\u5dee\u503c\n//\u53c2\u65705\u3001\u5f00\u59cb\u89d2\u5ea6\n//\u53c2\u65706\u3001\u7ed3\u675f\u89d2\u5ea6\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8EC%2B%2B%20%E5%AE%B9%E5%99%A8map%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"\u5173\u4e8eC++ \u5bb9\u5668map\u7684\u4f7f\u7528","text":""},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8EC%2B%2B%20%E5%AE%B9%E5%99%A8map%E7%9A%84%E4%BD%BF%E7%94%A8/#c-map","title":"\u5173\u4e8eC++ \u5bb9\u5668map\u7684\u4f7f\u7528","text":"<ul> <li>map\u952e\u4e0d\u53ef\u91cd\u590d  multimap\u952e\u53ef\u91cd\u590d</li> <li>\u8fd9\u4e2a\u7c7b\u578b\u7684\u5bb9\u5668\u4f1a\u6839\u636e\u5b58\u5165\u952e\u503c\u6240\u5360\u5185\u5b58\u5927\u5c0f\u81ea\u52a8\u6392\u5e8f\uff0c\u56e0\u6b64\uff0c\u6570\u636e\u5b58\u5165\u548c\u53d6\u51fa\u7684\u987a\u5e8f\u53ef\u80fd\u4f1a\u4e0d\u540c\u3002</li> </ul>"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8EGetUIActiveObject%E8%8E%B7%E5%8F%96%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%88%97%E8%A1%A8/","title":"\u5173\u4e8eGetUIActiveObject\u83b7\u53d6\u7684\u5bf9\u8c61\u5217\u8868","text":"<pre><code>CATPathElement.GetSize\u5f97\u5230\u7684\u7ed3\u6784\u6811\u662f\u4ece\u6839\u8282\u70b9\u5230\u9009\u62e9\u7684\u8282\u70b9\n\u5982\uff1aProduct1\nProduct2\nProduct3(UIActiveObject)\n\u90a3\u4e48\u6b64\u65f6\uff0cGetSize\u6570\u91cf\u4e3a3\uff0c\u4e14\u5bf9\u5e94\u7684\u987a\u5e8f\u4e3a\n1\n2\n3\n\u4e0b\u6807\u4ece0\u5f00\u59cb\nCATFrmEditor * pEditor = CATFrmEditor::GetCurrentEditor();\nif (NULL != pEditor)\n{\nCATPathElement UIActivePath = pEditor-&gt;GetUIActiveObject();\nCATBaseUnknown * pActiveProduct = (CATBaseUnknown*)(UIActivePath.FindElement(IID_CATIPLMProducts));\nif (NULL != pActiveProduct)\n{\nCATIAlias_var spiAlias = pActiveProduct;\ncout &lt;&lt; \"43 : \"&lt;&lt; spiAlias-&gt;GetAlias() &lt;&lt;endl;\n}\n\nCATBaseUnknown* pBase = NULL;\nUIActivePath.Search(IID_CATIPLMProducts, (void**)&amp;pBase);\nCATIAlias_var spiAlias = pBase;\ncout &lt;&lt; \"49 : \" &lt;&lt; spiAlias-&gt;GetAlias() &lt;&lt; endl;\n//\u6b64\u65f6\u5f97\u5230\u7684\u5c31\u662f\u9009\u62e9\u7684\u8282\u70b9(\u5b9e\u4f8b)\n\ncout &lt;&lt; \"Size : \"&lt;&lt; UIActivePath.GetSize() &lt;&lt;endl;\nfor (int i = 0;i &lt; UIActivePath.GetSize();i++)\n{\nCATIAlias_var spiAlias = UIActivePath[i];\ncout &lt;&lt; \"55 : \" &lt;&lt; spiAlias-&gt;GetAlias() &lt;&lt; \",\"&lt;&lt;i&lt;&lt;endl;\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8CATSafeArrayVariant%EF%BC%88%E5%8F%AF%E5%8F%98%E6%95%B0%E7%BB%84%EF%BC%89/","title":"\u5173\u4e8e\u4f7f\u7528CATSafeArrayVariant\uff08\u53ef\u53d8\u6570\u7ec4\uff09","text":""},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8CATSafeArrayVariant%EF%BC%88%E5%8F%AF%E5%8F%98%E6%95%B0%E7%BB%84%EF%BC%89/#catsafearrayvariant","title":"\u5173\u4e8e\u4f7f\u7528CATSafeArrayVariant\uff08\u53ef\u53d8\u6570\u7ec4\uff09","text":"<pre><code>double dAxes[9] = {};\nCATSafeArrayVariant* pSafeArrayVariant1 = BuildSafeArrayVariant(dAxes, 9);//\u6784\u9020\u4e00\u4e2a\u6307\u5b9a\u5927\u5c0f\u7684CATSafeArrayVariant*\ndouble dArr[9] = {};\nlong lSize = ConvertSafeArrayVariant(pSafeArrayVariant1, dArr, 9);//\u4eceCATSafeArrayVariant*\u4e2d\u53d6\u51fa\u6307\u5b9a\u6570\u91cf\u7684\u5185\u5bb9\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E5%88%9B%E5%BB%BA.CATfct%E6%96%87%E4%BB%B6/","title":"\u5173\u4e8e\u521b\u5efa.CATfct\u6587\u4ef6","text":""},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E5%88%9B%E5%BB%BA.CATfct%E6%96%87%E4%BB%B6/#catfct","title":"\u5173\u4e8e\u521b\u5efa.CATfct\u6587\u4ef6","text":"<ul> <li>\u53ef\u4ee5\u5c1d\u8bd5\u7279\u5f81\u5b9e\u73b0visu\u989d\u5916\u6dfb\u52a0\u65b0\u7684\u663e\u793a\u800c\u4e0d\u5f71\u54cd\u5176\u6784\u9020,\u4ec5\u5728\u8f93\u5165\u8f93\u51fa\u65f6\u8c03\u7528\u66f4\u65b0\u673a\u5236</li> <li>\u53c2\u8003\u7f51\u5740\uff1ahttps://blog.csdn.net/c_I_always/article/details/88715213</li> <li>\u5728CAA\u5f97Runtime Prompt\u7a97\u53e3\u8f93\u5165\u547d\u4ee4\u884cCATOptionsMgt.exe -nologin -Admin</li> <li>\u5728\u8bb8\u53ef\u8bc1\u53d1\u653e\u4e2d\u52fe\u9009\u8bb8\u53ef</li> <li>\u521b\u5efa\uff1a       CATfctEditorAssistant -create-new-catalog -catalog-name XXX.CATfct -with-client-id XX -into-directory $PWD/OS_Directory/resources/graphic         </li> <li>\u5bfc\u51faosm:        CATfctEditorAssistant -describe-as-osm -catalog-name XXX.CATfct -with-client-id XX -as XXX.osm -into-directory $PWD              </li> <li>\u5237\u65b0\uff1a       CATfctEditorAssistant -update-catalog -catalog-name XXX.CATfct -with-client-id XX -with-osm $PWD/XXX.osm -into-directory $PWD</li> <li>xxx.CATfct(\u540d\u79f0) XX(id\u8981\u4e00\u81f4)  $PWD(\u76ee\u5f55)        </li> <li>\u5982\u679c\u901a\u8fc7\u547d\u4ee4\u884c\u65e0\u6cd5\u521b\u5efa.CATfct\u6587\u4ef6\uff0c\u53ef\u901a\u8fc7V5\u7a0b\u5e8f\u521b\u5efa\uff08\u8be6\u89c1\uff1a\u300a\u521b\u5efaCATfct.cpp\u300b\uff09</li> <li>\u5982\u679c\u7279\u5f81\u5b9a\u4e49\u6b63\u786e\u4f46\u662f\u65e0\u6cd5\u66f4\u65b0\u5bf9\u5e94\u7684fct\uff0c\u5219\u68c0\u67e5\u5f53\u524d\u9879\u76ee\u91cc\u662f\u5426\u5b58\u5728\u540d\u79f0\u76f8\u540c\u7684\u81ea\u5b9a\u4e49\u7279\u5f81\uff0c\u5982\u679c\u5b58\u5728\uff0c\u66f4\u6362\u540d\u79f0\u6216\u8005\u5220\u6389\u65e7\u7684fct</li> </ul>"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E5%88%9B%E5%BB%BA.CATfct%E6%96%87%E4%BB%B6/#_1","title":"\u7528\u6cd5","text":"<pre><code>E:\\03_BIM_WORKS\\DEVELOPMENT\\04-DS\\DesignProjectV6R2019x&gt;CATfctEditorAssistant -help\n</code></pre> <p><pre><code>CATfctEditorAssistant -create-new-catalog -catalog-name &lt;name_of_catalog&gt; -with-client-id &lt;id&gt; [-author &lt;name&gt;] [-comment &lt;comment&gt;] [-using-template &lt;template&gt;] [-into-directory &lt;output_path&gt;]\nCATfctEditorAssistant -update-catalog -catalog-name &lt;name_of_catalog&gt; -with-client-id &lt;id&gt; [-with-osm &lt;path_of_osm&gt;] [-author &lt;name&gt;] [-comment &lt;comment&gt;] [-into-directory &lt;output_path&gt;]\nCATfctEditorAssistant -describe-as-osm -catalog-name &lt;name_of_catalog&gt; -with-client-id &lt;id&gt; [-in-version &lt;level&gt;] -as &lt;name_of_osm&gt; [-into-directory &lt;output_path&gt;]\nCATfctEditorAssistant -simulate-catalog-update -catalog-name &lt;name_of_catalog&gt; -with-client-id &lt;id&gt; -in-version &lt;level&gt; -with-osm &lt;path_of_osm&gt; [-into-directory &lt;output_path&gt;]\nCATfctEditorAssistant -help\n</code></pre> \u5176\u4e2d  \u4ee3\u8868\u5e26\u6709\u6269\u5c55\u540d\u7684\u6587\u4ef6\u540d\uff0c\u800c\u4e0d\u662f\u8def\u5f84,\u800c  \u4ee3\u8868\u6587\u4ef6\u8def\u5f84\u3002"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E5%88%9B%E5%BB%BA.CATfct%E6%96%87%E4%BB%B6/#_2","title":"\u8be6\u7ec6\u4fe1\u606f","text":"<pre><code>-create-new-catalog\uff1a\u521b\u5efa\u65b0\u7684\u7a7a\u76ee\u5f55\u3002\n-catalog-name    \uff08\u5fc5\u586b\u9879\uff09  \u6307\u5b9a\u8981\u521b\u5efa\u7684\u65b0\u76ee\u5f55\u7684\u540d\u79f0\u3002\n-with-client-id  \uff08\u5fc5\u586b\u9879\uff09  \u8bbe\u7f6e\u5ba2\u6237\u7aef\u6807\u8bc6\u5bc6\u94a5\u3002\n-author                       \u5728\u5386\u53f2\u8bb0\u5f55\u4e2d\u6307\u5b9a\u4f5c\u8005\u7684\u59d3\u540d\u3002\n-comment                      \u5c06\u8bc4\u8bba\u6dfb\u52a0\u5230\u5386\u53f2\u8bb0\u5f55\u3002\n-using-template               \u4f7f\u7528\u53e6\u4e00\u4e2a\u6a21\u677f\uff08\u9ed8\u8ba4\u4e3a\u6807\u51c6\u6a21\u677f\uff09\u3002\n-into-directory               \u6307\u793a\u8f93\u51fa\u76ee\u5f55\uff0c\u5176\u4e2d\u5c06\u5b58\u50a8\u8f93\u51fa\u6587\u4ef6\u3002\n\n-update-catalog\uff1a\u4f7f\u7528 osm \u6587\u4ef6\u66f4\u65b0\u73b0\u6709\u76ee\u5f55\u3002\n-catalog-name    \uff08\u5fc5\u586b\u9879\uff09  \u6307\u5b9a\u8981\u66f4\u65b0\u7684\u76ee\u5f55\u540d\u79f0\u3002\n-with-client-id  \uff08\u5fc5\u586b\u9879\uff09  \u63d0\u4f9b\u5ba2\u6237\u7aef\u6807\u8bc6\u5bc6\u94a5\u3002\n-with-osm                     \u6307\u5b9a\u7528\u4e8e\u66f4\u65b0\u7684 osm \u6587\u4ef6\u8def\u5f84\u3002\n-comment                      \u5c06\u8bc4\u8bba\u6dfb\u52a0\u5230\u5386\u53f2\u8bb0\u5f55\u3002\n-into-directory               \u6307\u793a\u8f93\u51fa\u76ee\u5f55\uff0c\u5176\u4e2d\u5c06\u5b58\u50a8\u8f93\u51fa\u76ee\u5f55\u3002\n\n-describe-as-osm\uff1a\u901a\u8fc7\u751f\u6210\u5176\u5173\u8054\u7684 osm \u6587\u4ef6\u63cf\u8ff0\u76ee\u5f55\u3002\n-catalog-name    \uff08\u5fc5\u586b\u9879\uff09  \u6307\u5b9a\u8981\u63cf\u8ff0\u7684\u76ee\u5f55\u540d\u79f0\u3002\n-with-client-id  \uff08\u5fc5\u586b\u9879\uff09  \u63d0\u4f9b\u5ba2\u6237\u7aef\u6807\u8bc6\u5bc6\u94a5\u3002\n-in-version                   \u5c06\u751f\u6210\u4e3a\u76ee\u5f55\u5185\u5bb9\u7eaf V5 \u6216\u7eaf V6 \u89c6\u56fe\u7684\u63cf\u8ff0\u3002\u56e0\u6b64\uff0c\u8fd9\u6837\u7684 osm \u63cf\u8ff0\u65e0\u6cd5\u7528\u4e8e\u66f4\u65b0\u3002\n-as              \uff08\u5fc5\u586b\u9879\uff09  \u6307\u793a\u8981\u751f\u6210\u7684\u5305\u542b\u76ee\u5f55\u63cf\u8ff0\u7684 osm \u6587\u4ef6\u3002\n-into-directory               \u6307\u793a\u8f93\u51fa\u76ee\u5f55\uff0c\u5176\u4e2d\u5c06\u5b58\u50a8\u8f93\u51fa osm \u6587\u4ef6\u3002\n\n-simulate-catalog-update\uff1a\u6a21\u62df\u76ee\u5f55\u66f4\u65b0\u3002\n-catalog-name    \uff08\u5fc5\u586b\u9879\uff09  \u6307\u5b9a\u8981\u6a21\u62df\u7684\u76ee\u5f55\u540d\u79f0\u3002\n-with-client-id  \uff08\u5fc5\u586b\u9879\uff09  \u63d0\u4f9b\u5ba2\u6237\u7aef\u6807\u8bc6\u5bc6\u94a5\u3002\n-in-version      \uff08\u5fc5\u586b\u9879\uff09  \u5c06\u751f\u6210\u4e3a\u76ee\u5f55\u5185\u5bb9\u7684\u7eaf V5 \u6216\u7eaf V6 \u89c6\u56fe\u7684\u63cf\u8ff0\u3002\u56e0\u6b64\uff0c\u8fd9\u6837\u7684 osm \u63cf\u8ff0\u65e0\u6cd5\u7528\u4e8e\u66f4\u65b0\u3002\n-with-osm\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E5%88%9B%E5%BB%BA%E7%89%B9%E5%BE%81%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5/","title":"\u5173\u4e8e\u521b\u5efa\u7279\u5f81\u66f4\u65b0\u5931\u8d25","text":"<p>1\u3001\u68c0\u67e5\u7279\u5f81\u8f93\u5165\u662f\u5426\u6b63\u786e 2\u3001\u68c0\u67e5\u624b\u52a8\u540c\u6837\u64cd\u4f5c\u662f\u5426\u80fd\u6b63\u786e\u4f7f\u7528\u8be5\u7279\u5f81 3\u3001\u5982\u624b\u52a8\u6ca1\u95ee\u9898\u5219\u68c0\u67e5\u7279\u5f81\u8f93\u5165\u662f\u5426\u8db3\u591f\uff0c\u6bd4\u5982\u8bbe\u7f6e\u4e86\u5bf9\u5e94\u7684\u6a21\u5f0f\u5374\u6ca1\u6709\u7ed9\u5bf9\u5e94\u7684\u53c2\u6570\uff08\u5047\u5982\u8bbe\u7f6e\u957f\u5ea6\u6a21\u5f0f\u5219\u5e94\u8be5\u7ed9\u957f\u5ea6\u53c2\u6570\uff09</p>"},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E6%8E%A5%E5%8F%A3%E6%8C%87CATIPLMNavOccurrence/","title":"\u5173\u4e8e\u63a5\u53e3\u6307CATIPLMNavOccurrence","text":""},{"location":"DS-CODE/CAA/%E5%85%B3%E4%BA%8E%E6%8E%A5%E5%8F%A3%E6%8C%87CATIPLMNavOccurrence/#catiplmnavoccurrence","title":"\u5173\u4e8e\u63a5\u53e3\u6307CATIPLMNavOccurrence","text":"<ul> <li>\u8be5\u6307\u9488\u591a\u6b21\u91ca\u653e\u53ef\u80fd\u4f1a\u9020\u6210\u7a0b\u5e8f\u5d29\u6e83,\u6240\u4ee5\u7684CAA\u7a0b\u5e8f\u90fd\u5efa\u8bae\u591a\u4f7f\u7528\u667a\u80fd\u6307\u9488</li> </ul>"},{"location":"DS-CODE/CAA/%E5%87%A0%E4%BD%95%EF%BC%8C%E6%8B%93%E6%89%91%EF%BC%8C%E7%89%B9%E5%BE%81%E7%9A%84%E7%90%86%E8%A7%A3/","title":"\u51e0\u4f55\uff0c\u62d3\u6251\uff0c\u7279\u5f81\u7684\u7406\u89e3","text":""},{"location":"DS-CODE/CAA/%E5%87%A0%E4%BD%95%EF%BC%8C%E6%8B%93%E6%89%91%EF%BC%8C%E7%89%B9%E5%BE%81%E7%9A%84%E7%90%86%E8%A7%A3/#aa","title":"aa","text":"<p>\u51e0\u4f55\u521b\u5efa\u8fc7\u7a0b\u4f1a\u5f97\u5230\u5bf9\u5e94\u7684\u51e0\u4f55\u4fe1\u606f\uff0c\u6bd4\u5982\u70b9\uff0c\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u5750\u6807 \u53ef\u4ee5\u901a\u8fc7\u62d3\u6251\u6784\u9020\u51e0\u4f55\u4fe1\u606f\u5bf9\u5e94\u7684Body\u4ece\u800c\u7528\u4e8e\u62d3\u6251\u64cd\u4f5c\u8ba1\u7b97 \u6bd4\u5982\u7528CATGeoFactory\u521b\u5efa\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230\u70b9\u7684\u5750\u6807\uff0c\u7136\u540e\u901a\u8fc7CATCGMCreateTopPointXYZ\u6784\u9020\u51fa\u70b9\u7684Body \u62d3\u6251\u8ba1\u7b97\u7684\u7ed3\u679c\u662f\u65ad\u53c2\u7684\uff0c\u6ca1\u6709\u521b\u5efa\u8fc7\u7a0b\uff0c\u4f46\u662f\u51e0\u4f55\uff0c\u62d3\u6251\u8fd0\u7b97\u901f\u5ea6\u5feb \u7279\u5f81\u8ba1\u7b97\u5e26\u8fc7\u7a0b\uff0c\u65b9\u4fbf\u7b80\u5355\uff0c\u901f\u5ea6\u8f83\u6162</p> <pre><code>CATGeoFactory* pGeoFactory = spCurveBody-&gt;GetContainer();\n\nCATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration();\nCATTopData TopData(pConfig);\n\nCATLISTP(CATCell) pCellListp;\nspCurveBody-&gt;GetAllCells(pCellListp,0);\n\nCATBody* pBodyV = pGeoFactory-&gt;CreateBody();\nCATDomain *pShell = pBodyV-&gt;CreateDomain(0);\npShell-&gt;AddCell(pCellListp[1]);\npBodyV-&gt;AddDomain(pShell);\nCATBody* piPointOnWire = ::CATCGMCreateTopPointOnWire(pGeoFactory, &amp;TopData, spCurveBody, 0.5, pBodyV, CatTopPointLRatio);\nif (piPointOnWire != NULL)\n{\nCATBody* pNormalLineBody = ::CATCGMCreateTopLineNormalToShell(pGeoFactory,&amp;TopData, piPointOnWire, spFaceBody,10000);\nCATIMmiMechanicalFeature* piNewFeature = NULL;\nif (SUCCEEDED(spiDatumFactory-&gt;InstanciateDatum(pNormalLineBody,piNewFeature)))\n{\nCAASetInsert(piNewFeature, _spResultSet);\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%88%87%E6%8D%A2%E5%88%B0%E8%8D%89%E5%9B%BE%E7%95%8C%E9%9D%A2%E4%B8%94%E5%91%BD%E4%BB%A4%E5%9D%87%E5%8F%AF%E7%94%A8/","title":"\u5207\u6362\u5230\u8349\u56fe\u754c\u9762\u4e14\u547d\u4ee4\u5747\u53ef\u7528","text":"<pre><code>CATIEdit_var spiEdit = spiSketch;\nif (!!spiEdit)\n{\ncout &lt;&lt; \"370\" &lt;&lt; endl;\nCATPathElement * pPathToReturn = NULL;\n\nCATIMmiMechanicalFeature_var pSelectedElt = spiSketch;\n\nif (NULL_var != pSelectedElt)\n{\nCATIBuildPath *piBuildPath = NULL;\nif (SUCCEEDED(pSelectedElt-&gt;QueryInterface(IID_CATIBuildPath, (void**)&amp;piBuildPath)))\n{\nCATPathElement Context = GetEditor()-&gt;GetUIActiveObject();\npiBuildPath-&gt;ExtractPathElement(&amp;Context, &amp;pPathToReturn);\n\npiBuildPath-&gt;Release();\npiBuildPath = NULL;\n}\n}\nspiEdit-&gt;Activate(pPathToReturn);\n}\nelse\ncout &lt;&lt; \"373\" &lt;&lt; endl;\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BAAEC%E8%8A%82%E7%82%B9%EF%BC%88%E9%81%93%E8%B7%AF%EF%BC%89/","title":"\u521b\u5efaAEC\u8282\u70b9\uff08\u9053\u8def\uff09","text":"<pre><code>\u6dfb\u52a0\u73af\u5883\u53d8\u91cf\uff1aCEG_CAA_NewAecObject=1\n\u7c7b\u578b\u53ef\u4ee5\u7528\u8bed\u8a00\u6d4f\u89c8\u5668\u67e5\u627e\u6216\u5176\u5b83\u65b9\u6cd5...\n\n```cpp\nCATIPLMNavReference_var spReference = NULL_var;\nCATCivilPLMFactory::CreateAECObject(\"AecSite\", FALSE, FALSE, CATCkeScale::CATLargeScale, NULL_var, spReference);\n\nCATIPLMNavReference_var spReference = NULL_var;\nCATCivilPLMFactory::CreateAECObject(\"AecBeam\", FALSE, FALSE, CATCkeScale::CATLargeScale, NULL_var, spReference);\n\nCATIPLMComponent * pIPLMComponent = NULL;//\u83b7\u53d6\u5230\u5168\u5c40\u7684\u4f1a\u8bdd\nspReference-&gt;QueryInterface(IID_CATIPLMComponent, (void**)&amp;pIPLMComponent);\nCATFrmEditor * opNewEditor = NULL;\nCATIPLMOpenServices* pPLMOpenServices = NULL;\nCATPLMOpenServicesFactory::GetPLMOpenServices(pPLMOpenServices);\nif (pPLMOpenServices == NULL)\n{\n    cout &lt;&lt; \"pPLMOpenServices == NULL\" &lt;&lt; endl;\n    return;\n}\npPLMOpenServices-&gt;PLMOpenInNewWindow(pIPLMComponent, opNewEditor);\n\n//\u5c1d\u8bd5\u6240\u6709\u7684Civil\u7c7b\u578b\nCATUnicodeString sData = \"OtherBridgeArchitecturalElement,Abutment,AnchorBlock,Arch,Bridge,Deck,HangerBelt,OtherBridgeSpatialStructureElement,Pier,Span,StayBelt,SuspensionSystem,Tower,ArchSegment,Crosshead,DeckSegment,HangerCable,OtherBridgeStructureElement,PierSegemtn,StayCable,SuspensionCable,TowerSegment,Way,Chimney,Covering,CurtainWall,Door,OtherAecArchitecturalElement,Railing,Ramp,RampFlight,Roof,ShadingDevice,Stair,StairFlight,Window,ElementAssembly,SpatialZone,Anchor,Coupler,DiscreteAccessory,Reinforcingbar,ReinforcingMesh,Tendon,TendonAnchor,FurnishingElement,Foundation,OtherAecSpatialStructureElement,Site,Terrain,Beam,Bearing,Cable,CaissonFoundation,Column,Footing,Member,OpeningElement,OtherAecStructuralElement,Pile,Plate,Slab,Stiffener,Wall,TransportElement,Building,Space,Storey,Dam,OtherDamSpatialStructureElement,Culvert,Drainage,OtherDrainageSpatialStructureElement,Trench,3DPart,OtherRailwayElement,TrackPanel,TrackRail,TrackSleeper,TrackTurnout,OtherRailwaySpatialStructureElement,Railway,RailwayStretch,RailwaySwitch,OtherRoadElement,OtherRoadSpatialStructureElement,Road,RoadInterchange,RoadIntersection,RoadRamp,RoadStretch,ExcavationWorks,FillingWorks,OtherSubgradeElement,RetainingElement,Stockpile,SubgradeLayer,OtherSubgradeSpatialStructureElement,RetainingStructure,Subgrade,OtherTunnelElement,RingSegment,Bay,FullTunnelSpace,OtherTunnelSpatialStructureElement,RingSpace,Tunnel,TunnelInterchange,TunnelStretch\";\nCATListOfCATUnicodeString sDataList = CAADecomposeTheString(\",\", sData);\nfor (int i = 1;i &lt;= sDataList.Size();i++)\n{\n    CATUnicodeString sText = \"Aec\" + sDataList[i];\n    CATIPLMNavReference_var spReference = NULL_var;\n    CATCivilPLMFactory::CreateAECObject(sText, FALSE, FALSE, CATCkeScale::CATLargeScale, NULL_var, spReference);\n    if (spReference == NULL_var)\n    {\n        cout &lt;&lt; \"Failed : \" &lt;&lt; sDataList[i] &lt;&lt; endl;\n    }\n    else\n        cout &lt;&lt; \"Success : \" &lt;&lt; sDataList[i] &lt;&lt; endl;\n}\n```\n\n//\u7ed3\u679c\uff0c\u6709\u4e00\u4e9b\u8fd9\u6837\u521b\u5efa\u4e0d\u51fa\u6765\nFailed : OtherBridgeArchitecturalElement\nFailed : Abutment\nFailed : AnchorBlock\nFailed : Arch\nFailed : Bridge\nFailed : Deck\nFailed : HangerBelt\nFailed : OtherBridgeSpatialStructureElement\nFailed : Pier\nFailed : Span\nFailed : StayBelt\nFailed : SuspensionSystem\nFailed : Tower\nFailed : ArchSegment\nFailed : Crosshead\nFailed : DeckSegment\nFailed : HangerCable\nFailed : OtherBridgeStructureElement\nFailed : PierSegemtn\nFailed : StayCable\nFailed : SuspensionCable\nFailed : TowerSegment\nFailed : Way\nSuccess : Chimney\nSuccess : Covering\nSuccess : CurtainWall\nSuccess : Door\nFailed : OtherAecArchitecturalElement\nSuccess : Railing\nSuccess : Ramp\nSuccess : RampFlight\nSuccess : Roof\nSuccess : ShadingDevice\nSuccess : Stair\nSuccess : StairFlight\nSuccess : Window\nSuccess : ElementAssembly\nSuccess : SpatialZone\nFailed : Anchor\nFailed : Coupler\nSuccess : DiscreteAccessory\nSuccess : Reinforcingbar\nSuccess : ReinforcingMesh\nSuccess : Tendon\nSuccess : TendonAnchor\nSuccess : FurnishingElement\nSuccess : Foundation\nFailed : OtherAecSpatialStructureElement\nSuccess : Site\nSuccess : Terrain\nSuccess : Beam\nSuccess : Bearing\nSuccess : Cable\nSuccess : CaissonFoundation\nSuccess : Column\nSuccess : Footing\nSuccess : Member\nSuccess : OpeningElement\nFailed : OtherAecStructuralElement\nSuccess : Pile\nSuccess : Plate\nSuccess : Slab\nSuccess : Stiffener\nSuccess : Wall\nSuccess : TransportElement\nFailed : Building\nFailed : Space\nFailed : Storey\nFailed : Dam\nFailed : OtherDamSpatialStructureElement\nFailed : Culvert\nFailed : Drainage\nFailed : OtherDrainageSpatialStructureElement\nFailed : Trench\nFailed : 3DPart\nFailed : OtherRailwayElement\nFailed : TrackPanel\nFailed : TrackRail\nFailed : TrackSleeper\nFailed : TrackTurnout\nFailed : OtherRailwaySpatialStructureElement\nFailed : Railway\nFailed : RailwayStretch\nFailed : RailwaySwitch\nFailed : OtherRoadElement\nFailed : OtherRoadSpatialStructureElement\nFailed : Road\nFailed : RoadInterchange\nFailed : RoadIntersection\nFailed : RoadRamp\nFailed : RoadStretch\nFailed : ExcavationWorks\nFailed : FillingWorks\nFailed : OtherSubgradeElement\nFailed : RetainingElement\nFailed : Stockpile\nFailed : SubgradeLayer\nFailed : OtherSubgradeSpatialStructureElement\nFailed : RetainingStructure\nFailed : Subgrade\nFailed : OtherTunnelElement\nFailed : RingSegment\nFailed : Bay\nFailed : FullTunnelSpace\nFailed : OtherTunnelSpatialStructureElement\nFailed : RingSpace\nFailed : Tunnel\nFailed : TunnelInterchange\n</code></pre> <p>}</p>"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BAAction/","title":"\u521b\u5efaAction","text":""},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BAAction/#action","title":"\u521b\u5efaAction","text":"<pre><code>{\nCATITypeDictionary_var spiDico = CATGlobalFunctions::GetTypeDictionary();\nCATICkeRelationFactory_var spiCkeRelationFactory = _spRelationSet-&gt;GetFactory();\n\nif (spiCkeRelationFactory != NULL_var &amp;&amp; spiDico != NULL_var &amp;&amp; spiCkeParmFactory != NULL_var)\n{\nCATIType_var spiType = NULL_var;\nspiDico-&gt;RetrieveType(\"Plane\", spiType);\nif (spiType == NULL_var)\n{\ncout &lt;&lt; \"NULL\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\" &lt;&lt; endl;\nreturn E_FAIL;\n}\n\nCATICkeFunctionFactory_var ABCD = CATCkeGlobalFunctions::GetFunctionFactory();\n//      CATIParmDictionary_var spParmDictionary = CATCkeGlobalFunctions::GetParmDictionary();\n//      CATICkeType_var spiLengthType = spParmDictionary-&gt;GetLengthType();\n//                  if (ABCD != NULL_var)\n//                  {\n//                      cout &lt;&lt; \"NUll 66666\" &lt;&lt; endl;\n//                      \n//                                  \nif (ABCD == NULL_var)\n{\ncout &lt;&lt; \"NUll 55555555\" &lt;&lt; endl;\nreturn E_FAIL;\n}\n\nCATICkeSignature_var spiSign = ABCD-&gt;CreateEvent(\"Fun\");//\u4e3aAction\u6dfb\u52a0\u5916\u90e8\u53c2\u6570\u8f93\u5165\uff0c\u6bd4\u5982\u9009\u62e9\u70b9\nif (spiSign == NULL_var)\n{\ncout &lt;&lt; \"NULL=========================\" &lt;&lt; endl;\nreturn E_FAIL;\n}\nspiSign-&gt;AddArgument(ABCD-&gt;CreateArg(\"Destination\", spiType));\nspiSign-&gt;AddArgument(ABCD-&gt;CreateArg(\"Axis\", spiType));\n\n//                  CATCkeListOfParm pParmList = new CATListValCATBaseUnknown_var[1];//\u7b2c\u4e94\u4e2a\u53c2\u6570\u7528\u4e8e\u4e3aAction\u6dfb\u52a0\u8fd0\u7b97\u65f6\u6240\u9700\u7684\u5df2\u5b58\u5728\u7684\u53c2\u6570\n//                  pParmList-&gt;Append(aaaa);\nCATICkeRelation_var spiCkeAction = spiCkeRelationFactory-&gt;CreateAction(\"Action\", \"\", \"\", spiSign, NULL, \"Let a(point)\");\nif (spiCkeAction != NULL_var)\n{\n/*  spiCkeAction-&gt;Add(aaaa, CATICkeArg::In);*///\u5c06\u5df2\u53c2\u6570\u7528\u4e8e\u8f93\u5165\u6216\u8005\u8f93\u51fa\u52a0\u5165\u5230Action\n_spRelationSet-&gt;AppendElement(spiCkeAction);\nrc = S_OK;\n}\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BA%E4%BD%93%E7%A7%AF%E9%9D%A2%E7%A7%AF%E7%AD%89%E5%8D%95%E4%BD%8D%E5%8F%82%E6%95%B0/","title":"\u521b\u5efa\u4f53\u79ef\u9762\u79ef\u7b49\u5355\u4f4d\u53c2\u6570","text":"<pre><code>double dValue = 0;\nsValue.ConvertToNum(&amp;dValue);\nspiCkeParm = spiCkeFactory-&gt;CreateDimension(CATCkeGlobalFunctions::GetParmDictionary()-&gt;FindMagnitude(\"VOLUME\"), sName, dValue);\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BA%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%E9%9B%86%E5%BE%97%E5%88%B0%E5%8F%82%E6%95%B0%E5%B7%A5%E5%8E%82%E4%BB%A5%E5%8F%8A%E5%8F%82%E6%95%B0%E9%9B%86/","title":"\u521b\u5efa\u51e0\u4f55\u56fe\u5f62\u96c6\u5f97\u5230\u53c2\u6570\u5de5\u5382\u4ee5\u53ca\u53c2\u6570\u96c6","text":""},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BA%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%E9%9B%86%E5%BE%97%E5%88%B0%E5%8F%82%E6%95%B0%E5%B7%A5%E5%8E%82%E4%BB%A5%E5%8F%8A%E5%8F%82%E6%95%B0%E9%9B%86/#_1","title":"\u521b\u5efa\u51e0\u4f55\u56fe\u5f62\u96c6\u5f97\u5230\u53c2\u6570\u5de5\u5382\u4ee5\u53ca\u53c2\u6570\u96c6","text":"<pre><code>CATIMmiUseSetFactory_var spiMmiUseSetFactory = piMmiPrtContainer;\nCATIMmiMechanicalFeature_var spiOpSet = NULL_var;\nif (spiMmiUseSetFactory != NULL_var)\n{\nrc = spiMmiUseSetFactory-&gt;CreateGeometricalSet(\"\",spiMmiPart,spiOpSet);\nif (FAILED(rc) || spiOpSet == NULL_var)\n{\ncout&lt;&lt;\"Create Set FAILED\"&lt;&lt;endl;\nreturn FALSE;\n}\n}else{\ncout&lt;&lt;\"CATIMmiUseSetFactory is NULL\"&lt;&lt;endl;\nreturn FALSE;\n}\n\nCATICkeParmFactory_var spiCkeParamFactory = piMmiPrtContainer;\n\nCATIParmPublisher_var spiPartParm = spiOpSet;\nCATIParmPublisher_var spiParameterSet = NULL_var;\nCATIParmPublisher_var spiRelationSet = NULL_var;\n\nCATIKweModelServices_var spiKweModelServices = CATCkeGlobalFunctions::GetModelServices();\nspiParameterSet = spiKweModelServices-&gt;GetCurrentSet(CATIKweModelServices::Parameter,spiPartParm,1);\nspiRelationSet = spiKweModelServices-&gt;GetCurrentSet(CATIKweModelServices::Relation,spiPartParm,1);\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BA%E5%B9%95%E5%A2%99%E7%AB%8B%E9%9D%A2/","title":"Facade Divide","text":"<pre><code>#include \"DivideLogical.h\"\n\nCATObjectModelerClass aa;\nDivideLogical bb;\n\nHRESULT DivideLogical::CreateFacadeCurves(CATDocument* pPartDoc,CATLISTV(CATBaseUnknown_var LevelList), CATLISTV(CATBaseUnknown_var) ShapeList)\n{\nHRESULT hr = E_FAIL;\n\n//\u58f0\u660e\u5168\u5c40\u53d8\u91cf\nCATISpecObject_var spGEO1 = NULL_var;\nCATISpecObject_var spGEO2 = NULL_var;\nCATISpecObject_var spGEO3 = NULL_var;\n/*CATISpecObject_var spGEO4 = NULL_var;*/\n\nCATIPrtPart_var spiPart = NULL_var;\nCATIGSMFactory_var spGSMFactory = NULL_var;\nCATICkeParmFactory_var spiParmFactory = NULL_var;\nCATIMechanicalRootFactory_var pMechanicalRootFactory = NULL_var;\n\n\nCATInit_var spInitOnDoc(pPartDoc);\nif (NULL_var == spInitOnDoc) return E_FAIL;\n\nCATIPrtContainer * piPrtCont = (CATIPrtContainer*)spInitOnDoc-&gt;GetRootContainer(\"CATIPrtContainer\");\nif (piPrtCont == NULL) return E_FAIL;\n\nspiPart = piPrtCont-&gt;GetPart();\n\nhr = piPrtCont-&gt;QueryInterface(IID_CATIGSMFactory, (void**)&amp;spGSMFactory);\nif (FAILED(hr) || spGSMFactory == NULL)\n{\ncout &lt;&lt; \"GSM \u5de5\u5382\u5931\u8d25\" &lt;&lt; endl;\n}\n\n//spiParmFactory = piPrtCont;\nhr = piPrtCont-&gt;QueryInterface(IID_CATICkeParmFactory, (void**)&amp;spiParmFactory);\nif (FAILED(hr) || spiParmFactory == NULL)\n{\ncout &lt;&lt; \"Parameters \u5de5\u5382\u5931\u8d25\" &lt;&lt; endl;\n}\n\n//\u5de5\u5382\u83b7\u5f97\n//CATIMechanicalRootFactory_var pMechanicalRootFactory(piPrtCont);\nhr = piPrtCont-&gt;QueryInterface(IID_CATIMechanicalRootFactory, (void**)&amp;pMechanicalRootFactory);\nif (FAILED(hr) || pMechanicalRootFactory == NULL)\n{\ncout &lt;&lt; \"QI IID_CATIMechanicalRootFactory Failed !\" &lt;&lt; endl;\n}\n\nCATIPartRequest* piPartRequest = NULL;\nif (spiPart == NULL_var)\n{\ncout &lt;&lt; \"Get Part Failed !\" &lt;&lt; endl;\nreturn E_FAIL;\n}\n\nhr = spiPart-&gt;QueryInterface(IID_CATIPartRequest, (void**)&amp;piPartRequest);\nif (FAILED(hr) || piPartRequest == NULL)\n{\ncout &lt;&lt; \"QI CATIPartRequest Failed !\" &lt;&lt; endl;\nreturn hr;\n}\n\n//\u521b\u5efa\u4e3b\u51e0\u4f55\u56fe\u5f62\u96c6\npMechanicalRootFactory-&gt;CreateGeometricalSet(\"INTERSECTION_CRVS\", spiPart, spGEO1);\npMechanicalRootFactory-&gt;CreateGeometricalSet(\"INTERSECTION_CRVS_PTS\", spiPart, spGEO2);\npMechanicalRootFactory-&gt;CreateGeometricalSet(\"INTERSECTION_CRVS_LNS\", spiPart, spGEO3);\n//pMechanicalRootFactory-&gt;CreateGeometricalSet(\"UDF\", spiPart, spGEO4);\n\npiPrtCont-&gt;Release();\npiPrtCont = NULL;\n\n// \u521b\u5efa\u7684\u76f8\u4ea4\u7ebf\u5217\u8868\nCATLISTV(CATBaseUnknown_var) InteCrvList;\n\n// \u521b\u5efa\u66f2\u9762\u4e0e\u697c\u5c42\u5e73\u9762\u76f8\u4ea4\nCATBaseUnknown_var aaa = NULL_var;\nfor (int j = 1; j &lt;= LevelList.Size(); j++)\n{\nCATBaseUnknown_var spLVLPln = LevelList[j];\nCATBaseUnknown_var spSurfRef = ShapeList[5];\nCATIGSMIntersect_var spIntersec = spGSMFactory-&gt;CreateIntersect(spLVLPln, spSurfRef);\naa.ObjectUpdate(spIntersec);\naa.SetInsert(spIntersec, spGEO1);\nInteCrvList.Append(spIntersec);\naaa = spIntersec;\nCATIAlias_var spiAlias = aaa;\nCATUnicodeString index_i;\nindex_i.BuildFromNum(j);\naa.SetObjAlias(aaa, \"INT-CRVS-\" + index_i);\n}\n\nfor (int k = 1; k &lt;= InteCrvList.Size(); k++)\n{\nCATUnicodeString index_i; index_i.BuildFromNum(k);\nCATISpecObject_var spiSetChild1 = NULL_var;\nhr = pMechanicalRootFactory-&gt;CreateGeometricalSet(\"PTS-\" + index_i, spGEO2, spiSetChild1, 0);\nif (FAILED(hr) || spiSetChild1 == NULL_var) {\ncout &lt;&lt; \"Create PTS Set FAILED\" &lt;&lt; endl;\nreturn hr;\n}\nCATISpecObject_var spiSetChild2 = NULL_var;\nhr = pMechanicalRootFactory-&gt;CreateGeometricalSet(\"LN-\" + index_i, spGEO3, spiSetChild2, 0);\nif (FAILED(hr) || spiSetChild2 == NULL_var) {\ncout &lt;&lt; \"Create PTS Set FAILED\" &lt;&lt; endl;\nreturn hr;\n}\n\n/*CATISpecObject_var spUDFSet = NULL_var;\n        hr = pMechanicalRootFactory-&gt;CreateGeometricalSet(\"UDF-\" + index_i, spGEO4, spUDFSet, 0);\n        if (FAILED(hr) || spUDFSet == NULL_var) {\n            cout &lt;&lt; \"Create PTS Set FAILED\" &lt;&lt; endl;\n            return hr;\n        }*/\n\n// GET LENGTH\ndouble lnLen;\naa.GetLength(InteCrvList[k], lnLen);\nCATUnicodeString llen;\nllen.BuildFromNum(lnLen);\ndouble glaLength = 1.200;\n\nint jcount = lnLen / (glaLength * 1000);\ncout &lt;&lt; \"PTS COUNT:\" &lt;&lt; jcount &lt;&lt; endl;\nCATICkeParm_var idistance = spiParmFactory-&gt;CreateLength(\"Length\", glaLength);\n\nCATLISTV(CATBaseUnknown_var) ptList; ptList.RemoveAll();\n\nCATBaseUnknown_var StartPoint = NULL_var;\nStartPoint = spGSMFactory-&gt;CreateIntersect(InteCrvList[k], ShapeList[6]);\naa.ObjectUpdate(StartPoint);\naa.SetInsert(StartPoint, spiSetChild1);\naa.SetObjAlias(StartPoint, \"PT-1\");\n//\u7b2c\u4e00\u70b9\u52a0\u5165\u5217\u8868\nptList.Append(StartPoint);\n\nfor (int j = 1; j &lt;= jcount; j++)\n{\n//\u521b\u5efa\u5e95\u5c42\u57fa\u51c6\u70b9\nCATIGSMUsePointOnCurve_var spOpt = spGSMFactory-&gt;CreatePoint(InteCrvList[k], StartPoint, idistance, CATGSMOrientation::CATGSMSameOrientation);\nspOpt-&gt;SetLength(idistance);\nspOpt-&gt;SetOnCurveType(0);\nspOpt-&gt;SetReferencePoint(StartPoint);\naa.ObjectUpdate(spOpt);\naa.SetInsert(spOpt, spiSetChild1);\nStartPoint = spOpt;\n\nCATBaseUnknown_var obj = spOpt;\nCATUnicodeString index;\nindex.BuildFromNum(j + 1);\naa.SetObjAlias(obj, \"PT-\" + index);\n\nptList.Append(spOpt);\n}\n\n// \u83b7\u5f97\u5e73\u9762\nCATBaseUnknown_var spBasePLN1, spBasePLN2;\n\n// \u901a\u8fc7\u5e73\u9762\u53bb\u9650\u5b9a\u9ad8\u5ea6\nfor (int m = 1; m &lt;= ptList.Size(); m++)\n{\n\ndouble ZVector[3];\nZVector[0] = 0.;\nZVector[1] = 0.;\nZVector[2] = 1.;\n\n// \u521b\u5efaZ\u65b9\u5411\u53c2\u8003\u7ebf\nCATICkeParm_var ix = spiParmFactory-&gt;CreateLength(\"Length\", 0.0);\nCATICkeParm_var iy = spiParmFactory-&gt;CreateLength(\"Length\", 0.0);\nCATICkeParm_var iz = spiParmFactory-&gt;CreateLength(\"Length\", 1.0);\nCATIGSMDirection_var zdir = spGSMFactory-&gt;CreateDirection(ix, iy, iz);\naa.ObjectUpdate(zdir);\n\nif (k &gt; 1)\n{\nspBasePLN1 = LevelList[k - 1];\nspBasePLN2 = LevelList[k];\n\nCATUnicodeString plnname = aa.GetAlias(spBasePLN1);\ncout &lt;&lt; \"PLN name :\" &lt;&lt; plnname &lt;&lt; endl;\n\nCATICkeParm_var ist = spiParmFactory-&gt;CreateLength(\"Length\", 0.0);\nCATICkeParm_var ied = spiParmFactory-&gt;CreateLength(\"Length\", 4.0);\n\nCATIGSMLine_var spLineZDir = spGSMFactory-&gt;CreateLine(ptList[m], zdir, ist, ied, CATGSMOrientation::CATGSMSameOrientation);\n\nspLineZDir-&gt;SetFirstUptoElem(spBasePLN1);\nspLineZDir-&gt;SetSecondUptoElem(spBasePLN2);\n\naa.ObjectUpdate(spLineZDir);\naa.SetInsert(spLineZDir, spiSetChild2);\n\nCATUnicodeString INDEX_LN;\nINDEX_LN.BuildFromNum(k);\n\nCATUnicodeString INDEX_LN2;\nINDEX_LN2.BuildFromNum(m);\n\nCATBaseUnknown_var spVerLn = spLineZDir;\naa.SetAlias(spVerLn, \"CW-LN-\" + INDEX_LN + \"_\" + INDEX_LN2);\n}\n}\n}\nreturn S_OK;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BA%E6%96%87%E6%A1%A3%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E8%B5%84%E6%BA%90/","title":"\u521b\u5efa\u6587\u6863\u4e0a\u4f20\u4e0b\u8f7d\u8d44\u6e90","text":""},{"location":"DS-CODE/CAA/%E5%88%9B%E5%BB%BA%E6%96%87%E6%A1%A3%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E8%B5%84%E6%BA%90/#_1","title":"\u521b\u5efa\u6587\u6863\u4e0a\u4f20\u4e0b\u8f7d\u8d44\u6e90","text":"<pre><code>    HRESULT HR;\nCATListOfCATUnicodeString lListFilePaths, lListFileComments;\nCATUnicodeString p1 = \"H:\\\\V6Exercise\\\\TemplateProject\\\\JuniorAdmin\\\\SZLJuniorAdminFrame\\\\CNext\\\\resources\\\\graphic\\\\icons\\\\normal\\\\JuniorAdmin.bmp\";\nCATUnicodeString p2 = \"PLMCoreRepReference\";\nlListFilePaths.Append(p1);\nlListFileComments.Append(p2);\n\nCATIType_var spCATITypeOnType ;\nCATString typeName = \"Document\";//\u6587\u6863\u7c7b\u578b\n\nCATListValCATICkeParm_var lstCATListValCATICkeParmEmptyList;\nHR = CATCkePLMNavPublicServices::RetrieveKnowledgeType(typeName.CastToCharPtr(), spCATITypeOnType); if ( SUCCEEDED(HR) &amp;&amp; (NULL_var != spCATITypeOnType))\n{\ncout&lt;&lt;\"   Success CATCkePLMNavPublicServices::RetrieveKnowledgeType \"&lt;&lt; (spCATITypeOnType-&gt;Name()).ConvertToChar() &lt;&lt; endl;\n\n//Create Attribute List \nCATICkeParm_var hTmpParm;\nCATICkeParmFactory_var hCkeParamFact = CATCkeGlobalFunctions::GetVolatileFactory();\nif(!!hCkeParamFact)\n{\nhTmpParm = hCkeParamFact-&gt;CreateString(\"name\", \"JuniorAdmin\");\nlstCATListValCATICkeParmEmptyList.Append(hTmpParm);\nhTmpParm = hCkeParamFact-&gt;CreateString(\"Title\", \"\");\nlstCATListValCATICkeParmEmptyList.Append(hTmpParm);\nhTmpParm = hCkeParamFact-&gt;CreateString(\"description\", \"\");\nlstCATListValCATICkeParmEmptyList.Append(hTmpParm);\nhTmpParm = hCkeParamFact-&gt;CreateString(\"Access Type\", \"Inherited\");\nlstCATListValCATICkeParmEmptyList.Append(hTmpParm);\nhTmpParm = hCkeParamFact-&gt;CreateString(\"Language\", \"English\");\nlstCATListValCATICkeParmEmptyList.Append(hTmpParm);\n\ncout &lt;&lt; \"   Attribute values are set.\" &lt;&lt; endl;\n}\n}else { cout&lt;&lt;\"\u83b7\u53d6TYPE\u5931\u8d25\"&lt;&lt;endl; return 1;}\n\ncout &lt;&lt; \"   Creating New Document\" &lt;&lt; endl;\nPLMIDocument * piDocument = NULL;\nHR = PLMDocumentServices::CreateDocument(spCATITypeOnType, lstCATListValCATICkeParmEmptyList,\nlListFilePaths,\nlListFileComments,\npiDocument);//\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u6863\uff0c\u5373\u4f7f\u540c\u540d\uff0c\u6240\u4ee5\u5982\u679c\u591a\u6b21\u4f7f\u7528\u9700\u8981\u68c0\u67e5\u662f\u5426\u5b58\u5728\n\nif (FAILED(HR) || NULL == piDocument)   return 1;\n\nHR = piDocument-&gt;DownloadFile(\"JuniorAdmin.bmp\",\"H:\\\\\");//\u4e0b\u8f7d\u6587\u6863\u91cc\u7684\u8d44\u6e90\nif (FAILED(HR))\n{\ncout&lt;&lt;\"\u4e0b\u8f7d\u6587\u4ef6\u5931\u8d25\"&lt;&lt;endl;\n}else{\ncout&lt;&lt;\"\u4e0b\u8f7d\u6587\u4ef6\u6210\u529f\"&lt;&lt;endl;\n}\n\nHR = piDocument-&gt;CreateFile(\"H:\\\\MyTemp\\\\T\\\\Resources\\\\icon.jpg\",p2);//\u5728\u6587\u6863\u4e2d\u4e0a\u4f20\uff08\u521b\u5efa\uff09\u4e00\u4e2a\u65b0\u7684\u6b21\u5143\nif (FAILED(HR))\n{\ncout&lt;&lt;\"\u521b\u5efa\u6587\u4ef6\u5931\u8d25\"&lt;&lt;endl;\n}else{\ncout&lt;&lt;\"\u521b\u5efa\u6587\u4ef6\u6210\u529f\"&lt;&lt;endl;\n}\n\nCATOmbLifeCycleRootsBag Bag;\nBag.InsertRoot(piDocument);\n\npiDocument-&gt;Release();\npiDocument = NULL ;\n\nBag.RemoveAll();\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%8D%95%E7%BA%AF%E5%A4%9A%E9%80%89%E7%89%B9%E5%BE%81%E7%9A%84%E5%91%BD%E4%BB%A4%E4%B8%8D%E9%9C%80%E8%A6%81%E6%9E%84%E5%BB%BA%E5%AF%B9%E8%AF%9D%E6%A1%86/","title":"\u5355\u7eaf\u591a\u9009\u7279\u5f81\u7684\u547d\u4ee4\u4e0d\u9700\u8981\u6784\u5efa\u5bf9\u8bdd\u6846","text":"<p>\u7528\u4ee3\u7406\u81ea\u5e26\u7684\u6a21\u5f0f\u5373\u53ef</p> <pre><code>{\nvoid CATSketchOutputsCmd::BuildGraph()\n{\ncout &lt;&lt; \"CATSketchOutputsCmd::BuildGraph()\" &lt;&lt; endl;\n_AllAgent = new CATPathElementAgent(\"All\", CATISketch::ClassName(), CATDlgEngWithCSO | CATDlgEngRepeat | CATDlgEngWithPrevaluation | CATDlgEngMultiAcquisitionCtrl);\n_AllAgent-&gt;AddElementType(CATBaseUnknown::ClassName());\nAddCSOClient(_AllAgent);\n\nCATDialogState * Agent = GetInitialState(\"Select Sketch\");\nAgent-&gt;AddDialogAgent(_AllAgent);\n\nAddTransition(Agent, Agent,\nIsOutputSetCondition(_AllAgent),\nAction((ActionMethod)&amp;CATSketchOutputsCmd::ActionOne));\n}\n\n//-------------------------------------------------------------------------\n// ActionOne ()\n//-------------------------------------------------------------------------\nCATBoolean CATSketchOutputsCmd::ActionOne(void *data)\n{\ncout &lt;&lt; \"ActionOne()\" &lt;&lt; endl;\nif (_AllAgent != NULL)\n{\nCATSO* pObjSO = _AllAgent-&gt;GetListOfValues();\nCATPathElement *pElemPath = NULL;\nif (NULL != pObjSO)\n{\npObjSO-&gt;InitElementList();\nwhile (NULL != (pElemPath = (CATPathElement*)pObjSO-&gt;NextElement()))\n{\nCATBaseUnknown_var spObj = pElemPath-&gt;FindElement(IID_CATBaseUnknown);\nif (NULL_var != spObj)\n{\n_spAllSelectObjListV.Append(spObj);\n}\nelse\ncout &lt;&lt; \"Error : FindElement NULL !\" &lt;&lt; endl;\n}\n}\n}\nelse\ncout &lt;&lt; \"Error : Agent is NULL !\" &lt;&lt; endl;\n\n_AllAgent-&gt;InitializeAcquisition();\nif (_spAllSelectObjListV.Size() &gt; 0)\n{\nCommandOK();\nRequestDelayedDestruction();\n}\n\nreturn TRUE;\n}\n\nvoid CATSketchOutputsCmd::CommandOK()\n{\nCATIAlias_var spiAlias = NULL_var;\ncout &lt;&lt; \" Size = \" &lt;&lt; _spAllSelectObjListV.Size() &lt;&lt; endl;\n\nfor (int i = 1; i &lt;= _spAllSelectObjListV.Size(); i++)\n{\nCATISketch_var spiSkeSketch = _spAllSelectObjListV[i];\nif (spiSkeSketch != NULL_var)\n{\nspiAlias = spiSkeSketch;\nCATUnicodeString sSketchName = spiAlias-&gt;GetAlias();\n\nCATLISTV(CATI2DWFGeometry_var) sp2DGeometryListV;\nif (SUCCEEDED(spiSkeSketch-&gt;GetComponents(CATBaseUnknown::ClassName(),sp2DGeometryListV)) &amp;&amp; sp2DGeometryListV.Size() &gt; 0)\n{\nif (FAILED(spiSkeSketch-&gt;OpenEdition()))\n{\nCATUnicodeString sError = \"Error : OpenEditon is Failed , Sketch Name = \" + sSketchName + \" ! \";\ncout &lt;&lt; sError &lt;&lt; endl;\ncontinue;\n}\n\nCATI2DWFFactory_var spi2DFcatory = spiSkeSketch;\nif (spi2DFcatory != NULL_var)\n{\nfor (int j = 2; j &lt;= sp2DGeometryListV.Size(); j++)\n{\nspiAlias = sp2DGeometryListV[j];\ncout &lt;&lt; \"2DGeometry : \" &lt;&lt; spiAlias-&gt;GetAlias() &lt;&lt; endl;\nCATI2DPoint_var spi2DPoint = spiAlias;\nif (spi2DPoint == NULL_var)\n{\nCATBaseUnknown* pOutputGeometry = NULL;\nif (SUCCEEDED(spi2DFcatory-&gt;CreateOutput(spiAlias,CATBaseUnknown::ClassId(),&amp;pOutputGeometry)) &amp;&amp; pOutputGeometry != NULL)\n{\npOutputGeometry-&gt;Release(); pOutputGeometry = NULL;\n}\nelse\n{\ncout &lt;&lt; \"Error : CreateOutput is Failed !\" &lt;&lt; endl;\n}\n}\n}\n}\n\nif (FAILED(spiSkeSketch-&gt;CloseEdition()))\n{\nCATUnicodeString sError = \"Error : CloseEdition is Failed , Sketch Name = \" + sSketchName + \" ! \";\ncout &lt;&lt; sError &lt;&lt; endl;\ncontinue;\n}\n}\nelse\n{\ncout &lt;&lt; \"Error : GetComponents is Failed !\" &lt;&lt; endl;\n}\n\nsp2DGeometryListV.RemoveAll();\n}\nCAAUpdate(spiSkeSketch);\n\n}\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%8F%82%E6%95%B0%E6%B7%BB%E5%8A%A0%E5%A4%9A%E5%80%BC/","title":"\u53c2\u6570\u6dfb\u52a0\u591a\u503c","text":""},{"location":"DS-CODE/CAA/%E5%8F%82%E6%95%B0%E6%B7%BB%E5%8A%A0%E5%A4%9A%E5%80%BC/#code","title":"code","text":"<pre><code>HRESULT CAAParmAddMultivalued(CATBaseUnknown_var ispiElement, CATUnicodeString isName, CATListOfCATUnicodeString iStrList)\n{\nHRESULT rc = E_FAIL;\n\nCATIMmiPrtContainer_var spiPrtContainer = NULL_var;\nCATIMmiMechanicalFeature_var spiPart = NULL_var;\nif (SUCCEEDED(CAAGetPrtContainer(spiPrtContainer)) &amp;&amp; spiPrtContainer != NULL_var &amp;&amp; SUCCEEDED(spiPrtContainer-&gt;GetMechanicalPart(spiPart)))\n{\nCATICkeParmFactory_var spiCkeParmFactory = spiPrtContainer;\n\nCATICkeParm_var spiRoad = spiCkeParmFactory-&gt;CreateString(isName, \"\");\nif (spiRoad != NULL_var)\n{\nCATIAStrParam_var spiStrParam = spiRoad;\nif (spiStrParam != NULL_var)\n{\nCATUnicodeString dData[1000] = {};\n\nfor (int i = 1; i &lt;= iStrList.Size(); i++)\n{\ndData[i - 1] = iStrList[i];\n}\n\nint dSize = iStrList.Size();\nCATSafeArrayVariant* pArray = BuildSafeArrayVariant(dData, dSize);\nif (pArray != NULL)\n{\nrc = spiStrParam-&gt;SetEnumerateValues(*pArray);\nif (SUCCEEDED(rc))\n{\nCATBSTR bstrText = NULL;\niStrList[1].ConvertToBSTR(&amp;bstrText);\nspiStrParam-&gt;put_Value(bstrText);\n}\n\nspiRoad = spiStrParam;\nif (spiRoad != NULL_var)\n{\nCATIParmPublisher_var spiPublish = ispiElement;\nspiPublish-&gt;AppendElement(spiRoad);\n}\nFreeVariantSafeArray(pArray);\n}\n}\n}\n}\nreturn rc;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%A4%A7%E9%87%8F%E6%89%93%E5%BC%80%E4%BA%A7%E5%93%81%E6%97%B6%E9%9C%80%E6%B3%A8%E6%84%8F%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F%EF%BC%8C%E6%9C%80%E5%A5%BD%E4%B8%80%E4%B8%AA%E4%B8%AA%E6%89%93%E5%BC%80%E5%86%8D%E5%85%B3%E9%97%AD/","title":"\u5927\u91cf\u6253\u5f00\u4ea7\u54c1\u65f6\u9700\u6ce8\u610f\u5360\u7528\u5185\u5b58\u5927\u5c0f\uff0c\u6700\u597d\u4e00\u4e2a\u4e2a\u6253\u5f00\u518d\u5173\u95ed","text":""},{"location":"DS-CODE/CAA/%E5%A4%A7%E9%87%8F%E6%89%93%E5%BC%80%E4%BA%A7%E5%93%81%E6%97%B6%E9%9C%80%E6%B3%A8%E6%84%8F%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F%EF%BC%8C%E6%9C%80%E5%A5%BD%E4%B8%80%E4%B8%AA%E4%B8%AA%E6%89%93%E5%BC%80%E5%86%8D%E5%85%B3%E9%97%AD/#_1","title":"\u5927\u91cf\u6253\u5f00\u4ea7\u54c1\u65f6\u9700\u6ce8\u610f\u5360\u7528\u5185\u5b58\u5927\u5c0f\uff0c\u6700\u597d\u4e00\u4e2a\u4e2a\u6253\u5f00\u518d\u5173\u95ed","text":"<pre><code>{\nifstream in(\"C:\\\\Users\\\\TL\\\\Desktop\\\\aa.txt\");\nstring str;\n\nCATListOfCATUnicodeString sNameList;\nint LineNum = 0;\nwhile (getline(in, str))//\u7740\u884c\u8bfb\u53d6\u6570\u636e\u5e76\u5b58\u4e8es\u4e2d\uff0c\u76f4\u81f3\u6570\u636e\u5168\u90e8\u8bfb\u53d6\n{\nsNameList.Append(str.c_str());\n}\n\nfor (int i = 1;i &lt;= sNameList.Size();i++)\n{\nCATIPLMProducts* piProduct = NULL;\nCATOmbLifeCycleRootsBag Bag;\nif (FAILED(CAAOpenPLMComponent(\"VPMReference\", sNameList[i], \"A.1\", IID_CATIPLMProducts, (void **)&amp;piProduct, Bag, TRUE)))\n{\ncout &lt;&lt; \"4444444444444444\" &lt;&lt; endl;\n}\nelse\ncout &lt;&lt; \"3333333333333333333333\" &lt;&lt; endl;\n\n\nCATBaseUnknown* pRefProduct = NULL;\nCATIPrdObject * piRootPrdObject = NULL;\nHRESULT rc = piProduct-&gt;QueryInterface(IID_CATIPrdObject, (void **)&amp;piRootPrdObject);\nif (SUCCEEDED(rc))\n{\nrc = piRootPrdObject-&gt;GetReferenceObject(pRefProduct, IID_CATBaseUnknown);\npiRootPrdObject-&gt;Release();\npiRootPrdObject = NULL;\n}\n\nCATIPLMNavReference_var piBoltReference = pRefProduct;\nCATIPLMNavOccurrence_var spBoltOccurrence;\nCATIPrdOccurrenceMngt * piPrdOccurrenceMngt = NULL;\nif (SUCCEEDED(rc))\n{\nrc = CATPrdGetOccurrenceMngt(piPrdOccurrenceMngt);\nif (SUCCEEDED(rc))\n{\nrc = piPrdOccurrenceMngt-&gt;GetOrCreateRootOccurrence(piBoltReference, spBoltOccurrence);\nif (SUCCEEDED(rc))\ncout &lt;&lt; \"2-a- Get Bolt occurence OK\" &lt;&lt; endl;\nelse\ncout &lt;&lt; \"2-a- ERROR in getting Bolt occurence\" &lt;&lt; endl &lt;&lt; endl;\n}\n}\n\nCATIAlias_var spiAlias = spBoltOccurrence;\ncout &lt;&lt; \"Root PRODUCT Name:\" &lt;&lt; spiAlias-&gt;GetAlias() &lt;&lt; endl;\n\nCATBaseUnknown_var spBase = spBoltOccurrence;\nCATIMmiPrtContainer* piCon = NULL;\nCAAGetMechanicalContainer(spBase, &amp;piCon);\nBag.RemoveAll();\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%A0%BC%E5%BC%8F/","title":"\u5b57\u7b26\u4e32\u8f6c\u683c\u5f0f","text":""},{"location":"DS-CODE/CAA/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%A0%BC%E5%BC%8F/#case","title":"case","text":"<pre><code>    CATUnicodeString CATAECRoadSurfaceDataCmd::CAAUStringBuildFromChar(const char * strchar)\n{\nint len = MultiByteToWideChar(CP_ACP, 0, strchar, -1, NULL, 0);\nwchar_t* strwcANSI = new wchar_t[len + 1];\nmemset(strwcANSI, 0, len * 2 + 2);\nMultiByteToWideChar(CP_ACP, 0, strchar, -1, strwcANSI, len);\nCATUnicodeString strwcUnicode;\nstrwcUnicode.BuildFromWChar(strwcANSI);\nif (strwcANSI) delete[] strwcANSI;\nreturn strwcUnicode;\n}\n\nchar* CATAECRoadSurfaceDataCmd::UnicodeToANSIFunc(CATUnicodeString iStrText)\n{\nint textlen = WideCharToMultiByte(CP_ACP, 0, iStrText, -1, NULL, 0, NULL, NULL);\nchar* result = (char *)malloc((textlen + 1) * sizeof(char));\nmemset(result, 0, sizeof(char) * (textlen + 1));\nWideCharToMultiByte(CP_ACP, 0, iStrText, -1, result, textlen, NULL, NULL);\n\nreturn result;\n}\n\n//UTF-8 \u8f6c UNICODE\nconst char* szU8 = pExcelPath.ConvertToChar();\nint wcsLen = MultiByteToWideChar(CP_UTF8, NULL, szU8, strlen(szU8), NULL, 0);\nwchar_t* wszString = new wchar_t[wcsLen + 1];\nMultiByteToWideChar(CP_UTF8, NULL, szU8, strlen(szU8), wszString, wcsLen);\nwszString[wcsLen] = '\\0';\n\n//UNICODE \u8f6c ANSI\nint ansiLen = WideCharToMultiByte(CP_ACP, NULL, wszString, wcslen(wszString), NULL, 0, NULL, NULL);\nchar* szAnsi = new char[ansiLen + 1];\nWideCharToMultiByte(CP_ACP, NULL, wszString, wcslen(wszString), szAnsi, ansiLen, NULL, NULL);\nszAnsi[ansiLen] = '\\0';\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%AF%B9%E5%88%9B%E5%BB%BA%E7%9A%84%E4%BA%A7%E5%93%81%E6%88%96%E5%85%B6%E5%AE%83%E8%8A%82%E7%82%B9%E8%AE%BE%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%9B%B4/","title":"\u5bf9\u521b\u5efa\u7684\u4ea7\u54c1\u6216\u5176\u5b83\u8282\u70b9\u8bbe\u7f6e\u8bbe\u8ba1\u8303\u56f4","text":""},{"location":"DS-CODE/CAA/%E5%AF%B9%E5%88%9B%E5%BB%BA%E7%9A%84%E4%BA%A7%E5%93%81%E6%88%96%E5%85%B6%E5%AE%83%E8%8A%82%E7%82%B9%E8%AE%BE%E7%BD%AE%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%9B%B4/#_1","title":"\u5bf9\u521b\u5efa\u7684\u4ea7\u54c1\u6216\u5176\u5b83\u8282\u70b9\u8bbe\u7f6e\u8bbe\u8ba1\u8303\u56f4","text":"<p>\u5176\u5b9e\u5c31\u662f\u5728\u521b\u5efa\u4e4b\u524d\u6839\u636e\u9700\u8981\u7684\u8bbe\u8ba1\u8303\u56f4\u5207\u6362\u5168\u5c40\u7684\u8bbe\u8ba1\u8303\u56f4\uff0c\u4e14\u4fdd\u5b58\u65e7\u7684\u8bbe\u8ba1\u8303\u56f4\u7684\u4fe1\u606f\uff0c\u5728\u521b\u5efa\u8282\u70b9\u5b8c\u6210\u540e\u5c06\u5168\u5c40\u7684\u8bbe\u8ba1\u8303\u56f4\u8bbe\u7f6e\u4e3a\u4e4b\u524d\u4fdd\u7559\u7684\u8bbe\u8ba1\u8303\u56f4\u5373\u53ef\u3002</p> <pre><code>CATICkeScalesServices_var spiCkeScalesServices = CATCkeGlobalFunctions::GetScalesServices();\n\nif (spiCkeScalesServices != NULL_var)\n{\nCATUnicodeString sDesignRange = imParamtersList[1];\nCATCkeScale mOldScale = spiCkeScalesServices-&gt;GetCurrentScale();\nCATCkeScale mNewScale = CATNormalScale;\nif (sDesignRange == \"Normal Range\" || sDesignRange == \"\u6807\u51c6\u8303\u56f4\")\nmNewScale = CATNormalScale;\nelse if (sDesignRange == \"Large Range\" || sDesignRange == \"\u5927\u8303\u56f4\")\nmNewScale = CATLargeScale;\nelse if (sDesignRange == \"Small Range\" || sDesignRange == \"\u5c0f\u8303\u56f4\")\nmNewScale = CATSmallScale;\nelse if (sDesignRange == \"Extra Large Range\" || sDesignRange == \"\u8d85\u5927\u8303\u56f4\")\nmNewScale = CATExtraLargeScale;\n\nrc = spiCkeScalesServices-&gt;SetCurrentScale(mNewScale);\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%B0%86Body%E6%8C%82%E5%88%B0%E7%BB%93%E6%9E%84%E6%A0%91/","title":"\u5c06Body\u6302\u5230\u7ed3\u6784\u6811","text":"<pre><code>CATIMmiUseDatumFactory CATIGSMUseProceduralView\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%B0%86%E4%BA%A7%E5%93%81%E6%88%96%E9%9B%B6%E4%BB%B6%E6%88%96%E8%80%85%E6%9B%B4%E5%A4%9A%E6%89%93%E5%BC%80%E5%88%B0%E7%AA%97%E5%8F%A3/","title":"\u5c06\u4ea7\u54c1\u6216\u96f6\u4ef6\u6216\u8005\u66f4\u591a\u6253\u5f00\u5230\u7a97\u53e3","text":""},{"location":"DS-CODE/CAA/%E5%B0%86%E4%BA%A7%E5%93%81%E6%88%96%E9%9B%B6%E4%BB%B6%E6%88%96%E8%80%85%E6%9B%B4%E5%A4%9A%E6%89%93%E5%BC%80%E5%88%B0%E7%AA%97%E5%8F%A3/#case","title":"CASE","text":"<pre><code>//\u6253\u5f00\nCATIPLMComponent * pIPLMComponent = NULL;//\u83b7\u53d6\u5230\u5168\u5c40\u7684\u4f1a\u8bdd\npiBoltReference-&gt;QueryInterface(IID_CATIPLMComponent,(void**)&amp;pIPLMComponent);\nCATFrmEditor * opNewEditor = NULL;\nCATIPLMOpenServices* pPLMOpenServices = NULL;\nCATPLMOpenServicesFactory::GetPLMOpenServices(pPLMOpenServices);\nif (pPLMOpenServices == NULL)\n{\ncout&lt;&lt;\"pPLMOpenServices == NULL\"&lt;&lt;endl;\nreturn;\n}\npPLMOpenServices-&gt;PLMOpenInNewWindow(pIPLMComponent,opNewEditor);\n\n//\u4fdd\u5b58\u5e76\u5173\u95ed\nCATFrmLayout * pFrmLayout = CATFrmLayout::GetCurrentLayout();\nCATLISTP(CATFrmWindow) pWindowList = pFrmLayout-&gt;GetWindowList();\nCATFrmWindow* pFrmWindow = pWindowList[pWindowList.Size()-1];\n\nCATFrmEditor * pEditor = pFrmWindow-&gt;GetEditor();\nif (NULL != pEditor)\n{\nCATPathElement UIActivePath = pEditor-&gt;GetUIActiveObject();\nCATBaseUnknown * pActiveProduct = (CATBaseUnknown*)(UIActivePath.FindElement(IID_CATIPLMProducts));\nif (NULL != pActiveProduct)\n{\nCATBaseUnknown* pRefPrd = NULL;\nCATIPrdObject * piRootPrdObject = NULL;\nrc = pActiveProduct-&gt;QueryInterface(IID_CATIPrdObject, (void **)&amp;piRootPrdObject);\nif (SUCCEEDED(rc))\n{\nrc = piRootPrdObject-&gt;GetReferenceObject(pRefPrd, IID_CATBaseUnknown);\n\nif (SUCCEEDED(rc))\n{\nCATListPtrCATBaseUnknown pB;\npB.Append(pRefPrd);\nCATAdpSaver pSave;\npSave.Save(&amp;pB);\n}\npiRootPrdObject-&gt;Release();\npiRootPrdObject = NULL;\n}\npActiveProduct-&gt;Release();\npActiveProduct = NULL;\n\n\n}\n}\n\npFrmWindow-&gt;DeleteWindow();\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%B0%86%E5%90%8E%E5%8F%B0%E6%89%93%E5%BC%80%E7%9A%84%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E5%9C%A8%E7%AA%97%E5%8F%A3/","title":"\u5c06\u540e\u53f0\u6253\u5f00\u7684\u6587\u4ef6\u663e\u793a\u5728\u7a97\u53e3","text":""},{"location":"DS-CODE/CAA/%E5%B0%86%E5%90%8E%E5%8F%B0%E6%89%93%E5%BC%80%E7%9A%84%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E5%9C%A8%E7%AA%97%E5%8F%A3/#sss","title":"sss","text":"<pre><code>CATFrmEditor * opNewEditor = NULL;\nCATIPLMOpenServices* pPLMOpenServices = NULL;\nCATPLMOpenServicesFactory::GetPLMOpenServices(pPLMOpenServices);\nif (pPLMOpenServices == NULL)\n{\ncout&lt;&lt;\"pPLMOpenServices == NULL\"&lt;&lt;endl;\nreturn E_FAIL;\n}\npPLMOpenServices-&gt;PLMOpenInNewWindow(pIPLMComponent,opNewEditor);\nif (opNewEditor == NULL)\n{\ncout&lt;&lt;\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"&lt;&lt;endl;\nreturn E_FAIL;\n}else{\ncout&lt;&lt;\"======================================\"&lt;&lt;endl;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%B0%86%E5%A4%9A%E4%B8%AA%E6%8C%89%E9%92%AE%E5%81%9A%E6%88%90%E8%8F%9C%E5%8D%95/","title":"\u5c06\u591a\u4e2a\u6309\u94ae\u505a\u6210\u83dc\u5355","text":"<pre><code>void MyPRDWorkshopAddin::CreateCommands()\n{\nCATAfrCommandHeader::CATCreateCommandHeader(\"AAA\", \"CATCalculationData\", \"CATCalculationDataCmd\", (void*)NULL, \"PRDWorkshopAddin\", CATFrmAvailable);\nCATAfrCommandHeader::CATCreateCommandHeader(\"bbb\", \"CATCalculationData\", \"CATCalculationDataCmd\", (void*)NULL, \"PRDWorkshopAddin\", CATFrmAvailable);\nCATAfrCommandHeader::CATCreateCommandHeader(\"ccc\", \"CATCalculationData\", \"CATCalculationDataCmd\", (void*)NULL, \"PRDWorkshopAddin\", CATFrmAvailable);\n//\u7b2c\u4e94\u4e2a\u53c2\u6570\u662f\u5bf9\u5e94\u5f97\u8d44\u6e90\u6587\u4ef6\u7684\u540d\u79f0\n}\n\nCATCmdContainer* MyPRDWorkshopAddin::CreateToolbars()\n{\nNewAccess(CATCmdContainer, pCAASec, CAASec);\n\nNewAccess(CATCmdContainer, pCAATlb, CAATlb);\nSetAccessChild(pCAASec, pCAATlb);\n\nNewAccess(CATCmdStarter, pCAAStr, CAAStr);\nSetAccessCommand(pCAAStr, \"AAA\");\nSetAccessChild(pCAATlb, pCAAStr);\n\nNewAccess(CATCmdContainer, pCAATPMSTrdStr, CAATPMSTrdStr);//\u521b\u5efa\u83dc\u5355\u5bb9\u5668\nSetAccessNext(pCAAStr, pCAATPMSTrdStr);\n\nNewAccess(CATCmdStarter, pCAAStr1, CAAStr1);\nSetAccessCommand(pCAAStr1, \"bbb\");\nSetAccessChild(pCAATPMSTrdStr, pCAAStr1);//\u653e\u5165\u7b2c\u4e00\u4e2a\u6309\u94ae\n\nNewAccess(CATCmdStarter, pCAAStr2, CAAStr2);\nSetAccessCommand(pCAAStr2, \"ccc\");\nSetAccessNext(pCAAStr1, pCAAStr2);//\u653e\u5165\u7b2c\u4e8c\u4e2a\u6309\u94ae\n\n//AddToolbarView(pCAATlb, 1,Right);\n\nreturn pCAASec;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E5%B0%86%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E5%9C%A8%E6%96%87%E4%BB%B6%E5%A4%B9/","title":"\u5c06\u6587\u4ef6\u663e\u793a\u5728\u6587\u4ef6\u5939","text":"<p>wchar_t* pWchar = new wchar_t[sDocPath.GetLengthInChar() + 1]; sDocPath.ConvertToWChar(pWchar); ShellExecute(NULL,_T(\"open\"),_T(\"Explorer.exe\"), pWchar,NULL,SW_SHOWDEFAULT);</p>"},{"location":"DS-CODE/CAA/%E6%88%AA%E5%9B%BE/","title":"\u622a\u56fe","text":""},{"location":"DS-CODE/CAA/%E6%88%AA%E5%9B%BE/#case","title":"case","text":"<pre><code>HRESULT CATParmAnimationCmd::CaptureWindow(CATUnicodeString sExportPath)\n{\nHRESULT hr = E_FAIL;\n\nCATFrmLayout* pLayout = CATFrmLayout::GetCurrentLayout();\nif (pLayout != NULL)\n{\nCATFrmWindow* pWindow = pLayout-&gt;GetCurrentWindow();\nif (pWindow != NULL)\n{\nCATViewer* pViewer = pWindow-&gt;GetViewer();\nfloat fW = 0, fH = 0, r = 0, g = 0, b = 0;\nif (pViewer != NULL)\n{\npViewer-&gt;GetGraphicSize(&amp;fW, &amp;fH);\n\nCATPrintViewerImage* pPrintViewerImage = new CATPrintViewerImage(pViewer, CATPRINTRENDER_CAPTURE, 0);\nif (pPrintViewerImage != NULL)\n{\nCATUnicodeString tempFile = sExportPath;\n\n//\u8bbe\u7f6e\u8def\u5f84\npViewer-&gt;GetBackgroundColor(&amp;r, &amp;g, &amp;b);\ncout &lt;&lt; \"r = \"&lt;&lt;r&lt;&lt;\", g =\"&lt;&lt;g&lt;&lt;\",b=\"&lt;&lt;b &lt;&lt; endl;\n\nCATIAViewer* piAViewerVB = NULL;\nif (FAILED(pViewer-&gt;QueryInterface(IID_CATIAViewer, (void**)&amp;piAViewerVB)))\n{\ncout &lt;&lt; \"Error : QI CATIAViewer Failed !\" &lt;&lt; endl;\nreturn hr;\n}\n\nCATBSTR bstrText = NULL;\ntempFile.ConvertToBSTR(&amp;bstrText);\npiAViewerVB-&gt;CaptureToFile(catCaptureFormatJPEG, bstrText);\npiAViewerVB-&gt;Release(); piAViewerVB = NULL;\n\npViewer-&gt;SetBackgroundColor(r, g, b);\npViewer-&gt;SetFeedbackMode(TRUE);\n//          pViewer-&gt;Resize(640,480);//\u4ece\u5de6\u4e0a\u89d2\u8bbe\u7f6e\u5c4f\u5e55\u8303\u56f4\npViewer-&gt;Draw();\npViewer = NULL;\nCATPrintFileGenerator* pGenerator = CATPrintDriverManager::GetGenerator(\"CAPTURE\");\nif (pGenerator == NULL)\n{\ncout &lt;&lt; \"Error : CATPrintFileGenerator NULL \" &lt;&lt; endl;\nreturn hr;\n}\n/*float arr[2] = {1920,1080};\n                    CATPixelImage* pPixelImage = new CATPixelImage(1920,1080, CATPixelImageFormat::RGB,arr);\n                    if (pPixelImage != NULL)\n                    {\n                        pPixelImage-&gt;SetXPixelSize(1920);\n                        pPixelImage-&gt;SetYPixelSize(1080);\n                        CATRasterizationData pRasterizationData;\n                        pRasterizationData._PixelImage = pPixelImage;\n                        pGenerator-&gt;AddRaster(pRasterizationData);\n                        cout &lt;&lt; \"CATPixelImage not NULL !\" &lt;&lt; endl;\n                    }\n                    else\n                        cout &lt;&lt; \"CATPixelImage is NULL !\" &lt;&lt; endl;*/\n\nCATPrintFileDevice* pDevice = new CATPrintFileDevice(sExportPath.ConvertToChar(), pGenerator);\nif (pDevice == NULL)\n{\ncout &lt;&lt; \"Error : CATPrintFileDevice NULL \" &lt;&lt; endl;\nreturn hr;\n}\nCATPrintParameters printParameters;\nprintParameters.SetWhitePixel(1);//\u8bbe\u7f6e\u767d\u8272\u50cf\u7d20\u6807\u5fd7\nprintParameters.SetMapToPaper(1);//\u5c06\u6620\u5c04\u8bbe\u7f6e\u4e3a\u7eb8\u5f20\u6807\u5fd7\nprintParameters.SetLineWidthSpecificationMode(CATPRINT_SCALED);//\u4f7f\u7528\u6307\u5b9a\u6a21\u5f0f\u8bbe\u7f6e\u884c\nprintParameters.SetLineTypeSpecificationMode(CATPRINT_SCALED);//\u00a0\u8bbe\u7f6e\u7ebf\u578b\u89c4\u8303\u6a21\u5f0f\nprintParameters.SetQuality(100);//\u6253\u5370\u8d28\u91cf\nprintParameters.SetStandard(CATPRINT_ISO);//\u6253\u5370\u6807\u51c6\nprintParameters.SetArea(CATPRINT_WHOLE_DOCUMENT);//\u6253\u5370\u533a\u57df\npPrintViewerImage-&gt;Print(pDevice, printParameters);\n\nhr = S_OK;\n}\nelse {\ncout &lt;&lt; \"CATPrintViewerImage Failed !\" &lt;&lt; endl;\n}\n}\n}\n}\nreturn hr;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E6%89%93%E5%BC%80%E4%BA%A7%E5%93%81%E9%81%8D%E5%8E%86%E6%89%80%E6%9C%89%E9%9B%B6%E4%BB%B6%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E5%85%B3%E7%B3%BB/","title":"\u6253\u5f00\u4ea7\u54c1\u904d\u5386\u6240\u6709\u96f6\u4ef6\u4ee5\u53ca\u4e0e\u5185\u5b58\u7684\u5173\u7cfb","text":""},{"location":"DS-CODE/CAA/%E6%89%93%E5%BC%80%E4%BA%A7%E5%93%81%E9%81%8D%E5%8E%86%E6%89%80%E6%9C%89%E9%9B%B6%E4%BB%B6%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E5%85%B3%E7%B3%BB/#_1","title":"\u6253\u5f00\u4ea7\u54c1\u904d\u5386\u6240\u6709\u96f6\u4ef6\u4ee5\u53ca\u4e0e\u5185\u5b58\u7684\u5173\u7cfb","text":"<p>\u6253\u5f00\u8fc7\u7a0b\u4e2d\u5360\u7528\u5185\u5b58\uff0c\u6253\u5f00\u540e\u4f1a\u81ea\u52a8\u91ca\u653e\u5185\u5b58</p>"},{"location":"DS-CODE/CAA/%E6%89%93%E5%BC%80%E4%BA%A7%E5%93%81%E9%81%8D%E5%8E%86%E6%89%80%E6%9C%89%E9%9B%B6%E4%BB%B6%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E5%85%B3%E7%B3%BB/#_2","title":"\u5bfc\u822a\u6a21\u5f0f\uff1a","text":"<p>Navigation         \u6253\u5f00\u540e\u65e0\u6cd5\u83b7\u53d63DShape\uff0c\u7c7b\u4f3c\u4e8eCGR\u6587\u4ef6</p>"},{"location":"DS-CODE/CAA/%E6%89%93%E5%BC%80%E4%BA%A7%E5%93%81%E9%81%8D%E5%8E%86%E6%89%80%E6%9C%89%E9%9B%B6%E4%BB%B6%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E5%85%B3%E7%B3%BB/#_3","title":"\u521b\u4f5c\u6a21\u5f0f\uff1a","text":"<p>Authoring         1\u3001\u5982\u679c\u5c06\u6240\u6709\u5b50\u96f6\u4ef6\u5207\u6362\u5230\u7f16\u8f91\u6a21\u5f0f\u4f1a\u5360\u7528\u8f83\u591a\u5185\u5b58\uff0c\u5207\u6362\u5b8c\u6bd5\u540e\u4f1a\u81ea\u52a8\u91ca\u653e\u5185\u5b58         2\u3001\u5982\u679c\u5c06\u6240\u6709\u5b50\u96f6\u4ef6\u4e00\u4e2a\u4e00\u4e2a\u5207\u6362\u5230\u7f16\u8f91\u6a21\u5f0f\u4f7f\u7528\u540e\u518d\u5207\u6362\u5230\u53ef\u89c6\u5316\u6a21\u5f0f(VisuMode)\uff0c\u5360\u7528\u5185\u5b58\u8f83\u5c11\uff0c\u4f46\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\u8f83\u957f         *\u4e3b\u8981\u4f53\u73b0\u5728\u5bf9\u7535\u8111\u5185\u5b58\u7684\u8981\u6c42\uff0c\u7535\u8111\u5185\u5b58\u5c0f\u5efa\u8bae\u4f7f\u7528\u9009\u98792 {     \u53ef\u89c6\u5316\u6a21\u5f0f\u65e0\u6cd5\u83b7\u53d6\u4fe1\u606f\u3002     \u4ea7\u54c1\u6a21\u5f0f\u53ef\u83b7\u53d6\u3002     BREP\u6a21\u5f0f\u53ef\u83b7\u53d6     \u8bbe\u8ba1\u6a21\u5f0f\u53ef\u83b7\u53d6\u4f46\u662f\u7528\u65f6\u8f83\u957f\u3002     \u5207\u6362\u5230\u4ea7\u54c1\u6a21\u5f0f\u540e\u4e0d\u5207\u6362\u5230\u539f\u6a21\u5f0f\uff0c\u518d\u6b21\u8fd0\u884c\u4f1a\u81ea\u52a8\u5207\u6362\u5230\u7f16\u8f91\u6a21\u5f0f     \u540c\u4e00\u4e2a\u8282\u70b9\u7684\u5b9e\u4f8b\u83b7\u53d6\u7b2c\u4e8c\u6b21\u4fe1\u606f\u4f1a\u81ea\u52a8\u53d8\u6210\u7f16\u8f91\u6a21\u5f0f }</p>"},{"location":"DS-CODE/CAA/%E6%89%93%E5%BC%80%E5%9B%BE%E7%BA%B8%E5%92%8C%E6%B7%BB%E5%8A%A0TPS%E8%A7%86%E5%9B%BE/","title":"\u6253\u5f00\u56fe\u7eb8\u548c\u6dfb\u52a0TPS\u89c6\u56fe","text":""},{"location":"DS-CODE/CAA/%E6%89%93%E5%BC%80%E5%9B%BE%E7%BA%B8%E5%92%8C%E6%B7%BB%E5%8A%A0TPS%E8%A7%86%E5%9B%BE/#tps","title":"\u6253\u5f00\u56fe\u7eb8\u548c\u6dfb\u52a0TPS\u89c6\u56fe","text":"<pre><code>{\nHRESULT rc = E_FAIL;\nCATIMmiPrtContainer* piMmiPrtContainer = NULL;\nCATIMmiMechanicalFeature_var spiMmiPart = NULL_var;\nCATIAlias_var spiAlias = NULL_var;\nCATBaseUnknown* pUnknown = NULL;\nrc = CAAGetRootProduct(&amp;pUnknown);\n\n\nif (pUnknown != NULL &amp;&amp; SUCCEEDED(rc))\n{\nCATIPLMNavReference* pRef = NULL;\nrc = pUnknown-&gt;QueryInterface(IID_CATIPLMNavReference, (void**)&amp;pRef);\nif (FAILED(rc) || pRef == NULL) {\ncout &lt;&lt; \"QI CATIPLMNavReference FAILED\" &lt;&lt; endl;\nreturn E_FAIL;\n}\nCATIPLMNavOccurrence_var spiPartOccurrence = NULL_var;\nCATIPrdOccurrenceMngt * piPrdOccurrenceMngt = NULL;\nCATPrdGetOccurrenceMngt(piPrdOccurrenceMngt);\nif (piPrdOccurrenceMngt != NULL) {\npiPrdOccurrenceMngt-&gt;GetOrCreateRootOccurrence(pRef, spiPartOccurrence);\n}\nif (spiPartOccurrence != NULL_var)\n{\nCATIPLMRepInstances_var spiRepIns = spiPartOccurrence;\nif (spiRepIns != NULL_var)\n{\nCATUnicodeString sId = \"3sh-94417684-00000223\";//\"drw-94417684-00000101\";\nCATUnicodeString sVersion = \"A.1\";\n\nCATIPsiRepresentationReference *piDrawingRepRef = NULL;\nCATOmbLifeCycleRootsBag Bag;\nrc = CAAOpenPLMComponent(\"VPMRepReference\", sId, sVersion,\nIID_CATIPsiRepresentationReference, (void **)&amp;piDrawingRepRef, Bag);\nif (FAILED(rc) || (NULL == piDrawingRepRef))\n{\ncout &lt;&lt; \"Error : Open Drawing is Failed ! \" &lt;&lt; endl;\nreturn E_FAIL;\n}\n\nCATIPsiRepresentationLoadMode *piRepLoadMode = NULL;\nif (piDrawingRepRef &amp;&amp;  SUCCEEDED(piDrawingRepRef-&gt;QueryInterface(IID_CATIPsiRepresentationLoadMode, (void **)&amp; piRepLoadMode)))\n{\nrc = piRepLoadMode-&gt;ChangeLoadingMode(CATIPsiRepresentationLoadMode::EditMode);\npiRepLoadMode-&gt;Release(); piRepLoadMode = NULL;\n}\n\nCATBaseUnknown* pBaseUnknown = NULL;\nif (SUCCEEDED(spiRepIns-&gt;AddRepInstance(\"\",piDrawingRepRef,pBaseUnknown)))\n{\ncout &lt;&lt; \"AddRepInstance Not Null\" &lt;&lt; endl;\n}else\ncout &lt;&lt; \"AddRepInstance is Null\" &lt;&lt; endl;\n\nCATITPSServicesContainers *piTPSServ = NULL;\nCATITPSSet* piTpsSet = NULL;\nif (SUCCEEDED(CATTPSInstantiateUseComponent(DfTPS_ItfTPSServicesContainer, (void**)&amp; piTPSServ)))\n{\nif (SUCCEEDED(piTPSServ-&gt;RetrieveOrCreateCurrentTPSSet(pUnknown,CreateIfMissing,&amp;piTpsSet)))\n{\ncout &lt;&lt; \"RetrieveOrCreateCurrentTPSSet OK\" &lt;&lt; endl;\n}else\ncout &lt;&lt; \"RetrieveOrCreateCurrentTPSSet KO\" &lt;&lt; endl;\n\nif (piTpsSet != NULL)\n{\nCATITPSViewFactory* piTPSViewFactory = NULL;\nif (SUCCEEDED(piTpsSet-&gt;QueryInterface(IID_CATITPSViewFactory,(void**)&amp;piTPSViewFactory)))\n{\nCATMathPlane ViewPlane = CATMathOIJ;\nCATITPSView * piTPSView = NULL;\npiTPSViewFactory-&gt;CreateView(&amp;piTPSView, &amp;ViewPlane, DftFrontView);\n}\n}\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E6%8A%95%E5%BD%B13D%E8%A7%86%E5%9B%BE/","title":"\u6295\u5f713D\u89c6\u56fe","text":"<p>\u6295\u5f71CATITPSView -&gt; CreateViewFrom3D \u6295\u5f71CATI2DLayoutView -&gt; CreateFrontView</p>"},{"location":"DS-CODE/CAA/%E6%8B%93%E6%89%91%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB/","title":"\u62d3\u6251\u8ba1\u7b97\u8ddd\u79bb","text":""},{"location":"DS-CODE/CAA/%E6%8B%93%E6%89%91%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB/#case","title":"case","text":"<pre><code>double CATEAECBDGTypeCurveBehavior::GetTwoBodyDistance(CATGeoFactory* pGeoFactory, CATTopData Topdata, CATBody_var soBody1, CATBody_var spBody2)\n{\nCATGeoFactory* pGeoFactory = NULL_var;\nCATIMmiPrtContainer_var spiPrtCont = NULL_var;\nif (SUCCEEDED(spiInput1-&gt;GetPrtContainer(spiPrtCont)))\n{\nif (SUCCEEDED(spiPrtCont-&gt;QueryInterface(IID_CATGeoFactory,(void**)&amp;pGeoFactory)))\n{\nCATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration();\nCATTopData topdata(pConfig, NULL);\n}\n}\n\ndouble dDis = -1;\nCATICGMDistanceMinBodyBody* pDisBodyBody = CATCGMCreateDistanceMinTopo(pGeoFactory, &amp;Topdata, soBody1, spBody2);\n\nif (pDisBodyBody == NULL)\n{\nreturn dDis;\n}\n\npDisBodyBody-&gt;Run();\ndDis = pDisBodyBody-&gt;GetDistance();\n\ncout &lt;&lt; \"   Distance : \" &lt;&lt; dDis &lt;&lt; endl;\n\nreturn dDis;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E6%A8%A1%E5%9D%97%E4%B8%8E%E9%A6%96%E9%80%89%E9%A1%B9%E5%90%84%E9%A1%B5%E9%9D%A2%E5%BE%97%E5%90%8D%E7%A7%B0/","title":"\u6a21\u5757\u4e0e\u9996\u9009\u9879\u5404\u9875\u9762\u5f97\u540d\u79f0","text":"<ul> <li>Infrastructure.Title=\"\u57fa\u7840\u7ed3\u6784\";</li> <li>Interactive3DExperience.Title=\"\u4ea4\u4e92\u5f0f 3DEXPERIENCE\";</li> <li>Systems.Title=\"\u7cfb\u7edf\";</li> <li>Engineering.Title=\"\u5de5\u7a0b\";</li> <li>Shape.Title=\"\u5f62\u72b6\";</li> <li>MechanicalDesign.Title=\"\u673a\u68b0\";</li> <li>AnalysisSimulation.Title=\"\u6a21\u62df\";</li> <li>AECPlant.Title=\"\u5efa\u7b51\u548c\u516c\u5171\u8bbe\u65bd\";</li> <li>ProcessPlanning.Title=\"\u6d41\u7a0b\u89c4\u5212\";</li> <li>Equipments.Title=\"\u8bbe\u5907\";</li> <li>NCManufacturing.Title=\"\u52a0\u5de5\";</li> <li>DMUNavigator.Title=\"\u6570\u5b57\u5316\u88c5\u914d\";</li> <li>DPManufacturing.Title=\"\u5236\u9020\u89c4\u5212\";</li> <li>VNC.Title=\"\u52a0\u5de5\u6a21\u62df\";</li> <li>Inspection.Title=\"\u68c0\u67e5\";</li> <li>IGRIP.Title=\"\u673a\u5668\u4eba\u5b66\";</li> <li>Safework.Title=\"\u4eba\u673a\u5de5\u7a0b\u5b66\";</li> <li>AECShipBuilding.Title=\"\u8239\u8236\u4e0e\u6d77\u6d0b\";</li> <li>LMSEngineeringViewer.Title=\"\u684c\u9762\";</li> <li>LMSNoiseAndVibration.Title=\"\u566a\u97f3\u4e0e\u632f\u52a8\";</li> <li>LMSMotion.Title=\"\u52a8\u4f5c\";</li> <li>LMSGeometry.Title=\"\u51e0\u4f55\u56fe\u5f62\";</li> <li>LMSDurability.Title=\"\u6301\u4e45\u6027\";</li> <li>LMSAcoustics.Title=\"\u58f0\u5b66\";</li> <li>LMSOptimization.Title=\"\u4f18\u5316\";</li> <li>LMSMeshing.Title=\"\u5efa\u6a21\";</li> <li>LMSCrash.Title=\"\u78b0\u649e\";</li> <li>LMSOccupantSafety.Title=\"\u4e58\u5458\u5b89\u5168\";</li> <li>Knowledge.Title=\"\u77e5\u8bc6\u5de5\u7a0b\u6a21\u5757\";</li> <li>ENOVIAV5VPM.Title=\"VPM\";</li> <li>ENOVIAV5PPR.Title=\"PPR\";</li> <li>LogicControlModeling.Title=\"\u81ea\u52a8\u5316\";</li> <li>Factory.Title=\"\u5de5\u5382\";</li> </ul>"},{"location":"DS-CODE/CAA/%E7%88%B6%E5%AD%90%E7%BA%A7/","title":"\u7236\u5b50\u7ea7","text":""},{"location":"DS-CODE/CAA/%E7%88%B6%E5%AD%90%E7%BA%A7/#_1","title":"\u7236\u5b50\u7ea7","text":"<p>CATIMmiUseStructureAnalyse</p>"},{"location":"DS-CODE/CAA/%E7%89%B9%E5%BE%81%E5%8C%96-CAAFeaturize/","title":"\u7279\u5f81\u5316 CAAFeaturize","text":""},{"location":"DS-CODE/CAA/%E7%89%B9%E5%BE%81%E5%8C%96-CAAFeaturize/#case","title":"case","text":"<pre><code>HRESULT CAAFeaturize(CATBaseUnknown_var ispObject, CATBaseUnknown_var&amp; ospObject)\n{\nHRESULT rc = E_FAIL;\n\nCATIMmiUseBRepAccess_var spiRepAccess = ispObject;\nif (spiRepAccess != NULL_var)\n{\nCATIMmiUseFeaturize_var spiFeaturize = spiRepAccess;\nCATIMmiUseMfBRep_var spiBRep = NULL_var;\nif (SUCCEEDED(spiFeaturize-&gt;Featurize(spiBRep, CATMmrFunctional)))\n{\nospObject = spiBRep;\nrc = S_OK;\n}\nelse {\ncout &lt;&lt; \"Error : CAAGetAxisBRep Featurize  Failed !\" &lt;&lt; endl;\nrc = E_FAIL;\n}\n}\nelse {\ncout &lt;&lt; \"Error : CAAGetAxisBRep CATIMmiUseBRepAccess Failed !\" &lt;&lt; endl;\nrc = E_FAIL;\n}\n\nif (ospObject == NULL_var)\n{\nrc = E_FAIL;\n}\n\nreturn rc;\n}   </code></pre>"},{"location":"DS-CODE/CAA/%E7%95%8C%E9%9D%A2%E5%B1%85%E4%B8%AD%E5%92%8C%E7%BB%93%E6%9E%84%E6%A0%91%E5%B1%85%E4%B8%AD/","title":"\u754c\u9762\u5c45\u4e2d\u548c\u7ed3\u6784\u6811\u5c45\u4e2d","text":""},{"location":"DS-CODE/CAA/%E7%95%8C%E9%9D%A2%E5%B1%85%E4%B8%AD%E5%92%8C%E7%BB%93%E6%9E%84%E6%A0%91%E5%B1%85%E4%B8%AD/#_1","title":"\u754c\u9762\u5c45\u4e2d\u548c\u7ed3\u6784\u6811\u5c45\u4e2d","text":"<pre><code>{\n//3D\u7279\u5f81\u5c45\u4e2d\nvoid CAAPartCenteredCmd::PartReframeOn(PartData&amp; imPartData)\n{\nCATFrmLayout* pLayout = CATFrmLayout::GetCurrentLayout();\nif (pLayout != NULL)\n{\nCATFrmWindow* pWindow = pLayout-&gt;GetCurrentWindow();\nif (pWindow != NULL)\n{\nCATViewer* pViewer = pWindow-&gt;GetViewer();\nif (pViewer)\n{\nCATI3DGeoVisu_var spi3DGeoVisu = imPartData.spiPart;\nif (spi3DGeoVisu != NULL_var)\n{\nCAT3DRep* pRep = (CAT3DRep*)spi3DGeoVisu-&gt;GetRep();\nif (pRep)\n{\nCAAAddHighlight(imPartData.spiPart);//\u5c06\u96f6\u4ef6\u6dfb\u52a0\u9ad8\u4eae\n\nCAT3DBoundingSphere pBoundingSphere = pRep-&gt;GetBoundingElement();//\u5f97\u5230\u96f6\u4ef6\u539f\u59cb\u76843DBoundingSphere\nCATMathPointf mCenter = pBoundingSphere.GetCenter();\nfloat mRadius = pBoundingSphere.GetRadius();\nfloat mRadiusMM = pBoundingSphere.GetRadiusMM();\n\nCATMathTransformation mTransformation = imPartData.mPrdTransformation;//\u83b7\u53d6\u96f6\u4ef6\u5b9e\u4f8b\u7684\u77e9\u9635\nCATMathPoint mThisCenter;\nmCenter.GetValue(mThisCenter);\n\nCATMathPointf mNewCenter = CATMathPointf(mTransformation * mThisCenter);//\u901a\u8fc7\u77e9\u9635\u8f6c\u6362\u5f97\u5230\u5b9e\u4f8b\u6240\u5728\u7684Center\n\nCAT3DBoundingSphere pNew3DBoundingSphere(mNewCenter,mRadius,mRadiusMM);\n((CAT3DViewer*)pViewer)-&gt;ReframeOn(pNew3DBoundingSphere);\n}\n}\n}\n}\n}\n}\n\n//\u7ed3\u6784\u6811\u5c45\u4e2d  \u7ed3\u6784\u6811\u5c45\u4e2d\u524d\u9700\u5148\u9ad8\u4eae\u9009\u9700\u8981\u5c45\u4e2d\u7684\u8282\u70b9\nvoid CAAPartCenteredCmd::TreeReframeOn()\n{\nCATFrmLayout * pLayout = CATFrmLayout::GetCurrentLayout();\nif (NULL != pLayout)\n{\nCATFrmWindow * pCurrentWindow = pLayout-&gt;GetCurrentWindow();\nif (NULL != pCurrentWindow)\n{\nif (1 == pCurrentWindow-&gt;IsAKindOf(\"CATFrmNavigGraphicWindow\"))\n{\nCATFrmNavigGraphicWindow * pFrmNavigGraphicWindow = (CATFrmNavigGraphicWindow*)pCurrentWindow;\nCATNavigBox * pNavigBox = NULL;\npNavigBox = pFrmNavigGraphicWindow-&gt;GetNavigBox();\nCATCafCenterGraph MyObj;\nMyObj.CenterGraph(\"OnHSO\", pNavigBox);\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E7%9F%A9%E9%98%B5%E7%9A%84%E7%90%86%E8%A7%A3/","title":"\u77e9\u9635\u7684\u7406\u89e3","text":"<p>CATMathTransformation Matrix=     a11     a12     a13     Vector=     u1             a21     a22     a23                 u2             a31     a32     a33                 u3 </p> <p>\u7b80\u5355\u7406\u89e3\u53ef\u4ee5\u7406\u89e3\u4e3a\u8f74\u7cfb\uff0c\u76f8\u5f53\u4e8e\u4e09\u4e2a\u65b9\u5411\uff08\u4f4d\u59ff\uff09\u548c\u539f\u70b9\uff08\u5b9a\u4f4d\u70b9\uff09 \u5982\u679c\u662f4*4\u7684\u77e9\u9635\u5219\u591a\u51fa\u7684\u7528\u4e8e\u653e\u5927\u7f29\u5c0f\u7684\u7cfb\u6570;</p> <p>CATMathPoint Pt1(0, 0, 0); CATMathVector mV(mPoint - Pt1); CATMathTransformation Translation(mV); //\u5b9a\u4e49\u4e00\u4e2a\u7528\u4e8e\u5e73\u79fb\u7684\u77e9\u9635\uff0c\u5373Vector\u5305\u542b\u4e86\u5e73\u79fb\u7684\u65b9\u5411\u548c\u8ddd\u79bb</p> <p>CATAngle Angle = CATPI; //180\u5ea6                         CATMathLine Line(Pt1, mPoint); CATMathTransformation Rotation(Angle, Line); //\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7528\u4e8e\u9009\u62e9\u7684\u77e9\u9635\uff0c\u5373\u7ed5\u7740Line(\u65cb\u8f6c\u8f74)\u65cb\u8f6c180\u5ea6\uff08Angle\uff09</p>"},{"location":"DS-CODE/CAA/%E7%BB%99%E6%8C%87%E5%AE%9A%E7%B1%BB%E5%9E%8B%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/","title":"\u7ed9\u6307\u5b9a\u7c7b\u578b\u6dfb\u52a0\u53f3\u952e\u83dc\u5355","text":""},{"location":"DS-CODE/CAA/%E7%BB%99%E6%8C%87%E5%AE%9A%E7%B1%BB%E5%9E%8B%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/#_1","title":"\u7ed9\u6307\u5b9a\u7c7b\u578b\u6dfb\u52a0\u53f3\u952e\u83dc\u5355","text":"<pre><code>{\n{\n_daPathElement = new CATPathElementAgent(\"pathelt\");\n_daPathElement-&gt;SetBehavior( CATDlgEngWithContext | CATDlgEngRepeat );\n_daPathElement-&gt;AddElementType(IID_CATIGSMTool);//\u9009\u62e9\u6dfb\u52a0\u7684\u7c7b\u578b\u4f1a\u51fa\u6765\u6dfb\u52a0\u7684\u83dc\u5355\u9009\u9879\n\n_daDialog = new CATDialogAgent(\"dialoagent\");\n_daDialog-&gt;SetBehavior(CATDlgEngWithUndo |CATDlgEngWithContext);\n_daDialog-&gt;AcceptOnNotify(NULL,\"CATContext\");\n\n\nCATDialogState *stBackGroundState = GetInitialState(\"stBackGroundStateId\");\nstBackGroundState-&gt;AddDialogAgent(_daPathElement);\nstBackGroundState-&gt;AddDialogAgent(_daDialog);\n\n\nCATDialogTransition *pCntxMenuTransition =    AddTransition\n(\nstBackGroundState,\nstBackGroundState,\nIsOutputSetCondition(_daDialog), Action((ActionMethod) &amp; CAAECreateNewFeatureCmd::CreateCntxMenu)\n) ;  }\n\nvoid CAAECreateNewFeatureCmd::CreateCntxMenu()\n{\n\ncout&lt;&lt;\"\u53f3\u952e + 1 \"&lt;&lt;endl;\n\n_daPathElement-&gt;InitializeAcquisition();\n_daDialog-&gt;InitializeAcquisition();\n\nCATNotification      *pNotif    = GetLastNotification();\n\nif ( NULL != pNotif )\n{\nCATDlgContextualMenu *pCntxMenu = ((CATContext*)pNotif)-&gt;GetContextualMenu();\n\nif ( NULL != pCntxMenu )\n{\ncout&lt;&lt;\"Add CATDlgContextualMenu \\n\"&lt;&lt;endl;\n// Default Item Title \nCATString StartString (\"StartPoint\");\nCATString MediumString(\"MediumPoint\");\nCATString EndString (\"EndPoint\") ;\n\n// all these dialog objects are deleted when the contextual menu \n// is deleted. The command does't delete them.\nCATDlgSeparatorItem *Separator = new CATDlgSeparatorItem(pCntxMenu,\"separator\");\nCATDlgPushItem * StartPoint    = new CATDlgPushItem(pCntxMenu,StartString) ;\nCATDlgPushItem * MediumPoint   = new CATDlgPushItem(pCntxMenu,MediumString) ;\nCATDlgPushItem * EndPoint      = new CATDlgPushItem(pCntxMenu,EndString) ;\n}else{\ncout&lt;&lt;\"CATDlgContextualMenu NULL \\n\"&lt;&lt;endl;\n}\n}else{\ncout&lt;&lt;\"CATNotification NULL \\n\"&lt;&lt;endl;\n}\n}\n\n////////////////////////////\nvoid CAAECreateNewFeatureCmd::CreateCntxMenu()\n{\n\nCATDlgContextualMenu *pCntxMenu = new CATDlgContextualMenu(_pNewFeatureDlg-&gt;GetSpinner(),\"menu\");\nif ( NULL != pCntxMenu )\n{\ncout&lt;&lt;\"Add CATDlgContextualMenu \\n\"&lt;&lt;endl;\n// Default Item Title \nCATString StartString (\"StartPoint\");\nCATString MediumString(\"MediumPoint\");\nCATString EndString (\"EndPoint\") ;\n\n// all these dialog objects are deleted when the contextual menu \n// is deleted. The command does't delete them.\nCATDlgSeparatorItem *Separator = new CATDlgSeparatorItem(pCntxMenu,\"separator\");\nCATDlgPushItem * StartPoint    = new CATDlgPushItem(pCntxMenu,StartString) ;\nCATDlgPushItem * MediumPoint   = new CATDlgPushItem(pCntxMenu,MediumString) ;\nCATDlgPushItem * EndPoint      = new CATDlgPushItem(pCntxMenu,EndString) ;\n\nAddAnalyseNotificationCB (StartPoint, StartPoint-&gt;GetMenuIActivateNotification(),\n(CATCommandMethod)&amp;CAAECreateNewFeatureCmd::Menu,(void*)1);\nAddAnalyseNotificationCB (MediumPoint, MediumPoint-&gt;GetMenuIActivateNotification(),\n(CATCommandMethod)&amp;CAAECreateNewFeatureCmd::Menu,(void*)2);\nAddAnalyseNotificationCB (EndPoint, EndPoint-&gt;GetMenuIActivateNotification(),\n(CATCommandMethod)&amp;CAAECreateNewFeatureCmd::Menu,(void*)3);\n\n}else{\ncout&lt;&lt;\"CATDlgContextualMenu NULL \\n\"&lt;&lt;endl;\n}\n}\n\nvoid CAAECreateNewFeatureCmd::Menu(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)\n{\nint dNum = CATPtrToINT32(data);\nif (dNum == 1)\n{\ncout&lt;&lt;\"\u6309\u952e 1 \"&lt;&lt;endl;\n\n\nthis-&gt;RequestStatusChange(CATCommandMsgDesactivated);\ncout&lt;&lt;\"2 \"&lt;&lt;endl;\nCATCommand* pCmd = NULL;\nif (SUCCEEDED(CATAfrStartCommand(\"CATEditFormulaHdr\",pCmd)))//\u8c03\u7528\u7cfb\u7edf\u547d\u4ee4\n{\ncout&lt;&lt;\"3 -1\"&lt;&lt;endl;\n}\n\ncout&lt;&lt;\"3 -2\"&lt;&lt;endl;\nif (pCmd != NULL)\n{cout&lt;&lt;\"4 \"&lt;&lt;endl;\npCmd-&gt;RequestStatusChange(CATCommandMsgRequestSharedMode);\n}\ncout&lt;&lt;\"5 \"&lt;&lt;endl;\n}\nif (dNum == 2)\n{\ncout&lt;&lt;\"\u6309\u952e 2 \"&lt;&lt;endl;\n}\nif (dNum == 3)\n{\ncout&lt;&lt;\"\u6309\u952e 3 \"&lt;&lt;endl;\n}\n}\n\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%89%B9%E5%BE%81%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E5%8F%AF%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%8E%A5%E5%8F%A3/","title":"\u81ea\u5b9a\u4e49\u7279\u5f81\u4e0d\u540c\u7c7b\u578b\u53ef\u5b9e\u73b0\u7684\u63a5\u53e3","text":"<p>{     V6     {         \u53ea\u6709\u62d3\u6251\u64cd\u4f5c\u624d\u9700\u8981build </p> <pre><code>    GeometricalElement3D\nMandatory   //\u5fc5\u987b\u5b9e\u73b0\n    CATIFmFeatureBehaviorCustomization\n    CATIReplace\n    CATIMf3DBehavior\n    CATIInputDescription\nDS Behavior //DS \u7684\u884c\u4e3a\n    CATIEdit\n    CATIContextualSubMenu\n    CATICCPable\n    CATIMechanicalProperties\nSpecific case   //\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u51b3\u5b9a\u662f\u5426\u5b9e\u73b0\n    CATIIcon\n    CATIParmPublisher\n    CATIReplaceUI\n    CATIReplacable\n\nGSMGeom\nMandatory\n    CATIFmFeatureBehaviorCustomization\n    CATIInputDescription\n    CATIMf3DBehavior (only for a volumic feature)\nDS Behavior\n    CATIEdit\n    CATICCPable\nSpecific case\n    CATIContextualSubMenu\n    CATIIcon\n    CATIParmPublisher\n    CATIReplaceUI\n    CATIReplacable\n    CATINavigateObject\n\nMechanicalFormFeature\nMandatory\n    CATIFmFeatureBehaviorCustomization\n    CATIBuildShape\n    CATIReplace\n    CATIShapeFeatureProperties\nDS Behavior\n    CATIEdit\n    CATIContextualSubMenu\n    CATICCPable\nSpecific Case\n    CATIIcon\n    CATIParmPublisher\n    CATIReplaceUI\n    CATIReplacable\n\nMechanicalContextualFeature\nMandatory\n    CATIFmFeatureBehaviorCustomization\n    CATIReplace\n    CATIShapeFeatureProperties\nDS Behavior\n    CATIEdit\n    CATIContextualSubMenu\n    CATICCPable\nSpecific Case\n    CATIIcon\n    CATIParmPublisher\n    CATIReplaceUI\n    CATIReplacable\n\nMechanicalSet\nMandatory\n    CATIFmFeatureBehaviorCustomization\n    CATIReplace\n    CATIEdit\nDS Behavior\n    CATINavigateObject\n    CATIContextualSubMenu\n    CATIParmPublisher\n    CATIVisu\nSpecific Case\n    CATIVisProperties\n    CATIVisu\n    CATISelectShow\n    CATIReplacable\n\nMechanicalElement\nMandatory\n    CATIFmFeatureBehaviorCustomization\n    CATIReplace\n    CATIEdit\nDS Behavior\n    CATINavigateObject\n    CATIContextualSubMenu\n    CATIParmPublisher\nSpecific Case\n    CATIVisProperties\n    CATIVisu\n    CATISelectShow\n    CATIReplacable\n}\n\nV5\n{\n    GeometricalElement3D \u25e6Mandatory \n    \u25feCATIBuild\n    \u25feCATIReplace \n    \u25feCATIMf3DBehavior\n    \u25feCATIMf3DBehavior2 (only for a volumic feature)\n    \u25feCATIInputDescription\n\n    \u25e6DS Behavior \n    \u25feCATIEdit\n    \u25feCATIContextualSubMenu\n    \u25feCATICCPable\n    \u25feCATIMechanicalProperties\n\n    \u25e6Specific case \n    \u25feCATIIcon\n    \u25feCATIParmPublisher \n    \u25feCATIReplaceUI \n    \u25feCATIReplacable\n    \u25feCATIMechanicalCCP\n\n\n    \u2022GSMGeom \u25e6Mandatory \n    \u25feCATIBuild\n    \u25feCATIAttrBehavior \n    \u25feCATIInputDescription\n    \u25feCATIMf3DBehavior2 (only for a volumic feature)\n\n    \u25e6DS Behavior \n    \u25feCATIEdit\n    \u25feCATICCPable\n\n    \u25e6Specific case \n    \u25feCATIContextualSubMenu\n    \u25feCATIIcon\n    \u25feCATIParmPublisher \n    \u25feCATIReplaceUI   \n    \u25feCATIReplacable\n    \u25feCATINavigateObject\n\n\n    \u2022MechanicaFormFeature \u25e6Mandatory \u25feCATIBuild\n    \u25feCATIBuildShape\n    \u25feCATIReplace\n    \u25feCATIShapeFeatureProperties\n\n    \u25e6DS Behavior \u25feCATIEdit\n    \u25feCATIContextualSubMenu\n    \u25feCATICCPable\n\n    \u25e6Specific Case \u25feCATIIcon\n    \u25feCATIParmPublisher \n    \u25feCATIReplaceUI   \n    \u25feCATIReplacable\n    \u25fe CATIMechanicalCCP\n\n\n    \u2022MechanicalContextualFeature \u25e6Mandatory \u25feCATIBuild\n    \u25feCATIReplace\n    \u25feCATIShapeFeatureProperties\n\n    \u25e6DS Behavior \u25feCATIEdit\n    \u25feCATIContextualSubMenu\n    \u25feCATICCPable\n\n    \u25e6Specific Case \u25feCATIIcon\n    \u25feCATIParmPublisher \n    \u25feCATIReplaceUI   \n    \u25feCATIReplacable\n    \u25fe CATIMechanicalCCP\n\n\n    \u2022MechanicalSet \u25e6Mandatory \n    \u25e6DS Behavior \u25feCATINavigateObject\n    \u25feCATIContextualSubMenu\n    \u25feCATIParmPublisher\n    \u25feCATIMechanicalCCP \n    \u25feCATIEdit\n\n    \u25e6Specific Case \u25feCATIVisProperties\n    \u25feInterface deriving from CATIVisu \n    \u25feCATISelectShow \n    \u25feCATIReplacable\n    \u25feCATIBuild\n    \u25feCATIReplace\n\n    \u2022MechanicalElement \u25e6Mandatory \u25feCATIBuild\n    \u25feCATIReplace\n\n    \u25e6DS Behavior \u25feCATINavigateObject\n    \u25feCATIContextualSubMenu\n    \u25feCATIParmPublisher\n    \u25feCATIMechanicalCCP \n    \u25feCATIEdit\n\n    \u25e6Specific Case \u25feCATIVisProperties\n    \u25feInterface deriving from CATIVisu\n    \u25feCATISelectShow \n    \u25feCATIReplacable\n}\n</code></pre> <p>}</p>"},{"location":"DS-CODE/CAA/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%89%B9%E5%BE%81%E5%AE%9E%E7%8E%B0CATINavigateObject%E5%90%8E%E5%A6%82%E4%BD%95%E7%BB%A7%E7%BB%AD%E6%B7%BB%E5%8A%A0%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E7%9A%84%E7%89%B9%E5%BE%81/","title":"\u81ea\u5b9a\u4e49\u7279\u5f81\u5b9e\u73b0CATINavigateObject\u540e\u5982\u4f55\u7ee7\u7eed\u6dfb\u52a0\u590d\u5236\u7c98\u8d34\u7684\u7279\u5f81","text":""},{"location":"DS-CODE/CAA/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%89%B9%E5%BE%81%E5%AE%9E%E7%8E%B0CATINavigateObject%E5%90%8E%E5%A6%82%E4%BD%95%E7%BB%A7%E7%BB%AD%E6%B7%BB%E5%8A%A0%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E7%9A%84%E7%89%B9%E5%BE%81/#catinavigateobject","title":"\u81ea\u5b9a\u4e49\u7279\u5f81\u5b9e\u73b0CATINavigateObject\u540e\u5982\u4f55\u7ee7\u7eed\u6dfb\u52a0\u590d\u5236\u7c98\u8d34\u7684\u7279\u5f81","text":"<pre><code>CATLISTV(CATBaseUnknown_var)* CATEArcSlabSetFeatureNavigateObject::GetChildren()\n{\ncout&lt;&lt;\"CATEArcSlabSetFeatureNavigateObject::GetChildren()\"&lt;&lt;endl;\nCATLISTV(CATBaseUnknown_var)* Children = NULL;\n//Show components\nChildren = new CATListValCATBaseUnknown_var();\n\nCATIArcSlabSetFeature_var spiSlab = this;\nif (spiSlab != NULL_var)\n{\nCATISpecObject_var spiObj = NULL_var;\nif (SUCCEEDED(spiSlab-&gt;GetArcSlabSpecifications(spiObj)))\n{\nChildren-&gt;Append(spiObj);\n}\n}\n\nCATIDescendants_var spiDescendants = this;\nif (spiDescendants != NULL_var)\n{\nCATListValCATISpecObject_var spA;\nspiDescendants-&gt;GetDirectChildren(CATBaseUnknown::ClassName(), spA);\nfor (int i = 1;i &lt;= spA.Size();i++)\n{\nCATIAlias_var spiAlias = spA[i];\ncout &lt;&lt; \"XXAA : \" &lt;&lt; spiAlias-&gt;GetAlias() &lt;&lt; endl;\n\nChildren-&gt;Append(spiAlias);\n}\n}\nreturn Children;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%89%B9%E5%BE%81%E8%8E%B7%E5%8F%96%E6%88%96%E8%AE%BE%E7%BD%AE%E6%9E%84%E9%80%A0%E6%97%A5%E5%BF%97%E7%9A%84%E4%BF%A1%E6%81%AF/","title":"\u81ea\u5b9a\u4e49\u7279\u5f81\u83b7\u53d6\u6216\u8bbe\u7f6e\u6784\u9020\u65e5\u5fd7\u7684\u4fe1\u606f","text":""},{"location":"DS-CODE/CAA/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%89%B9%E5%BE%81%E8%8E%B7%E5%8F%96%E6%88%96%E8%AE%BE%E7%BD%AE%E6%9E%84%E9%80%A0%E6%97%A5%E5%BF%97%E7%9A%84%E4%BF%A1%E6%81%AF/#_1","title":"\u81ea\u5b9a\u4e49\u7279\u5f81\u83b7\u53d6\u6216\u8bbe\u7f6e\u6784\u9020\u65e5\u5fd7\u7684\u4fe1\u606f","text":"<pre><code>int CATEArcSlabFeatureBuildShape::TopDumpJournal(CATCGMJournalList*     iJournal)\n{\ncout &lt;&lt; \"TopDumpJournal()\" &lt;&lt; endl;\nif (NULL == iJournal) return 1;\nint rc = 0;\n\nCATLONG32 np = 10000;\nCATCGMJournal* Next = NULL;\nwhile (Next = iJournal-&gt;Next(Next))\n{\nCATCGMJournalItem* pJournalItem = Next-&gt;CastToReportItem();\n\nif (NULL == pJournalItem)\n{\ncout &lt;&lt; \"You must tass the journal\" &lt;&lt; endl;\nreturn (1);\n}\nCATLISTP(CATGeometry) parentList;\npJournalItem-&gt;GetFirstObjs(parentList);\nint numberParentList = parentList.Size();\n//\n// If no parents - that is \"[ ] -&gt; Creation [xx]\"  for example\n//\nif (numberParentList == 0)\n{\ncout &lt;&lt; \"[ ]\";\n}\n//\n// If several parents \"[ Edge 1, Vertex 2] -&gt; Modification [xx,yy]\" for example\n//\nfor (int i = 1; i &lt;= numberParentList; i++)\n{\ncout &lt;&lt; \"[\";\nchar * str1 = \" \";\nif ((parentList)[i]-&gt;IsATypeOf(CATFaceType)) { str1 = \"Face_\"; }\nelse if ((parentList)[i]-&gt;IsATypeOf(CATEdgeType)) { str1 = \"Edge_\"; }\nelse if ((parentList)[i]-&gt;IsATypeOf(CATVertexType)) { str1 = \"Vertex_\"; }\nelse { str1 = \"UnauthorizedType_\"; }\ncout &lt;&lt; str1;\n\nCATULONG32  persTag = (parentList)[i]-&gt;GetPersistentTag();\ncout &lt;&lt; persTag;\ncout &lt;&lt; \"]\";\nif (i &lt; numberParentList) cout &lt;&lt; \",\";\n}\n//\n// Print the type\n//\nCATCGMJournal::Type CGMEventType = pJournalItem-&gt;GetType();\nswitch (CGMEventType)\n{\ncase CATCGMJournal::Creation:\n{\ncout &lt;&lt; \"-&gt;Creation\";\nbreak;\n}\ncase CATCGMJournal::Modification:\n{\ncout &lt;&lt; \"-&gt;Modification\";\nbreak;\n}\ncase CATCGMJournal::Subdivision:\n{\ncout &lt;&lt; \"-&gt;Subdivision\";\nbreak;\n}\ncase CATCGMJournal::Absorption:\n{\ncout &lt;&lt; \"-&gt;Absorption\";\nbreak;\n}\ncase CATCGMJournal::Deletion:\n{\ncout &lt;&lt; \"-&gt;Deletion\";\nbreak;\n}\ncase CATCGMJournal::Keep:\n{\ncout &lt;&lt; \"-&gt;Keep\";\nbreak;\n}\n}\n//\n// Print the children\n//\nCATLISTP(CATGeometry) childrenList;\npJournalItem-&gt;GetLastObjs(childrenList);\nint numberChildrenList = childrenList.Size();\n\nfor (i = 1; i &lt;= numberChildrenList; i++)\n{\ncout &lt;&lt; \"[\";\nchar * str1 = \" \";\nif ((childrenList)[i]-&gt;IsATypeOf(CATFaceType)) { str1 = \"Face_\"; }\nelse if ((childrenList)[i]-&gt;IsATypeOf(CATEdgeType)) { str1 = \"Edge_\"; }\nelse if ((childrenList)[i]-&gt;IsATypeOf(CATVertexType)) { str1 = \"Vertex_\"; }\nelse { str1 = \"UnauthorizedType_\"; }\ncout &lt;&lt; str1;\n\nCATULONG32  persTag = (childrenList)[i]-&gt;GetPersistentTag();\ncout &lt;&lt; persTag;\ncout &lt;&lt; \"]\";\nif (i &lt; numberChildrenList) cout &lt;&lt; \",\";\n}\n\n// Print the infos if any\n//\nCATCGMJournalInfo* pInfo = new CATCGMJournalInfo(np);\npJournalItem-&gt;SetAssociatedInfo(pInfo);\nnp += 100;\n\nconst CATCGMJournalInfo * journalInfo = pJournalItem-&gt;GetAssociatedInfo();\nif (journalInfo)\n{\nCATLONG32 infoNumber = journalInfo-&gt;GetNumber();\ncout &lt;&lt; \" Info = \" &lt;&lt; infoNumber;\n}\n\ncout &lt;&lt; endl;\n}\nreturn rc;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96VS%E8%AE%BE%E7%BD%AE%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/","title":"\u83b7\u53d6VS\u8bbe\u7f6e\u7684\u73af\u5883\u53d8\u91cf","text":"<p>\u53d8\u91cf\u540d\u79f0\u4e3a\uff1aLanguage \u503c\u4e3a\uff1aChinese char* sp = NULL; CATLibStatus p = ::CATGetEnvValue(\"Language\",&amp;sp); if (p == CATLibSuccess) {     cout &lt;&lt; \"aaaaaaa\" &lt;&lt;sp&lt;&lt; endl; }  cout &lt;&lt; \"=== : \" &lt;&lt; ::CATGetEnv(\"CATTemp\") &lt;&lt; endl; cout &lt;&lt; \"=== : \" &lt;&lt; ::CATGetEnv(\"PATH\") &lt;&lt; endl; cout &lt;&lt; \"=== : \" &lt;&lt; ::CATGetEnv(\"CATReport\") &lt;&lt; endl; cout &lt;&lt; \"=== : \" &lt;&lt; ::CATGetEnv(\"CLASSPATH\") &lt;&lt; endl;</p>"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96cell%E7%9A%84%E5%86%85%E9%83%A8%E8%BD%AE%E5%BB%93%28%E7%8E%AF%29/","title":"\u83b7\u53d6cell\u7684\u5185\u90e8\u8f6e\u5ed3(\u73af)","text":"<p>\u5f97\u5230Cell(\u9762),Cell-&gt;GetNbDomains\u5f97\u5230\u73af\u7684\u6570\u91cf,==1 \u8bf4\u660e\u8be5\u9762\u53ea\u5b58\u5728\u4e00\u4e2a\u5916\u8f6e\u5ed3,\u65e0\u5185\u73af     Cell-&gt;GetDomain(i);(i &lt;= Cell-&gt;GetNbDomains),1\u4e3a\u5916\u73af(\u5916\u8f6e\u5ed3)</p>"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%8D%95%E4%BD%8D/","title":"\u83b7\u53d6\u53c2\u6570\u5355\u4f4d","text":""},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%8D%95%E4%BD%8D/#_1","title":"\u83b7\u53d6\u53c2\u6570\u5355\u4f4d","text":"<pre><code>CATICkeParm_var spParm = (*spList)[n];\nif (spParm != NULL_var)\n{\nCATICkeMagnitude_var spCkeMagnitude = spParm-&gt;Type();\nif (spCkeMagnitude != NULL_var)\n{\nParamData mParamData;\nmParamData.sUnit = spCkeMagnitude-&gt;CurrentUnit()-&gt;Symbol();\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E5%AD%90%E5%AF%B9%E8%B1%A1GetChildren%28%29/","title":"\u83b7\u53d6\u5b50\u5bf9\u8c61GetChildren()","text":""},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E5%AD%90%E5%AF%B9%E8%B1%A1GetChildren%28%29/#case","title":"case","text":"<pre><code>CATINavigateObject_var spiNavObj = ispSet;\nCATICkeParameterSet_var spiCkeParamSet = NULL_var;\n\nCATListValCATBaseUnknown_var* pChildrenListV = spiNavObj-&gt;GetChildren();\ncout &lt;&lt; \"Children Size = \" &lt;&lt; pChildrenListV-&gt;Size() &lt;&lt; endl;\nif (pChildrenListV-&gt;Size() &gt; 0)\n{\nfor (int i = 1;i &lt;= pChildrenListV-&gt;Size();i++)\n{\nspiAlias = (*pChildrenListV)[i];\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E6%BF%80%E6%B4%BB%E7%9A%84%E5%8F%82%E6%95%B0%E9%9B%86/","title":"\u83b7\u53d6\u6fc0\u6d3b\u7684\u53c2\u6570\u96c6","text":""},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E6%BF%80%E6%B4%BB%E7%9A%84%E5%8F%82%E6%95%B0%E9%9B%86/#_1","title":"\u83b7\u53d6\u6fc0\u6d3b\u7684\u53c2\u6570\u96c6","text":"<pre><code>{\n    CATIParmPublisher* piParmPublisherOnMechPart = NULL;\n    hr = spMechFeatOnPart-&gt;QueryInterface(IID_CATIParmPublisher, (void**)&amp;piParmPublisherOnMechPart);\n\n    if (FAILED(hr))return 1;\n\n    CATIKweModelServices_var spKweModelServices = CATCkeGlobalFunctions::GetModelServices();\n    if ( spKweModelServices == NULL_var ) return 1;\n\n    // Retrieve the set of knowledge parameter\n    CATICkeParameterSet_var spParmSet= spKweModelServices-&gt;GetCurrentSet(CATIKweModelServices::Parameter,piParmPublisherOnMechPart);\n\n    piParmPublisherOnMechPart-&gt;Release();\n    piParmPublisherOnMechPart = NULL;\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%89%B9%E5%BE%81%E7%B1%BB%E5%9E%8BGetType/","title":"\u83b7\u53d6\u7279\u5f81\u7c7b\u578bGetType","text":""},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%89%B9%E5%BE%81%E7%B1%BB%E5%9E%8BGetType/#gettype","title":"\u83b7\u53d6\u7279\u5f81\u7c7b\u578bGetType","text":"<pre><code>CATICkeFeature_var spiCkeFeature = spFeature;\nif (spiCkeFeature != NULL_var)\n{\nif (spiCkeFeature-&gt;GetType()-&gt;Name() == \"AdvisorRelationSet\")\n{\nbBool = TRUE;\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%9A%84EXE%E6%89%80%E5%9C%A8%E7%9A%84%E8%B7%AF%E5%BE%84/","title":"\u83b7\u53d6\u7a0b\u5e8f\u6267\u884c\u7684EXE\u6240\u5728\u7684\u8def\u5f84","text":""},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%9A%84EXE%E6%89%80%E5%9C%A8%E7%9A%84%E8%B7%AF%E5%BE%84/#exe","title":"\u83b7\u53d6\u7a0b\u5e8f\u6267\u884c\u7684EXE\u6240\u5728\u7684\u8def\u5f84","text":"<pre><code>    CATUnicodeString CATAECFeatureCmd::GetThisExePath()\n{\nwchar_t exePath[MAX_PATH];\nGetModuleFileName(NULL, exePath, MAX_PATH);\nstring arrStr;\nWchar_tToString(arrStr, exePath);\narrStr = arrStr.substr(0, arrStr.rfind(\"\\\\\"));\narrStr = arrStr.substr(0, arrStr.rfind(\"\\\\\"));\narrStr = arrStr.substr(0, arrStr.rfind(\"\\\\\"));\n\nCATUnicodeString pStr(arrStr.c_str());\nreturn pStr;\n}\n\nvoid CATAECFeatureCmd::Wchar_tToString(string&amp; szDst, wchar_t *wchar)\n{\nwchar_t * wText = wchar;\nDWORD dwNum = WideCharToMultiByte(CP_OEMCP, NULL, wText, -1, NULL, 0, NULL, FALSE);\nchar *psText;  psText = new char[dwNum];\nWideCharToMultiByte(CP_OEMCP, NULL, wText, -1, psText, dwNum, NULL, FALSE);\nszDst = psText;\ndelete[]psText;\n}\n\nchar* CATAECBDGEnvCmd::UnicodeToUtf8(const wchar_t* unicode)\n{\nint len;\nlen = WideCharToMultiByte(CP_UTF8, 0, unicode, -1, NULL, 0, NULL, NULL);\nchar *szUtf8 = (char*)malloc(len + 1);\nmemset(szUtf8, 0, len + 1);\nWideCharToMultiByte(CP_UTF8, 0, unicode, -1, szUtf8, len, NULL, NULL);\ndelete[]unicode;\nunicode = NULL;\nreturn szUtf8;\n}\n</code></pre> <p>//\u8c03\u7528exe\u6587\u4ef6 <pre><code>ShellExecute(0,(LPCWSTR)L\"open\",(LPCWSTR)L\"D:\\\\Bin_x64\\\\SuperMapDemo.exe\",(LPCWSTR)L\"\",(LPCWSTR)L\"\",SW_SHOWNORMAL);\nSHELLEXECUTEINFO ShellInfo;\nmemset(&amp;ShellInfo,0,sizeof(ShellInfo));\nShellInfo.cbSize=sizeof(ShellInfo);\nShellInfo.hwnd=NULL;\nShellInfo.lpVerb=_T(\"open\");\n//ShellInfo.lpFile=_T(\"..\\\\..\\\\..\\\\SuperMapDemo\\\\SuperMapDemo.exe\");\nShellInfo.lpFile=_T(\"E:\\\\supermap\\\\Bin_x64\\\\SuperMapDemo.exe\");\nShellInfo.lpParameters= name;\nShellInfo.nShow=SW_HIDE;//SW_SHOWNORMAL\nShellInfo.fMask=SEE_MASK_NOCLOSEPROCESS;\nBOOL bResult=ShellExecuteEx(&amp;ShellInfo);\nif (!bResult)\n{\nreturn false;\n}\n</code></pre>     \u884c\u53f7 \u53c2\u6570 \u542b\u4e49     1 SW_HIDE \u9690\u85cf\u8fd9\u4e2a\u7a97\u4f53\uff0c\u5e76\u6fc0\u6d3b\u5176\u4ed6\u7a97\u4f53\u3002      2 SW_MAXIMIZE \u6700\u5927\u5316\u6307\u5b9a\u7684\u7a97\u4f53\u3002     3 SW_MINIMIZE \u6700\u5c0f\u5316\u6307\u5b9a\u7684\u7a97\u4f53\uff0c\u5e76\u6309\u987a\u5e8f\u6fc0\u6d3b\u6700\u4e0a\u5c42\u7684\u7a97\u4f53\u3002     4 SW_RESTORE \u6fc0\u6d3b\u5e76\u663e\u793a\u7a97\u4f53\u3002\u5982\u679c\u7a97\u4f53\u4e3a\u6700\u5c0f\u5316\u6216\u8005\u6700\u5927\u5316\uff0c\u7a97\u4f53\u6062\u590d\u5230\u539f\u59cb\u5927\u5c0f\u548c\u4f4d\u7f6e\u3002\u5e94\u7528\u7a0b\u5e8f\u5f53\u6062\u590d\u4e00\u4e2a\u6700\u5c0f\u5316\u7684\u7a97\u4f53\u65f6\u5c06\u6307\u5b9a\u6807\u8bb0\u3002      5 SW_SHOW \u4ee5\u5f53\u524d\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u6fc0\u6d3b\u5e76\u663e\u793a\u7a97\u4f53\u3002      6 SW_SHOWDEFAULT      7 SW_SHOWMAXIMIZED \u6fc0\u6d3b\u5e76\u6700\u5927\u5316\u663e\u793a\u7a97\u4f53\u3002     8 SW_SHOWMINIMIZED \u6fc0\u6d3b\u5e76\u6700\u5c0f\u5316\u73b0\u5b9e\u7a97\u4f53\u3002      9 SW_SHOWMINNOACTIVE \u6700\u5c0f\u5316\u7a97\u4f53\uff0c\u4fdd\u6301\u5176\u6fc0\u6d3b\u72b6\u6001\u3002      10 SW_SHOWNA \u4ee5\u5f53\u524d\u72b6\u6001\u663e\u793a\u7a97\u4f53\uff0c\u4fdd\u6301\u5176\u6fc0\u6d3b\u72b6\u6001\u3002     11 SW_SHOWNOACTIVATE \u4ee5\u5f53\u524d\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u663e\u793a\u7a97\u4f53\uff0c\u5e76\u4fdd\u6301\u5176\u6fc0\u6d3b\u72b6\u6001\u3002      12 SW_SHOWNORMAL \u6fc0\u6d3b\u5e76\u663e\u793a\u4e00\u4e2a\u7a97\u4f53\u3002\u5982\u679c\u7a97\u4f53\u4e3a\u6700\u5927\u5316\u6216\u8005\u6700\u5c0f\u5316\uff0c\u7a97\u4f53\u6062\u590d\u5230\u539f\u59cb\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u3002\u5f53\u7a97\u4f53\u7b2c\u4e00\u6b21\u663e\u793a\u7684\u65f6\u5019\uff0c\u5e94\u7528\u7a0b\u5e8f\u8bb0\u5f55\u6807\u8bb0\u3002</p>"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E7%9A%84%E5%85%AC%E5%B7%AE/","title":"\u83b7\u53d6\u7cfb\u7edf\u8bbe\u7f6e\u7684\u516c\u5dee","text":""},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E7%9A%84%E5%85%AC%E5%B7%AE/#case","title":"case","text":"<pre><code>CATTolerance mTol;\ndouble dLngTol = mTol.ResolutionForLengthTest();\ncout&lt;&lt;\"\u516c\u5dee\uff1a\"&lt;&lt;dLngTol&lt;&lt;endl;\n</code></pre>"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%BB%99%E5%AE%9A%E5%B9%B3%E9%9D%A2%E6%B3%95%E7%BA%BF%20%E6%88%96%20%E8%8E%B7%E5%8F%96MathPlane%20%E7%84%B6%E5%90%8EGetNormal/","title":"\u83b7\u53d6\u7ed9\u5b9a\u5e73\u9762\u6cd5\u7ebf \u6216 \u83b7\u53d6MathPlane \u7136\u540eGetNormal","text":""},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E7%BB%99%E5%AE%9A%E5%B9%B3%E9%9D%A2%E6%B3%95%E7%BA%BF%20%E6%88%96%20%E8%8E%B7%E5%8F%96MathPlane%20%E7%84%B6%E5%90%8EGetNormal/#mathplane-getnormal","title":"\u83b7\u53d6\u7ed9\u5b9a\u5e73\u9762\u6cd5\u7ebf \u6216 \u83b7\u53d6MathPlane \u7136\u540eGetNormal","text":"<pre><code>void GetNormalOfPlane(CATBody_var ispBodyOfPlane, CATMathVector &amp;oNormalVector)\n{\nif (NULL_var == ispBodyOfPlane)\n{\nreturn;\n}\nCATLISTP(CATCell) cells;\nispBodyOfPlane-&gt;GetAllCells(cells, 2);\nCATPlane_var spBasePlane = NULL_var;\nfor (int currentCell = 1; currentCell &lt;= cells.Size(); currentCell++)\n{\nCATCell_var spCell(cells[currentCell]);\nif (NULL_var != spCell)\n{\nCATFace_var spFace = spCell;\nif (NULL_var != spFace)\n{\nCATSurface_var spSurface = NULL_var;\nspSurface = spFace-&gt;GetSurface();\nif (NULL_var != spSurface)\n{\nspBasePlane = spSurface;\n}\n}\n}\n}\nif (NULL_var == spBasePlane)\n{\nreturn;\n}\nCATMathPoint iOrgin(0.0, 0.0, 0.0);\nspBasePlane-&gt;GetNormal(iOrgin, oNormalVector);\n}\n</code></pre>"},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E8%8A%82%E7%82%B9%E5%85%A8%E8%B7%AF%E5%BE%84/","title":"\u83b7\u53d6\u8282\u70b9\u5168\u8def\u5f84","text":""},{"location":"DS-CODE/CAA/%E8%8E%B7%E5%8F%96%E8%8A%82%E7%82%B9%E5%85%A8%E8%B7%AF%E5%BE%84/#catpathelement","title":"CATPathElement","text":"<p>CATPathElement \u5982\u679c\u662fAgent\u9009\u53d6\u7684\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6 \u6216\u8005\u901a\u8fc7HSO\u83b7\u53d6\u9ad8\u4eae\u8282\u70b9</p> <pre><code>CATPathElement* pPathElement= (CATPathElement*)(*_HSO)[i];\n</code></pre> <p>\u5982\u679c\u662f\u5355\u4e2a\u8282\u70b9\u5e94\u8be5\u53ef\u4ee5 <pre><code>CATFrmEditor* pEditor = CATFrmEditor::GetCurrentEditor();\nCATPathElement pContext = pEditor-&gt;GetUIActiveObject();//Get UI Active Object\nCATIBuildPath * piBuildPath = NULL;\nispHighlight-&gt;QueryInterface(IID_CATIBuildPath, (void **)&amp;piBuildPath);\nif (piBuildPath != NULL)\n{\nCATPathElement * pPathElement = NULL;\nrc = piBuildPath-&gt;ExtractPathElement(&amp;pContext, &amp;pPathElement);\n}\n</code></pre></p>"},{"location":"DS-CODE/CAA/%E8%AE%BE%E7%BD%AE%E7%BA%BF%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%95%9C%E5%83%8F%E8%8C%83%E5%9B%B4%E5%B1%9E%E6%80%A7/","title":"\u8bbe\u7f6e\u7ebf\u5bf9\u8c61\u7684\u955c\u50cf\u8303\u56f4\u5c5e\u6027","text":"<p>SetSymmetricalExtension();//\u8bbe\u7f6e\u955c\u50cf\u8303\u56f4</p>"},{"location":"DS-CODE/CAA/%E9%80%89%E5%8F%96%E6%93%8D%E4%BD%9C%E7%9A%84%E7%BB%B4%E5%BA%A6/","title":"\u9009\u53d6\u64cd\u4f5c\u7684\u7ef4\u5ea6","text":"<pre><code>CATIMfZeroDimResult  0;\nCATIMfMonoDimResult  1;\nCATIMfBiDimResult    2;\nCATIMfTriDimResult   3;\nCATIMfInfiniteResult X;\n\neg:_pContourAgent = new CATPathElementAgent(\"All\", CATIMfMonoDimResult::ClassName(), CATDlgEngWithCSO | CATDlgEngRepeat | CATDlgEngWithPrevaluation);\nAddCSOClient(_pContourAgent);\n</code></pre>"},{"location":"DS-CODE/CAA/%E9%80%9A%E8%BF%87%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E6%8E%A7%E5%88%B6%E6%8E%A7%E4%BB%B6/","title":"\u901a\u8fc7\u8d44\u6e90\u6587\u4ef6\u63a7\u5236\u63a7\u4ef6","text":"<pre><code>_MultiList1 = new CATDlgMultiList(this, (const char*)\"MultiList1\", 0);\nCATUnicodeString MultiList001Titles[2];\nMultiList001Titles[0] = CATMsgCatalog::BuildMessage(\"CAAPartCenteredDlg\", \"MultiList1.ColumnTitle1\");//CATNls\u6587\u4ef6\nMultiList001Titles[1] = CATMsgCatalog::BuildMessage(\"CAAPartCenteredDlg\", \"MultiList1.ColumnTitle2\");\n_MultiList1-&gt;SetColumnTitles(2, MultiList001Titles);\n_MultiList1-&gt;SetVisibleColumnCount(2);\n_MultiList1-&gt;SetGridConstraints(1, 0, 1, 1, 0 | CATGRID_LEFT | CATGRID_RIGHT | CATGRID_TOP | CATGRID_BOTTOM);\n</code></pre>"},{"location":"DS-CODE/CAA/%E9%81%8D%E5%8E%86NODE%E7%9A%84%E6%96%B9%E6%B3%95/","title":"\u904d\u5386NODE\u7684\u65b9\u6cd5","text":""},{"location":"DS-CODE/CAA/%E9%81%8D%E5%8E%86NODE%E7%9A%84%E6%96%B9%E6%B3%95/#node","title":"\u904d\u5386NODE\u7684\u65b9\u6cd5","text":"<pre><code>{\nCATFrmLayout * pLayout = CATFrmLayout::GetCurrentLayout();\nif (NULL != pLayout)\n{\nCATFrmWindow * pCurrentWindow = pLayout-&gt;GetCurrentWindow();\nif (NULL != pCurrentWindow)\n{\nif (1 == pCurrentWindow-&gt;IsAKindOf(\"CATFrmNavigGraphicWindow\"))\n{\nCATFrmNavigGraphicWindow * pFrmNavigGraphicWindow =\n(CATFrmNavigGraphicWindow*)pCurrentWindow;\nCATNavigBox * pNavigBox = NULL;\npNavigBox = pFrmNavigGraphicWindow-&gt;GetNavigBox();\nif (NULL != pNavigBox)\n{\nCATListValCATBaseUnknown_var * pRoots = pNavigBox-&gt;GetAllRoots();\nint Size = pRoots-&gt;Size();\nfor (int k = 1; k &lt;= Size; k++)\n{\nCATINavigateObject_var spNavObj = (*pRoots)[k];\nif (spNavObj != NULL_var)\n{\nCATListValCATBaseUnknown_var* spList = spNavObj-&gt;GetChildren();\nint NavObjSize = spList-&gt;Size();\ncout &lt;&lt; \" NavObjSize = \" &lt;&lt; NavObjSize &lt;&lt; endl;\nfor (int n = 1; n &lt;= NavObjSize; n++)\n{\nCATIProduct_var spProd = (*spList)[n];\nif (spProd != NULL)\n{\nCATUnicodeString mPartNumber1 = spProd-&gt;GetPartNumber();\ncout &lt;&lt; mPartNumber1 &lt;&lt; endl;\n}\nCATINavigateObject_var spNavInner = (*spList)[n];\n\nCATListValCATIxPDMItem_var* oItemsWithError = NULL;\nCATIReporter* oReporter = NULL;\nCATxPDMProductServices::SetProductInstanceActivation(spProd, TRUE, oItemsWithError, oReporter);\n\nif (spNavInner != NULL_var)\n{\nCATListValCATBaseUnknown_var* spList1 = spNavInner-&gt;GetChildren();\nif (spList1 != NULL)\n{\nint NavObjSize1 = spList1-&gt;Size();\ncout &lt;&lt; \"        NavObjSize1 = \" &lt;&lt; NavObjSize1 &lt;&lt; endl;\nfor (int n1 = 1; n1 &lt;= NavObjSize1; n1++)\n{\nCATIProduct_var spProd1 = (*spList1)[n1];\nif (spProd1 != NULL)\n{\nCATUnicodeString mPartNumber2 = spProd1-&gt;GetPartNumber();\ncout &lt;&lt; \"        \" &lt;&lt; mPartNumber2 &lt;&lt; endl;\n}\n}\n}\n}\n}\n}\n}\ndelete pRoots;\npRoots = NULL;\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"DS-CODE/CAA/BuildCAA/BUILD_CAA/","title":"CAA \u7f16\u8bd1","text":"<p>CATIA \u7248\u672c    VS \u7248\u672c   \u5907\u6ce8 V5R25~27    VS2012  VS \u52fe\u9009\u5168\u90e8 V5R28~29    VS2015  VS \u52fe\u9009\u5168\u90e8C++ V5R30~31    VS2017  \u53c2\u8003\u6587\u4ef6\u5939\u5185\u7684xml ,\u5b89\u88c5\u65f6\u5019\u6709\u5bfc\u5165\u914d\u7f6e\u9009\u9879 V5R32~  VS2019  \u53c2\u8003\u6587\u4ef6\u5939\u5185\u7684xml ,\u5b89\u88c5\u65f6\u5019\u6709\u5bfc\u5165\u914d\u7f6e\u9009\u9879</p> <ul> <li>\u5b89\u88c5VS \u63d2\u4ef6 \"C:\\Program Files\\Dassault Systemes\\B32_RADE\\win_b64\\code\\bin\\3DSOpenNativeAppsExt2019.vsix\"</li> </ul> <p> </p> <pre><code>cd /d D:\\010_Gitee\\CAA\\CAATest\n\n\"C:\\Program Files\\Dassault Systemes\\B29_RADE\\win_b64\\code\\command\\tck_init.bat\"\n\ntck_profile V5_6R2019_B29\n\nmkmk -a -g -u -brief &amp;&amp; mkrtv\n</code></pre> <pre><code>cd /d D:\\010_Gitee\\CAA\\CAATest\n\n\"C:\\Program Files\\Dassault Systemes\\B27_RADE\\win_b64\\code\\command\\tck_init.bat\"\n\ntck_profile V5_6R2017_B27\n\nmkmk -a -g -u -brief &amp;&amp; mkrtv\n</code></pre> <p></p>"},{"location":"DS-CODE/EKL/Action%20%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9E%8B%E9%A2%9C%E8%89%B2/","title":"Action \u4fee\u6539\u6a21\u578b\u989c\u8272","text":""},{"location":"DS-CODE/EKL/Action%20%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9E%8B%E9%A2%9C%E8%89%B2/#ekl","title":"EKL","text":"<pre><code>Action Editor : Action Coloring Argument list Name Type Keep_modi .fter ave Boolean KAdd new...rgume t / * The action will calar instances \"right\" in green, and \"left\" in purple Let childrenList, Refl_ist, OccurenceList(_\u00c9t) Let rootFroduct(VPMReference) let roo\u00dcc, Insti(PraductOccurrence) let i,n (IntEger) / *following line retrelve Root product of be active Editor, sa it will no be necessary Yat user select; It* / Refl_ (\"VPMRefarence l') \n/ *following lines are there to retreive Occurence cf frie root editor. Why is this ? because if yau Quer'f the Productoccurence below a Reference you will get instances, and instances have na calar ate-ibute But Product\u00dcccurence \u00fca have color attribute, and b:) retreive Yem, yau must Query Pruduct\u00dcccurence fram the Praduct\u00dcccurenca of tie root Occurencel_ rantOczOccurenceListOGetItern( ) / *previous line finds Product\u00dcccurence cf the root* / </code></pre>"},{"location":"DS-CODE/EKL/Create%20Progress%20Bar/","title":"Create Progress Bar","text":""},{"location":"DS-CODE/EKL/Create%20Progress%20Bar/#action","title":"Action\u8fdb\u5ea6\u6761","text":"<pre><code>//\u8bbe\u7f6e\u8fdb\u5ea6\u6761\nlet i,nbPts(integer)\nlet ...\nCreateProgressBar(\"ProgressBar Name\")\ni=1\nfor i while i&lt;=nbPts\n{\n...\nProgressBarSetValue(100*i/nbPts)\nProgressBarSetText(\" \uff1a\u5df2\u5b8c\u6210 \u5171\" + floor(nbPts))\n}\n</code></pre>"},{"location":"DS-CODE/EKL/EKL%20Excel/","title":"EKL Excel","text":""},{"location":"DS-CODE/EKL/EKL%20Excel/#use-ekl-read-excel","title":"Use EKL read EXCEL","text":"<pre><code>Let strFileName(String) Let oXLSheet(DTSheetType)\nLet indx(Integer)\nLet noOfRows(Integer)\nLet strColorName(String)\nLet rValue(Real)\nLet gValue(Real)\nLet bValue(Real)\nLet strRowValue(String)\nlet s(String)\nstrFileName = \"E:/Temp/Test/Input.xlsx\"\nSet oXLSheet = CreateSheet(strFileName)\nnoOfRows = oXLSheet.RowsNb\nindx = 1\nFor indx while indx &lt; noOfRow\n{\ns = oXLSheet.CellAsString(indx, 1)\nlst.Append(s)\n}\n</code></pre>"},{"location":"DS-CODE/EKL/EKL%20Get%20point%20coordinate/","title":"EKL Get point coordinate","text":"<pre><code>let i(inetger)\nlet x,y,z(length)\nlet p(point)\nlet l(list)\nlet dt(SheetType)\n\ndt=....\nl =XX.Query(\"\",\"Point\")\n\ni =1 for i While i&lt;=l.Size()\n{\nset p = l.GetItem(i)\n\nx = distance(yzpln,p)\ny = distance(xzpln,p)\nz = distance(xypln,p)       dt.SetCell(i,1,x)\ndt.SetCell(i,2,y)\ndt.SetCell(i,3,z)\n\n}\n</code></pre>"},{"location":"DS-CODE/EKL/EKL%20Instantiate%20template/","title":"EKL Instantiate template","text":"<pre><code>let i(Integer)\nlet myStartPoint(Point)\nlet myDirection(Line)\nlet myDirection02(Line)\nlet temp(Feature)\nlet myList(List)\nlet myGeo(OpenBodyFeature)\ni=1\nmyStartPoint=`DGP_First_Tem\\Multi Output.12 (Intersect)\\StartPoint` myDirection=DGP_First_Tem\\Direction myDirection02=DGP_First_Tem\\Direction02 for i while i&lt;=590\n{\ntemp=InstantiateTemplate(\"Resource1\",Output02 )\ntemp-&gt;SetAttributeObject(\"StartPoint\",myStartPoint)\ntemp-&gt;SetAttributeObject(\"Direction\",myDirection)\ntemp-&gt;SetAttributeObject(\"Direction02\",myDirection02)\ntemp-&gt;SetAttributeObject(\"MainLine\",`Geometrical Set.1\\S_MainLine` )\ntemp-&gt;SetAttributeObject(\"CenterCurve\",`Geometrical Set.1\\N_CenterCurve`  )\n\nEndModifyTemplate(temp)\ni=i+1\n\nmyGeo=temp-&gt;GetAttributeObject(\"DGP_Tem\")\nmyStartPoint=myGeo.Find(\"Point\",\"x.Name==\\\"StartPoint\\\"\",True)\nmyDirection=myGeo.Find(\"Line\",\"x.Name==\\\"Direction\\\"\",True)\nmyDirection02=myGeo.Find(\"Line\",\"x.Name==\\\"Direction02\\\"\",True)\nmyGeo.Name=\"DGP_Tem\" + (i-1)\n\n\n}\n</code></pre>"},{"location":"DS-CODE/EKL/EKL%20%E8%8E%B7%E5%BE%97%E5%BD%93%E5%89%8DPart/","title":"EKL \u83b7\u5f97\u5f53\u524d\u6839\u8282\u70b9","text":""},{"location":"DS-CODE/EKL/EKL%20%E8%8E%B7%E5%BE%97%E5%BD%93%E5%89%8DPart/#occurrence","title":"\u83b7\u53d6\u6839\u8282\u70b9\u4e3aOccurrence","text":"<pre><code>let root(ProductOccurrence)\nroot = GetEditorRootOccurrences(\"ProductOccurrence\").GetItem(1)\n</code></pre>"},{"location":"DS-CODE/EKL/EKL%20%E8%8E%B7%E5%BE%97%E5%BD%93%E5%89%8DPart/#vpmreference","title":"\u83b7\u53d6\u6839\u8282\u70b9\u4e3aVPMReference","text":"<pre><code>let root(VPMReference)\nroot = GetEditorRoots(\"VPMReference\").GetItem(1)\n</code></pre>"},{"location":"DS-CODE/EKL/EKL%20%E8%8E%B7%E5%BE%97%E5%BD%93%E5%89%8DPart/#occurrence_1","title":"\u83b7\u53d6\u6240\u6709occurrence\u4e0b\u7684\u5185\u5bb9","text":"<pre><code>let root(ProductOccurrence)\nroot = GetEditorRootOccurrences(\"ProductOccurrence\").GetItem(1)\nlet allOccurrences(List)\nlet predicate  = \"\"\nallOccurrences = root.Query(\"ProductOccurrence\", \"\")\n</code></pre>"},{"location":"DS-CODE/EKL/EKL%20%E8%8E%B7%E5%BE%97%E5%BD%93%E5%89%8DPart/#ekl-part","title":"EKL \u83b7\u5f97\u5f53\u524dPart","text":"<p>\u901a\u8fc7\u5f53\u524d\u6587\u4ef6\u7684 xyplane \u6765\u83b7\u5f97part container</p> <pre><code>let rootFeat(PartFeature)\nlet repRef(VPMRepReference)\nlet Destination_Body(BodyFeature)\n\nrepRef=GetPLMOwner(`xy \u5e73\u9762` )\nrootFeat=repRef-&gt;Find(\"PartFeature\",\"\",TRUE)\nDestination_Body=new(\"OpenBodyFeature\",\"ALL-BODY\",rootFeat)\n</code></pre>"},{"location":"DS-CODE/EKL/EKL%E8%AF%8D%E5%85%B8/","title":"EKL\u8bcd\u5178","text":"<p>```vb</p> <pre><code>1. String.ToReal()   \u5b57\u7b26\u4e32\u8f6c\u6362\u5b9e\u6570\n2. VPMReference \n3. NewSK=new(\"VPMReference\",\"\u690d\u7269\",Location)  \u65b0\u5efa\u7269\u7406\u4ea7\u54c1\n4. let NewSK(`3DPart`)\n5. NewSK=new(\"3DPart\",\"\u690d\u7269\",Location)  \u65b0\u5efa\u96f6\u4ef6\n6. ColumnsNb \u6574\u6570 \u6307\u793a\u8bbe\u8ba1\u8868\u7684\u5217\u6570\u3002\n7. CopyMode \u6574\u6570 \u5982\u679c\u8bbe\u4e3a 1\uff0c\u5219\u6570\u636e\u4f1a\u5b58\u50a8\u5728\u6a21\u578b\u548c\u6587\u4ef6\u4e2d\u3002 \u5982\u679c\u8bbe\u4e3a 0\uff0c\u5219\u6570\u636e\u53ea\u4f1a\u5b58\u50a8\u5728\u6587\u4ef6\u4e2d\u3002\n8. FilePath \u5b57\u7b26\u4e32 -\n9. RowsNb \u6574\u6570 \u6307\u793a\u884c\u6570\u3002 //\u4f8b\u5982\uff1aDTSheetType.RowsNb\n10. SheetCopy \u5b57\u7b26\u4e32 \u5f53 CopyMode \u8bbe\u4e3a 1\uff0c\u5219\u63cf\u8ff0\u6587\u4ef6\u5185\u5bb9\u3002\n11. SheetIndex \u6574\u6570 \u6307\u793a Excel \u4e2d\u7684\u5de5\u4f5c\u8868\u6570\u3002\n12. VerticalColumns \u6574\u6570 \u6307\u793a Excel \u4e2d\u7684\u5217\u662f\u7eb5\u5411\u8fd8\u662f\u6a2a\u5411\u3002\n13. for i while dt-&gt;CellAsString(i,1)&lt;&gt;\"\" \u5f53dt\u8868\u683c\u7684\u7b2ci\u884c\u7b2c1\u5217\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u6267\u884ci++ \n14. Ceil   \u5411\u4e0a\u53d6\u6574\n15. Floor  \u5411\u4e0b\u53d6\u6574\n16. Int  \u53d6\u53c2\u6570\u7684\u6574\u6570\u90e8\u5206\n17. plane(point(0m,0m,0m),point(1m,0m,0m),point(0m,1m,0m))\n18. Message(\"\",) Notify()\n19. y1=circleCtrRadius(pt1,pl,1200mm,0,60deg,-60deg) \u5efa\u7acb\u786e\u5b9a\u89d2\u5ea6\u7684\u5706\u5f27\n20. y1=corner(`\u51e0\u4f55\u4f53.2\\\u5206\u5272.1` ,`\u51e0\u4f55\u4f53.2\\\u5206\u5272.2` ,pl,1200mm,false,false,true) \u5efa\u7acb\u4e24\u66f2\u7ebf\u5706\u89d2\uff08\u4fee\u5efa\uff09\n21. F(Feature/DocumentTemplate)\n22. \u63a5\u5408 assemble\n23. \u70b9 point\n24. \u76f4\u7ebf line\n25. \u66f2\u7ebf curve\n26. \u5e73\u9762 plane\n27. \u66f2\u9762 surface\n28. \u51e0\u4f55\u4f53 BodyFeature\n29. \u51e0\u4f55\u56fe\u5f62\u96c6 OpenBodyFeature\n30. \u96f6\u4ef6 PartFeature\n31. \u88c5\u914d ProductOccurrence/VPMReference\n32. \u653e\u5c04 affinity\n33. \u8fb9\u754c boundary(element : Surface) : Curve\n34. \u62c6\u89e3 disassemble(Input: Body, CellsMode : Boolean) : List\n35. \u63d0\u53d6 extract(cell : CATCell [,propagationType (0: G0; 1: G1; 2: G2; other or no value: no propagation): Integer]) : Wireframe\n36. \u53cd\u8f6c invert(CurveOrSurfaceToInvert: Wireframe\n37. ) : Wireframe\n38. \u63a5\u8fd1 near(sur : Surface , near : Wireframe) : Surface\n39. \u65cb\u8f6c rotate(totransform: Wireframe, axis: Line , angle : ANGLE) : Wireframe\n40. \u7f29\u653e scaling(totransform : Wireframe, reference : Wireframe , ratio: Real ) : Wireframe\n41. \u5bf9\u79f0 symmetry(totransform : Wireframe, invariant: Wireframe) : Wireframe\n42. \u5e73\u79fb translate(totransform : Wireframe , dir : Direction , distance: LENGTH) : Wireframe\n43. \u4fee\u526a trim(crv1: Curve, orientationCrv1 : Boolean , crv2: Curve , orientationCrv2: Boolean ) : Curve\n44. \u5706\u89d2 corner(crv1 : Curve , crv2: Curve , support : Surface, radius : LENGTH , orientationCrv1: Boolean, orientationCrv2: Boolean , trim : Boolean) : Curve\n45. \u5e73\u884c\u66f2\u7ebf curveparallel(crv: Curve , sur : Surface, offset: LENGTH [,OptionalRoundMode: Boolean ]) : Curve\n46. \u70b9\u62c9\u4f38 extrude(Point , Direction , length1: LENGTH, length2: LENGTH, orientation: Boolean) : Line\n47. \u76f8\u4ea4 intersect(\u5143\u7d201 , \u5143\u7d202)\n48. \u6295\u5f71 project(toproject: Curve , support: Surface [,OptionalDir: Direction ]) : Curve\n49. \u65cb\u8f6c revolve(Point , axis : Line , angle1 : ANGLE, angle2: ANGLE) : Circle\n50. \u56db\u820d\u4e94\u5165 round\n51. \u53d6\u6574 floor/int\n52. \u8fdb\u4e00 ceil\n53. \u8f93\u51fa\u8868\u683c\u5230\u5730\u5740 Createsheet\n54. \u5206\u5272 split(tosplit: Surface , splitting : Curve, orientation : Boolean ) : Surface\n55. \u6837\u6761\u7ebf spline([Point, ..]) : Curve\n56. \u5750\u6807 {\u2018\u70b9.1\u2019.coord(3) } ,{ }\u91cc\u610f\u601d\u662f\u70b91\u7684Z\u5750\u6807\u503c\n57. \u8868\u683c DTSheetType (\u65b0\u5efa\u8868\u683c\u7c7b\u578b)\n58. for i while dt-&gt;CellAsString(i,1)&lt;&gt;\"\" \u5f53dt\u8868\u683c\u7684\u7b2ci\u884c\u7b2c1\u5217\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u6267\u884ci++\n59. list[i]==list.GetItm(i)\n60. \n61. `\u5217\u8868.1`=Part4 -&gt;Query(\"point\",\"x.Name==\\\"pt\\\"\") \u628aPart4\u4e0b\u9762\u53eb\u505apt\u7684point\u52a0\u5165\u5230\u5217\u8868.1\n62. Notify(\"between # and #\", Axis1.Name , Axis2.Name) //\u8fd0\u884c\u540e\u5c4f\u5e55\u53f3\u4e0a\u65b9\u4f1a\u663e\u793a\u901a\u77e5\u2018between Axis1.Name and Axis2.Name\u2019\n63. Notify(\"iteration #, instantiation of #\",i,destinationRef.Name) //\u663e\u793a\u901a\u77e5 iteration i, instantiation of destinationRef.Name\n64. ColumnsNb \u6574\u6570 \u6307\u793a\u8bbe\u8ba1\u8868\u7684\u5217\u6570\u3002\n65. CopyMode \u6574\u6570 \u5982\u679c\u8bbe\u4e3a 1\uff0c\u5219\u6570\u636e\u4f1a\u5b58\u50a8\u5728\u6a21\u578b\u548c\u6587\u4ef6\u4e2d\u3002 \u5982\u679c\u8bbe\u4e3a 0\uff0c\u5219\u6570\u636e\u53ea\u4f1a\u5b58\u50a8\u5728\u6587\u4ef6\u4e2d\u3002\n66. FilePath \u5b57\u7b26\u4e32 -\n67. RowsNb \u6574\u6570 \u6307\u793a\u884c\u6570\u3002 //\u4f8b\u5982\uff1aDTSheetType.RowsNb\n68. SheetCopy \u5b57\u7b26\u4e32 \u5f53 CopyMode \u8bbe\u4e3a 1\uff0c\u5219\u63cf\u8ff0\u6587\u4ef6\u5185\u5bb9\u3002\n69. SheetIndex \u6574\u6570 \u6307\u793a Excel \u4e2d\u7684\u5de5\u4f5c\u8868\u6570\u3002\n70. VerticalColumns \u6574\u6570 \u6307\u793a Excel \u4e2d\u7684\u5217\u662f\u7eb5\u5411\u8fd8\u662f\u6a2a\u5411\u3002\n71. L3=L1.Subtract(L2)               \u5217\u88683\u662f\u5217\u88681\u51cf\u53bb\u5217\u88682\n72. \u5173\u4e8e\u663e\u793a\u6570\u8fdb\u5236     FormatNumber([Real : Real, Format : String, Accuracy : Integer]) : String\n    a. Let R (Real)                                                                                                                                               \u4e8c\u8fdb\u5236   binary\n    b. Let S (String)                                                                                                                                           \u516b\u8fdb\u5236    octal      \n    c. R = 9.589                                                                                                                                               \n    d. S = FormatNumber(R, \u201cscientific\u201d, 2) // now S contains \u201c9.59e+000\u201d \n    e. S = FormatNumber(R, \u201cscientific\u201d) // now S contains \u201c1e+001\u201d \n    f. S = FormatNumber(R, \u201cdecimal\u201d, 5) // now S contains \u201c9.58900\u201d \n    g. S = FormatNumber(R, \u201cinteger\u201d) // now S contains \u201c10\u201d\n73. \u6709\u5e8f\u51e0\u4f55\u56fe\u5f62\u96c6   MMOrderedGeometricalSet\n74. \u67e5\u8be2\u7c7b\u578b    PrimaryType\n75. isoparamcurve (SupportSurface: \u66f2\u9762, PassingPoint: \u70b9, Direction: \u76f4\u7ebf): UV\u66f2\u7ebf\n76. (-1)**i       \u6b63\u8d1f\u4ea4\u66ff\n77. IsASortOf \u5224\u65ad\u5bf9\u8c61\u662f\u5426\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b, \u8fd4\u56de\u5e03\u5c14\u503c\n</code></pre> <p>``</p>"},{"location":"DS-CODE/EKL/Get%20Volume/","title":"Get Volume","text":"<pre><code>let i(Integer)\nlet vol1(VOLUME)\nlet vol(VOLUME)\nlet L1(list)\nlet F1(surface)\n\nL1=`\u5173\u7cfb\\\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217.1\\JJL` i=1\nfor i inside L1\n{\nF1=L1.GetItem(i)\nvol1=F1.GetAttributeObject(\"\u52a0\u52b2\u808b\u4f53\u79ef\")\nvol=vol+vol1\n}\n`\u4f53\u79ef`   =vol\n</code></pre>"},{"location":"DS-CODE/EKL/How%20to%20know%20if%20an%20axis%20system%20is%20published%20in%20EKL/","title":"How to know if an axis system is published in EKL ?","text":"<p>Hello @Annie LELONG \u200b\u200b\u200b\u200b\u200b\u200b\u200b,</p> <p>Unfortunately there is no method allowing to determine whether an element is published or not at the moment. There is one solution though, not ideal of course but at least you are not stuck. Please find a suggestion below:</p> <pre><code>/* \nArgument: f (Feature)\n*/\n\n// Get the 3DShape PLM object owning the selected feature\nlet rep (VPMRepReference)\nset rep = GetPLMOwner( f )\n\n\n// Get the parent 3DPart\nlet ref (VPMReference)\nset ref = rep.AggregatingReference\n\n\n// Get the list of publications (list of strings: publication names)\nlet lPublications (List)\nlPublications = ref.ListPublications()\n\n\nlet p (String)\nlet testF (Feature)\n\nlet bIsPublished (Boolean)\nbIsPublished = false\n\n\n// Loop through the publications\nfor p inside lPublications\n{\n// Access the element that is published with the name &lt;p&gt;\ntestF = ref.Access( p, \"Feature\" )\n\n\n// Test if the element published by the name &lt;p&gt; is the selected one\nif testF == f\n{\nbIsPublished = true\n// if it is, exit the loop: found it!\nbreak\n}\n}\n\nNotify( \"# is published: #\", f.Name, bIsPublished )\n</code></pre>"},{"location":"DS-CODE/EKL/InstantiateTemplate%202/","title":"InstantiateTemplate 2","text":"<pre><code>/*The following script replaces two references contained in the template by newly created ones:\n In this sample you instantiate an Engineering Template under the current editor root\n   and replace some references within the template by newly created references */\n\nlet ref,ref1,ref2(Feature)\nlet templateInstantiatedRoot(Feature)\nref = GetEditorRoots(\"VPMReference\")-&gt;GetItem(1)\nlet tmp(TemplateInstance)\nlet lToReplace(List)\ntmp = InstantiateTemplate(\"Template\",ref)\nlToReplace = tmp.ComponentsToReplace\nref1=lToReplace[1]\nref2=lToReplace[2]\ntmp-&gt;SetReplacingComponent(ref1,new(\"VPMReference\",\"MaRef1\",NULL))\ntmp-&gt;SetReplacingComponent(ref2,new(\"VPMReference\",\"MaRef2\",NULL))\nEndModifyTemplate(tmp)\n</code></pre>"},{"location":"DS-CODE/EKL/KP%20Case/","title":"KP Case","text":""},{"location":"DS-CODE/EKL/KP%20Case/#v5","title":"\u9002\u7528\u4e8eV5 \u7248\u672c\u7684\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217","text":"<pre><code>let i (Integer)\nlet F (Surface)\nlet L (List)\n\ni = 1\nL= SORTED_LIST_PLANES for i while i&lt;= L-&gt;Size()\n{\nF =L-&gt;GetItem(i)\n/*F.SetAttributeString(\"TOWER\",\"1\") \n    F.SetAttributeString(\"FACADE_TYPE\",\"S\")\n    F.SetAttributeString(\"FACE\",\"A\")*/\nF.SetAttributeInteger(\"LEVEL\",01)\n\n/*F.SetAttributeInteger(\"UNIT_NUMBER\",01)\n    F.SetAttributeString(\"SUB_TYPE\",\"G\")*/\nF.SetAttributeString(\"FLOOR_TYPE\",\"R\")\n}\n</code></pre>"},{"location":"DS-CODE/EKL/KP%20V5/","title":"KP V5","text":""},{"location":"DS-CODE/EKL/KP%20V5/#call-kp","title":"call KP","text":"<pre><code>let m(Integer)\nlet n(Integer)\nlet pipe(Pipeudfa)\nn=1\nfor n while n&lt;=`\u5173\u7cfb\\\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217.1\\curList`-&gt;Size() {   m=1\nfor m while m&lt;=21\n{\npipe=CreateOrModifyTemplate(\"Pipeudfa\",ObodyGeo  ,`\u5173\u7cfb\\\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217.2\\PipeList` ,m*3) pipe.CURVE =`\u8d85\u524d\u5c0f\u5bfc\u7ba1\u6a21\u677f\\CURVE` pipe.CUR =`\u5173\u7cfb\\\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217.1\\curList`-&gt;GetItem(n)\npipe.Ratio  =(m-1)*0.05\n\nEndModifyTemplate(pipe)\npipe.Name=\"pipe.\"+ToString(m)\n}\n}\n</code></pre>"},{"location":"DS-CODE/EKL/KP%20V6%20Case%201/","title":"KP V6 Case 1","text":"<pre><code>let i (integer) (1)\nlet p (Point)\nlet p2 (Point)\nlet l( line)\n\nlet R (integer)\nlet G (integer)\nlet B (integer)\n\ni = 1\n\nFor i while i &lt;= NbPoints\n{\nset p = CreateOrModifyDatum(\"Point\", `Geometrical Set.1` ,Points, i) (2)\n\np = point(PartBody\\Point.2\\X + cos(i*XFactor) * 10mm, PartBody\\Point.2\\Y + cos(i*YFactor) * 10mm,\nPartBody\\Point.2\\Z + cos(i*ZFactor) * 10mm) (3)\np.Name = \"Point.\" + ToString(i)\n\nif PointsHidden == True (4)\np.Show = False\nelse\n{\np.Show = True\nR = mod(i , 255)\nG = mod(i * 2, 255)\nB = 255 - mod(i, 255)\n\np.Color = ToString(R) + \",\" + ToString(G) + \",\" + ToString(B)\n\n}\ni = i +1\n}\n\nif GenerateLines == True\n{\ni = 1\n\nFor i while i &lt;= `Relations\\Knowledge Pattern.1\\Points` - 1\n{\nset l = CreateOrModifyDatum(\"Line\", `Geometrical Set.1` , Lines, i)(5)\nl.Name = \"Line.\" + ToString(i)\np = Points.GetItem(i)\np2 = Points.GetItem(i + 1)\n\nl = line(p, p2)\n\nR = mod(i , 255)\nG = mod(i * 2, 255)\nB = 255 - mod(i, 255)\n\nl.Color = ToString(R) + \",\" + ToString(G) + \",\" + ToString(B) (6)\n\ni = i + 1\n}\n} </code></pre>"},{"location":"DS-CODE/EKL/KP%20V6%20Case%202/","title":"KP V6 Case 2","text":""},{"location":"DS-CODE/EKL/KP%20V6%20Case%202/#case","title":"case","text":"<pre><code>let i(Integer)\nlet obj1,obj2(Feature)\nlet temp(Feature)\nlet myList(List)\nlet myGeo(OpenBodyFeature)\ni=1\nset obj1=`StartPoints\\Axis System.2`\nset obj2=`Road\\Alignment Set.1\\Alignment.1\\3D Alignment.1`\n\nmyGeo = new(\"OpenBodyFeature\",\"UDF3\",`LOD100-3D Shape00039597 A.1`\uff09\n\nfor i while i&lt;=5\n{\n    temp=InstantiateTemplate(\"Resource1\",myGeo )\n    temp-&gt;SetAttributeObject(\"Axis System\",obj1)\n    temp-&gt;SetAttributeObject(\"3D Alignment\",obj2)\n    EndModifyTemplate(temp)\n    i=i+1\n    set obj1 = temp-&gt;GetAttributeObject(\"RefAxisSystem\")\n}\n</code></pre>"},{"location":"DS-CODE/EKL/KP-V6/","title":"KP","text":"<pre><code>let i(Integer)\nlet obj1,obj2(Feature)\nlet temp(Feature)\nlet myList(List)\nlet myGeo(OpenBodyFeature)\ni=1\nset obj1=`Geometrical Set.2\\Axis System.2`\nset obj2=`Road\\Alignment Set.1\\Alignment.1\\3D Alignment.1`\n\nmyGeo = new(\"OpenBodyFeature\",\"\",`3D Shape00039597 A.1`\uff09\n\nfor i while i&lt;=10\n{\ntemp=InstantiateTemplate(\"Resource1\",myGeo )\ntemp-&gt;SetAttributeObject(\"Axis System\",obj1)\ntemp-&gt;SetAttributeObject(\"3D Alignment\",obj2)\nEndModifyTemplate(temp)\ni=i+1\nset obj1 = temp-&gt;GetAttributeObject(\"Side2_Axis_System\")\n}\n</code></pre>"},{"location":"DS-CODE/EKL/KP_%E5%85%A8%E5%B1%80ARM/","title":"arm \u8d44\u6e90\u5168\u5c40\u8bbe\u7f6e","text":"<pre><code>F=CreateOrModifyTemplate(\"KnowledgeResources|BEAM_L\" ,body,BRIDGE_DESIGN\\RELATIONS\\KP_MODEL\\KP_BEAM_UDF\\UDF_LIST  ,i)\n</code></pre>"},{"location":"DS-CODE/EKL/ReadExcel/","title":"Read Excel","text":"<pre><code>let doc (Document)\nlet query (PLMQuery)\nlet results (List)\nlet result (PLMQueryResult)\nquery = CreatePLMQuery(\"Document\")\nquery-&gt;AddCriterion(\"Title\",\"TestCSV\")\nresults = query-&gt;RunQuery()\nMessage(\"Documents touv\u00e9s : #\",results.Size())\nset result = results.GetItem(1)\nset doc = result.LoadResult(TRUE)\n//Message(\"Doc : #\", doc.Title  )\nlet mysheet (DTSheetType)\n//Then try to cast\nset mysheet=doc\nMessage(\"cell 1,1 : #\", mysheet.CellAsString(1,1))\n</code></pre> <pre><code>Let strFileName(String) Let oXLSheet(DTSheetType)\nLet indx(Integer)\nLet noOfRows(Integer)\nLet strColorName(String)\nLet rValue(Real)\nLet gValue(Real)\nLet bValue(Real)\nLet strRowValue(String)\nlet s(String)\nstrFileName = \"E:/Temp/Test/Input.xlsx\"\nSet oXLSheet = CreateSheet(strFileName)\nnoOfRows = oXLSheet.RowsNb\nindx = 1\nFor indx while indx &lt; noOfRow\n{\ns = oXLSheet.CellAsString(indx, 1)\nlst.Append(s)\n}\n</code></pre> <pre><code>let s(DTSheetType)\ns = CreateSheet(\"KnowledgeResources|resource1\")\nif (s &lt;&gt; NULL)\n{\nP.FirstLength = s.CellAsReal(Row, Column) * 1mm\n}\n</code></pre>"},{"location":"DS-CODE/EKL/tunnel/","title":"Tunnel","text":"<pre><code>/*\u89c4\u5219 \u521b\u5efa\u8005 86156 2019/12/3*/\nlet i,j,k(integer)\nlet pt,pt1,pt2(point)\nlet list1,list2(list)\nlet L,a,b,c(length)\n\ni=2\nlist1=`\u5de6\u7ebf\\\u8f74\u7cfb\\Myaxis\\List.821` pt1=list1[1]\nset a=distance(pt1,`\u5de6\u7ebf\\\u8f74\u7cfb\\Myaxis\\Project.2464` )\nc=a\nfor i while i&lt;=list1.Size ()\n{\npt2=list1[i]\nset b=distance(pt2,`\u5de6\u7ebf\\\u8f74\u7cfb\\Myaxis\\Project.2464` )\nif c&gt;=b\n{\na=b\npt=pt2\n}\nelse\n{\na=c\npt=pt1\n}\nc=a\npt1=pt\n}\ni=1\nfor i while i&lt;=list1.Size ()\n{\nif pt==list1[i]\n{\nbreak\n}\n}\n\nif i==2\n{\n`\u5de6\u7ebf\\\u8f74\u7cfb\\Myaxis\\\u65cb\u8f6c\u89d2` =25.7143deg\n}\nelse if i==3\n{\n`\u5de6\u7ebf\\\u8f74\u7cfb\\Myaxis\\\u65cb\u8f6c\u89d2` =102.8572deg\n}\nelse if i==4\n{\n`\u5de6\u7ebf\\\u8f74\u7cfb\\Myaxis\\\u65cb\u8f6c\u89d2` =180deg\n}\nelse if i==5\n{\n`\u5de6\u7ebf\\\u8f74\u7cfb\\Myaxis\\\u65cb\u8f6c\u89d2` =257.143deg\n}\nelse\n{\n`\u5de6\u7ebf\\\u8f74\u7cfb\\Myaxis\\\u65cb\u8f6c\u89d2` =334.2859deg\n}\n\n`\u5de6\u7ebf\\\u8f74\u7cfb\\Myaxis\\MyPoint` =pt\n//`\u65cb\u8f6c\u89d2` =(360deg/14)*(i-1)\n</code></pre>"},{"location":"DS-CODE/EKL/udf%E4%BB%A5%E4%B8%8A%E4%B8%80%E4%B8%AA%E7%94%9F%E6%88%90%E7%BB%93%E6%9E%9C%E4%B8%BA%E5%8F%82%E8%80%83%E9%98%B5%E5%88%97/","title":"udf\u4ee5\u4e0a\u4e00\u4e2a\u751f\u6210\u7ed3\u679c\u4e3a\u53c2\u8003\u9635\u5217","text":"<pre><code>let f1(Feature)\nlet vp(point)\nlet i(Integer)\n\nset vp=`\u51e0\u4f55\u56fe\u5f62\u96c6.1\\\u70b9.4` i=1\nfor i while i&lt;=50\n{\nf1=CreateOrModifyTemplate(\"R\",`\u51e0\u4f55\u56fe\u5f62\u96c6.1`  ,`\u5173\u7cfb\\\u77e5\u8bc6\u5de5\u7a0b\u9635\u5217.1\\\u5217\u8868.1` ,i)\nf1.SetAttributeObject(\"p1\",vp)  EndModifyTemplate(f1)\nf1.Name=\"L_\"+i\nvp=f1.GetAttributeObject(\"p2\")\nVp.show=false\n}\n</code></pre>"},{"location":"DS-CODE/EKL/%E6%A0%B9%E6%8D%AE%E5%90%8D%E7%A7%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%88%B0%E8%A3%85%E9%85%8D%E4%B8%AD/","title":"\u6839\u636e\u540d\u79f0\u6570\u636e\u5e93\u4e2d\u67e5\u627e\u5b9e\u4f8b\u5316\u5230\u88c5\u914d\u4e2d","text":"<pre><code>let root (VPMReference)\nlet query (PLMQuery)\nlet queryResults (List)\nlet queryResult (PLMQueryResult)\nlet resultReference (VPMReference)\nlet newInstance (VPMInstance)\nlet newInstanceName (String)\n//Get root of current editor\nroot = GetEditorRoots(\"VPMReference\").GetItem(1)\n//Build the PLM Query\nquery = CreatePLMQuery(\"VPMReference\")\nquery.AddCriterion(\"V_Name\", \"Plate_A\")\nqueryResults = query.RunQuery()\n//Check if the query returned results\nif (queryResults.Size() &gt; 0)\n{\n//Return the first item in the list of query results\nqueryResult = queryResults[1]\n//LoadResult() method returns Feature type, set resultReference to cast Feature to VPMReference type\nset resultReference = queryResult.LoadResult(true)\n//Create new instance of returned reference in tree\nnewInstance = new(\"VPMInstance\", \"Instance_1\", root, resultReference)\n}\n</code></pre> <pre><code>//\u6570\u636e\u5e93\u4e2d\u67e5\u627e\u5e76\u6309\u8f74\u7cfb\u88c5\u914d\n\nlet root (VPMReference)\nlet query (PLMQuery)\nlet queryResults (List)\nlet queryResult (PLMQueryResult)\nlet resultReference (VPMReference)\nlet newInstance (VPMInstance)\nlet newInstanceName (String)\n//Get root of current editor\nroot = GetEditorRoots(\"VPMReference\").GetItem(1)\n//Build the PLM Query\nquery = CreatePLMQuery(\"VPMReference\")\n//Add query criteria, any attributes can be used to ensure correct part is retrieved\nquery.AddCriterion(\"V_Name\", \"Demo_ManageInstance_Bkt_C\")\nquery.AddCriterion(\"V_isLastVersion\", \"TRUE\")\nqueryResults = query.RunQuery()\n//Check if the query returned results\nif (queryResults.Size() &gt; 0)\n{\n//Return the first item in the list of query results\nqueryResult = queryResults[1]\n//LoadResult() method returns Feature type, set resultReference to cast Feature to VPMReference type\nset resultReference = queryResult.LoadResult(true)\n}\n//Create and constrain instances to target axes\nlet targetAxesGeoset (OpenBodyFeature)\nlet targetAxis, refAxis (AxisSystem)\nlet targetAxes (List)\nlet targetAxisPath, refAxisPath (String)\nlet coincidenceConstraint (MRXCoincidence)\nlet i (Integer)\ntargetAxesGeoset = root.Find(\"OpenBodyFeature\", \"x.Name == \\\"PositionAxes\\\"\", true)\ntargetAxes = targetAxesGeoset.Query(\"AxisSystem\", \"\")\ni = 1\nfor targetAxis inside targetAxes\n{\nnewInstance = new(\"VPMInstance\", \"Instance_\" + ToString(i), root, resultReference)  refAxis = newInstance.Access(\"EngAxis\", \"AxisSystem\")\nrefAxisPath = root.CreatePathString(newInstance, refAxis)\ntargetAxisPath = root.CreatePathString(NULL, targetAxis)\ncoincidenceConstraint = root.CreateConstraint(\"Coincidence_\" + ToString(i), \"Coincidence\", refAxisPath, targetAxisPath)\ni = i +1\n}\n</code></pre>"},{"location":"DS-CODE/EKL/%E6%A0%B9%E6%8D%AE%E8%A1%A8%E6%A0%BC%E4%BF%AE%E6%94%B9%E5%AE%9E%E4%BE%8B%E5%90%8D%E7%A7%B0/","title":"\u6839\u636e\u8868\u683c\u4fee\u6539\u5b9e\u4f8b\u540d\u79f0","text":"<pre><code>let PartList(List)\nlet i(Integer)\nlet Fea(Feature)\nlet NameSheet(DTSheetType)\nlet SheetPath(String)\n\nSheetPath=\"E:\\YZBName.xlsx\"\nNameSheet=CreateSheet(SheetPath)\n\nPartList=MyProduct.Query(\"VPMInstance\",\"x.Reference.V_Name like \\\"\u9884\u5236\u677f*\\\"\")\n//Message(\"Number=#\",PartList.Size())\ni=1\nfor i while i&lt;=PartList.Size()\n{\nset Fea=PartList.GetItem(i)\nFea.Name=NameSheet-&gt;CellAsString(i+1,1) }\n</code></pre>"},{"location":"DS-CODE/EKL/%E8%8E%B7%E5%BE%97%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB%E7%82%B9/","title":"\u83b7\u5f97\u6700\u77ed\u8ddd\u79bb\u70b9","text":"<pre><code>let i,j(Integer)\nlet L1,L2(list)\nlet a,b(LENGTH)\nL1=`udf_def\\Geometrical Set.11\\Geometrical Set.15\\List.2`\ni=1\nfor i while i&lt;=L1.Size()\n{\na=distance(L1[i],`udf_def\\Geometrical Set.11\\Multi Output.2 (Intersect)\\Intersect.6` )\nL2.Append(a)\n\n}\nL2.Compute(\"min\",\"\",\"\",b)\nNotify(\"\",b)\nj=L2.IndexOf(b,1)\nNotify(\"\",j)\n`udf_def\\Geometrical Set.11\\Geometrical Set.15\\min-pt` =L1[j]\n</code></pre>"},{"location":"DS-CODE/EKL/%E8%A1%A8%E6%A0%BC%E7%94%9F%E6%88%90%E8%BD%B4%E7%B3%BB/","title":"\u8868\u683c\u751f\u6210\u8f74\u7cfb","text":"<pre><code>/* \u4ece\u8868\u683c\u751f\u6210\u8f74\u7cfb*/\n\nlet i(integer)\nlet j(integer)\nlet pt1(point)\nlet pt2(point)\nlet l1(line)\nlet l2(line)\nlet l3(line)\nlet pl(plane)\nlet A(axissystem)\n\ni=2\n\n`\u5173\u7cfb\\test.1\\\u91cc\u7a0b\u70b9` -&gt;AddItem(`\u9053\u8def\u4e2d\u5fc3\u7ebf\\\u7a7a\u95f4\u7ebf\u8d77\u70b9\uff08\u91cc\u7a0b\u70b9\uff09` ,1)\n\nfor i while i&lt;=18\n{\nset pt1=pointoncurve(`\u9053\u8def\u4e2d\u5fc3\u7ebf\\test-\u5e73\u9762\u4e2d\u5fc3\u7ebf` ,`\u5173\u7cfb\\test.1\\\u91cc\u7a0b\u70b9` -&gt;GetItem(i-1),(`\u5173\u7cfb\\test\\\u56fe\u7eb8`-&gt;CellAsReal(i,3))*1m,false)\npt2=CreateOrModifyDatum(\"point\",`\u9053\u8def\u4e2d\u5fc3\u7ebf\\\u91cc\u7a0b\u70b9` ,`\u5173\u7cfb\\test.1\\\u91cc\u7a0b\u70b9` ,i) pt2=project(pt1,`\u9053\u8def\u4e2d\u5fc3\u7ebf\\test-\u7a7a\u95f4\u4e2d\u5fc3\u7ebf` ,direction(`xy \u5e73\u9762` ))\npt2.Name=(`\u5173\u7cfb\\test\\\u56fe\u7eb8`-&gt;CellAsString(i,4) )\ni=i+1   }\n\nj=1\n\nfor j while j&lt;=`\u5173\u7cfb\\test.1\\\u91cc\u7a0b\u70b9\\\u5c3a\u5bf8` {\nset l1=linetangent(`\u9053\u8def\u4e2d\u5fc3\u7ebf\\test-\u7a7a\u95f4\u4e2d\u5fc3\u7ebf` ,`\u5173\u7cfb\\test.1\\\u91cc\u7a0b\u70b9` .GetItem(j),0mm,50mm,true)\nset l2=project(l1,`xy \u5e73\u9762` ,direction(`xy \u5e73\u9762` ))\nset pl=planenormal(`\u9053\u8def\u4e2d\u5fc3\u7ebf\\test-\u7a7a\u95f4\u4e2d\u5fc3\u7ebf` ,pt2)\nset l3=invert(intersect(pl,`xy \u5e73\u9762` ))\nA=CreateOrModifyDatum(\"axissystem\",`\u9053\u8def\u4e2d\u5fc3\u7ebf\\\u91cc\u7a0b\u8f74\u7cfb` ,`\u5173\u7cfb\\test.1\\\u8f74\u7cfb` ,j) A=axisSystem(`\u5173\u7cfb\\test.1\\\u91cc\u7a0b\u70b9` .GetItem(j),direction(l2),direction(l3),direction(`xy \u5e73\u9762` ))\nA.Name=(`\u5173\u7cfb\\test\\\u56fe\u7eb8`-&gt;CellAsString(j,4) )\nj=j+1\n}\n</code></pre>"},{"location":"DS-CODE/EKL/%E9%80%92%E5%BD%92/","title":"\u9012\u5f52","text":"<pre><code>U=POWERCOPY\\PANEL_TYPE\\CONSTRUCTIONS\\ref_inputs\\ref_surf\n\np =1\n\nfor p while p&lt;=l.Size()\n{\nos = split(U,l.GetItem(p),false)\nU = os\n}\nre = U\nre.Name=\"RESULT\"\n\n\n'U \u7b49\u4e8e\u4fee\u5efa\u9762\uff0c\n'os = \u4fee\u5efa\u540e\u7ed3\u679c\uff0c\n'U=os\n</code></pre>"},{"location":"DS-CODE/EKL/Creat%20Tree/Creat%20Tree/","title":"Creat Tree","text":""},{"location":"DS-CODE/EKL/Creat%20Tree/Creat%20Tree/#catia","title":"\u521b\u5efaCATIA \u7ed3\u6784\u6811","text":"<pre><code>/* Action created by MElkhaldi 08/12/2016 */\n\n\nlet sheet (DTSheetType)\nsheet = `Knowledge Engineering Specification Physical00014183 A.1\\Relations\\DesignTable.1\\Sheet` let separator,cellStr,siteName, buildingName, storeyName, elemAssemblyName, collaborativeSpace,client, projectName, projectNumberSTR(String)\nlet projectNumber(Integer)\n\nlet aSite(AecSite)\nlet aBuilding(VPMInstance)\nlet lastStorey(VPMInstance)\nlet elemAssembly(VPMInstance)\naSite = GetEditorRoots(\"AecSite\").GetItem(1) let next(Boolean)\nnext = true\nlet row = 1\n\nseparator = \"-\"\ncollaborativeSpace= aSite.GetAttributeString(\"V_project\") projectNumberSTR =  SplitString(collaborativeSpace, separator).GetItem(1)\nprojectNumber =projectNumberSTR.ToReal()\nclient = SplitString(collaborativeSpace, separator).GetItem(2)\nprojectName = SplitString(collaborativeSpace, separator).GetItem(3)\nsiteName = collaborativeSpace\naSite.SetAttributeString(\"Name\", siteName)\naSite.SetAttributeString(\"ProjectName\", projectName)\naSite.SetAttributeString(\"ClientShort\", client )\naSite.SetAttributeReal(\"ProjectNum\", projectNumber)\n\nfor row while next{\ncellStr = sheet.CellAsString(row, 1)\nif( cellStr==\"BUILDING\"){\nbuildingName =  projectNumberSTR+separator+sheet.CellAsString(row,2)\naBuilding = new (\"Building\",buildingName, aSite)\naBuilding.Reference.SetAttributeString(\"Name\", buildingName)\n}\nelse if( cellStr==\"STOREY\"){\nstoreyName =    buildingName+separator+sheet.CellAsString(row,3)\nlastStorey = new (\"BuildingStorey\", storeyName, aBuilding.Reference)\nlastStorey.Reference.SetAttributeString(\"Name\", storeyName)\n}\nelse if (cellStr == \"ELEMENT ASSEMBLY\"){\nelemAssemblyName=  storeyName+separator+sheet.CellAsString(row,4)\nelemAssembly = new (\"AecElementAssembly\", elemAssemblyName, lastStorey.Reference)\nelemAssembly.Reference.SetAttributeString(\"Name\", elemAssemblyName)\n}\nelse if (cellStr == \"END\"){\nnext = false    }\nelse{\nnext = false    }\n\n\nrow=row+1\n\n}\n</code></pre> <pre><code>let separator,cellStr,siteName, buildingName(String)\nlet projectNumber(Integer)\nprojectNumber=111\nlet aSite(AecSite)\nlet aBuilding(VPMInstance)\nlet lastStorey(VPMInstance)\nlet elemAssembly(VPMInstance)\naSite = GetEditorRoots(\"AecSite\").GetItem(1) aSite.SetAttributeString(\"Name\", \"NAME\")\naSite.SetAttributeString(\"ProjectName\", \"NAME\")\naSite.SetAttributeString(\"ClientShort\", \"NAME\" )\naSite.SetAttributeReal(\"ProjectNum\", projectNumber)\nseparator = \"-\"\naSite.SetAttributeReal(\"ProjectNum\", projectNumber)\n\nbuildingName = \"BUILDING_1\"\naBuilding = new (\"Building\",buildingName, aSite)\naBuilding.Reference.SetAttributeString(\"Name\", buildingName)\n\nlet prt(VPMInstance)\nprt = new(\"3DPart\",\"partName1\",aBuilding.Reference)\n//prt.Reference.SetAttributeString(\"Name\", buildingName)\nprt = new(\"3DPart\",\"partName2\",aBuilding.Reference)\n\n\nbuildingName = \"BUILDING_2\"\naBuilding = new (\"Building\",buildingName, aSite)\naBuilding.Reference.SetAttributeString(\"Name\", buildingName)\n</code></pre>"},{"location":"DS-CODE/EKL/%E5%AF%BB%E6%89%BE%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%E9%9B%86%E4%B8%8B%E7%9A%84%E7%89%B9%E5%BE%81/Find%20features%20under%20a%20geometry%20set/","title":"Find features under a geometry set","text":"<p>OpenBody.Query (\"Point\",\"x.Name -&gt; Extract (0,2) == \\\"\u4ea4\u70b9\\\"\")</p> <p></p>"},{"location":"DS-CODE/Functions/BIM_Save/","title":"BIM save","text":"V2 UI <pre><code>Private Sub CheckBox1_Click()   'new files only\n\n    FDM_1.Save_New_Files_Only = CheckBox1.Value\n\nEnd Sub\n\nPrivate Sub CheckBox2_Click()\n\n    FDM_1.Use_Directory_Path_of_Root_Product = CheckBox2.Value   'use root...\n\nEnd Sub\n\nPrivate Sub cmdSave_Click()\n\n\n    Dim NoneChecked As Boolean\n'    Dim fso\n'    Set fso = CreateObject(\"Scripting.FileSystemObject\")\n    NoneChecked = True\n\n    If Right(TextBox1.Text, 1) = \"\\\" Then\n        TextBox1.Text = Left(TextBox1.Text, Len(TextBox1.Text) - 1)\n    End If\n\n    FDM_1.Target_Directory = TextBox1.Text     'save files..\n    FDM.Repaint\n\n    If FDM_1.Target_Directory = \"\" Then\n        FDM.lblStatusBar.Caption = \"Specify Target Directory\"\n        FDM.lblStatusBar.ForeColor = RGB(255, 0, 0)\n        FDM.Repaint\n    Else\n        FDM_1.Dir_For_Save = Target_Directory\n        If FDM.chkIGSExport.Value = -1 Then\n            FDM_1.Dir_For_Save = Target_Directory &amp; \"\\IGS\"\n            FDM_1.Save_Files\n            NoneChecked = False\n        Else\n            NoneChecked = True\n        End If\n\n        If FDM.chkDWGExport.Value = -1 Then\n\n            FDM_1.Dir_For_Save = Target_Directory &amp; \"\\DWG\"\n            FDM_1.Save_Files\n            NoneChecked = False\n        Else\n            NoneChecked = True\n        End If\n\n        If FDM.chk3DXMLExport.Value = -1 Then\n\n            FDM_1.Dir_For_Save = Target_Directory &amp; \"\\3DXML\"\n            FDM_1.Save_Files\n            NoneChecked = False\n        Else\n            NoneChecked = True\n        End If\n\n        If FDM.chkDPExport.Value = -1 Then\n            MsgBox \"WARNING:\" &amp; (Chr(13)) &amp; _\n            \"This will save and update the\" &amp; (Chr(13)) &amp; _\n            \"Links in the original Product!\", vbCritical\n\n\n            FDM_1.Dir_For_Save = Target_Directory &amp; \"\\DP\"\n            FDM_1.Save_Files\n            NoneChecked = False\n        Else\n            NoneChecked = True\n        End If\n\n        End If\n\n    If FDM_1.Dir_For_Save = \"\" Then\n        'FDM.lblStatusBar.Caption = \"Specify Target Directory\"\n        FDM.lblStatusBar.ForeColor = RGB(0, 0, 255)\n    Else\n        If NoneChecked = True Then\n            FDM_1.Save_Files\n        End If\n    End If\n\n    MsgBox \"Completed\"\n\nEnd Sub\n\nPrivate Sub cmdExit_Click()\n\n    End   'exit\n\nEnd Sub\n\nPrivate Sub TextBox1_AfterUpdate()\n    TextBox1.ForeColor = RGB(0, 0, 0)\nEnd Sub\n\n\n\nPrivate Sub TextBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)\n    TextBox1.Value = \"\"\nEnd Sub\n\nPrivate Sub UserForm_Click()\n\nEnd Sub\n</code></pre> <p>===\"code\"</p> <pre><code>'Victor Keto - Gehry Technologies 7/20/08\n'Vish Urala - Arup Americas 2009-10-09\n'********************************************************\n'*************************************************\n\n'Note: the first instance found for each product is saved, All other instances are ignored (to avoid redundant saves)\n'If the 'in context' instance appears first in the tree, it will be saved to a matching folder path, instead of to the path of an 'out of context' instance\n\n\nPublic Save_New_Files_Only As Boolean\nPublic Use_Directory_Path_of_Root_Product As Boolean\nPublic Target_Directory As String  'if not using the directory of the root..\n                                                                       'folder will be created during the save if it does not exist...\nPublic Dir_For_Save As String\n\n\nPublic PartDocuments_Found() As PartDocument\nPublic PartDocuments_Found_Save_Path() As String\nPublic PartDocuments_Found_Partnumbers() As String\n\nPublic ProductDocuments_Found() As ProductDocument\nPublic ProductDocuments_Found_Save_Path() As String\nPublic ProductDocuments_Found_Partnumbers() As String\n\n\n\n'***********************************************************************************\n'***********************************************************************************\n\nSub CATMain()\n\n    Target_Directory = \"\"  'if not using the directory of the root..\n    FDM.Show\n\nEnd Sub\n\n\nSub Save_Files()\n\n    ReDim PartDocuments_Found(0)\n    ReDim PartDocuments_Found_Save_Path(0)\n    ReDim PartDocuments_Found_Partnumbers(0)\n\n    ReDim ProductDocuments_Found(0)\n    ReDim ProductDocuments_Found_Save_Path(0)\n    ReDim ProductDocuments_Found_Partnumbers(0)\n\n    On Error GoTo ErrorHandler\n    CATIA.DisplayFileAlerts = False\n    If CATIA.ActiveDocument.Name = \"\" Then\n    Else\n        Call query_objects_for_save(CATIA.ActiveDocument.Product, Dir_For_Save)\n        Call Save_in_Reverse_Order\n    End If\n    On Error GoTo 0\nExit Sub        ' Exit to avoid handler.\nErrorHandler:    ' Error-handling routine.\n    Select Case Err.Number    ' Evaluate error number.\n        Case -2147467259    ' \"File already open\" error.\n            FDM.lblStatusBar.Caption = \"OPEN a DP Product \"\n            FDM.lblStatusBar.ForeColor = RGB(255, 0, 0)\n    End Select\n    Resume    ' Resume execution at same line that caused the error.\nEnd Sub\n\n\n'***********************************************************************************\n'***********************************************************************************\n\n\n'recursively query files top-down, and then save in reverse order to avoid autosaves to parent product folders...\nSub query_objects_for_save(current_product As Product, current_directory_for_saving As String)\n\n    'the root product should be saved,  therefore no save occurs at recursive step 1\n    Dim fso\n    Set fso = CreateObject(\"Scripting.FileSystemObject\")\n    Dim current_ref_doc As Document\n    Dim a As Integer\n    Dim products_within As Products\n\n\n\n    If TypeName(current_product.ReferenceProduct.Parent) = \"PartDocument\" Then   'a .CATPart\n        On Error GoTo Omit_from_Save\n        Set current_ref_doc = current_product.ReferenceProduct.Parent\n\n            'create folder for part (if does not exist) with parent product name and save part within....\n            If Save_New_Files_Only = True And current_ref_doc.Path &lt;&gt; \"\" Then GoTo Omit_from_Save\n\n                'check if part number exists in set before saving....\n                If UBound(PartDocuments_Found_Partnumbers) &gt; 0 Then\n\n                    For check_pnum = 1 To UBound(PartDocuments_Found_Partnumbers)\n\n                        'avoid duplicates\n                        If current_product.PartNumber = PartDocuments_Found_Partnumbers(check_pnum) Then GoTo Omit_from_Save\n\n                    Next check_pnum\n\n                End If\n\n                On Error Resume Next    'if folder exists.....\n                fso.CreateFolder current_directory_for_saving\n\n                ReDim Preserve PartDocuments_Found(UBound(PartDocuments_Found) + 1)\n                ReDim Preserve PartDocuments_Found_Save_Path(UBound(PartDocuments_Found_Save_Path) + 1)\n                ReDim Preserve PartDocuments_Found_Partnumbers(UBound(PartDocuments_Found_Partnumbers) + 1)\n\n                Set PartDocuments_Found(UBound(PartDocuments_Found)) = current_ref_doc\n                PartDocuments_Found_Save_Path(UBound(PartDocuments_Found_Save_Path)) = current_directory_for_saving &amp; \"\\\" &amp; current_product.PartNumber\n                PartDocuments_Found_Partnumbers(UBound(PartDocuments_Found_Partnumbers)) = current_product.PartNumber\n    'add additional file types here\n    'ElseIf TypeName(current_product.ReferenceProduct.Parent) = \"Shape\" Then....\n\n\nOmit_from_Save:\n    ElseIf TypeName(current_product.ReferenceProduct.Parent) = \"ProductDocument\" Then\n\n        Set current_ref_doc = current_product.ReferenceProduct.Parent   'is a .CATProduct\n        'save file within the folder of parent product....\n        If Save_New_Files_Only = True And current_ref_doc.Path &lt;&gt; \"\" Then GoTo Omit_from_Save_2\n\n            'check if part number exists in set before saving....\n            If UBound(ProductDocuments_Found_Partnumbers) &gt; 0 Then\n\n                For check_pnum_pct = 1 To UBound(ProductDocuments_Found_Partnumbers)\n\n                    'avoid duplicates\n                    If current_product.PartNumber = ProductDocuments_Found_Partnumbers(check_pnum_pct) Then GoTo Omit_from_Save_2\n\n                Next check_pnum_pct\n\n            End If\n\n            On Error Resume Next    'if folder exists.....\n            fso.CreateFolder current_directory_for_saving\n\n            ReDim Preserve ProductDocuments_Found(UBound(ProductDocuments_Found) + 1)\n            ReDim Preserve ProductDocuments_Found_Save_Path(UBound(ProductDocuments_Found_Save_Path) + 1)\n            ReDim Preserve ProductDocuments_Found_Partnumbers(UBound(ProductDocuments_Found_Partnumbers) + 1)\n\n            Set ProductDocuments_Found(UBound(ProductDocuments_Found)) = current_ref_doc\n            ProductDocuments_Found_Save_Path(UBound(ProductDocuments_Found_Save_Path)) = current_directory_for_saving &amp; \"\\\" &amp; current_product.PartNumber\n            ProductDocuments_Found_Partnumbers(UBound(ProductDocuments_Found_Partnumbers)) = current_product.PartNumber\n\nOmit_from_Save_2:\n\n        Set products_within = current_product.Products\n        For a = 1 To products_within.Count\n            Call query_objects_for_save(products_within.Item(a), current_directory_for_saving &amp; \"\\\" &amp; current_product.PartNumber)\n        Next a\n    End If\n\nEnd Sub\n\n\n\n'***********************************************************************************\n'***********************************************************************************\n\nSub Save_in_Reverse_Order()    'folders already created....\n\n    Dim NoneChecked As Boolean\n    Dim AutomationObj\n    Dim objDWGex As DwgExport\n    Dim OutputDirPath As String\n    Dim FileName As String\n    Dim mPart As Part\n    'save parts and then products in reverse order\n\n    NoneChecked = False\n    If FDM.chkIGSExport.Enabled = True Then\n    If FDM.chkIGSExport.Value = -1 Then\n        NoneChecked = False\n        FDM.lblStatusBar.Caption = \"Saving... IGS files to \" &amp; FDM_1.Dir_For_Save\n        For h = UBound(PartDocuments_Found) To 1 Step -1\n            Call PartDocuments_Found(h).ExportData(PartDocuments_Found_Save_Path(h), \"igs\")\n        Next h\n        NoneChecked = False\n        FDM.chkIGSExport.Enabled = False\n        FDM.lblStatusBar.Caption = \"Saved IGS files to \" &amp; FDM_1.Dir_For_Save\n        Exit Sub\n    Else\n        NoneChecked = True\n    End If\n    NoneChecked = False\n    End If\n\n    If FDM.chkDWGExport.Enabled = True Then\n    If FDM.chkDWGExport.Value = -1 Then\n        NoneChecked = False\n        FDM.lblStatusBar.Caption = \"Saving... DWG files to \" &amp; FDM_1.Dir_For_Save\n        For h = UBound(PartDocuments_Found) To 1 Step -1\n            Set mPart = PartDocuments_Found(h).Part\n            Set AutomationObj = mPart.GetItem(\"GTCEDwgVBExt\")\n            Set objDWGex = AutomationObj\n            objDWGex.MultipleBlocks = False\n\n            OutputDirPath = Left(PartDocuments_Found_Save_Path(h), InStrRev(PartDocuments_Found_Save_Path(h), \"\\\") - 1)\n            FileName = Right(PartDocuments_Found_Save_Path(h), _\n                        Len(PartDocuments_Found_Save_Path(h)) - InStrRev(PartDocuments_Found_Save_Path(h), \"\\\")) &amp; \".dwg\"\n            objDWGex.ExportCurrentDoc OutputDirPath, FileName\n        Next h\n\n        FDM.chkDWGExport.Enabled = False\n        FDM.lblStatusBar.Caption = \"Saved DWG files to \" &amp; FDM_1.Dir_For_Save\n        Exit Sub\n    Else\n        NoneChecked = True\n    End If\n    NoneChecked = False\n    End If\n\n    If FDM.chk3DXMLExport.Enabled = True Then\n    If FDM.chk3DXMLExport.Value = -1 Then\n        NoneChecked = False\n        FDM.lblStatusBar.Caption = \"Saving... 3DXML files to \" &amp; FDM_1.Dir_For_Save\n        For h = UBound(PartDocuments_Found) To 1 Step -1\n            Call PartDocuments_Found(h).ExportData(PartDocuments_Found_Save_Path(h), \"3dxml\")\n        Next h\n\n        FDM.chk3DXMLExport.Enabled = False\n        FDM.lblStatusBar.Caption = \"Saved 3DXML files to \" &amp; FDM_1.Dir_For_Save\n        Exit Sub\n    Else\n        NoneChecked = True\n    End If\n    NoneChecked = False\n    End If\n\n    If FDM.chkDPExport.Enabled = True Then\n    If FDM.chkDPExport.Value = -1 Then\n        NoneChecked = False\n        FDM.lblStatusBar.Caption = \"Saving... DP Model to \" &amp; FDM_1.Dir_For_Save\n        For h = UBound(PartDocuments_Found) To 1 Step -1\n            'partdocuments_found(h).SaveAs\n            Call PartDocuments_Found(h).SaveAs(PartDocuments_Found_Save_Path(h) &amp; \".CATPart\")\n        Next h\n        For n = UBound(ProductDocuments_Found) To 1 Step -1\n            Call ProductDocuments_Found(n).SaveAs(ProductDocuments_Found_Save_Path(n) &amp; \".CATProduct\")\n        Next n\n        FDM.chkDPExport.Enabled = False\n        FDM.lblStatusBar.Caption = \"Saved DP Model to \" &amp; FDM_1.Dir_For_Save\n    Else\n        NoneChecked = True\n    End If\n    NoneChecked = False\n    End If\n\n    If NoneChecked = True Then\n        FDM.lblStatusBar.Caption = \"Select at least one format - IGS/DWG/3DXML/DP\"\n        FDM.lblStatusBar.ForeColor = RGB(255, 0, 0)\n    End If\nEnd Sub\n</code></pre> V1 <pre><code>Private Sub CheckBox1_Click()   'new files only\n\n    FDM_1.Save_New_Files_Only = CheckBox1.Value\n\nEnd Sub\n\nPrivate Sub CheckBox2_Click()\n\n    FDM_1.Use_Directory_Path_of_Root_Product = CheckBox2.Value   'use root...\n\nEnd Sub\n\nPrivate Sub CommandButton1_Click()\n\n    FDM_1.Target_Directory = TextBox1.Text     'save files..\n\n\n    If Use_Directory_Path_of_Root_Product = True Then\n        FDM_1.Dir_For_Save = CATIA.ActiveDocument.Path\n    Else\n        FDM_1.Dir_For_Save = Target_Directory\n    End If\n\n\n    If FDM_1.Dir_For_Save = \"\" Then\n        MsgBox \"Directory Not Specified\"\n    Else\n        'save work\n        FDM_1.Save_Files\n    End If\n\n\nEnd Sub\n\nPrivate Sub CommandButton2_Click()\n\n    End   'exit\n\nEnd Sub\n\nPrivate Sub CommandButton3_Click()\n\n    CATIA.StartCommand \"Save Management\"    'check file status\n\nEnd Sub\n</code></pre> <pre><code>'Victor Keto - Gehry Technologies 7/20/08\n'********************************************************\n'*************************************************\n\n'Note: the first instance found for each product is saved, All other instances are ignored (to avoid redundant saves)\n'If the 'in context' instance appears first in the tree, it will be saved to a matching folder path, instead of to the path of an 'out of context' instance\n\n\nPublic Save_New_Files_Only As Boolean\nPublic Use_Directory_Path_of_Root_Product As Boolean\nPublic Target_Directory As String  'if not using the directory of the root..\n                                                                       'folder will be created during the save if it does not exist...\nPublic Dir_For_Save As String\n\n\nPublic PartDocuments_Found() As PartDocument\nPublic PartDocuments_Found_Save_Path() As String\nPublic PartDocuments_Found_Partnumbers() As String\n\nPublic ProductDocuments_Found() As ProductDocument\nPublic ProductDocuments_Found_Save_Path() As String\nPublic ProductDocuments_Found_Partnumbers() As String\n\n\n\n'***********************************************************************************\n'***********************************************************************************\n\nSub CATMain()\n\n\n\n    Save_New_Files_Only = False\n    Use_Directory_Path_of_Root_Product = False\n    Target_Directory = \"\"  'if not using the directory of the root..\n\n    FDM.Show\n\nEnd Sub\n\n\nSub Save_Files()\n\n\n    ReDim PartDocuments_Found(0)\n    ReDim PartDocuments_Found_Save_Path(0)\n    ReDim PartDocuments_Found_Partnumbers(0)\n\n    ReDim ProductDocuments_Found(0)\n    ReDim ProductDocuments_Found_Save_Path(0)\n    ReDim ProductDocuments_Found_Partnumbers(0)\n\n    CATIA.DisplayFileAlerts = False\n\n    Call query_objects_for_save(CATIA.ActiveDocument.Product, Dir_For_Save)\n    Call save_in_reverse_order\n\n\nEnd Sub\n\n'***********************************************************************************\n'***********************************************************************************\n\n\n'recursively query files top-down, and then save in reverse order to avoid autosaves to parent product folders...\nSub query_objects_for_save(current_product As Product, current_directory_for_saving As String)\n\n    'the root product should be saved,  therefore no save occurs at recursive step 1\n    Dim fso\n    Set fso = CreateObject(\"Scripting.FileSystemObject\")\n    Dim current_ref_doc As Document\n    Dim a As Integer\n    Dim products_within As Products\n\n\n\n    If TypeName(current_product.ReferenceProduct.Parent) = \"PartDocument\" Then   'a .CATPart\n        On Error GoTo Omit_from_Save\n        Set current_ref_doc = current_product.ReferenceProduct.Parent\n\n            'create folder for part (if does not exist) with parent product name and save part within....\n            If Save_New_Files_Only = True And current_ref_doc.Path &lt;&gt; \"\" Then GoTo Omit_from_Save\n\n                'check if part number exists in set before saving....\n                If UBound(PartDocuments_Found_Partnumbers) &gt; 0 Then\n\n                    For check_pnum = 1 To UBound(PartDocuments_Found_Partnumbers)\n\n                        'avoid duplicates\n                        If current_product.PartNumber = PartDocuments_Found_Partnumbers(check_pnum) Then GoTo Omit_from_Save\n\n                    Next check_pnum\n\n                End If\n\n                On Error Resume Next    'if folder exists.....\n                fso.CreateFolder current_directory_for_saving\n\n                ReDim Preserve PartDocuments_Found(UBound(PartDocuments_Found) + 1)\n                ReDim Preserve PartDocuments_Found_Save_Path(UBound(PartDocuments_Found_Save_Path) + 1)\n                ReDim Preserve PartDocuments_Found_Partnumbers(UBound(PartDocuments_Found_Partnumbers) + 1)\n\n                Set PartDocuments_Found(UBound(PartDocuments_Found)) = current_ref_doc\n                PartDocuments_Found_Save_Path(UBound(PartDocuments_Found_Save_Path)) = current_directory_for_saving &amp; \"\\\" &amp; current_product.PartNumber\n                PartDocuments_Found_Partnumbers(UBound(PartDocuments_Found_Partnumbers)) = current_product.PartNumber\n    'add additional file types here\n    'ElseIf TypeName(current_product.ReferenceProduct.Parent) = \"Shape\" Then....\n\n\nOmit_from_Save:\n    ElseIf TypeName(current_product.ReferenceProduct.Parent) = \"ProductDocument\" Then\n\n        Set current_ref_doc = current_product.ReferenceProduct.Parent   'is a .CATProduct\n        'save file within the folder of parent product....\n        If Save_New_Files_Only = True And current_ref_doc.Path &lt;&gt; \"\" Then GoTo Omit_from_Save_2\n\n            'check if part number exists in set before saving....\n            If UBound(ProductDocuments_Found_Partnumbers) &gt; 0 Then\n\n                For check_pnum_pct = 1 To UBound(ProductDocuments_Found_Partnumbers)\n\n                    'avoid duplicates\n                    If current_product.PartNumber = ProductDocuments_Found_Partnumbers(check_pnum_pct) Then GoTo Omit_from_Save_2\n\n                Next check_pnum_pct\n\n            End If\n\n            On Error Resume Next    'if folder exists.....\n            fso.CreateFolder current_directory_for_saving\n\n            ReDim Preserve ProductDocuments_Found(UBound(ProductDocuments_Found) + 1)\n            ReDim Preserve ProductDocuments_Found_Save_Path(UBound(ProductDocuments_Found_Save_Path) + 1)\n            ReDim Preserve ProductDocuments_Found_Partnumbers(UBound(ProductDocuments_Found_Partnumbers) + 1)\n\n            Set ProductDocuments_Found(UBound(ProductDocuments_Found)) = current_ref_doc\n            ProductDocuments_Found_Save_Path(UBound(ProductDocuments_Found_Save_Path)) = current_directory_for_saving &amp; \"\\\" &amp; current_product.PartNumber\n            ProductDocuments_Found_Partnumbers(UBound(ProductDocuments_Found_Partnumbers)) = current_product.PartNumber\n\nOmit_from_Save_2:\n\n        Set products_within = current_product.Products\n        For a = 1 To products_within.Count\n            Call query_objects_for_save(products_within.Item(a), current_directory_for_saving &amp; \"\\\" &amp; current_product.PartNumber)\n        Next a\n    End If\n\nEnd Sub\n\n\n\n'***********************************************************************************\n'***********************************************************************************\n\nSub save_in_reverse_order()    'folders already created....\n\n    'save parts and then products in reverse order\n\n    For h = UBound(PartDocuments_Found) To 1 Step -1\n        PartDocuments_Found(h).SaveAs PartDocuments_Found_Save_Path(h)\n    Next h\n\n\n    For n = UBound(ProductDocuments_Found) To 1 Step -1\n        ProductDocuments_Found(n).SaveAs ProductDocuments_Found_Save_Path(n)\n    Next n\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Functions/BMEDI_RD_ContralPoints/","title":"BMEDI RD ContralPoints","text":"<p>Attribute VB_Name = \"BMEDI_RD_ContralPoints\"</p> <pre><code>Sub main()\n\n' Auther :  XUSong\n' Data   :  2021.12.24\n\nDim CATIA As INFITF.Application: Set CATIA = GetObject(, \"CATIA.Application\") '\u521b\u5efaEXCEL\u5bf9\u8c61\n\n' MsgBox catia.ActiveEditor.ActiveObject.Name\n\nDim part As part\nSet part = CATIA.ActiveEditor.ActiveObject\n\nDim hb As HybridBody\nSet hb = part.HybridBodies.Add\nhb.Name = \"\u5e73\u4ea4\u53e3\u9053\u8def\u63a7\u5236\u70b9\"\n\nDim obj1 As HybridBody\nSet obj1 = CATIA.ActiveEditor.Selection.Item(1).Value\n\n'    Dim surf1 As HybridShape:    Set surf1 = obj1.HybridShapes.Item(1)\n'    Dim surf2 As HybridShape:    Set surf2 = obj1.HybridShapes.Item(2)\nDim Alignment1 As HybridShape:    Set Alignment1 = obj1.HybridShapes.Item(1)\nDim Alignment2 As HybridShape:    Set Alignment2 = obj1.HybridShapes.Item(2)\nDim roadsurface As HybridShape:    Set roadsurface = obj1.HybridShapes.Item(3)\n\n' msgbox Alignment1.Name + \" | \" + Alignment2.Name\n\nCall RoadSurfaceContral(part, Alignment1, Alignment2, roadsurface, hb)\n\nEnd Sub\n\nFunction RoadSurfaceContral(ByVal part As MECMOD.part, ByVal edge1 As HybridShape, ByVal edge2 As HybridShape, ByVal roadsurf As HybridShape, ByVal hb As HybridBody)\n\nDim hsf As HybridShapeFactory\nSet hsf = part.HybridShapeFactory\n\nDim ptHcount As Integer\nptHcount = 10\n\nDim ptVcount As Integer\nptVcount = 5\n\nDim hb1 As HybridBody\nSet hb1 = hb.HybridBodies.Add\nhb1.Name = \"\u63a7\u5236\u70b9\"\n\nFor i = 1 To ptHcount - 1\nDim pts As HybridShape\nSet pts = hsf.AddNewPointOnCurveFromPercent(edge2, i / ptHcount, True)\npts.Compute\n\nDim pln As HybridShape\nSet pln = hsf.AddNewPlaneNormal(edge2, pts)\npln.Compute\n\nDim intt1 As HybridShape\nSet intt1 = hsf.AddNewIntersection(pln, roadsurf)\nintt1.Compute\n'hb.AppendHybridShape intt1\n\nFor j = 1 To ptVcount - 1\nDim pts1 As HybridShape\nSet pts1 = hsf.AddNewPointOnCurveFromPercent(intt1, j / ptVcount, True)\npts1.Compute\n\nDim zpts As HybridShape\nSet zpts = hsf.AddNewTranslate(pts1, hsf.AddNewDirectionByCoord(0, 0, 1), 40)\nzpts.Compute\nzpts.Name = CStr(i) + \"_\" + CStr(j)\n\nhb1.AppendHybridShape zpts\nNext\nNext\n\nDim hybridShapeBoundary1 As HybridShapeBoundary\nSet hybridShapeBoundary1 = hsf.AddNewBoundaryOfSurface(roadsurf)\nhybridShapeBoundary1.Compute\n\nDim hybridShapeFill1 As HybridShapeFill\nSet hybridShapeFill1 = hsf.AddNewFill()\nhybridShapeFill1.AddBound hybridShapeBoundary1\nFor k = 1 To hb1.HybridShapes.Count\nhybridShapeFill1.AppendConstraint hb1.HybridShapes.Item(k)\nhybridShapeFill1.Compute\nNext\nhybridShapeFill1.Compute\nhb.AppendHybridShape hybridShapeFill1\nhybridShapeFill1.Name = \"\u5e73\u4ea4\u53e3\u66f2\u9762\"\n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Functions/BMEDI_SplitRoadSurface/","title":"BMEDI SplitRoadSurface","text":"<pre><code>Attribute VB_Name = \"BMEDI_SplitRoadSurface\"\n\nSub main()\n\n    Dim CATIA As INFITF.Application: Set CATIA = GetObject(, \"CATIA.Application\") '\u521b\u5efaEXCEL\u5bf9\u8c61\n\n   ' MsgBox catia.ActiveEditor.ActiveObject.Name\n\n    Dim part As part\n    Set part = CATIA.ActiveEditor.ActiveObject\n\n    Dim hb As HybridBody\n    Set hb = part.HybridBodies.Add\n    hb.Name = \"\u5e73\u4ea4\u53e3\u9053\u8def\u66f2\u9762\"\n\n    Dim obj1 As HybridBody\n    Set obj1 = CATIA.ActiveEditor.Selection.Item(1).Value\n\n    Dim surf1 As HybridShape:    Set surf1 = obj1.HybridShapes.Item(1)\n    Dim surf2 As HybridShape:    Set surf2 = obj1.HybridShapes.Item(2)\n    Dim Alignment1 As HybridShape:    Set Alignment1 = obj1.HybridShapes.Item(6)\n    Dim Alignment2 As HybridShape:    Set Alignment2 = obj1.HybridShapes.Item(7)\n\n    msgbox surf1.Name + \"#\" + surf1.Name + \"#\" + Alignment1.Name + \"#\" + Alignment2.Name\n\n    Dim opt As HybridShape\n    Set opt = CreateRoadInterPoint(part, Alignment1, Alignment2, hb)\n\n    Call splitRoadSurf(part, surf1, Alignment1, opt, 45000, hb)\n    Call splitRoadSurf(part, surf2, Alignment2, opt, 45000, hb)\n\nEnd Sub\n\nFunction CreateRoadInterPoint(part As MECMOD.part, Alignment1, Alignment2, hb) As HybridShape\n\n    Dim hsf As HybridShapeFactory\n    Set hsf = part.HybridShapeFactory\n\n    If CheckIntersection(part, Alignment1, Alignment2) = True Then\n        Dim intt1 As HybridShape\n        Set intt1 = hsf.AddNewIntersection(Alignment1, Alignment2)\n        intt1.Compute\n        hb.AppendHybridShape intt1\n        intt1.Name = \"\u9053\u8def\u4e2d\u5fc3\u4ea4\u70b9\"\n       Set CreateRoadInterPoint = intt1\n    End If\n\nEnd Function\n\nFunction splitRoadSurf(part, surf1, crv1, opt, roadLength, hb)\n\n' \u8f93\u5165\u6761\u4ef6\uff1a part\uff0c\u8def\u9762\uff0c\u4e2d\u5fc3\u7ebf\uff0c\u4ea4\u70b9\n\nDim hsf As HybridShapeFactory\nSet hsf = part.HybridShapeFactory\n\n'\nDim hybridShapeSphere1 As HybridShapeSphere\nSet hybridShapeSphere1 = hsf.AddNewSphere(opt, Nothing, roadLength, -45, 45, 0, 180)\nhybridShapeSphere1.Compute\nhybridShapeSphere1.Limitation = 1\n'hb.AppendHybridShape hybridShapeSphere1\n\n'\u521b\u5efa\u65b9\u5411\u5224\u65ad\n\nDim hybridShapeLineTangency1 As HybridShapeLineTangency\nSet hybridShapeLineTangency1 = hsf.AddNewLineTangency(crv1, opt, -100#, 1000#, False)\nhybridShapeLineTangency1.Compute\n\nDim hybridShapeLineTangency2 As HybridShapeLineTangency\nSet hybridShapeLineTangency2 = hsf.AddNewLineTangency(crv1, opt, -100#, -1000#, False)\nhybridShapeLineTangency2.Compute\n\n'hb.AppendHybridShape hybridShapeLineTangency1\n'hb.AppendHybridShape hybridShapeLineTangency2\n\nDim hybridShapeIntersection2 As HybridShapeIntersection\nSet hybridShapeIntersection2 = hsf.AddNewIntersection(hybridShapeSphere1, crv1)\nhybridShapeIntersection2.PointType = 0\n'hb.AppendHybridShape hybridShapeIntersection2\n\n'\nDim hybridShapeNear1 As HybridShapeNear\nSet hybridShapeNear1 = hsf.AddNewNear(hybridShapeIntersection2, hybridShapeLineTangency1)\nhb.AppendHybridShape hybridShapeNear1\nhybridShapeNear1.Name = \"End_pt1\"\n\nDim hybridShapeNear2 As HybridShapeNear\nSet hybridShapeNear2 = hsf.AddNewNear(hybridShapeIntersection2, hybridShapeLineTangency2)\nhb.AppendHybridShape hybridShapeNear2\nhybridShapeNear2.Name = \"End_pt2\"\n\n' \u521b\u5efa\u5e73\u9762\nDim pln1 As HybridShape\nSet pln1 = hsf.AddNewPlaneNormal(crv1, hybridShapeNear1)\npln1.Compute\n\nDim pln2 As HybridShape\nSet pln2 = hsf.AddNewPlaneNormal(crv1, hybridShapeNear2)\npln2.Compute\n\npln1.Name = \"Start_Pln\"\npln2.Name = \"End_Pln\"\n\nhb.AppendHybridShape pln1\nhb.AppendHybridShape pln2\n\nDim split1 As HybridShapeSplit\nSet split1 = hsf.AddNewHybridSplit(surf1, pln1, False)\nsplit1.BothSidesMode = True\nsplit1.Compute\n\nhsf.GSMVisibility split1.GetOtherSide, 0\n\nDim split2 As HybridShapeSplit\nSet split2 = hsf.AddNewHybridSplit(split1.GetOtherSide, pln2, True)\nsplit2.BothSidesMode = False\nsplit2.Compute\n\nsplit1.Name = \"Rd_Surf_1\"\nsplit2.Name = \"Rd_Surf_2\"\n\nhb.AppendHybridShape split1\nhb.AppendHybridShape split2\n\nEnd Function\n\nFunction CheckIntersection(part As MECMOD.part, Object1 As Variant, Object2 As Variant) As Boolean\n    Dim MyHSFactory As HybridShapeFactory\n    Set MyHSFactory = part.HybridShapeFactory\n\n    On Error GoTo Blast\n    Dim TestInt As HybridShapeIntersection\n    Set TestInt = MyHSFactory.AddNewIntersection(Object1, Object2)\n    part.UpdateObject TestInt\n    CheckIntersection = True\n    Exit Function\n\nBlast:\n    CheckIntersection = False\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Functions/CreatePointFromExcel/","title":"CreatePointFromExcel","text":""},{"location":"DS-CODE/Functions/CreatePointFromExcel/#vbnet","title":"VB.NET","text":"<pre><code>Imports System\nImports excel = Microsoft.Office.Interop.Excel\nImports HybridShapeTypeLib\nImports MECMOD\nImports KnowledgewareTypeLib\n\nPartial Public NotInheritable Class ThisApplication\n    Inherits ObjectModelAgentLib.CATIAEntryPoint\n\n    Public Shared Sub CATMain()\n        'Debug entry point, not visible from the host\n        CATIA.SystemService.PrintToStdout(\"Hello, World! VB.NET\")\n\n        Dim xlsapp As Microsoft.Office.Interop.Excel.Application = GetObject(, \"Excel.Application\")\n        Dim sheet As excel.Worksheet = xlsapp.ActiveSheet\n\n        Dim part As MECMOD.Part = CATIA.ActiveEditor.ActiveObject\n        Dim hsf As HybridShapeTypeLib.HybridShapeFactory = part.HybridShapeFactory\n\n        Dim hb As HybridBody\n        hb = part.HybridBodies.Add\n\n\n        Dim i As Integer = 1\n\n        Dim x, y, z As Double\n        For i = 1 To 35\n            x = sheet.Cells(i + 2, 11).value\n            y = sheet.Cells(i + 2, 12).value\n            z = sheet.Cells(i + 2, 13).value\n\n            Dim pt As Point = hsf.AddNewPointCoord(x, y, z)\n            pt.Compute()\n            hb.AppendHybridShape(pt)\n\n        Next\n    End Sub\n\nEnd Class\n</code></pre> <pre><code>    println!(\"Hello, world!\");\n</code></pre>"},{"location":"DS-CODE/Functions/ExportCaptureImg/","title":"ExportCaptureImg","text":""},{"location":"DS-CODE/Functions/ExportCaptureImg/#vba","title":"VBA","text":"<pre><code>Sub CATMain()\n\nDim partDocument1 As PartDocument\nSet partDocument1 = CATIA.ActiveDocument\n\nDim part1 As Part\nSet part1 = partDocument1.Part\n\nFor k = 1 To CATIA.ActiveDocument.Selection.Count\n\nDim parm1 As Parameter\nSet parm1 = CATIA.ActiveDocument.Selection.Item(k).Value\n'part1.Parameters.Item(\"Angle.1\")\n\nDebug.Print parm1.ValueAsString()\n\n    For i = 1 To 360\n\n        Dim str As String\n        str = CStr(i) &amp; \"deg\"\n\n        parm1.ValuateFromString (str)\n        part1.Update\n        CATIA.ActiveWindow.ActiveViewer.CaptureToFile catCaptureFormatJPEG, \"C:\\temp\\img\\\" &amp; \"\\MyImage\" &amp; CStr(k) &amp; \"_\" &amp; CStr(i) &amp; \".jpg\"\n    Next\nNext\n\n\nEnd Sub\n\n\nSub delay()\n'\u524d\u9762\u7684\u4ee3\u7801\u5230\u6b64\nT = Timer\nDo While Timer - 2 &lt; T\nDebug.Print\nLoop\n'\u540e\u9762\u7684\u4ee3\u7801\u7ee7\u7eed\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Functions/GenerateAnimation/","title":"GenerateAnimation","text":"<p>\u9009\u62e9\u4e00\u4e2a\u66f2\u7ebf\uff0c\u5373\u53ef\u57fa\u4e8e\u8fd9\u4e2a\u7ebf\u521b\u5efa\u622a\u56fe\uff0c\u9ed8\u8ba4\u4e00\u4e2a\u7ebf\u5206\u4e86 10 \u4e2a\u70b9\uff0c\u81ea\u5df1\u6839\u636e\u9700\u8981\u8c03\u8282\uff1b</p> V5V6 <pre><code>Public ParamSelected, SectionSelected, CurveSelected\nPublic SectionCoords(11)\n\n\nSub GenerateAnimation()\n\nDim TempCoords(11)\n\nSet Temp = CATIA.ActiveWindow.ActiveViewer\nSet TempCrv = CATIA.ActiveDocument.Selection.Item(1).Value\nSet CurrentPart = ContainingPart(TempCrv)\nSet TempSet = CurrentPart.HybridBodies.Add()\n\nTempSet.Name = \"ANIMATION_GEOMETRY\"\n'***************************  CREATE REFERENCE POINT ******************************\n\nSet NewPt = CurrentPart.HybridShapeFactory.AddNewPointOnCurveFromPercent(CurrentPart.CreateReferenceFromObject(TempCrv), 0, False)\nCall TempSet.AppendHybridShape(NewPt)\nCurrentPart.UpdateObject (NewPt)\nSet NewLine = CurrentPart.HybridShapeFactory.AddNewLineTangency(CurrentPart.CreateReferenceFromObject(TempCrv), CurrentPart.CreateReferenceFromObject(NewPt), 0, 1000, False)\nTempSet.AppendHybridShape (NewLine)\nCurrentPart.UpdateObject (NewLine)\nSet SPA = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n\nSet PtMes = SPA.GetMeasurable(CurrentPart.CreateReferenceFromObject(NewPt))\nSet LineMes = SPA.GetMeasurable(CurrentPart.CreateReferenceFromObject(NewLine))\n\nDim Direction(2), UpVector(2)\nUpVector(0) = 0\nUpVector(1) = 0\nUpVector(2) = 1\n\n'***************************  DETECT CURVE ******************************\nDim Coordinates(2)\n\nDim OffsetValue As Double\nOffsetValue = 10\n\nDim Steps  As Double\nSteps = 100\n\nFor LoopNum = 1 To CInt(Steps)\n\n'ParamSelected.Value = CDbl(0) + LoopNum * (1 / 30)\nCurrentPart.Update\n\nNewPt.Ratio.Value = LoopNum * (1# / CInt(Steps))\nCurrentPart.UpdateObject (NewPt)\nCurrentPart.UpdateObject (NewLine)\nPtMes.GetPoint Coordinates\nLineMes.GetDirection Direction\n\nCATIA.ActiveWindow.ActiveViewer.Viewpoint3D.PutOrigin Coordinates\nCATIA.ActiveWindow.ActiveViewer.Viewpoint3D.PutSightDirection Direction\nCATIA.ActiveWindow.ActiveViewer.Viewpoint3D.PutUpDirection UpVector\nCATIA.ActiveWindow.ActiveViewer.Update\n\nCATIA.ActiveWindow.ActiveViewer.CaptureToFile catCaptureFormatJPEG, \"C:\\Temp\\img\" &amp; \"\\MyImage\" &amp; LoopNum &amp; \".jpg\"\n\nNext\n\n'MsgBox (\"Generated Frames\")\n\n\nEnd Sub\n\nFunction FindSection(SectionName)\nDim TempSection\nSet oSections = CATIA.ActiveDocument.Product.GetTechnologicalObject(\"Sections\")\nFor LoopNum = 1 To oSections.Count\nIf oSections.Item(LoopNum).Name = SectionName Then\nSet TempSection = oSections.Item(LoopNum)\nEnd If\nNext\nSet FindSection = TempSection\nEnd Function\n\nFunction ContainingPart(ByVal CatObject)\nDim found As Boolean\nSet Current = CatObject\nfound = False\nDo While found = False\nSet Current = Current.Parent\nIf TypeName(Current) = \"Part\" Then\nfound = True\nEnd If\nLoop\nSet ContainingPart = Current\nEnd Function\n</code></pre> <pre><code>Option Explicit Off\n\nImports CATOpnsMeasureIDL\n\nModule GeneratateAnimation\n\nSub Main()\nGenerateAnimation()\nEnd Sub\n\n\nPublic ParamSelected, SectionSelected, CurveSelected\nPublic SectionCoords(11)\nPublic catia As INFITF.Application = GetObject(\"\", \"CATIA.Application\")\n\nSub GenerateAnimation()\n\ncatia.ActiveWindow.Height = 2000\ncatia.ActiveWindow.Width = 3000\n\nDim TempCoords(11)\n\n'Set Temp = CATIA.ActiveWindow.ActiveViewer\nTempCrv = catia.ActiveEditor.Selection.Item(1).Value\nCurrentPart = ContainingPart(TempCrv)\nTempSet = CurrentPart.HybridBodies.Add()\n\nTempSet.Name = \"ANIMATION_GEOMETRY\"\n'***************************  CREATE REFERENCE POINT ******************************\n\nNewPt = CurrentPart.HybridShapeFactory.AddNewPointOnCurveFromPercent(CurrentPart.CreateReferenceFromObject(TempCrv), 0, False)\nCall TempSet.AppendHybridShape(NewPt)\nCurrentPart.UpdateObject(NewPt)\nNewLine = CurrentPart.HybridShapeFactory.AddNewLineTangency(CurrentPart.CreateReferenceFromObject(TempCrv), CurrentPart.CreateReferenceFromObject(NewPt), 0, 1000, False)\nTempSet.AppendHybridShape(NewLine)\nCurrentPart.UpdateObject(NewLine)\n\n'SPA = catia.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n'PtMes = SPA.GetMeasurable(CurrentPart.CreateReferenceFromObject(NewPt))\n'LineMes = SPA.GetMeasurable(CurrentPart.CreateReferenceFromObject(NewLine))\n\nDim oMeasurableService As MeasurableService\noMeasurableService = catia.ActiveEditor.GetService(\"MeasurableService\")\n\nDim PtMes As MeasurablePoint\nPtMes = oMeasurableService.GetMeasurable(NewPt, CATMeasurableType.CAAMeasurablePoint)\n\nDim LineMes As MeasurableLine\nLineMes = oMeasurableService.GetMeasurable(NewLine, CATMeasurableType.CAAMeasurableLine)\n\nDim Direction(2), UpVector(2)\nUpVector(0) = 0\nUpVector(1) = 0\nUpVector(2) = 1\n\n'***************************  DETECT CURVE ******************************\nDim Coordinates(2)\n\nDim OffsetValue As Double\nOffsetValue = 1\n\nDim Steps As Double\nSteps = 10\n\nFor LoopNum = 1 To CInt(Steps)\n\n'ParamSelected.Value = CDbl(0) + LoopNum * (1 / 30)\nCurrentPart.Update()\n\nNewPt.Ratio.Value = LoopNum * (1.0# / CInt(Steps))\nCurrentPart.UpdateObject(NewPt)\nCurrentPart.UpdateObject(NewLine)\nPtMes.GetPoint(Coordinates(0), Coordinates(1), Coordinates(2))\nLineMes.GetDirection(Direction(0), Direction(1), Direction(2))\n\ncatia.ActiveWindow.ActiveViewer.Viewpoint3D.PutOrigin(Coordinates)\ncatia.ActiveWindow.ActiveViewer.Viewpoint3D.PutSightDirection(Direction)\ncatia.ActiveWindow.ActiveViewer.Viewpoint3D.PutUpDirection(UpVector)\ncatia.ActiveWindow.ActiveViewer.Update()\n\ncatia.ActiveWindow.ActiveViewer.CaptureToFile(INFITF.CatCaptureFormat.catCaptureFormatJPEG, \"C:\\Temp\\img\" &amp; \"\\MyImage\" &amp; LoopNum &amp; \".jpg\")\n\nNext\n'MsgBox (\"Generated Frames\")\nEnd Sub\nFunction ContainingPart(ByVal CatObject)\nDim found As Boolean\nCurrent = CatObject\nfound = False\nDo While found = False\nCurrent = Current.Parent\nIf TypeName(Current) = \"Part\" Then\nfound = True\nEnd If\nLoop\nContainingPart = Current\nEnd Function\nEnd Module\n</code></pre>"},{"location":"DS-CODE/Functions/GetMaxMinDisPoints/","title":"GetMaxOrMinDistancePoints","text":""},{"location":"DS-CODE/Functions/GetMaxMinDisPoints/#vba","title":"VBA","text":"<pre><code>Sub getmax()\n\nDim pt1 As HybridShape\nSet pt1 = CATIA.ActiveDocument.Selection.Item(1).Value.HybridShapes.Item(1)\n\nDim hb2 As HybridBody\nSet hb2 = CATIA.ActiveDocument.Selection.Item(2).Value\n\nDim maxpos, minpos As Integer\nDim maxlength, max As Double\nDim minlength, min As Double\n\nFor i = 1 To hb2.HybridShapes.Count\n\n    Dim pt2 As HybridShape\n    Set pt2 = hb2.HybridShapes.Item(i)\n\n    maxlength = GetDistance(pt1, pt2)\n\n    If i &gt; 1 Then\n        If maxlength &gt; max Then\n            max = maxlength\n            maxpos = i\n        End If\n    Else\n        max = maxlength\n        maxpos = i\n\n    End If\n\nNext\n\nDebug.Print \"max:\" &amp; maxpos\n\n\nEnd Sub\n\nSub getmin()\n\nDim pt1 As HybridShape\nSet pt1 = CATIA.ActiveDocument.Selection.Item(1).Value.HybridShapes.Item(1)\n\nDim hb2 As HybridBody\nSet hb2 = CATIA.ActiveDocument.Selection.Item(2).Value\n\n\nDim maxpos, minpos As Integer\nDim maxlength, max As Double\nDim minlength, min As Double\n\n\nFor i = 1 To hb2.HybridShapes.Count\n\n    Dim pt2 As HybridShape\n    Set pt2 = hb2.HybridShapes.Item(i)\n\n    minlength = GetDistance(pt1, pt2)\n\n    If i &gt; 1 Then\n        If minlength &lt; min Then\n            min = minlength\n            minpos = i\n        End If\n    Else\n        min = minlength\n        minpos = i\n\n    End If\n\nNext\n\nDebug.Print \"min:\" &amp; minpos\n\nEnd Sub\n\nFunction GetDistance(EdgeRef1, EdgeRef2) As Double\n    Dim TheSPAWorkbench As SPAWorkbench\n    Set TheSPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n    Dim CurrentMeasurable As Measurable\n    Set CurrentMeasurable = TheSPAWorkbench.GetMeasurable(EdgeRef1)\n    Dim TempDistance As Double\n    TempDistance = CurrentMeasurable.GetMinimumDistance(EdgeRef2)\n    GetDistance = TempDistance\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Functions/GetMaxMinDisPoints/#ekl","title":"EKL","text":"<pre><code>EKL\n\n/*Rule created by user 6/20/2022*/\n\nlet pt1(point)\nlet pt2(point)\nlet i (integer)\nlet minpos(integer)\nlet minlength,min(length)\n\n\ni =1 set pt1 = `GS-1\\Geometrical Set.33\\Geometrical Set.30\\Intersect.21` for i while i&lt;= `GS-1\\Geometrical Set.33\\Geometrical Set.34\\Parameters.10\\List.1` .Size()\n{\nset pt2 = `GS-1\\Geometrical Set.33\\Geometrical Set.34\\Parameters.10\\List.1` [i]\nminlength  = distance(pt1,pt2) if(i&gt;1)\n{\nif(minlength&lt; min)\n{\nmin = minlength        minpos = i\nset `GS-1\\Geometrical Set.33\\Geometrical Set.35\\Point.2` =pt2\n}\n}else\n{\nmin = minlength        minpos = i\nset `GS-1\\Geometrical Set.33\\Geometrical Set.35\\Point.2` =pt2\n}\n}\n</code></pre>"},{"location":"DS-CODE/Functions/GetPart/","title":"Get Part","text":"<pre><code> Sub getpart()\n\n\n        Dim oEditor As Editor = catapp.ActiveEditor\n        Dim oProductRootService As PLMProductService = oEditor.GetService(\"PLMProductService\")\n\n        'VPMRootOccurrence oVPMRootOccOnRoot =(VPMRootOccurrence)sel.Item(1).Value'//oProductRootService.RootOccurrence;\n        'VPMReference oVPMRoot = oVPMRootOccOnRoot.ReferenceRootOccurrenceOf\n\n        Dim oVPMRootOccOnRoot As VPMOccurrence = catapp.ActiveEditor.Selection.Item(1).Value\n\n        Dim MyRootOccurrences As VPMOccurrences = oVPMRootOccOnRoot.Occurrences\n\n        For i = 1 To MyRootOccurrences.Count\n        Next\n\n        Dim MyOccurrence As VPMOccurrence = MyRootOccurrences.Item(1)\n        Dim MyRepInstances As VPMRepInstances = MyOccurrence.InstanceOccurrenceOf.ReferenceInstanceOf\n        Dim oVPMRepInst As VPMRepInstance = MyRepInstances.Item(1)\n        Dim oVPMRepRef As VPMRepReference = oVPMRepInst.ReferenceInstanceOf\n        Dim part As Part = oVPMRepRef.GetItem(\"Part\")\n        'MsgBox(part.Name)\n        'Dim hb As HybridBody = part.HybridBodies.Add()\n        Dim hb As HybridBody = part.FindObjectByName(1)\n        'hb.Name = \"tesddddddtdd\"\n        'copy \n        Dim obj1 As HybridShape = hb.HybridShapes.Item(1)\n\n\n        Dim MyOccurrence1 As VPMOccurrence = MyRootOccurrences.Item(2)\n        Dim MyRepInstances1 As VPMRepInstances = MyOccurrence1.InstanceOccurrenceOf.ReferenceInstanceOf\n        Dim oVPMRepInst1 As VPMRepInstance = MyRepInstances1.Item(1)\n        Dim oVPMRepRef1 As VPMRepReference = oVPMRepInst1.ReferenceInstanceOf\n        Dim part1 As Part = oVPMRepRef1.GetItem(\"Part\")\n        Dim hb1 As HybridBody = part1.HybridBodies.Add()\n        'MsgBox(part1.Name)\n        LoadExtRef(obj1, hb1)\n\n        'Dim part2 As Part = MyRootOccurrences.Item(3).ReferenceInstanceOf.Item(1).ReferenceInstanceOf.GetItem(\"Part\")\n        Dim MyOccurrence2 As VPMOccurrence = MyRootOccurrences.Item(3)\n        Dim MyRepInstances2 As VPMRepInstances = MyOccurrence2.InstanceOccurrenceOf.ReferenceInstanceOf\n        Dim oVPMRepInst2 As VPMRepInstance = MyRepInstances2.Item(1)\n        Dim oVPMRepRef2 As VPMRepReference = oVPMRepInst2.ReferenceInstanceOf\n        Dim part2 As Part = oVPMRepRef2.GetItem(\"Part\")\n        Dim hb2 As HybridBody = part2.HybridBodies.Add()\n        LoadExtRef(obj1, hb2)\n\n        Dim MyOccurrence3 As VPMOccurrence = MyRootOccurrences.Item(3)\n        Dim MyRepInstances3 As VPMRepInstances = MyOccurrence3.InstanceOccurrenceOf.ReferenceInstanceOf\n        Dim oVPMRepInst3 As VPMRepInstance = MyRepInstances3.Item(1)\n        Dim oVPMRepRef3 As VPMRepReference = oVPMRepInst3.ReferenceInstanceOf\n        Dim part3 As Part = oVPMRepRef2.GetItem(\"Part\")\n        Dim hb3 As HybridBody = part3.HybridBodies.Add()\n        LoadExtRef(obj1, hb3)\n\n        Dim MyOccurrence4 As VPMOccurrence = MyRootOccurrences.Item(4)\n        Dim MyRepInstances4 As VPMRepInstances = MyOccurrence4.InstanceOccurrenceOf.ReferenceInstanceOf\n        Dim oVPMRepInst4 As VPMRepInstance = MyRepInstances4.Item(1)\n        Dim oVPMRepRef4 As VPMRepReference = oVPMRepInst4.ReferenceInstanceOf\n        Dim part4 As Part = oVPMRepRef4.GetItem(\"Part\")\n        Dim hb4 As HybridBody = part4.HybridBodies.Add()\n        LoadExtRef(obj1, hb4)\n\n\n    End Sub\n\n    Function LoadExtRef(OldObj As INFITF.AnyObject, ExtRefSet As HybridBody) As AnyObject\n\n        If catapp.ActiveEditor.Selection.Count &lt;&gt; 0 Then\n            catapp.ActiveEditor.Selection.Clear()\n        End If\n        catapp.ActiveEditor.Selection.Add(OldObj)\n        catapp.ActiveEditor.Selection.Copy()\n\n        If catapp.ActiveEditor.Selection.Count &lt;&gt; 0 Then\n            catapp.ActiveEditor.Selection.Clear()\n        End If\n        catapp.ActiveEditor.Selection.Add(ExtRefSet)        'DRVExtRefSet\n        catapp.ActiveEditor.Selection.PasteSpecial(\"CATPrtResult\")\n        If catapp.ActiveEditor.Selection.Count &lt;&gt; 0 Then\n            catapp.ActiveEditor.Selection.Clear()\n        End If\n        Dim ExtRefMainSurf\n        ExtRefMainSurf = ExtRefSet.HybridShapes.Item(ExtRefSet.HybridShapes.Count)\n        LoadExtRef = ExtRefMainSurf\n    End Function\n</code></pre>"},{"location":"DS-CODE/Functions/GetPlaneVector/","title":"GetPlaneVertor","text":"<pre><code>Public Type iPct\n     X As Double\n     Y As Double\n     Z As Double\nEnd Type\n\n\nSub main()\n\nDim pln As Plane\nSet pln = CATIA.ActiveDocument.Selection.Item(1).Value\n\nDim aa() As iPct\naa = GetPlaneVectors(pln)\n\nDebug.Print aa(0).X &amp; \"#\" &amp; aa(0).Y &amp; \"#\" &amp; aa(0).Z\nDebug.Print aa(1).X &amp; \"#\" &amp; aa(1).Y &amp; \"#\" &amp; aa(1).Z\n\nEnd Sub\n\nPublic Function GetPlaneVectors(MyPlane As Object) As iPct()\n    Dim ArrRet() As iPct: ReDim ArrRet(1)\n    Dim V1(2): Dim V2(2)\n    MyPlane.GetFirstAxis (V1): ArrRet(0).X = V1(0): ArrRet(0).Y = V1(1): ArrRet(0).Z = V1(2)\n    MyPlane.GetSecondAxis (V2): ArrRet(1).X = V2(0): ArrRet(1).Y = V2(1): ArrRet(1).Z = V2(2)\n    GetPlaneVectors = ArrRet\n    Erase ArrRet: Erase V1: Erase V2\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Functions/GetPlaneVector/#case","title":"case","text":"<pre><code>Public Type iPct\n     X As Double\n     Y As Double\n     Z As Double\nEnd Type\n\nSub CATMain()\n\nDim windows1 As Windows\nSet windows1 = CATIA.Windows\n\nDim specsAndGeomWindow1 As SpecsAndGeomWindow\nSet specsAndGeomWindow1 = windows1.Item(\"Drawing1\")\n\nspecsAndGeomWindow1.Activate\n\nDim drawingDocument1 As DrawingDocument\nSet drawingDocument1 = CATIA.ActiveDocument\n\nDim drawingSheets1 As DrawingSheets\nSet drawingSheets1 = drawingDocument1.Sheets\n\nDim drawingSheet1 As DrawingSheet\nSet drawingSheet1 = drawingSheets1.Item(\"\u9875.1\")\n\nDim drawingViews1 As DrawingViews\nSet drawingViews1 = drawingSheet1.Views\n\nDim drawingView1 As DrawingView\nSet drawingView1 = drawingViews1.Add(\"AutomaticNaming\")\n\nDim drawingViewGenerativeLinks1 As DrawingViewGenerativeLinks\nSet drawingViewGenerativeLinks1 = drawingView1.GenerativeLinks\n\nDim drawingViewGenerativeBehavior1 As DrawingViewGenerativeBehavior\nSet drawingViewGenerativeBehavior1 = drawingView1.GenerativeBehavior\n\nDim documents1 As Documents\nSet documents1 = CATIA.Documents\n\nDim partDocument1 As PartDocument\nSet partDocument1 = documents1.Item(\"Part1.CATPart\")\n\nDim product1 As Product\nSet product1 = partDocument1.GetItem(\"Part1\")\n\n\nDim part1 As part\nSet part1 = partDocument1.part\n\nDim hybridShapeFactory1 As HybridShapeFactory\nSet hybridShapeFactory1 = part1.HybridShapeFactory\n\nDim hybridBodies1 As HybridBodies\nSet hybridBodies1 = part1.HybridBodies\n\nDim hybridBody1 As HybridBody\nSet hybridBody1 = hybridBodies1.Item(\"\u51e0\u4f55\u56fe\u5f62\u96c6.1\")\n\nDim hybridShapes1 As HybridShapes\nSet hybridShapes1 = hybridBody1.HybridShapes\n\nDim hybridShapeRotate1 As HybridShape\nSet hybridShapeRotate1 = hybridShapes1.Item(\"\u5e73\u9762.1\")\n\nDim reference1 As Reference\nSet reference1 = part1.CreateReferenceFromObject(hybridShapeRotate1)\n\nDim hybridShapePointOnPlane1 As HybridShapePointOnPlane\nSet hybridShapePointOnPlane1 = hybridShapeFactory1.AddNewPointOnPlane(reference1, -4189.782, 1450.372)\n\nhybridBody1.AppendHybridShape hybridShapePointOnPlane1\n\npart1.InWorkObject = hybridShapePointOnPlane1\n\npart1.Update\n\ndrawingViewGenerativeBehavior1.Document = product1\n\nDim aa() As iPct\nDim pln As Plane\nSet pln = hybridShapeRotate1\n\naa = GetPlaneVectors(pln)\n\nDebug.Print aa(0).X &amp; \"#\" &amp; aa(0).Y &amp; \"#\" &amp; aa(0).Z\nDebug.Print aa(1).X &amp; \"#\" &amp; aa(1).Y &amp; \"#\" &amp; aa(1).Z\n\ndrawingViewGenerativeBehavior1.DefineFrontView aa(0).X, aa(0).Y, aa(0).Z, aa(1).X, aa(1).Y, aa(1).Z\n\n' get pln array\nDim x1, y1, z1 As Double\nDim x2, y2, z2 As Double\n\n'drawingView1.GenerativeBehavior.SetProjectionPlane 0, 0, 1, 0, 1, 0\n'\n\ndrawingView1.X = 2719.13759\n\ndrawingView1.Y = -313.698389\n\ndrawingView1.[Scale] = 1#\n\nSet drawingViewGenerativeBehavior1 = drawingView1.GenerativeBehavior\n\ndrawingViewGenerativeBehavior1.Update\n\ndrawingView1.Activate\n\nDim specsAndGeomWindow2 As SpecsAndGeomWindow\nSet specsAndGeomWindow2 = windows1.Item(\"Part1\")\n\nspecsAndGeomWindow2.Activate\n\n\nEnd Sub\n\nSub main()\n\nDim pln As Plane\nSet pln = CATIA.ActiveDocument.Selection.Item(1).Value\n\nDim aa() As iPct\naa = GetPlaneVectors(pln)\n\nDebug.Print aa(0).X &amp; \"#\" &amp; aa(0).Y &amp; \"#\" &amp; aa(0).Z\nDebug.Print aa(1).X &amp; \"#\" &amp; aa(1).Y &amp; \"#\" &amp; aa(1).Z\n\nEnd Sub\n\nPublic Function GetPlaneVectors(MyPlane As Object) As iPct()\n    Dim ArrRet() As iPct: ReDim ArrRet(1)\n    Dim V1(2): Dim V2(2)\n    MyPlane.GetFirstAxis (V1): ArrRet(0).X = V1(0): ArrRet(0).Y = V1(1): ArrRet(0).Z = V1(2)\n    MyPlane.GetSecondAxis (V2): ArrRet(1).X = V2(0): ArrRet(1).Y = V2(1): ArrRet(1).Z = V2(2)\n    GetPlaneVectors = ArrRet\n    Erase ArrRet: Erase V1: Erase V2\nEnd Function\n</code></pre>"},{"location":"DS-CODE/Functions/OpenProductAndGetEditor/","title":"OpenProductAndGetEditor","text":"<pre><code>    Function OpenProductAndGetEditor(oDBSearch) As INFITF.Editor\n        'Error handling\n        On Error GoTo ErrorSub\n\n        'Retrieves the list of PLM Entities from the PLM Search object\n        Dim oPLMProdRefAsEntities As PLMModelerBaseIDL.PLMEntities\n        oPLMProdRefAsEntities = oDBSearch.Results\n\n        'Ensures the search results retrieves atleast one PLM Entity\n        If oPLMProdRefAsEntities.Count &gt; 1 Then\n            MsgBox(\"Please enter a query criteria which outputs a unique PLM Component for further processing\")\n            GoTo EndSub\n        ElseIf oPLMProdRefAsEntities.Count = 0 Then\n            MsgBox(\"No result for the input criteria\")\n            GoTo EndSub\n        End If\n        'Retrieves first PLM Entity from the PLMEntities collection object\n        Dim oPLMProdRefAsPLMEntity As PLMModelerBaseIDL.PLMEntity\n        oPLMProdRefAsPLMEntity = oPLMProdRefAsEntities.Item(1)\n\n        'Call the Open Service to open the product\n        Dim oOpenService As CATPLMEnvBuild.PLMOpenService\n        oOpenService = catia.GetSessionService(\"PLMOpenService\")\n\n        'Opens the PLM Component in the VPM editor\n        Dim oProductEditor As INFITF.Editor\n        oOpenService.PLMOpen(oPLMProdRefAsPLMEntity, oProductEditor)\n\n        'Valuates the output\n        OpenProductAndGetEditor = oProductEditor\n\n        'Error handling\n        GoTo EndSub\nErrorSub:\n        MsgBox(Err.Description)\nEndSub:\n    End Function\n</code></pre>"},{"location":"DS-CODE/Functions/Rename/","title":"RenameObject","text":""},{"location":"DS-CODE/Functions/Rename/#vba","title":"vba","text":"<pre><code>Sub CATMain()\n\n\nFor i = 1 To CATIA.ActiveDocument.Selection.Count\n    Set obj = CATIA.ActiveDocument.Selection.Item(i).Value\n    obj.Name = \"GS-\" &amp; CStr(i)\nNext\n\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/Functions/RetrievePart/","title":"RetrievePart","text":"<pre><code>    Function RetrievePart(oProdRef) As Part\n        'Error handling\n        On Error GoTo ErrorSub\n        '2.1- Retrieve list of Product Representation Instance  beneath Product Reference\n        Dim oVPMRepInsts As VPMRepInstances\n        oVPMRepInsts = oProdRef.RepInstances\n\n        '2.2- Retrieve the Product Representation Instance (First element among the list of instances retrieved earlier)\n        'Please note that here we consider that the first element in the list of Product Representation Instance is 3DShape,\n        'else macro will fail in further steps\n        Dim oVPMRepInst As VPMRepInstance\n        oVPMRepInst = oVPMRepInsts.Item(1)\n\n        '2.3-  Retrieve the Representation Reference of the Representation instance  (we suppose later it is a 3D Shape)\n        Dim oVPMRepRef As VPMRepReference\n        oVPMRepRef = oVPMRepInst.ReferenceInstanceOf\n\n        MsgBox(\"Success in retrieving Representation Reference. The PLM_ExternalID value of Representation Reference :\" + oVPMRepRef.GetAttributeValue(\"PLM_ExternalID\"))\n\n\n        '2.4- Retrieve Part object associated with the 3DShape\n        'Thanks to GetItem method which ensures that retrieved element is 3DShape since associated element is Part\n        Dim oPart As Part\n        oPart = oVPMRepRef.GetItem(\"Part\")\n\n        RetrievePart = oPart\n\n        'Error handling\n        GoTo EndSub\nErrorSub:\n        ' MsgBox Err.Description + \". Failure since no 3DShape Representation Instance aggregated under Product Root Reference. \"\nEndSub:\n    End Function\n</code></pre>"},{"location":"DS-CODE/Functions/RetrievePartFromProdReference/","title":"RetrievePartFromProdReference","text":"<pre><code>    Sub RetrievePartFromProdReference()\n        'Error handling\n        On Error GoTo ErrorSub\n\n        strTheProductReferenceType = \"VPMReference\"\n\n        '1- Search and Retrieve the Product Reference (Root) from underlying database\n        Dim oVPMRootReference As VPMReference\n        oVPMRootReference = SearchAndRetrieveProdReference()\n\n        '2- Retrieve Part Object associated with the 3DShape aggregated beneath the Root\n        Dim oPart As Part\n        oPart = RetrievePart(oVPMRootReference)\n\n        MsgBox(\"Success in retrieving Part. Part Name : \" + oPart.Name)\n\n        'Error handling\n        GoTo EndSub\nErrorSub:\n        'MsgBox Err.Description\nEndSub:\n    End Sub\n</code></pre>"},{"location":"DS-CODE/Functions/SearchAndRetrieveProdReference/","title":"SearchAndRetrieveProdReference","text":"<pre><code> Function SearchAndRetrieveProdReference() As VPMReference\n        'Error handling\n        On Error GoTo ErrorSub\n\n        'Retrieves the Search service from CATIA session\n        Dim oSearchService As PLMAccessIDLItf.SearchService\n        oSearchService = catia.GetSessionService(\"Search\")\n\n        'Search in database for Product Reference Type\n        Dim oDBSearch As PLMAccessIDLItf.DatabaseSearch\n        oDBSearch = SearchProduct(oSearchService)\n\n        'Opens the Product and retrieves its Editor\n        Dim oProdEditor As INFITF.Editor\n        oProdEditor = OpenProductAndGetEditor(oDBSearch)\n\n        'Retrieves the \"PLMProductService\" service object that handles objects controlled by a VPM Editor\n        Dim oProductRootService ' As PLMProductService\n        oProductRootService = oProdEditor.GetService(\"PLMProductService\")\n\n        'Retrieve the root occurrence corresponding to the root product\n        Dim oVPMRootOccOnRoot As VPMRootOccurrence\n        oVPMRootOccOnRoot = oProductRootService.RootOccurrence\n\n        'Retrieve the Root Reference from the Root Occurrence\n        Dim oVPMRoot As VPMReference\n        oVPMRoot = oVPMRootOccOnRoot.ReferenceRootOccurrenceOf\n\n        'Return Root Product\n        SearchAndRetrieveProdReference = oVPMRoot\n\n        'Error handling\n        GoTo EndSub\nErrorSub:\n        MsgBox(Err.Description)\nEndSub:\n    End Function\n</code></pre>"},{"location":"DS-CODE/Functions/SearchProduct/","title":"SearchProduct","text":"<pre><code>Function SearchProduct(oSearchService) As PLMAccessIDLItf.DatabaseSearch\n        'Error handling\n        On Error GoTo ErrorSub\n\n        'Retrieves the Database attribute from Search service\n        Dim oDBSearch As PLMAccessIDLItf.DatabaseSearch\n        oDBSearch = oSearchService.DatabaseSearch\n\n        'Builds the Query criteria for Search on underlying database\n        'Prompts the user to input the PLM_ExternalID for search purpose\n        Dim strInputPLMIDName As String\n        strInputPLMIDName = InputBox(\"Please enter the PLM_ExternalID to search\", \"Enter PLM_ExternalID\")\n\n        'Prompts the user to input the revision for search purpose\n        Dim strInputRevision As String\n        strInputRevision = InputBox(\"Please enter the revision to search\", \"Enter revision\")\n\n        'Sets the type of objects to search for\n        oDBSearch.BaseType = strTheProductReferenceType\n\n        'Updates the PLM Search object created in the above steps with the attribute criteria provided by the user as an input\n        oDBSearch.AddEasyCriteria(\"PLM_ExternalID\", strInputPLMIDName)\n        oDBSearch.AddEasyCriteria(\"revision\", strInputRevision)\n\n        'Triggers the Search\n        oSearchService.Search()\n\n        'Valuates the output\n        SearchProduct = oDBSearch\n\n        'Error handling\n        GoTo EndSub\nErrorSub:\n        MsgBox(Err.Description)\nEndSub:\n\n    End Function\n</code></pre>"},{"location":"DS-CODE/Functions/auto%20dim/","title":"auto dim","text":"<pre><code>Sub CATMain()\n\nDim a, b, c, inn As String\n\n'inn = InputBox(\"\u8f93\u5165\u7c7b\u578b\uff1a 1_TUNNEL-RING-PW-BOTTOM  2_TUNNEL-RING-PW-F 3_TUNNEL-RING-PW-L1 4_TUNNEL-RING-PW-L2 5_TUNNEL-RING-PW-MIDDLE 6_TUNNEL-RING-PW-TOP\", \"TUNNEL_TYPE\", \"1\")\n'\n'If inn = 1 Then\n'    a = \"TUNNEL-RING-PW-BOTTOM\"\n'ElseIf inn = 2 Then\n'    a = \"TUNNEL-RING-PW-F\"\n'ElseIf inn = 3 Then\n'    a = \"TUNNEL-RING-PW-L1\"\n'ElseIf inn = 4 Then\n'    a = \"TUNNEL-RING-PW-L2\"\n'ElseIf inn = 5 Then\n'    a = \"TUNNEL-RING-PW-MIDDLE\"\n'ElseIf inn = 6 Then\n'    a = \"TUNNEL-RING-PW-TOP\"\n'End If\n\n'b = a + \".CATPart\"\n'c = a + \"-DRW-PLN.CATPart\"\n'D = a + \"-DRW.CATDrawing\"\n\nc = \"Part1.CATPart\"\nD = \"Drawing1.CATDrawing\"\nDebug.Print D\n\nDim windows1 As Windows\nSet windows1 = CATIA.Windows\n\nOn Error GoTo aaa\n\nDim specsAndGeomWindow1 As SpecsAndGeomWindow\nSet specsAndGeomWindow1 = windows1.Item(c)\n\nspecsAndGeomWindow1.Activate\n\nDim prtdoc As PartDocument\nSet prtdoc = CATIA.ActiveDocument\n\nDim part As part\nSet part = prtdoc.part\n\nDim hb As HybridBody\nSet hb = part.FindObjectByName(\"DIM_UDF\")\n\n'Dim NoLabelPos1(2) As Double\n'NoLabelPos1 = GetPointCoordinate(Pt1)\n'\n'Dim NoLabelPos2(2) As Double\n'NoLabelPos2 = GetPointCoordinate(Pt2)\n\nDim specsAndGeomWindow2 As SpecsAndGeomWindow\nSet specsAndGeomWindow2 = windows1.Item(D)\n\nspecsAndGeomWindow2.Activate\n\nDim drawingDocument1 As DrawingDocument\nSet drawingDocument1 = CATIA.ActiveDocument\n\nDim drawingSheets1 As DrawingSheets\nSet drawingSheets1 = drawingDocument1.Sheets\n\nDim drawingSheet1 As DrawingSheet\nSet drawingSheet1 = drawingSheets1.Item(\"\u5e73\u9762\")\n\nDim drawingViews1 As DrawingViews\nSet drawingViews1 = drawingSheet1.Views\n\nDim drawingView1 As DrawingView\nSet drawingView1 = drawingViews1.Item(\"V1\")\n' drawingViews1.Add (\"AutomaticNaming\")\ndrawingView1.Activate\n'MsgBox(drawingView1.Name)\n\nDim drawingViewGenerativeLinks1 As DrawingViewGenerativeLinks\nSet drawingViewGenerativeLinks1 = drawingView1.GenerativeLinks\n\nDim drawingViewGenerativeBehavior1 As DrawingViewGenerativeBehavior\nSet drawingViewGenerativeBehavior1 = drawingView1.GenerativeBehavior\n\n'MsgBox hb.HybridShapes.Count\n\nFor i = 1 To hb.HybridShapes.Count\n\nDim udf As HybridShapeInstance\nSet udf = hb.HybridShapes.Item(i)\n\nDim parms As Parameters\nSet parms = part.Parameters.SubList(udf, True)\n\nDim pa1 As Parameter\nSet pa1 = parms.Item(\"Type\")\n\nDim st1 As String\nst1 = pa1.ValueAsString\n\nIf st1 = \"OnePT\" Then\n\nDim pax As Parameter\nSet pax = parms.Item(\"x\")\n\nDim pay As Parameter\nSet pay = parms.Item(\"y\")\n\nDim stx As String: stx = pax.ValueAsString\nDim sty As String: sty = pay.ValueAsString\nDim pval1 As Parameter: Set pval1 = parms.Item(\"Val1\"): Dim Tval1 As String: Tval1 = pval1.ValueAsString\n\nCall CreateTxt(drawingView1, Tval1, Val(stx) * 1000, Val(sty) * 1000, CatTextAnchorPosition.catBaseLeft, 10, \"str1\")\n\nEnd If\n\nIf st1 = \"len\" Then\n\nDim NoLabelPos1() As Double: ReDim NoLabelPos1(2) As Double\nDim NoLabelPos2() As Double: ReDim NoLabelPos2(2) As Double\n\nNoLabelPos1(0) = Val(parms.Item(\"p1-x\").ValueAsString)\nNoLabelPos1(1) = Val(parms.Item(\"p1-y\").ValueAsString)\nNoLabelPos1(2) = Val(parms.Item(\"p1-z\").ValueAsString)\n\nNoLabelPos2(0) = Val(parms.Item(\"p2-x\").ValueAsString)\nNoLabelPos2(1) = Val(parms.Item(\"p2-y\").ValueAsString)\nNoLabelPos2(2) = Val(parms.Item(\"p2-z\").ValueAsString)\n\n'MsgBox NoLabelPos1(0) &amp; \"_\" &amp; NoLabelPos1(1) &amp; \"_\" &amp; NoLabelPos1(2) &amp; \"_\" &amp; NoLabelPos2(0) &amp; \"_\" &amp; NoLabelPos2(1) &amp; \"_\" &amp; NoLabelPos2(2)\n\nCall batchdimA(drawingView1, NoLabelPos1(0) * 1000, NoLabelPos1(1) * 1000, NoLabelPos2(0) * 1000, NoLabelPos2(1) * 1000)\n\nEnd If\n\nNext\n\n'Call CreateTxt(drawingView1, \"test\", -876, -988, CatTextAnchorPosition.catBaseLeft, 10, \"str1\")\n\npart.Update\n\naaa:\n\n\nMsgBox \"\u6807\u6ce8\u5b8c\u6210\uff0c\u8bf7\u68c0\u67e5\uff0c\u5982\u679c\u6807\u6ce8\u6ca1\u6709\u51fa\u73b0\uff0c\u8bf7\u68c0\u67e5\u6587\u4ef6\u540d\u7684\u5e8f\u53f7\u662f\u5426\u4e0e\u6253\u5f00\u7684\u6587\u4ef6\u76f8\u5bf9\u5e94.\", vbOKOnly, \"Warning\"\n\nEnd Sub\n\nFunction GetAnnoUDFType(ByVal part1 As part, ByVal udf1 As HybridShapeInstance) As String\n\nDim parms As Parameters\nSet parms = part1.Parameters.SubList(udf1, True)\n\nDim parm1 As Parameter\nSet parm1 = parms.Item(\"Type\")\n\nDim strType As String\nstrType = parm1.ValueAsString()\n\nGetAnnoUDFType = strType\n\nEnd Function\n\nFunction CreatePoint()\n\nEnd Function\n\n\nFunction CreateTxt(drawingView1 As DrawingView, icap As String, ix As Double, iy As Double, iAnch As CatTextAnchorPosition, iFontSize As Double, iName As String) As DrawingText\n\nDim iTexts As DrawingTexts\nSet iTexts = drawingView1.Texts\n\nSet CreateTxt = iTexts.Add(icap, ix, iy)\nCreateTxt.AnchorPosition = iAnch\n'CreateTxt.FontSize(0, 0, 5)\n'CreateTxt.SetFontName = \"FAWFONT\"\nCreateTxt.Name = \"name1\"\n\nDim MyLeader As DrawingLeader\nSet MyLeader = CreateTxt.Leaders.Add(ix, iy)\n\n\nEnd Function\n\n\nSub batchdimA(oView, p1x, p1y, p2x, p2y)\n\nDim oFac2D 'As Factory2D\nSet oFac2D = oView.Factory2D\n\n\nDim oPt1 'As Point2D\nDim oPt2 'As Point2D\nSet oPt1 = oFac2D.CreatePoint(p1x, p1y)\nSet oPt2 = oFac2D.CreatePoint(p2x, p2y)\n\nDim MyEle(1)\nMyEle(1) = Array(oPt1, oPt2)\n\nDim SelPts(3)\nSelPts(3) = Array(200, 200, 200, 200)\n\nDim oDrwDim 'As DrawingDimension\n'Set oDrawdim = oView.Dimensions.Add(catDimDistance, MyEle(1), SelPts(3), catDimHoriz)\nSet oDrawdim = oView.Dimensions.Add(catDimDistance, MyEle(1), SelPts(3), catDimAuto)\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/VBA/2D%E3%81%AE%E6%9B%B2%E7%B7%9A%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%97%E3%81%9F%E9%9A%9B%E3%80%81%E8%BF%91%E3%81%84%E5%81%B4%E3%81%AE%E7%AB%AF%E7%82%B9%E3%82%92%E5%8F%96%E5%BE%97/","title":"2D\u306e\u66f2\u7dda\u3092\u9078\u629e\u3057\u305f\u969b\u3001\u8fd1\u3044\u5074\u306e\u7aef\u70b9\u3092\u53d6\u5f97","text":"<p>CATIA_V5 VBA  \u300c2D\u306e\u66f2\u7dda\u3092\u9078\u629e\u3057\u305f\u969b\u3001\u8fd1\u3044\u5074\u306e\u7aef\u70b9\u3092\u53d6\u5f97\u3057\u305f\u3044\u300d\u3068\u306e\u76f8\u8ac7\u3092 \u9802\u304d\u307e\u3057\u305f\u3002 \u901a\u5e38\u8981\u7d20\u306e\u9078\u629e\u3067\u3042\u308c\u3070\u3001Selection.SelectElement2\u304c\u6b86\u3069\u306a\u306e\u3067\u3059\u304c\u3001 \u4eca\u56de\u306e\u5834\u5408\u306f\u3001Selection.IndicateOrSelectElement2D\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u7406\u7531\u306f\u5358\u7d14\u3067\u3001\u30af\u30ea\u30c3\u30af\u3057\u305f\u4f4d\u7f6e\u306e\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b\u70ba\u3067\u3059\u3002 \u30af\u30ea\u30c3\u30af\u3057\u305f\u4f4d\u7f6e\u3055\u3048\u53d6\u5f97\u51fa\u6765\u308c\u3070\u3001\u5f8c\u306f2\u3064\u306e\u7aef\u70b9\u3068\u306e\u8ddd\u96e2\u3092\u6bd4\u8f03\u3057 \u77ed\u3044\u65b9\u304c\u8fd1\u3044\u7aef\u70b9\u3068\u5224\u65ad\u51fa\u6765\u307e\u3059\u3002 <pre><code>'vba 2D\u306e\u7dda\u3092\u9078\u629e\u3057\u305f\u969b\u3001\u8fd1\u3044\u5074\u306e\u7aef\u70b9\u3092\u53d6\u5f97\nOption Explicit\nSub CATMain()\nDim doc As DrawingDocument\n    Set doc = CATIA.ActiveDocument\n\n    Dim vi As DrawingView\n    Set vi = doc.Sheets.ActiveSheet.views.ActiveView\n\n    Do\n        '\u9078\u629e\u5f8c\u306f\u914d\u5217\u304c\u8fd4\u3063\u3066\u304d\u3066\n        'crv_near(0)-\u9078\u629e\u3057\u305f\u7dda\n        'crv_near(1)-\u8fd1\u3044\u5074\u306e\u7aef\u70b9(Point2D)\n        Dim crv_near As Variant\n        crv_near = GetNearPoint()\n\n        If IsEmpty(crv_near) Then\n            Exit Do\n        End If\n        Call initCircle(crv_near(1))\n    Loop\n\n    vi.Activate\n\n    MsgBox \"Done\"\n\nEnd Sub\n'*** 2D\u7dda\u3092\u9078\u629e - \u9078\u629e\u3057\u305f\u66f2\u7dda\u3068\u8fd1\u3044\u5074\u306e\u7aef\u70b9\u53d6\u5f97 ***\n'return array(Curve2D,Point2D)\nPrivate Function GetNearPoint() As Variant\nDim doc As DrawingDocument\n    Set doc = CATIA.ActiveDocument\n\n    Dim sel As Variant ' Selection\n    Set sel = doc.selection\n    sel.Clear\n\n    '\u5ea7\u6a19\u9078\u629e\n    Dim status As String\n    Dim ObjectSelected\n    Dim WindowLocation(1)\n    Dim filter As Variant\n    filter = Array(\"Curve2D\")\n\n    'WindowLocation\u306e\u5ea7\u6a19\u5024\u306f\uff71\uff78\uff83\uff68\uff8c\uff9e\u30d3\u30e5\u30fc\u306b\u5bfe\u3057\u3066\u306e\u5ea7\u6a19\u5024\n    status = \"MouseMove\"\n    Dim pos As Variant\n    Do While (status = \"MouseMove\")\n        status = sel.IndicateOrSelectElement2D( _\n            \"\u7dda\u3092\u9078\u629e/\u30ad\u30e3\u30f3\u30bb\u30eb ESC\", _\n            filter, _\n            False, _\n            False, _\n            True, _\n            ObjectSelected, _\n            WindowLocation)\n        If Not ObjectSelected Then\n            pos = WindowLocation\n        End If\n    Loop\n\n    'ESC\u30ad\u30fc\n    If sel.Count2 &lt; 1 Then\n        Exit Function\n    End If\n\n    '\u9078\u629e\u3057\u305f\u7dda\n    Dim crv As Curve2D\n    Set crv = sel.Item(1).Value\n\n    '*** \u30af\u30ea\u30c3\u30af\u4f4d\u7f6e\u306e\u5ea7\u6a19 ***\n    '\uff71\uff78\uff83\uff68\uff8c\uff9e\uff8b\uff9e\uff6d\uff70\n    Dim ac As DrawingView\n    Set ac = doc.Sheets.ActiveSheet.views.ActiveView\n\n    '\uff80\uff70\uff79\uff9e\uff6f\uff84\uff8b\uff9e\uff6d\uff70\n    Dim tg As DrawingView\n    Set tg = crv.Parent.Parent\n'\uff8b\uff9e\uff6d\uff70\u9593\uff8d\uff9e\uff78\uff84\uff99\n    Dim tran_vec As Variant\n    tran_vec = GetTransVec(ac, tg)\n\n    '\u8a72\u5f53\u3059\u308b\uff8b\uff9e\uff6d\uff70\u306e\u5ea7\u6a19\u306b\u5909\u63db\n    pos = Add2d(tran_vec, pos)\n\n    '*** \u30af\u30ea\u30c3\u30af\u4f4d\u7f6e\u3068\u7aef\u70b9\u6bd4\u8f03 ***\n    'crv\u306eVariant\n    Dim crvVri As Variant\n    Set crvVri = crv\n\n    '\u59cb\u70b9\u5ea7\u6a19\u5024\n    Dim pos1(1) As Variant\n    Call crvVri.StartPoint.GetCoordinates(pos1)\n\n    '\u7d42\u70b9\u5ea7\u6a19\u5024\n    Dim pos2(1) As Variant\n    Call crvVri.EndPoint.GetCoordinates(pos2)\n\n    '\u8ddd\u96e2\u6bd4\u8f03\n    Dim res As Variant\n    If LengSqr(pos, pos1) &gt; LengSqr(pos, pos2) Then\n        res = Array(crv, crv.EndPoint)\n    Else\n        res = Array(crv, crv.StartPoint)\n    End If\n\n    GetNearPoint = res\n\nEnd Function\n'\uff8b\uff9e\uff6d\uff70\u9593\uff8d\uff9e\uff78\uff84\uff99\nPrivate Function GetTransVec( _\n    ByVal act_v As DrawingView, _\n    ByVal tgt_v As DrawingView) As Variant\n\n    GetTransVec = Sub2d( _\n        Array(act_v.xAxisData, act_v.yAxisData), _\n        Array(tgt_v.xAxisData, tgt_v.yAxisData))\nEnd Function\n'\u548c2D\nPrivate Function Add2d( _\n    ByVal V1 As Variant, _\n    ByVal V2 As Variant) As Variant\n\n    Add2d = Array(V1(0) + V2(0), V1(1) + V2(1))\nEnd Function\n'\u5dee2D\nPrivate Function Sub2d( _\n    ByVal V1 As Variant, _\n    ByVal V2 As Variant) As Variant\n\n    Sub2d = Array(V1(0) - V2(0), V1(1) - V2(1))\nEnd Function\n'2\u70b9\u8ddd\u96e2\u306e\u5e73\u65b9\u6570\nPrivate Function LengSqr( _\n    ByVal p1 As Variant, _\n    ByVal p2 As Variant) As Double\n\n    Dim A#: A = p2(0) - p1(0)\n    Dim B#: B = p2(1) - p1(1)\n    LengSqr = A * A + B * B\nEnd Function\n'***************\n'\u78ba\u8a8d\u7528\u3000\u70b9\u3092\u4e2d\u5fc3\u306b\u5186\u3092\u63cf\u304f\nPrivate Sub initCircle( _\n    ByVal pnt As Point2D)\n\n    Dim vi As DrawingView\n    Set vi = pnt.Parent.Parent\n    vi.Activate '\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u3059\u308b\u5fc5\u8981\u6709\u308a\n\n    Dim fact As Factory2D\n    Set fact = vi.Factory2D\n\n    Dim pntVri As Variant\n    Set pntVri = pnt\n\n    Dim pos(1)\n    Call pntVri.GetCoordinates(pos)\n\n    Dim crl As Circle2D\n    Set crl = fact.CreateClosedCircle(pos(0), pos(1), 5#)\n\n    crl.CenterPoint = pnt\nEnd Sub\n</code></pre></p> <p>LengSqr\u95a2\u6570(\u4eca\u898b\u308b\u3068\u30a4\u30de\u30a4\u30c1\u306a\u540d\u79f0\u3067\u3059\u2026)\u3067\u3059\u304c\u3001\u914d\u5217\u3092\u70b9\u5ea7\u6a19\u3068 \u60f3\u5b9a\u30572\u70b9\u9593\u8ddd\u96e2\u306e\u5e73\u65b9\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 \u3053\u306e\u65b9\u6cd5\u306f\u3001C# OpenGL\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u300c\u30d2\u30b9\u30a4\u300d\u3067\u5b66\u3073\u307e\u3057\u305f\u3002 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u306f\u4eba\u306b\u6bd4\u3079\u308c\u3070\u8a08\u7b97\u306f\u9ad8\u901f\u3067\u3059\u304c\u3001\u5168\u3066\u540c\u4e00\u901f\u5ea6\u3067 \u51e6\u7406\u3055\u308c\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3082\u4e8b\u5b9f\u3067\u3059\u3002\u5e73\u65b9\u6839\u306e\u6f14\u7b97\u3082\u6642\u9593\u306e\u304b\u304b\u308b (\u30b3\u30b9\u30c8\u306e\u9ad8\u3044)\u51e6\u7406\u3089\u3057\u3044\u3067\u3059\u3002 2\u70b9\u9593\u306e\u6b63\u3057\u3044\u8ddd\u96e2\u3092\u6f14\u7b97\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u5e73\u65b9\u6839\u306e\u6f14\u7b97\u304c\u5fc5\u8981\u3068\u306a\u308a \u307e\u3059\u304c\uff08\u5e73\u65b9\u6839\u3092\u907f\u3051\u305f\u8fd1\u4f3c\u6f14\u7b97\u5f0f\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u77e5\u308a\u307e\u305b\u3093\uff09 \u4eca\u56de\u306e\u3088\u3046\u306b\u300c\u3069\u3061\u3089\u306e\u70b9\u304c\u8fd1\u3044\u306e\u304b\u306a\uff1f\u300d\u3068\u8a00\u3046\u51e6\u7406\u306b\u95a2\u3057\u3066\u8a00\u3048\u3070 \u5e73\u65b9\u6839\u3092\u6f14\u7b97\u3057\u306a\u304f\u3066\u3082\u3001\u8aa4\u3063\u305f\u7d50\u679c\u306b\u306f\u306a\u3089\u306a\u3044\u3067\u3059\u3002 \uff08\u7d50\u679c\u304c\u9006\u8ee2\u3059\u308b\u4e8b\u306f\u7121\u3044\uff09 \u3068\u306f\u8a00\u3048\u3001\u300c\u3053\u306e\u7a0b\u5ea6\u306e\u51e6\u7406\u306b\u305d\u3053\u307e\u3067\u6c17\u306b\u3059\u308b\u5fc5\u8981\u3042\u308b\u306e\uff1f\u300d\u3068\u3082 \u53d7\u3051\u53d6\u308c\u308b\u306e\u3067\u3059\u304c\u30fb\u30fb\u30fb\u3002 \u4f59\u8ac7\u3067\u3059\u304c\u3001\u300c\u30d2\u30b9\u30a4\u300d\u306e\u516c\u958b\u304c\u7121\u304f\u306a\u3063\u3066\u3044\u305f\u3093\u3067\u3059\u306d\u3002 \u682a\u5f0f\u4f1a\u793e\u30ab\u30bf\u30c3\u30c1 \u958b\u767a\u3055\u308c\u305f\u65b9\u306f\u3001\u65e2\u306b\u9000\u793e\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u4ed5\u65b9\u306a\u3044\u306e\u306f\u78ba\u304b\u3067\u3059\u304c\u3002 kandennti 2019-11-26 11:37 </p>"},{"location":"DS-CODE/VBA/CreateBridgeSkeleton/","title":"Create Bridge Skeleton","text":""},{"location":"DS-CODE/VBA/CreatePointFromExcel/","title":"CreatePointFromExcel","text":"<pre><code>Imports System\nImports excel = Microsoft.Office.Interop.Excel\nImports HybridShapeTypeLib\nImports MECMOD\nImports KnowledgewareTypeLib\n\nPartial Public NotInheritable Class ThisApplication\n    Inherits ObjectModelAgentLib.CATIAEntryPoint\n\n    Public Shared Sub CATMain()\n        'Debug entry point, not visible from the host\n        CATIA.SystemService.PrintToStdout(\"Hello, World! VB.NET\")\n\n        Dim xlsapp As Microsoft.Office.Interop.Excel.Application = GetObject(, \"Excel.Application\")\n        Dim sheet As excel.Worksheet = xlsapp.ActiveSheet\n\n        Dim part As MECMOD.Part = CATIA.ActiveEditor.ActiveObject\n        Dim hsf As HybridShapeTypeLib.HybridShapeFactory = part.HybridShapeFactory\n\n        Dim hb As HybridBody\n        hb = part.HybridBodies.Add\n\n\n        Dim i As Integer = 1\n\n        Dim x, y, z As Double\n        For i = 1 To 35\n            x = sheet.Cells(i + 2, 11).value\n            y = sheet.Cells(i + 2, 12).value\n            z = sheet.Cells(i + 2, 13).value\n\n            Dim pt As Point = hsf.AddNewPointCoord(x, y, z)\n            pt.Compute()\n            hb.AppendHybridShape(pt)\n\n        Next\n    End Sub\n\nEnd Class\n</code></pre> <pre><code>    println!(\"Hello, world!\");\n</code></pre>"},{"location":"DS-CODE/VBA/CreateShortcut/","title":"Create Shortcut","text":"<pre><code>import rhinoscriptsyntax as rs\nimport System\nfrom System.IO import Path\n\ndef CreateShortcut():\n\"\"\"\n    Create a shortcut to the current document\n    NOTE!! This function only runs on Windows\n    \"\"\"\n    if( not rs.IsRunningOnWindows() ):\n        rs.MessageBox(\"CreateShortcut.py only runs on Windows\", 48, \"Script Error\")\n        return\n\n    # Get the document name and path\n    name = rs.DocumentName()\n    path = rs.DocumentPath()\n\n    # Get the Windows Scripting Host's Shell object\n    objShell = System.Activator.CreateInstance(System.Type.GetTypeFromProgID(\"WScript.Shell\"))\n    # Get the desktop folder\n    desktop = objShell.SpecialFolders(\"Desktop\")\n    # Make a new shortcut\n    ShellLink = objShell.CreateShortcut(desktop + \"\\\\\" + name + \".lnk\")\n    ShellLink.TargetPath = Path.Combine(path, name)\n    ShellLink.WindowStyle = 1\n    ShellLink.IconLocation = rs.ExeFolder() + \"Rhino4.exe, 0\"\n    ShellLink.Description = \"Shortcut to \" + name\n    ShellLink.WorkingDirectory = path\n    ShellLink.Save()\n\n##########################################################################\n# Check to see if this file is being executed as the \"main\" python\n# script instead of being used as a module by some other python script\n# This allows us to use the module which ever way we want.\nif( __name__ == '__main__' ):\n    #call function defined above\n    CreateShortcut()\n</code></pre>"},{"location":"DS-CODE/VBA/DRW_DIME/","title":"DRW_DIME","text":"<pre><code>Sub CATMain()\n\nDim oSht\nSet oSht = CATIA.ActiveEditor.ActiveObject.Sheets.Item(1)\nCATIA.ActiveEditor.ActiveObject.ActiveSheet = oSht\n\nDebug.Print oSht.Name\n\nDim cDrawingViews As DrawingViews\nSet cDrawingViews = oSht.Views\n\nDebug.Print cDrawingViews.Name\n\n\nDim MyView As DrawingView\nSet MyView = oSht.Views.ActiveView\n\nDim Fact2D  As Factory2D\nSet Fact2D = MyView.Factory2D\n\n'Dim Line1 As Line2D\n'Dim Line2 As Line2D\n'Set Line1 = Fact2D.CreateLine(50, 10, 150, 10)\n'Set Line2 = Fact2D.CreateLine(50, 10, 120, 100)\n'\n'\n'Dim Point1 As Point2D\n'Dim Point2 As Point2D\n'\n'Set Point1 = Fact2D.CreatePoint(-10, 190)\n'Set Point2 = Fact2D.CreatePoint(-120, 90)\n'\n'Dim iType As CatDimType\n'iType = catDimAngle\n'\n' Dim myElements1(1)\n' myElements1(1) = Array(Line1, Line2)\n' Dim selpoints(3)\n' selpoints(3) = Array(150, 10, 120, 100)\n' Dim MyDimension1 'As DrawingDimension\n' Set MyDimension1 = MyView.Dimensions.Add(iType, myElements1(1), selpoints(3), catDimAuto)\n'\n iType = catDimLengthCurvilinear\n\n If MyView.GeometricElements.Count &gt;= 1 Then\n    For i = 1 To MyView.GeometricElements.Count\n        Debug.Print MyView.GeometricElements.Item(i).Name\n    Next\nEnd If\n\nMsgBox MyView.Components.Count\n\n   ' Gets the Part Product Parameters\n\n\nDim proRootOcc 'As VPMRootOccurrence\nSet proRootOcc = CATIA.ActiveEditor.ActiveObject\n\nDim prodRootRef 'As VPMReference\nSet prodRootRef = proRootOcc.ReferenceRootOccurrenceOf\n\nDim PartInst 'As VPMInstance\nSet PartInst = prodRootRef.Instances.Item(prodRootRef.Instances.Count)\n\nDim PartRef 'As VPMReference\nSet PartRef = PartInst.ReferenceInstanceOf\n\nDim VPMRefInst 'As VPMRepInstance\nSet VPMRefInst = PartRef.RepInstances.Item(1)\n\nDim VPMRefRef 'As VPMRepReference\nSet VPMRefRef = VPMRefInst.ReferenceInstanceOf\n\nDim oPart 'As Part\nSet oPart = VPMRefRef.GetItem(\"Part\")\nDim myParameters 'As Parameters\nSet myParameters = oPart.Parameters\n\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/VBA/Delete2DEle/","title":"Delete2D Object","text":"<pre><code>Sub delete2d()\n\n    Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\")\n    Dim KPColl As New Collection\n    catia.ActiveEditor.Selection.Clear()\n    catia.ActiveEditor.Selection.Selection.Search(\".'2D Component Instance'\")\n    'catia.ActiveEditor.Selection.Selection.Search(\".'Dimension'\")\n    ' catia.ActiveEditor.Selection.Selection.Search(\".'Text'\")\n    'Text\n\n    For LoopNum = 1 To catia.ActiveEditor.Selection.Count\n        Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value)\n    Next\n\n    For LoopNum = 1 To KPColl.Count\n        catia.ActiveEditor.Selection.Clear()\n        catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum))\n        catia.ActiveEditor.Selection.Delete()\n    Next\n\n    MsgBox(\"Finished Delete All Object.\")\n\n    catia.ActiveEditor.Selection.Clear()\n    KPColl.Clear()\n    catia = Nothing\n\nEnd Sub\n\nSub deletetxt()\n\n    Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\")\n    Dim KPColl As New Collection\n    catia.ActiveEditor.Selection.Clear()\n    catia.ActiveEditor.Selection.Selection.Search(\".'Text'\")\n\n    For LoopNum = 1 To catia.ActiveEditor.Selection.Count\n        Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value)\n    Next\n\n    For LoopNum = 1 To KPColl.Count\n        catia.ActiveEditor.Selection.Clear()\n        catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum))\n        catia.ActiveEditor.Selection.Delete()\n    Next\n\n    MsgBox(\"Finished Delete All Object.\")\n\n    catia.ActiveEditor.Selection.Clear()\n    KPColl.Clear()\n    catia = Nothing\n\nEnd Sub\n\nSub deletedim()\n    Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\")\n    Dim KPColl As New Collection\n    catia.ActiveEditor.Selection.Clear()\n    catia.ActiveEditor.Selection.Selection.Search(\".'Dimension'\")\n\n    For LoopNum = 1 To catia.ActiveEditor.Selection.Count\n        Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value)\n    Next\n\n    For LoopNum = 1 To KPColl.Count\n        catia.ActiveEditor.Selection.Clear()\n        catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum))\n        catia.ActiveEditor.Selection.Delete()\n    Next\n\n    MsgBox(\"Finished Delete All Object.\")\n\n    catia.ActiveEditor.Selection.Clear()\n    KPColl.Clear()\n    catia = Nothing\n\nEnd Sub\n\n\n\nSub deletehatch()\n\n    Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\")\n    Dim KPColl As New Collection\n    catia.ActiveEditor.Selection.Clear()\n    catia.ActiveEditor.Selection.Selection.Search(\"CATDrwSearch.CATEarlyGenShape,all\")\n\n    For LoopNum = 1 To catia.ActiveEditor.Selection.Count\n        Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value)\n    Next\n\n    For LoopNum = 1 To KPColl.Count\n        catia.ActiveEditor.Selection.Clear()\n        catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum))\n        catia.ActiveEditor.Selection.Delete()\n    Next\n\n    MsgBox(\"Finished Delete All Object.\")\n\n    catia.ActiveEditor.Selection.Clear()\n    KPColl.Clear()\n    catia = Nothing\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/VBA/DeleteAllDimension/","title":"DeleteAllDimension","text":""},{"location":"DS-CODE/VBA/DeleteAllDimension/#2d","title":"\u5220\u96642D\u90e8\u4ef6","text":"<pre><code>  Sub delete2d()\n\n        Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\")\n        Dim KPColl As New Collection\n        catia.ActiveEditor.Selection.Clear()\n        catia.ActiveEditor.Selection.Selection.Search(\".'2D Component Instance'\")\n        'catia.ActiveEditor.Selection.Selection.Search(\".'Dimension'\")\n        ' catia.ActiveEditor.Selection.Selection.Search(\".'Text'\")\n        'Text\n\n        For LoopNum = 1 To catia.ActiveEditor.Selection.Count\n            Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value)\n        Next\n\n        For LoopNum = 1 To KPColl.Count\n            catia.ActiveEditor.Selection.Clear()\n            catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum))\n            catia.ActiveEditor.Selection.Delete()\n        Next\n\n        MsgBox(\"Finished Delete All Object.\")\n\n        catia.ActiveEditor.Selection.Clear()\n        KPColl.Clear()\n        catia = Nothing\n\n    End Sub\n</code></pre>"},{"location":"DS-CODE/VBA/DeleteAllDimension/#text","title":"\u5220\u9664text","text":"<pre><code>    Sub deletetxt()\n\n        Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\")\n        Dim KPColl As New Collection\n        catia.ActiveEditor.Selection.Clear()\n        catia.ActiveEditor.Selection.Selection.Search(\".'Text'\")\n\n        For LoopNum = 1 To catia.ActiveEditor.Selection.Count\n            Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value)\n        Next\n\n        For LoopNum = 1 To KPColl.Count\n            catia.ActiveEditor.Selection.Clear()\n            catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum))\n            catia.ActiveEditor.Selection.Delete()\n        Next\n\n        MsgBox(\"Finished Delete All Object.\")\n\n        catia.ActiveEditor.Selection.Clear()\n        KPColl.Clear()\n        catia = Nothing\n\n    End Sub\n</code></pre>"},{"location":"DS-CODE/VBA/DeleteAllDimension/#dimension","title":"\u5220\u9664dimension","text":"<pre><code>    Sub deletedim()\n        Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\")\n        Dim KPColl As New Collection\n        catia.ActiveEditor.Selection.Clear()\n        catia.ActiveEditor.Selection.Selection.Search(\".'Dimension'\")\n\n        For LoopNum = 1 To catia.ActiveEditor.Selection.Count\n            Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value)\n        Next\n\n        For LoopNum = 1 To KPColl.Count\n            catia.ActiveEditor.Selection.Clear()\n            catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum))\n            catia.ActiveEditor.Selection.Delete()\n        Next\n\n        MsgBox(\"Finished Delete All Object.\")\n\n        catia.ActiveEditor.Selection.Clear()\n        KPColl.Clear()\n        catia = Nothing\n\n    End Sub\n</code></pre>"},{"location":"DS-CODE/VBA/DeleteAllDimension/#_1","title":"\u5220\u9664\u586b\u5145","text":"<pre><code>    Sub deletehatch()\n\n        Dim catia As INFITF.Application = GetObject(, \"CATIA.Application\")\n        Dim KPColl As New Collection\n        catia.ActiveEditor.Selection.Clear()\n        catia.ActiveEditor.Selection.Selection.Search(\"CATDrwSearch.CATEarlyGenShape,all\")\n\n        For LoopNum = 1 To catia.ActiveEditor.Selection.Count\n            Call KPColl.Add(catia.ActiveEditor.Selection.Item(LoopNum).Value)\n        Next\n\n        For LoopNum = 1 To KPColl.Count\n            catia.ActiveEditor.Selection.Clear()\n            catia.ActiveEditor.Selection.Add(KPColl.Item(LoopNum))\n            catia.ActiveEditor.Selection.Delete()\n        Next\n\n        MsgBox(\"Finished Delete All Object.\")\n\n        catia.ActiveEditor.Selection.Clear()\n        KPColl.Clear()\n        catia = Nothing\n\n    End Sub\n</code></pre>"},{"location":"DS-CODE/VBA/Drafting-case-studies/","title":"Drafting case studies","text":"<pre><code>oCatiaDoc = CATIA.ActiveDocument\n\n'\u5b9a\u4e49\u9009\u62e9\u96c6\nDim oSelection As Selection\noSelection = oCatiaDoc.Selection\n\nDim RootPart As Part\nRootPart = oCatiaDoc.Part\n\nDim oHSF As HybridShapeFactory\noHSF = RootPart.HybridShapeFactory\n\nDim iRefSurface As HybridShapeSurfaceExplicit\n'iRefSurface = SelSurface()\n\nDim iHBody As HybridBody\niHBody = SelHybridBody()\n\nDim i As Integer\ni = 1\n\nFor Each oEle In iHBody.HybridShapes\n\n    iRefSurface = oEle\n    Dim oHbody As HybridBody\n    oHbody = RootPart.HybridBodies.Add\n    oHbody.Name = \"TemHBody\"\n\n    oSelection.Clear()\n    oSelection.Add(iRefSurface)\n    oSelection.Search(\"\u62d3\u6251.\u8fb9\u7ebf,sel\")\n\n    Dim iRefLine0 As Reference\n    iRefLine0 = oSelection.Item(21).Value\n\n    oSelection.Clear()\n    oSelection.Add(iRefSurface)\n    oSelection.Search(\"\u62d3\u6251.\u9876\u70b9,sel\")\n\n    Dim oPt0_1 As Reference\n    oPt0_1 = oSelection.Item(15).Value\n\n    Dim oPt0_2 As Reference\n    oPt0_2 = oSelection.Item(16).Value\n\n    oSelection.Clear()\n\n    '\u521b\u5efa\u66f2\u9762\u4f4d\u7f6e\u8f74\u7cfb\n    '----------------------------------------------------------------\n    '\u8f74\u7cfb\u539f\u70b9\n    Dim oPt0 As HybridShapePointOnCurve\n    oPt0 = oHSF.AddNewPointOnCurveFromPercent(iRefLine0, 0.5, True)\n    oHbody.AppendHybridShape(oPt0)\n    RootPart.UpdateObject(oPt0)\n    oHSF.GSMVisibility(oPt0, 0)\n\n    '\u53c2\u8003X\u65b9\u5411\n    Dim oRefLine0 As HybridShapeLinePtPt\n    oRefLine0 = oHSF.AddNewLinePtPt(oPt0_1, oPt0_2)\n    oHbody.AppendHybridShape(oRefLine0)\n    RootPart.UpdateObject(oRefLine0)\n    oHSF.GSMVisibility(oRefLine0, 0)\n\n    Dim oAxisSystems As AxisSystems\n    oAxisSystems = RootPart.AxisSystems\n\n    RootPart.InWorkObject = oHbody\n\n    '\u6dfb\u52a0\u8f74\u7cfb\n    Dim oAxisSys1 As AxisSystem\n    oAxisSys1 = oAxisSystems.Add\n    oAxisSys1.OriginPoint = oPt0\n    oAxisSys1.XAxisDirection = oRefLine0\n    RootPart.UpdateObject(oAxisSys1)\n\n    '----------------------------------------------------------------\n    '\u83b7\u53d6\u7edd\u5bf9\u8f74\u7cfb\n    Dim oAxisSys2 As AxisSystem\n    oAxisSys2 = oAxisSystems.Item(1)\n\n    Dim oRefAxis1 As Reference\n    oRefAxis1 = RootPart.CreateReferenceFromObject(oAxisSys1)\n    Dim oRefAxis2 As Reference\n    oRefAxis2 = RootPart.CreateReferenceFromObject(oAxisSys2)\n\n    '\u8f74\u7cfb\u53d8\u6362\n    Dim oHBAxisToAxis As HybridShapeAxisToAxis\n    oHBAxisToAxis = oHSF.AddNewAxisToAxis(iRefSurface, oRefAxis1, oRefAxis2)\n    oHBAxisToAxis.VolumeResult = False\n    oHbody.AppendHybridShape(oHBAxisToAxis)\n    RootPart.UpdateObject(oHBAxisToAxis)\n    oHSF.GSMVisibility(oHBAxisToAxis, 0)\n\n    ''\u9694\u79bb\u8f74\u7cfb\u53d8\u6362\n    'Dim oTSurface As HybridShapeSurfaceExplicit\n    'oTSurface = oHSF.AddNewSurfaceDatum(oHBAxisToAxis)\n    'iHbody.AppendHybridShape(oTSurface)\n    'RootPart.UpdateObject(oTSurface)\n\n    '\u5c55\u5f00\u66f2\u9762\u5143\u7d20\u83b7\u53d6\n    '---------------------------------------------------------------------------\n    oSelection.Clear()\n    oSelection.Add(oHBAxisToAxis)\n    oSelection.Search(\"\u62d3\u6251.\u8fb9\u7ebf,sel\")\n\n    Dim iRefLine As Reference\n    iRefLine = oSelection.Item(21).Value\n\n    oSelection.Clear()\n    oSelection.Add(oHBAxisToAxis)\n    oSelection.Search(\"\u62d3\u6251.\u9876\u70b9,sel\")\n\n    Dim oPt1_1 As Reference\n    oPt1_1 = oSelection.Item(15).Value\n    Dim oPt1_2 As Reference\n    oPt1_2 = oSelection.Item(18).Value\n\n    Dim oPt2_1 As Reference\n    oPt2_1 = oSelection.Item(7).Value\n    Dim oPt2_2 As Reference\n    oPt2_2 = oSelection.Item(14).Value\n\n    Dim oPt3_1 As Reference\n    oPt3_1 = oSelection.Item(6).Value\n    Dim oPt3_2 As Reference\n    oPt3_2 = oSelection.Item(12).Value\n\n    Dim oPt4_1 As Reference\n    oPt4_1 = oSelection.Item(16).Value\n    Dim oPt4_2 As Reference\n    oPt4_2 = oSelection.Item(17).Value\n\n    Dim oPt5_1 As Reference\n    oPt5_1 = oSelection.Item(2).Value\n    Dim oPt5_2 As Reference\n    oPt5_2 = oSelection.Item(13).Value\n\n    Dim oPt6_1 As Reference\n    oPt6_1 = oSelection.Item(3).Value\n    Dim oPt6_2 As Reference\n    oPt6_2 = oSelection.Item(11).Value\n\n    Dim oPt7_1 As Reference\n    oPt7_1 = oSelection.Item(10).Value\n    Dim oPt7_2 As Reference\n    oPt7_2 = oSelection.Item(9).Value\n\n    oSelection.Clear()\n\n    Dim oLine1 As HybridShapeLinePtPt\n    oLine1 = oHSF.AddNewLinePtPt(oPt1_1, oPt1_2)\n    oHbody.AppendHybridShape(oLine1)\n    RootPart.UpdateObject(oLine1)\n    oHSF.GSMVisibility(oLine1, 0)\n\n    Dim oLine2 As HybridShapeLinePtPt\n    oLine2 = oHSF.AddNewLinePtPt(oPt2_1, oPt2_2)\n    oHbody.AppendHybridShape(oLine2)\n    RootPart.UpdateObject(oLine2)\n    oHSF.GSMVisibility(oLine2, 0)\n\n    Dim oLine3 As HybridShapeLinePtPt\n    oLine3 = oHSF.AddNewLinePtPt(oPt3_1, oPt3_2)\n    oHbody.AppendHybridShape(oLine3)\n    RootPart.UpdateObject(oLine3)\n    oHSF.GSMVisibility(oLine3, 0)\n\n    Dim oLine4 As HybridShapeLinePtPt\n    oLine4 = oHSF.AddNewLinePtPt(oPt4_1, oPt4_2)\n    oHbody.AppendHybridShape(oLine4)\n    RootPart.UpdateObject(oLine4)\n    oHSF.GSMVisibility(oLine4, 0)\n\n    Dim oLine5 As HybridShapeLinePtPt\n    oLine5 = oHSF.AddNewLinePtPt(oPt5_1, oPt5_2)\n    oHbody.AppendHybridShape(oLine5)\n    RootPart.UpdateObject(oLine5)\n    oHSF.GSMVisibility(oLine5, 0)\n\n    Dim oLine6 As HybridShapeLinePtPt\n    oLine6 = oHSF.AddNewLinePtPt(oPt6_1, oPt6_2)\n    oHbody.AppendHybridShape(oLine6)\n    RootPart.UpdateObject(oLine6)\n    oHSF.GSMVisibility(oLine6, 0)\n\n    '\u5c55\u5f00\u4f4d\u7f6e\u70b9\n    Dim oPt As HybridShapePointOnCurve\n    oPt = oHSF.AddNewPointOnCurveFromPercent(iRefLine, 0.5, True)\n    oHbody.AppendHybridShape(oPt)\n    RootPart.UpdateObject(oPt)\n    oHSF.GSMVisibility(oPt, 0)\n\n    '\u5c55\u5f00\u65b9\u5411\n    Dim oRefLine As HybridShapeLinePtPt\n    oRefLine = oHSF.AddNewLinePtPt(oPt1_1, oPt4_1)\n    oHbody.AppendHybridShape(oRefLine)\n    RootPart.UpdateObject(oRefLine)\n    oHSF.GSMVisibility(oRefLine, 0)\n\n    '\u5c55\u5f00\u70b9\n    Dim oPt1 As HybridShapePointCoord\n    oPt1 = oHSF.AddNewPointCoord(0, 0, 0)\n    oPt1.PtRef = oPt1_2\n    oPt1.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2)\n    oHbody.AppendHybridShape(oPt1)\n    RootPart.UpdateObject(oPt1)\n    oHSF.GSMVisibility(oPt1, 0)\n\n    Dim oPt2 As HybridShapePointCoord\n    oPt2 = oHSF.AddNewPointCoord(0, 0, 0)\n    oPt2.PtRef = oPt2_2\n    oPt2.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2)\n    oHbody.AppendHybridShape(oPt2)\n    RootPart.UpdateObject(oPt2)\n    oHSF.GSMVisibility(oPt2, 0)\n\n    Dim oPt3 As HybridShapePointCoord\n    oPt3 = oHSF.AddNewPointCoord(0, 0, 0)\n    oPt3.PtRef = oPt3_2\n    oPt3.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2)\n    oHbody.AppendHybridShape(oPt3)\n    RootPart.UpdateObject(oPt3)\n    oHSF.GSMVisibility(oPt3, 0)\n\n    Dim oPt4 As HybridShapePointCoord\n    oPt4 = oHSF.AddNewPointCoord(0, 0, 0)\n    oPt4.PtRef = oPt4_2\n    oPt4.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2)\n    oHbody.AppendHybridShape(oPt4)\n    RootPart.UpdateObject(oPt4)\n    oHSF.GSMVisibility(oPt4, 0)\n\n    Dim oPt5 As HybridShapePointCoord\n    oPt5 = oHSF.AddNewPointCoord(0, 0, 0)\n    oPt5.PtRef = oPt5_2\n    oPt5.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2)\n    oHbody.AppendHybridShape(oPt5)\n    RootPart.UpdateObject(oPt5)\n    oHSF.GSMVisibility(oPt5, 0)\n\n    Dim oPt6 As HybridShapePointCoord\n    oPt6 = oHSF.AddNewPointCoord(0, 0, 0)\n    oPt6.PtRef = oPt6_2\n    oPt6.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2)\n    oHbody.AppendHybridShape(oPt6)\n    RootPart.UpdateObject(oPt6)\n    oHSF.GSMVisibility(oPt6, 0)\n\n    Dim oPt7 As HybridShapePointCoord\n    oPt7 = oHSF.AddNewPointCoord(0, 0, 0)\n    oPt7.PtRef = oPt7_1\n    oPt7.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2)\n    oHbody.AppendHybridShape(oPt7)\n    RootPart.UpdateObject(oPt7)\n    oHSF.GSMVisibility(oPt7, 0)\n\n    Dim oPt8 As HybridShapePointCoord\n    oPt8 = oHSF.AddNewPointCoord(0, 0, 0)\n    oPt8.PtRef = oPt7_2\n    oPt8.RefAxisSystem = RootPart.CreateReferenceFromObject(oAxisSys2)\n    oHbody.AppendHybridShape(oPt8)\n    RootPart.UpdateObject(oPt8)\n    oHSF.GSMVisibility(oPt8, 0)\n\n    '\u5c55\u5f00\n    Dim oUnfold As HybridShapeUnfold\n    oUnfold = oHSF.AddNewUnfold()\n\n    oUnfold.SurfaceToUnfold = oHBAxisToAxis\n\n    '\u5c55\u5f00\u539f\u70b9\u548c\u65b9\u5411\n    oUnfold.OriginToUnfold = oPt\n    oUnfold.DirectionToUnfold = oRefLine\n    '\u652f\u6301\u9762\u548c\u65b9\u5411\n    oUnfold.TargetPlane = RootPart.OriginElements.PlaneZX\n    oUnfold.TargetOrientationMode = 6\n\n    '\u5206\u5272\u5143\u7d20\n    oUnfold.AddEdgeToTear(oLine1)\n    oUnfold.AddEdgeToTear(oLine2)\n    oUnfold.AddEdgeToTear(oLine3)\n    oUnfold.AddEdgeToTear(oLine4)\n    oUnfold.AddEdgeToTear(oLine5)\n    oUnfold.AddEdgeToTear(oLine6)\n\n    '\u5c55\u5f00\u5143\u7d20\n    oUnfold.AddElementToTransfer(oPt1, 1)\n    oUnfold.AddElementToTransfer(oPt2, 1)\n    oUnfold.AddElementToTransfer(oPt3, 1)\n    oUnfold.AddElementToTransfer(oPt4, 1)\n    oUnfold.AddElementToTransfer(oPt5, 1)\n    oUnfold.AddElementToTransfer(oPt6, 1)\n    oUnfold.AddElementToTransfer(oPt7, 1)\n    oUnfold.AddElementToTransfer(oPt8, 1)\n\n    oHbody.AppendHybridShape(oUnfold)\n    RootPart.UpdateObject(oUnfold)\n\n    '\u5de5\u7a0b\u5236\u56fe\n    '------------------------------------------------------------------------\n    Dim oDrwingDoc As DrawingDocument\n    oDrwingDoc = CATIA.Documents.Add(\"Drawing\")\n    oDrwingDoc.Standard = CatDrawingStandard.catISO\n\n    Dim oDrwSheet As DrawingSheet\n    oDrwSheet = oDrwingDoc.Sheets.Item(\"\u9875.1\")\n\n    '\u5e38\u89c4\u8bbe\u7f6e\n    oDrwSheet.PaperSize = DRAFTINGITF.CatPaperSize.catPaperA3\n    oDrwSheet.Scale = 1\n    oDrwSheet.Orientation = DRAFTINGITF.CatPaperOrientation.catPaperLandscape\n\n    oDrwSheet = oDrwingDoc.Sheets.ActiveSheet\n\n    Dim oFrontView As DrawingView\n    oFrontView = oDrwSheet.Views.Add(\"\u6b63\u89c6\u56fe\")\n\n    Dim oDrwViewGenLinks As DrawingViewGenerativeLinks\n    oDrwViewGenLinks = oFrontView.GenerativeLinks\n\n    Dim oDrwViewGenBehavior As DrawingViewGenerativeBehavior\n    oDrwViewGenBehavior = oFrontView.GenerativeBehavior\n\n    oDrwViewGenLinks.AddLink(oHbody)\n\n    oDrwViewGenBehavior.DefineFrontView(-1, 0, 0, 0, 0, 1)\n\n    oFrontView.Scale = 0.125\n    oFrontView.x = 210\n    oFrontView.y = 100\n\n\n    oDrwViewGenBehavior = oFrontView.GenerativeBehavior\n    oDrwViewGenBehavior.Update()\n    oFrontView.Activate()\n\n    oSelection.Clear()\n    oSelection.Add(oUnfold)\n    oSelection.Search(\"\u521b\u6210\u5f0f\u5916\u5f62\u8bbe\u8ba1.\u70b9,sel\")\n\n    '\u83b7\u53d62D\u5143\u7d20\u70b9\n    '-------------------------------------------------\n    Dim oDimPt1 As Reference\n    oDimPt1 = oSelection.Item(1).Value\n\n    Dim oDimPt2 As Reference\n    oDimPt2 = oSelection.Item(2).Value\n\n    Dim oDimPt3 As Reference\n    oDimPt3 = oSelection.Item(3).Value\n\n    Dim oDimPt4 As Reference\n    oDimPt4 = oSelection.Item(4).Value\n\n    Dim oDimPt5 As Reference\n    oDimPt5 = oSelection.Item(5).Value\n\n    Dim oDimPt6 As Reference\n    oDimPt6 = oSelection.Item(6).Value\n\n    Dim oDimPt7 As Reference\n    oDimPt7 = oSelection.Item(7).Value\n\n    Dim oDimPt8 As Reference\n    oDimPt8 = oSelection.Item(8).Value\n\n    oSelection.Clear()\n\n    '\u83b7\u53d62D\u5143\u7d20\u7684\u5750\u6807\n    '------------------------------------------------------\n    Dim TheSPAWorkbench As SPAWorkbench\n    TheSPAWorkbench = oCatiaDoc.GetWorkbench(\"SPAWorkbench\")\n\n    Dim oMeaTem As Measurable\n\n    oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt1)\n    Dim oCoord1(2)\n    oMeaTem.GetPoint(oCoord1)\n\n    oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt2)\n    Dim oCoord2(2)\n    oMeaTem.GetPoint(oCoord2)\n\n    oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt3)\n    Dim oCoord3(2)\n    oMeaTem.GetPoint(oCoord3)\n\n    oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt4)\n    Dim oCoord4(2)\n    oMeaTem.GetPoint(oCoord4)\n\n    oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt5)\n    Dim oCoord5(2)\n    oMeaTem.GetPoint(oCoord5)\n\n    oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt6)\n    Dim oCoord6(2)\n    oMeaTem.GetPoint(oCoord6)\n\n    oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt7)\n    Dim oCoord7(2)\n    oMeaTem.GetPoint(oCoord7)\n\n    oMeaTem = TheSPAWorkbench.GetMeasurable(oDimPt8)\n    Dim oCoord8(2)\n    oMeaTem.GetPoint(oCoord8)\n\n    '\u5de5\u7a0b\u56fe\u5185\u521b\u5efa\u6807\u6ce8\u70b9\n    '-------------------------------------------------------\n    oFrontView.Activate()\n\n    Dim oFact2D As Factory2D\n    oFact2D = oFrontView.Factory2D\n\n    Dim oPoint1 As Point2D\n    oPoint1 = oFact2D.CreatePoint(oCoord1(0), oCoord1(2))\n\n    Dim oPoint2 As Point2D\n    oPoint2 = oFact2D.CreatePoint(oCoord2(0), oCoord2(2))\n\n    Dim oPoint3 As Point2D\n    oPoint3 = oFact2D.CreatePoint(oCoord3(0), oCoord3(2))\n\n    Dim oPoint4 As Point2D\n    oPoint4 = oFact2D.CreatePoint(oCoord4(0), oCoord4(2))\n\n    Dim oPoint5 As Point2D\n    oPoint5 = oFact2D.CreatePoint(oCoord5(0), oCoord5(2))\n\n    Dim oPoint6 As Point2D\n    oPoint6 = oFact2D.CreatePoint(oCoord6(0), oCoord6(2))\n\n    Dim oPoint7 As Point2D\n    oPoint7 = oFact2D.CreatePoint(oCoord7(0), oCoord7(2))\n\n    Dim oPoint8 As Point2D\n    oPoint8 = oFact2D.CreatePoint(oCoord8(0), oCoord8(2))\n\n    Dim oDLine1 As Line2D\n    oDLine1 = oFact2D.CreateLine(oCoord1(0), oCoord1(2), oCoord4(0), oCoord4(2))\n\n    Dim oDLine2 As Line2D\n    oDLine2 = oFact2D.CreateLine(oCoord2(0), oCoord2(2), oCoord5(0), oCoord5(2))\n\n    Dim oDLine3 As Line2D\n    oDLine3 = oFact2D.CreateLine(oCoord3(0), oCoord3(2), oCoord6(0), oCoord6(2))\n\n    Dim oDLine_1 As Line2D\n    oDLine_1 = oFact2D.CreateLine(oCoord1(0), oCoord1(2), oCoord2(0), oCoord2(2))\n\n    Dim oDLine_2 As Line2D\n    oDLine_2 = oFact2D.CreateLine(oCoord2(0), oCoord2(2), oCoord3(0), oCoord3(2))\n\n    Dim oDLine_3 As Line2D\n    oDLine_3 = oFact2D.CreateLine(oCoord4(0), oCoord4(2), oCoord5(0), oCoord5(2))\n\n    Dim oDLine_4 As Line2D\n    oDLine_4 = oFact2D.CreateLine(oCoord5(0), oCoord5(2), oCoord6(0), oCoord6(2))\n\n    Dim oDLine_5 As Line2D\n    oDLine_5 = oFact2D.CreateLine(oCoord3(0), oCoord3(2), oCoord7(0), oCoord7(2))\n\n    Dim oDLine_6 As Line2D\n    oDLine_6 = oFact2D.CreateLine(oCoord6(0), oCoord6(2), oCoord8(0), oCoord8(2))\n\n    '\u865a\u7ebf\uff0c\u989c\u8272\u8bbe\u7f6e\n    oSelection.Clear()\n    oSelection.Add(oDLine1)\n    oSelection.Add(oDLine2)\n    oSelection.Add(oDLine3)\n    oSelection.Add(oDLine_1)\n    oSelection.Add(oDLine_2)\n    oSelection.Add(oDLine_3)\n    oSelection.Add(oDLine_4)\n    oSelection.Add(oDLine_5)\n    oSelection.Add(oDLine_6)\n\n    Dim oVis As VisPropertySet\n    oVis = oSelection.VisProperties\n\n    '\u7d2b\u7ea2\u8272 \u865a\u7ebf \u6700\u7ec6\n    oVis.SetVisibleColor(255, 0, 255, 1)\n    oVis.SetVisibleLineType(4, 1)\n    oVis.SetVisibleWidth(1, 1)\n\n    oSelection.Clear()\n\n    '\u6807\u6ce8\u7684\u5143\u7d20\n    Dim myElement1(1)\n    myElement1 = {oPoint1, oPoint4}\n\n    Dim myElement2(1)\n    myElement2 = {oPoint2, oPoint5}\n\n    Dim myElement3(1)\n    myElement3 = {oPoint7, oPoint8}\n\n    Dim myElement4(1)\n    myElement4 = {oDLine2, oDLine3}\n\n    Dim myElement5(1)\n    myElement5 = {oDLine2, oDLine_3}\n\n    '\u5c3a\u5bf8\u4f4d\u7f6e\n    Dim SelPoints(3) As Object\n    SelPoints = {200, 10, 200, 10}\n\n    Dim oDrwDim As DrawingDimension\n    oDrwDim = oFrontView.Dimensions.Add(CatDimType.catDimDistance, myElement1, SelPoints, CatDimLineRep.catDimHoriz)\n    oDrwDim = oFrontView.Dimensions.Add(CatDimType.catDimDistance, myElement2, SelPoints, CatDimLineRep.catDimHoriz)\n    oDrwDim = oFrontView.Dimensions.Add(CatDimType.catDimDistance, myElement3, SelPoints, CatDimLineRep.catDimHoriz)\n    oDrwDim = oFrontView.Dimensions.Add(CatDimType.catDimDistance, myElement4, SelPoints, CatDimLineRep.catDimVert)\n    oDrwDim = oFrontView.Dimensions.Add(CatDimType.catDimAngle, myElement5, SelPoints, CatDimLineRep.catDimAuto)\n\n    oDrwingDoc.ExportData(\"D:\\DrawingTest\\\" + CStr(i), \"pdf\")\n    oDrwingDoc.Close()\n\n    oSelection.Clear()\n    oSelection.Add(oHbody)\n    oSelection.Delete()\n\n    i = i + 1\n\nNext\n</code></pre>"},{"location":"DS-CODE/VBA/Drawing/","title":"Drawing","text":"<pre><code>' ********************************************************************************************************************\n'                             AUTOMATED SECTION-VIEW GENERATION     Author: Stephen Boak\n'                                                                   Modifications 2006-2007: Andrew Witt\n'*********************************************************************************************************************\n\n' -----------------------------------------------------------\n' Script must be run from the UserForm.\n\n' This script creates an elevation view and offset section views from the active model using a geometric set of planes as the input.\n' A section cut or view is created at the level of each plane in the set, so the input plane should be at the correct orientation to work properly.\n' User must specify the plane of the elevation view, usually YZ will be correct.\n' User must specify a path to save DWG files.\n\n'Options:\n' Script allows user to specify a naming prefix for each saved Autocad DWG (drawings are saved using the name of the plane that created it, except elevation view which\n' is saved as \"front view.dwg\".\n' User can also define an offset from the selected plane (down is negative), the plane of the elevation view, the type of section to create (cut or view), and the\n' rotation of the sections relative to the elevation view (looking down is +90deg, looking up is -90deg).\n' The form will detect the number of planes in the geometric set, and then the user can specify the range of items to take sections for.\n\n'Known Issues:  Very complex or large files will require a LOT of RAM to run, and may result in crashes.  Use the task manager to observe RAM\n'usage if you are concerned about overflow.\n' -----------------------------------------------------------\n\nPublic ComponentObjects As New Collection\nPublic SelectedGS As HybridBody\n\n\n\nSub CATMain()\n    UserForm1.Show\nEnd Sub\n\n\n\nSub Generate()\nDim U1(2), U2(2), V1(2), V2(2), ZVector(2), Origin(2), Pt(2), TempVector(2)\nDim Norm, NewTemp\nDim slabOffset, viewType, sectionRotationTemp, StartPlane As Integer, EndPlane As Integer\nDim oDocumentToDraw\nDim MySelection\nDim oCurrentPart As Part\nDim oSheet\nDim PlaneZPosition\nDim oDrawingSource\nDim oSheetSource\nDim oSelectionTarget\nDim oSectionView\nDim oViewTarget\nDim oViewSource\nDim oViewSelection\nDim oSheetTarget\nDim oX\nDim oY\nDim oZ\nDim viewName\nDim DftManager As DftManager\nDim TheXYPlane\nDim oDrawing 'As DrawingDocument\nDim oFrontViewGB\nDim drawingDocument1 As DrawingDocument\n\n\nZVector(0) = 0\nZVector(1) = 0\nZVector(2) = 1\n\nOrigin(0) = 0\nOrigin(1) = 0\nOrigin(2) = 0\n\n' Bring in the naming prefix entered by the user and later add it to the beginning of all saved file names.\nSuffix = UserForm1.F_Suffix.Text\nslabOffsetmm = UserForm1.F_slabOffset.Text\nslabOffset = CDbl(slabOffsetmm) * 25.4\nStartPlane = UserForm1.F_StartPlane.Text\nEndPlane = UserForm1.F_EndPlane.Text\nviewType = UserForm1.F_viewType.Text\nsectionRotationTemp = UserForm1.F_sectionRotation.Text\nIf sectionRotationTemp = \"Look Down\" Then SectionRotation = \"0\"\nIf sectionRotationTemp = \"Look Up\" Then SectionRotation = \"1\"\n\n'Specify the root save path\nTheRootPath = UserForm1.F_SavePath.Value\n\n' Specify the active document (root part level)\nSet oDocumentToDraw = CATIA.ActiveDocument\n\n' Establish hybridShape references from the current selection and count\n' the number of hybridShapes in the selection\n\nSet MySelection = CATIA.ActiveDocument.Selection\nSet SelectedGS = CATIA.ActiveDocument.Selection.Item(1).Value\nNumHShapes = SelectedGS.HybridShapes.Count\n\n' Set the active document and the part to draw, seperate entities because the plane system\n' resides in a single part, but we wish to create drawings of the entire product\n\nSet oCurrentPart = GetContainingPart(MySelection.Item(1).Value)\n\nSet TheXYPlane = oCurrentPart.OriginElements.PlaneXY\nReDim ZDist(NumHShapes)\n\n'Define a reference matrix using the geometrical set of planes, used in later loops\n'Use the getdistance function to measure the height that the section should be taken at\nReDim refMatrix(NumHShapes)\nFor I = 0 To NumHShapes - 1\n    Set refMatrix(I) = SelectedGS.HybridShapes.Item(I + 1)\n    ZDist(I) = GetDistance(refMatrix(I), TheXYPlane)\nNext I\n\n' Create an empty drawing document: it becomes the active document.\n\nSet oDrawing = CATIA.Documents.Add(\"Drawing\")\n\nSet oSheet = oDrawing.Sheets.ActiveSheet\n\n' Create a view called \"Front View\" in this sheet\nDim oFrontView\nSet oFrontView = oSheet.Views.Add(\"Front View\")\n\n' Create a variable for the view's generative behavior, set below\n\nSet oFrontViewGB = oFrontView.GenerativeBehavior\noFrontViewGB.RepresentationMode = catPolyhedricMode\n\n' Declare the part to draw in this front view\noFrontViewGB.Document = oDocumentToDraw.Product\n\n\n\n'***************************  GET DftManager FOR ATTRIBUTE FILTERING   ********************************************\n\n\nSet DftManager = oDocumentToDraw.Product.GetItem(\"GTCDftManagerVBExt\")\n\n' Define this view as a Front View, with UserForm Specifying the projection plane\n\n'DETECT PLAN OR SECTION\n\n'If DetectPlanCut(MySelection.Item(1).Value.HybridShapes.Item(1)) Then\n'oFrontViewGB.DefineFrontView 1, 0, 0, 0, 0, 1\n'Else\n'oFrontViewGB.DefineFrontView 1, 0, 0, 0, 1, 0\n'End If\n\n'Update the view, necessary at this point to get the repositioning command below to work\n'oFrontViewGB.Update\n\n' Position the View at the origin of the sheet.  This keeps the drawing origin true to the part origin.\n'Call Recenter(oFrontView)\n\n' Save the Front View\n\nSet drawingDocument1 = CATIA.ActiveDocument\ndrawingDocument1.Sheets.Item(1).Activate\nIf TheRootPath = \"\" Then\nTheRootPath = \"c:\\\"\nEnd If\n\n\n'If UserForm1.GenerateFrontView.Value = True Then\n'drawingDocument1.ExportData CStr(TheRootPath) &amp; Suffix &amp; \"FrontView.dwg\", \"dwg\"\n'End If\n\n' Define a reference plane to establish the location &amp; direction of the section views\nSet RefPlane = MySelection.Item(1).Value.HybridShapes.Item(1)\n\n'Set the endpoints/boundaries of the section view  (the area to draw)\nDim XMin As Double\nDim XMax As Double\nDim ViewDims(3)\n\n'oFrontView.Size ViewDims\n'XMin = ViewDims(0)\n'XMax = ViewDims(1)\n\n' Set the active drawing sheet\nDim oDrawingSheets As DrawingSheets\nSet oDrawingSheets = oDrawing.Sheets\nDim oDrawingSheet As DrawingSheet\n\n' These two numbers are the x-coordinates of the two points used to specify the section view\nDim SectionPointArray(3)\n\n'Loop to create the offset section views, creating a new sheet for each one and then saving the sheet as a DWG\nFor j = CInt(StartPlane) To CInt(EndPlane)\n\n    Call GetPlaneOrientation(MySelection.Item(1).Value.HybridShapes.Item(j), CurrentOrientation)\n\n    Pt(0) = CurrentOrientation(0)\n    Pt(1) = CurrentOrientation(1)\n    Pt(2) = CurrentOrientation(2)\n\n    U1(0) = CurrentOrientation(3)\n    U1(1) = CurrentOrientation(4)\n    U1(2) = CurrentOrientation(5)\n    U2(0) = CurrentOrientation(6)\n    U2(1) = CurrentOrientation(7)\n    U2(2) = CurrentOrientation(8)\n\n    Norm = CrossProduct(U1, U2)\n\n    'DETECT PLAN OR SECTION\n\n    If DetectPlanCut(MySelection.Item(1).Value.HybridShapes.Item(j)) Then\n        oFrontViewGB.DefineFrontView 1, 0, 0, 0, 1, 1\n    Else\n\n    oFrontViewGB.DefineFrontView Norm(0), Norm(1), Norm(2), U2(0), U2(1), 0\n\n    'oFrontViewGB.DefineFrontView 1, 0, 0, 0, 1, 0\n\n\n    End If\n\n    'Update the view, necessary at this point to get the repositioning command below to work\n    oFrontViewGB.Update\n\n    oFrontView.Size ViewDims\n    XMin = ViewDims(0)\n    XMax = ViewDims(1)\n\n\n    ' Position the View at the origin of the sheet.  This keeps the drawing origin true to the part origin.\n    Call Recenter(oFrontView)\n\n    If UserForm1.GenerateFrontView.Value = True Then\n        drawingDocument1.ExportData CStr(TheRootPath) &amp; Suffix &amp; \"FrontView\" &amp; refMatrix(j - 1).Name &amp; \".dwg\", \"dwg\"\n    End If\n\n\n\n    Dot = DotProduct(Norm, ZVector)\n\n    If Abs(Dot) &lt; 0.0001 Then\n    PlaneZPosition = ZDist(j - 1) + slabOffset 'refMatrix(j - 1).offset.Value + slabOffset\n\n\n    PtResult = ProjectPointToPlaneDirection(Pt, Origin, ZVector, Norm)\n\n    TempVector(0) = U2(0)\n    TempVector(1) = U2(1)\n    TempVector(2) = 0\n\n    PtResult = ProjectPointToPlane(PtResult, Pt, CrossProduct(Norm, TempVector))\n\n\n    ' These two numbers are the y-coordinates of the two points used to specify the section view\n    SectionPointArray(0) = -(2 * Abs(XMax) + Abs(XMin))\n    SectionPointArray(1) = PlaneZPosition\n    SectionPointArray(2) = (2 * Abs(XMax) + Abs(XMin))\n    SectionPointArray(3) = PlaneZPosition\n    Else\n    If CurrentOrientation(3) &lt; 0.0001 And CurrentOrientation(4) &lt; 0.0001 Then\n    SectionPointArray(0) = CurrentOrientation(6) * (2 * XMax - XMin) + CurrentOrientation(0)\n    SectionPointArray(1) = CurrentOrientation(7) * (2 * XMax - XMin) + CurrentOrientation(1)\n    SectionPointArray(2) = -CurrentOrientation(6) * (2 * XMax - XMin) + CurrentOrientation(0)\n    SectionPointArray(3) = -CurrentOrientation(7) * (2 * XMax - XMin) + CurrentOrientation(1)\n    ViewAngle = Atn(CurrentOrientation(7) / CurrentOrientation(6))\n    Else\n\n\n\n    If SectionRotation = 0 Then\n\n    PtResult = ProjectPointToPlaneDirection(Pt, Origin, ZVector, Norm)\n\n    TempVector(0) = U2(0)\n    TempVector(1) = U2(1)\n    TempVector(2) = 0\n\n    PtResult = ProjectPointToPlane(PtResult, Pt, CrossProduct(Norm, TempVector))\n\n    NewTemp = ProjectPtOntoVector(Pt, Origin, ZVector)\n\n\n    SectionPointArray(0) = PtResult(0)\n    SectionPointArray(1) = (2 * XMax - XMin) + CurrentOrientation(1)\n    SectionPointArray(2) = PtResult(0)\n    SectionPointArray(3) = -(2 * XMax - XMin) + CurrentOrientation(1)\n    Else\n    SectionPointArray(2) = CurrentOrientation(3) * (2 * XMax - XMin) + CurrentOrientation(0)\n    SectionPointArray(3) = CurrentOrientation(4) * (2 * XMax - XMin) + CurrentOrientation(1)\n    SectionPointArray(0) = -CurrentOrientation(3) * (2 * XMax - XMin) + CurrentOrientation(0)\n    SectionPointArray(1) = -CurrentOrientation(4) * (2 * XMax - XMin) + CurrentOrientation(1)\n    End If\n\n\n    If CurrentOrientation(3) &lt; 0.001 Then\n    ViewAngle = 3.1415926 / 2\n    Else\n    ViewAngle = Atn(CurrentOrientation(4) / CurrentOrientation(3))\n    End If\n    End If\n\n    End If\n\n    ' Add an empty section view to the main sheet\n    viewName = refMatrix(j - 1).Name\n    Set oSectionView = oSheet.Views.Add(CStr(viewName))\n\n\n    '********************* MEASURE CURRENT PLANE TO DETERMINE ORIENTATION *****************************************\n    '********************* CHECK TO DETERMINE IF ORIENTATION IS CORRECT RELATIVE TO CURRENT REF VIEW ***************\n\n\n\n\n    ' Create the offset section view and define its GB\n    Dim oSectionViewGB\n    Set oSectionViewGB = oSectionView.GenerativeBehavior\n\n    'oSectionView.Angle = 1.570796327  'this equals 90 degrees, shown in radians\n    ' Update and then reposition the view (order important, update first)\n\n\n    If UserForm1.ComponentCheck Then\n    '**************************************  SET UP LINKS FOR COMPONENTWISE EXTRACTION  *******************************\n\n    ComponentObjects.Item(j).ApplyWorkMode (DESIGN_MODE)\n\n    oSectionViewGB.Document = ComponentObjects.Item(j).ReferenceProduct 'oDocumentToDraw.Product\n    Call oSectionView.GenerativeLinks.RemoveAllLinks\n    Call oSectionView.GenerativeLinks.AddLink(ComponentObjects.Item(j).ReferenceProduct)\n\n    Else\n    oSectionViewGB.Document = oDocumentToDraw.Product\n    End If\n\n    'oSectionViewGB.Document = oDocumentToDraw.Product\n    oSectionView.GenerativeBehavior.DefineSectionView SectionPointArray, CStr(viewType), Offset, SectionRotation, oFrontViewGB\n    oSectionViewGB.Update\n    oSectionView.xAxisData = 0#\n    oSectionView.yAxisData = 0#\n\n    'Clear the z-position variable\n    Set PlaneZPosition = Nothing\n\n\n        Set oDrawingSource = CATIA.ActiveDocument\n    Set oSheetSource = CATIA.ActiveDocument.Sheets.Item(\"Sheet.1\")\n    Set oViewSource = oSheetSource.Views.Item(oSheetSource.Views.Count) 'Count)\n    oViewSource.Activate\n\n\n            '**************************************  ADD BOX SECTION *******************************\n   If UserForm1.BoxSection.Value = True Then\n    Call AddBoxSection(oViewSource, CurrentOrientation, UserForm1.OffsetBelow.Text)\n    oDrawing.Update\n    End If\n\n\nSet selection1 = drawingDocument1.Selection\nselection1.Clear\nselection1.Search \"CATDrwSearch.CATEarlyGenShape,all\"\nIf selection1.Count &gt; 0 Then\nCall selection1.Delete\nEnd If\n\n    'If section view, rotate\n    If Abs(Dot) &lt; 0.0001 And UserForm1.RotateSections.Value = True Then\n\n    oViewSource.Angle = -ViewAngle\n    End If\n\n    oViewSource.xAxisData = 0#\n    oViewSource.yAxisData = 0#\n    'Scale by appropriate factor\n\n    Select Case UserForm1.ScaleList.Text\n    Case \"1/16\" &amp; Chr$(34) &amp; \" = 1'-0\" &amp; Chr$(34)\n    oViewSource.Scale2 = 0.0052\nCase \"3/32\" &amp; Chr$(34) &amp; \" = 1'-0\" &amp; Chr$(34)\noViewSource.Scale2 = 0.0078\nCase \"1/8\" &amp; Chr$(34) &amp; \" = 1'-0\" &amp; Chr$(34)\noViewSource.Scale2 = 0.0104\nCase \"3/16\" &amp; Chr$(34) &amp; \" = 1'-0\" &amp; Chr$(34)\noViewSource.Scale2 = 0.0156\n\nCase \"1/4\" &amp; Chr$(34) &amp; \" = 1'-0\" &amp; Chr$(34)\noViewSource.Scale2 = 0.0208\nCase \"3/8\" &amp; Chr$(34) &amp; \" = 1'-0\" &amp; Chr$(34)\noViewSource.Scale2 = 0.0313\nCase \"1/2\" &amp; Chr$(34) &amp; \" = 1'-0\" &amp; Chr$(34)\noViewSource.Scale2 = 0.0417\nCase \"3/4\" &amp; Chr$(34) &amp; \" = 1'-0\" &amp; Chr$(34)\noViewSource.Scale2 = 0.0625\nCase \"1\" &amp; Chr$(34) &amp; \" = 1'-0\" &amp; Chr$(34)\noViewSource.Scale2 = 0.0833\nCase \"1 1/2\" &amp; Chr$(34) &amp; \" = 1'-0\" &amp; Chr$(34)\noViewSource.Scale2 = 0.125\nCase \"3\" &amp; Chr$(34) &amp; \" = 1'-0\" &amp; Chr$(34)\noViewSource.Scale2 = 0.25\nCase \"6\" &amp; Chr$(34) &amp; \" = 1'-0\" &amp; Chr$(34)\noViewSource.Scale2 = 0.5\nCase \"FULL SCALE\"\n    oViewSource.Scale2 = 1\n    End Select\n\n    Set oViewSelection = oDrawingSource.Selection\n\n\n    '*************************************    GENERATE LAYERS BY APPLYING RULES    *************************************\nIf UserForm1.AttributeFilter.Value = True Then\nSet CurrentView = DftManager.GetDftView(oViewSource)\nCall CurrentView.ApplyRules\nEnd If\n\n\n\n     Set oDrawingSheet = oDrawingSheets.Add(\"Sheet\") 'add a new drawing sheet\n    oDrawingSheet.Name = refMatrix(j - 1).Name  'gets the name of the sheet from the plane name in the refmatrix\n\n\n\n\n\n\n\n    oViewSelection.Clear\n    oViewSelection.Add oViewSource\n    oViewSelection.Copy\n\n    'Specify a paste target and paste the view\n    Set oSheetTarget = CATIA.ActiveDocument.Sheets.Item(2)\n    Set oSelectionTarget = oDrawingSource.Selection\n\n    'Clear the selection\n    oSelectionTarget.Clear\n\n    'Add the sheet where the view will be pasted in the selection\n    oSelectionTarget.Add oSheetTarget\n\n    'Paste the clipboard and remove the original view/cut after pasting.  Cutting wasn't working, so instead I did copy/paste/erase original\n    oSelectionTarget.Paste\n\n    oSheetTarget.Views.Item(1).xAxisData = 0#\n    oSheetTarget.Views.Item(1).yAxisData = 0#\n\n    oSheetSource.Views.Remove (4)\n\n\n    ' Save the section view as a DWG, getting the patt and naming prefix from the userform, and after the comma at the end of the 3rd line below\n    ' define the format as AutoCAD DWG\n    viewSaveName = refMatrix(j - 1).Name\n    drawingDocument1.Sheets.Item(2).Activate\n\n    If UserForm1.DrawingFormat.Text = \"DWG\" Then\n\n    drawingDocument1.ExportData CStr(TheRootPath) &amp; Suffix &amp; CStr(viewSaveName) &amp; \".dwg\", \"dwg\"\n\n    Else\n\n    drawingDocument1.SaveAs CStr(TheRootPath) &amp; Suffix &amp; CStr(viewSaveName) &amp; \".CATDrawing\"\n\n    End If\n\n    'Remove the saved sheet\n    drawingDocument1.Sheets.Remove (2)\n\n\n    If UserForm1.ComponentCheck Then\n    '**************************************  FOR COMPONENTWISE EXTRACTION REVERT TO VIS MODE *******************************\n    ComponentObjects.Item(j).ApplyWorkMode (VISUALIZATION_MODE)\n    End If\n\nNext j\n\nMsgBox (\"Drawings Batch Saved.\")\nEnd\n\nEnd Sub\n\n\nSub AddBoxSection(oCurrentView, oCurrentPosition, oOffset)\nDim Components\n\nTempName = FindDocNameForPartNumber(oCurrentView.GenerativeBehavior.Document.Name)\n\nSet CurrentDoc = CATIA.Documents.Item(TempName)\nDim U(2), V(2), Result\n    ' Retrieve the Sections collection\n    Dim cSections As Sections\n    Set cSections = oCurrentView.GenerativeBehavior.Document.GetTechnologicalObject(\"Sections\")\n\n    ' Create the master section\n    Dim oMasterSection 'As Section\n    Set oMasterSection = cSections.Add\n\n    ' Retrieve data on master section\n    Dim Position(11), OldPosition(11)\n\n    U(0) = oCurrentPosition(3)\n    U(1) = oCurrentPosition(4)\n    U(2) = oCurrentPosition(5)\n\n    V(0) = oCurrentPosition(6)\n    V(1) = oCurrentPosition(7)\n    V(2) = oCurrentPosition(8)\n\n   Result = CrossProduct(U, V)\n\n    Position(0) = oCurrentPosition(3)\n    Position(1) = oCurrentPosition(4)\n    Position(2) = oCurrentPosition(5)\n    Position(3) = oCurrentPosition(6)\n    Position(4) = oCurrentPosition(7)\n    Position(5) = oCurrentPosition(8)\n    Position(6) = Result(0)\n    Position(7) = Result(1)\n    Position(8) = Result(2)\n    Position(9) = oCurrentPosition(0)\n    Position(10) = oCurrentPosition(1)\n    Position(11) = oCurrentPosition(2) - CDbl(oOffset)\n\noMasterSection.GetPosition OldPosition\n    oMasterSection.SetPosition Position\n\noMasterSection.Type = catSectionTypeBox\noMasterSection.Thickness = CDbl(oOffset)\n\noCurrentView.GenerativeBehavior.DefineBox3DView (oMasterSection)\n\n\n\n'Call cSections.Remove(cSections.Count)\n\nEnd Sub\n\n\n\n\nFunction FindDocNameForPartNumber(PartNo)\n\nDim TempName\nTempName = \"\"\nFor LoopNum = 1 To CATIA.Documents.Count\n\n\nIf \"ProductDocument\" = TypeName(CATIA.Documents.Item(LoopNum)) Then\n\n If CATIA.Documents.Item(LoopNum).Product.Name = PartNo Then\n TempName = CATIA.Documents.Item(LoopNum).Name\n End If\n End If\nNext\n\nFindDocNameForPartNumber = TempName\n\nEnd Function\n\n' Function to access the SPA Workbench and measure distances between objects\nFunction GetDistance(EdgeRef1, EdgeRef2)\nDim CurrentMeasurable As Measurable\nDim TheSPAWorkbench As Workbench\nSet TheSPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\nDim TempDistance\n    Set CurrentMeasurable = TheSPAWorkbench.GetMeasurable(EdgeRef1)\n    TempDistance = CurrentMeasurable.GetMinimumDistance(EdgeRef2)\n    GetDistance = TempDistance\nEnd Function\n\n\nFunction GetPlaneOrientation(P1, ByRef Orientation)\nDim CurrentMeasurable\nDim TheSPAWorkbench\nDim TempDistance(8)\n\nSet Current = P1\nfound = False\nWhile found = False\nSet Current = Current.Parent\nIf TypeName(Current) = \"Part\" Then\n    found = True\nEnd If\n\nWend\n\nSet PlaneRef = Current.CreateReferenceFromObject(P1)\n\nSet TheSPAWorkbench = CATIA.ActiveDocument.GetWorkbench(\"SPAWorkbench\")\n    Set CurrentMeasurable = TheSPAWorkbench.GetMeasurable(PlaneRef)\n    Call CurrentMeasurable.GetPlane(TempDistance)\n    Orientation = TempDistance\nEnd Function\n\n\n\n\nFunction DistanceToPlane(P1, P2)\n\nCurrent = P1\nfound = False\nWhile found = False\nSet Current = Current.Parent\nIf TypeName(Current) = \"Part\" Then\n    found = True\nEnd If\nWend\n\n\nSet PlaneRef1 = Current.CreateReferenceFromObject(P1)\nSet PlaneRef2 = Current.CreateReferenceFromObject(P2)\nSet PlaneMeasure = TheSPAWorkbench.GetMeasurable(PlaneRef1)\n\nDistance = PlaneMeasure.GetMinimumDistance(PlaneRef2)\n\nDistanceToPlane = Distance\n\nEnd Function\n\n\nFunction CrossProduct(U, V)\n\nDim Result(2)\n\nResult(0) = (U(1) * V(2) - U(2) * V(1))\nResult(1) = -(U(0) * V(2) - U(2) * V(0))\nResult(2) = (U(0) * V(1) - U(1) * V(0))\nCrossProduct = Result\nEnd Function\n\n\n\nFunction DotProduct(U, V)\nTemp = U(0) * V(0) + U(1) * V(1) + U(2) * V(2)\nDotProduct = Temp\nEnd Function\n\nFunction SubtractVector(U, V)\nDim Result(2)\nResult(0) = U(0) - V(0)\nResult(1) = U(1) - V(1)\nResult(2) = U(2) - V(2)\nSubtractVector = Result\nEnd Function\n\nFunction AddVector(U, V)\nDim Result(2)\nResult(0) = U(0) + V(0)\nResult(1) = U(1) + V(1)\nResult(2) = U(2) + V(2)\nAddVector = Result\nEnd Function\n\nFunction MultiplyScalar(a, V)\nDim Result(2)\nResult(0) = a * V(0)\nResult(1) = a * V(1)\nResult(2) = a * V(2)\nMultiplyScalar = Result\nEnd Function\n\nFunction ProjectPointToPlane(Pt, Origin, Norm)\nt = ((-1) * DotProduct(SubtractVector(Origin, Pt), Pt) / DotProduct(SubtractVector(Origin, Pt), Norm))\nProjectPointToPlane = AddVector(Pt, MultiplyScalar(t, Norm))\nEnd Function\n\nFunction ProjectPointToPlaneDirection(Pt, Origin, Norm, Dir)\nt = (DotProduct(Norm, SubtractVector(Origin, Pt)) / DotProduct(Norm, Dir))\nProjectPointToPlaneDirection = AddVector(Pt, MultiplyScalar(t, Dir))\nEnd Function\n\n\nFunction ProjectPtOntoVector(Pt, Origin, Norm)\nt = ((DotProduct(Pt, Norm) - DotProduct(Origin, Norm)) / DotProduct(Norm, Norm))\nProjectPtOntoVector = AddVector(Origin, MultiplyScalar(t, Norm))\nEnd Function\n\nFunction Project3D2D(Pt, Origin, Norm)\n\nEnd Function\n\n\n\n\nFunction DetectPlanCut(SelectedPlane)\nDim V1(3), V2(3)\nDim U1(3), U2(3)\n    V1(0) = 1\n    V1(1) = 0\n    V1(2) = 0\n    V2(0) = 0\n    V2(1) = 0\n    V2(2) = 1\n    CurrentOrientation = GetPlaneOrientation(SelectedPlane, U)\n    U1(0) = U(3)\n    U1(1) = U(4)\n    U1(2) = U(5)\n    U2(0) = U(6)\n    U2(1) = U(7)\n    U2(2) = U(8)\n\n    Dim CrossProduct2(2)\n\n    CrossProduct1 = CrossProduct(U1, U2)\n    CrossProduct2(0) = 0\n    CrossProduct2(1) = 0\n    CrossProduct2(2) = 1\n\n    Dot = DotProduct(CrossProduct1, CrossProduct2)\n    If Abs(Dot) &lt; 0.0001 Then\n    DetectPlanCut = True\n    Else\n    DetectPlanCut = False\n    End If\nEnd Function\n\n\nSub Recenter(oView)\noView.xAxisData = 0#\noView.yAxisData = 0#\nEnd Sub\n\n\n\nFunction GetContainingPart(oObj)\nSet Current = oObj\nfound = False\nWhile found = False\nSet Current = Current.Parent\nIf TypeName(Current) = \"Part\" Then\n    found = True\nEnd If\nWend\n\nSet GetContainingPart = Current\nEnd Function\n</code></pre>"},{"location":"DS-CODE/VBA/GENERATE_DRW_PRD/","title":"GENERATE DRW PRD","text":""},{"location":"DS-CODE/VBA/GENERATE_DRW_PRD/#generate_drw_prd","title":"GENERATE_DRW_PRD","text":"<pre><code>Sub CATMain()\ngetPrd\n\nEnd Sub\n\n\nSub getPrd()\n\n' Gets the Part Product Parameters\n\nDim proRootOcc As VPMRootOccurrence\nproRootOcc = CATIA.ActiveEditor.ActiveObject\n\nDim sel As Selection\nSet sel = CATIA.ActiveEditor.Selection\n\nDim prodRootRef As VPMReference\nprodRootRef = proRootOcc.ReferenceRootOccurrenceOf\n' Console.WriteLine(prodRootRef.RepInstances.Count)\n\nDim aa As VPMRepOccurrence\nSet aa = prodRootRef.RepInstances.Item(1)\nDim oVPMRepRef1 As VPMRepReference\nSet oVPMRepRef1 = aa.ReferenceInstanceOf\nDim part1 As Part\nSet part1 = oVPMRepRef1.GetItem(\"Part\")\nDebug.Print part1.Name\n\nDim bb As VPMRepOccurrence: Set bb = prodRootRef.RepInstances.Item(2)\nDim oVPMRepRef2 As VPMRepReference: Set oVPMRepRef2 = bb.ReferenceInstanceOf\nDim myDrawingRoot As DrawingRoot: Set myDrawingRoot = oVPMRepRef2.GetItem(\"CATDrawingAccess\")\nDebug.Print oVPMRepRef2.Name\n\nDim DrwSheet 'As DrawingSheet\nDrwSheet = myDrawingRoot.ActiveSheet\n\nDebug.Print myDrawingRoot.Sheets.Item(2).Name\n\n\n\n' Delete Old  dim\nDim MyView 'As DrawingView\nMyView = DrwSheet.Views.Item(\"V1\")\n\n'        If MyView = Nothing Then\n'            Console.WriteLine (MyView.Name)\n'            getDrawing (MyView)\n'\n'        End If\n\n'\u5220\u9664\u81ea\u52a8\u6807\u6ce8\n'sel.Clear()\n'Dim find As Boolean\n'find = False\n'If FrontView.Dimensions.Count &gt;= 1 Then\n'    For i = 1 To FrontView.Dimensions.Count\n'        If InStr(FrontView.Dimensions.Item(i).Name, \"Dimension\") &lt;&gt; 0 Then\n'            find = True\n'            sel.Add(FrontView.Dimensions.Item(i))\n'        End If\n'    Next\n'End If\n\n'If find Then sel.Delete()\n\n\nOn Error Resume Next\n'Dim DIMGeo As HybridBody = part1.FindObjectByName(\"2D-DIM-1\")\n'Dim m As Integer = 0\n''--------\u5c3a\u5bf8\n'For i = 1 To DIMGeo.HybridShapes.Count\n'    m = m + 1\n'Next\n\n'Dim oCenterPoint1(0, 0)\n'Dim oCenterPoint2(0, 0)\n'Dim oCenterPoint3(0, 0)\n'Dim oCenterPoint4(0, 0)\n\n'ReDim oCenterPoint1(m, 2)\n'ReDim oCenterPoint2(m, 2)\n'ReDim oCenterPoint3(m, 2)\n'ReDim oCenterPoint4(m, 2)\n\n'Dim oDrawingService As DrawingService\n'oDrawingService = CATIA.ActiveEditor.GetService(\"CATDrawingService\")\n\n'Dim part2 As DrawingRoot = oVPMRepRef2.GetItem(\"Drawing\")\n'Console.WriteLine(part2.Name, Title:=\"INFO\")\n\n' \u83b7\u5f97\u957f\u5ea6\u6807\u6ce8\u70b9\nDim hb1 As HybridBody: Set hb1 = part1.HybridBodies.Item(\"DRAFTING\").HybridBodies.Item(\"P1\").HybridBodies.Item(\"2D_DIM_1\")\nDim pt1 As HybridShape: Set pt1 = hb1.HybridShapes.Item(2)\nDim pt2 As HybridShape: Set pt2 = hb1.HybridShapes.Item(3)\n\n' \u83b7\u5f97\u6d4b\u91cf\u670d\u52a1\nDim theMeasureService 'As MeasureService\ntheMeasureService = CATIA.ActiveEditor.GetService(\"MeasureService\")\n'theMeasureService = CATIA.ActiveEditor.GetService(\"MeasurableService\")\n\nDim theMeasureItem1, theMeasureItem2 As MeasureItem\ntheMeasureItem1 = theMeasureService.GetMeasureItem(pt1)\ntheMeasureItem2 = theMeasureService.GetMeasureItem(pt2)\n\nIf theMeasureItem1 Is Nothing And theMeasureItem2 Is Nothing Then\n    MsgBox \"BIG ERROR\"\n    Exit Sub\nEnd If\n\n'\u83b7\u5f97\u5750\u6807\nDim oCoord1(2)\ntheMeasureItem1.GetPoint oCoord1(0), oCoord1(1), oCoord1(2)\n\nDim oCoord2(2)\ntheMeasureItem2.GetPoint oCoord2(0), oCoord2(1), oCoord2(2)\n\nDim Fact2D As Factory2D\nFact2D = MyView.Factory2D\n\nDim oPoint1 As Point2D\noPoint1 = Fact2D.CreatePoint(oCoord1(0), oCoord1(2))\n\nDim oPoint2 As Point2D\noPoint2 = Fact2D.CreatePoint(oCoord2(0), oCoord2(2))\n\n'Dim myElements(1)\n'myElements(1) = {oPoint1, oPoint2}\nDim Line1 As Line2D\nLine1 = Fact2D.CreateLine(50, 10, 150, 10)\n\n'Dim selpoints(3)\n'selpoints(3) = Array(0, 0, 0, 0)\n\nDim iType: Set iType = CATANNOTITF.CatDimType.catDimDistance\nDim MyDimension2 As CATANNOTITF.DrawingDimension\nMyDimension2 = MyView.Dimensions.Add2(iType, oPoint1, oPoint1, Line1, 0)\n\n\nSystem.Threading.Thread.Sleep (12000)\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/VBA/GetPart/","title":"Get Part","text":"<pre><code> Sub getpart()\n\n\n        Dim oEditor As Editor = catapp.ActiveEditor\n        Dim oProductRootService As PLMProductService = oEditor.GetService(\"PLMProductService\")\n\n        'VPMRootOccurrence oVPMRootOccOnRoot =(VPMRootOccurrence)sel.Item(1).Value'//oProductRootService.RootOccurrence;\n        'VPMReference oVPMRoot = oVPMRootOccOnRoot.ReferenceRootOccurrenceOf\n\n        Dim oVPMRootOccOnRoot As VPMOccurrence = catapp.ActiveEditor.Selection.Item(1).Value\n\n        Dim MyRootOccurrences As VPMOccurrences = oVPMRootOccOnRoot.Occurrences\n\n        For i = 1 To MyRootOccurrences.Count\n        Next\n\n        Dim MyOccurrence As VPMOccurrence = MyRootOccurrences.Item(1)\n        Dim MyRepInstances As VPMRepInstances = MyOccurrence.InstanceOccurrenceOf.ReferenceInstanceOf\n        Dim oVPMRepInst As VPMRepInstance = MyRepInstances.Item(1)\n        Dim oVPMRepRef As VPMRepReference = oVPMRepInst.ReferenceInstanceOf\n        Dim part As Part = oVPMRepRef.GetItem(\"Part\")\n        'MsgBox(part.Name)\n        'Dim hb As HybridBody = part.HybridBodies.Add()\n        Dim hb As HybridBody = part.FindObjectByName(1)\n        'hb.Name = \"tesddddddtdd\"\n        'copy \n        Dim obj1 As HybridShape = hb.HybridShapes.Item(1)\n\n\n        Dim MyOccurrence1 As VPMOccurrence = MyRootOccurrences.Item(2)\n        Dim MyRepInstances1 As VPMRepInstances = MyOccurrence1.InstanceOccurrenceOf.ReferenceInstanceOf\n        Dim oVPMRepInst1 As VPMRepInstance = MyRepInstances1.Item(1)\n        Dim oVPMRepRef1 As VPMRepReference = oVPMRepInst1.ReferenceInstanceOf\n        Dim part1 As Part = oVPMRepRef1.GetItem(\"Part\")\n        Dim hb1 As HybridBody = part1.HybridBodies.Add()\n        'MsgBox(part1.Name)\n        LoadExtRef(obj1, hb1)\n\n        'Dim part2 As Part = MyRootOccurrences.Item(3).ReferenceInstanceOf.Item(1).ReferenceInstanceOf.GetItem(\"Part\")\n        Dim MyOccurrence2 As VPMOccurrence = MyRootOccurrences.Item(3)\n        Dim MyRepInstances2 As VPMRepInstances = MyOccurrence2.InstanceOccurrenceOf.ReferenceInstanceOf\n        Dim oVPMRepInst2 As VPMRepInstance = MyRepInstances2.Item(1)\n        Dim oVPMRepRef2 As VPMRepReference = oVPMRepInst2.ReferenceInstanceOf\n        Dim part2 As Part = oVPMRepRef2.GetItem(\"Part\")\n        Dim hb2 As HybridBody = part2.HybridBodies.Add()\n        LoadExtRef(obj1, hb2)\n\n        Dim MyOccurrence3 As VPMOccurrence = MyRootOccurrences.Item(3)\n        Dim MyRepInstances3 As VPMRepInstances = MyOccurrence3.InstanceOccurrenceOf.ReferenceInstanceOf\n        Dim oVPMRepInst3 As VPMRepInstance = MyRepInstances3.Item(1)\n        Dim oVPMRepRef3 As VPMRepReference = oVPMRepInst3.ReferenceInstanceOf\n        Dim part3 As Part = oVPMRepRef2.GetItem(\"Part\")\n        Dim hb3 As HybridBody = part3.HybridBodies.Add()\n        LoadExtRef(obj1, hb3)\n\n        Dim MyOccurrence4 As VPMOccurrence = MyRootOccurrences.Item(4)\n        Dim MyRepInstances4 As VPMRepInstances = MyOccurrence4.InstanceOccurrenceOf.ReferenceInstanceOf\n        Dim oVPMRepInst4 As VPMRepInstance = MyRepInstances4.Item(1)\n        Dim oVPMRepRef4 As VPMRepReference = oVPMRepInst4.ReferenceInstanceOf\n        Dim part4 As Part = oVPMRepRef4.GetItem(\"Part\")\n        Dim hb4 As HybridBody = part4.HybridBodies.Add()\n        LoadExtRef(obj1, hb4)\n\n\n    End Sub\n\n    Function LoadExtRef(OldObj As INFITF.AnyObject, ExtRefSet As HybridBody) As AnyObject\n\n        If catapp.ActiveEditor.Selection.Count &lt;&gt; 0 Then\n            catapp.ActiveEditor.Selection.Clear()\n        End If\n        catapp.ActiveEditor.Selection.Add(OldObj)\n        catapp.ActiveEditor.Selection.Copy()\n\n        If catapp.ActiveEditor.Selection.Count &lt;&gt; 0 Then\n            catapp.ActiveEditor.Selection.Clear()\n        End If\n        catapp.ActiveEditor.Selection.Add(ExtRefSet)        'DRVExtRefSet\n        catapp.ActiveEditor.Selection.PasteSpecial(\"CATPrtResult\")\n        If catapp.ActiveEditor.Selection.Count &lt;&gt; 0 Then\n            catapp.ActiveEditor.Selection.Clear()\n        End If\n        Dim ExtRefMainSurf\n        ExtRefMainSurf = ExtRefSet.HybridShapes.Item(ExtRefSet.HybridShapes.Count)\n        LoadExtRef = ExtRefMainSurf\n    End Function\n</code></pre>"},{"location":"DS-CODE/VBA/GetProduct/","title":"GetProduct","text":""},{"location":"DS-CODE/VBA/GetProduct/#get3dpart-or-drawing","title":"Get3DPart or Drawing","text":"<pre><code> Sub getPrd()\n\n        ' Gets the Part Product Parameters\n        Dim proRootOcc As VPMRootOccurrence\n        proRootOcc = CATIA.ActiveEditor.ActiveObject\n\n        Dim prodRootRef As VPMReference\n        prodRootRef = proRootOcc.ReferenceRootOccurrenceOf\n        MsgBox(prodRootRef.RepInstances.Count)\n\n        Dim aa As VPMRepOccurrence = prodRootRef.RepInstances.Item(1)\n        Dim oVPMRepRef2 As VPMRepReference = aa.ReferenceInstanceOf\n        Dim part2 As Part = oVPMRepRef2.GetItem(\"Part\")\n        MsgBox(prodRootRef.Instances.Count, Title:=\"INFO\")\n    End Sub\n</code></pre> <p>\u4ece\u4ea7\u54c1\u7aef\u83b7\u5f97part \u548c\u56fe\u7eb8 <pre><code>Imports DRAFTINGITF\nImports INFITF\nImports MECMOD\nImports ProductStructureClientIDL\nImports VPMEditorContextIDL\n\nModule testDraftingDim\n\n    Sub getPrd()\n\n        ' Gets the Part Product Parameters\n\n        Dim proRootOcc As VPMRootOccurrence\n        proRootOcc = CATIA.ActiveEditor.ActiveObject\n\n        Dim prodRootRef As VPMReference\n        prodRootRef = proRootOcc.ReferenceRootOccurrenceOf\n        ' MsgBox(prodRootRef.RepInstances.Count)\n\n        Dim aa As VPMRepOccurrence = prodRootRef.RepInstances.Item(1)\n        Dim oVPMRepRef1 As VPMRepReference = aa.ReferenceInstanceOf\n        Dim part1 As Part = oVPMRepRef1.GetItem(\"Part\")\n        MsgBox(part1.Name, Title:=\"INFO\")\n\n        Dim bb As VPMRepOccurrence = prodRootRef.RepInstances.Item(2)\n        Dim oVPMRepRef2 As VPMRepReference = bb.ReferenceInstanceOf\n        Dim myDrawingRoot As DrawingRoot = oVPMRepRef2.GetItem(\"CATDrawingAccess\")\n        MsgBox(oVPMRepRef2.Name)\n\n\n        Dim DrwSheet 'As DrawingSheet\n        DrwSheet = myDrawingRoot.ActiveSheet\n\n        MsgBox(myDrawingRoot.Sheets.Count)\n\n        'Dim oDrawingService As DrawingService\n        'oDrawingService = CATIA.ActiveEditor.GetService(\"CATDrawingService\")\n\n        'Dim part2 As DrawingRoot = oVPMRepRef2.GetItem(\"Drawing\")\n        'MsgBox(part2.Name, Title:=\"INFO\")\n\n    End Sub\n\n\nEnd Module\n</code></pre></p>"},{"location":"DS-CODE/VBA/InstanciatePowerCopy/","title":"InstanciatePowerCopy","text":""},{"location":"DS-CODE/VBA/InstanciatePowerCopy/#pw","title":"PW","text":"<pre><code>' Instanciation of a PowerCopy Reference \"MyPowerCopy1\"\n' MyPowerCopy1 is stored in the CATPart \"e:\\tmp\\PowerCopyReference.CATPart\"\n' It has\n' 3 inputs: FirstHole, Support,and SecondHole\n' 2 published parameters: Radius1 and Radius2\n'------------------------------------------------------------------\n\n'------------------------------------------------------------------\n\nDim PartDocumentDest As PartDocument\nSet PartDocumentDest = CATIA.ActiveDocument\n\nDim PartDest As Part\nSet PartDest = PartDocumentDest.Part\n'------------------------------------------------------------------\n\nDim factory As InstanceFactory\nSet factory = PartDest.GetCustomerFactory(\"InstanceFactory\")\n'------------------------------------------------------------------\n\nfactory.BeginInstanceFactory \"TwoSurfacicHole\", \"e:\\tmp\\PowerCopyReference.CATPart\"\n'------------------------------------------------------------------\n\nfactory.BeginInstantiate\n'------------------------------------------------------------------\n\nDim FirstHole As Object\nSet FirstHole = PartDest.FindObjectByName(\"Point.1\")\n\nDim Support As Object\nSet Support = PartDest.FindObjectByName(\"Extrude.1\")\n\nDim SecondHole As Object\nSet SecondHole = PartDest.FindObjectByName(\"Point.2\")\n\nfactory.PutInputData \"FirstHole\", FirstHole\nfactory.PutInputData \"Support\", Support\nfactory.PutInputData \"SecondHole\", SecondHole\n'------------------------------------------------------------------\n\nDim param1 As Parameter\nSet param1 = factory.GetParameter(\"Radius1\")\nparam1.ValuateFromString(\"25mm\")\n\nDim param2 As Parameter\nSet param2 = factory.GetParameter(\"Radius2\")\nparam2.ValuateFromString(\"15mm\")\n'------------------------------------------------------------------\n\nDim Instance As ShapeInstance\nSet Instance = factory.Instantiate\n'------------------------------------------------------------------\nfactory.EndInstantiate\n'------------------------------------------------------------------\n\nfactory.EndInstanceFactory\n'------------------------------------------------------------------\nPartDest.Update\n</code></pre>"},{"location":"DS-CODE/VBA/InstanciatePowerCopy/#udf","title":"UDF","text":"<pre><code>' Instanciation of a User Feature Reference \"MyUserFeature2\" \n' MyUserFeature2 is stored in the CATPart \"e:\\tmp\\UserFeature_001_StartSweep.CATPart\"\n' It has\n' 2 inputs: Centre and Surface\n' 2 published parameters: Hauteur and Rayon\n' 1 output: Direction\n'------------------------------------------------------------------\n\n'------------------------------------------------------------------\nCatia.SystemService.Print \"Retrieve the current part\"\n\nDim PartDocumentDest As PartDocument\nSet PartDocumentDest = CATIA.ActiveDocument\n\nDim PartDest As Part\nSet PartDest = PartDocumentDest.Part\n'------------------------------------------------------------------\nCatia.SystemService.Print \"Retrieve the factory of the current part\"\n\nDim factory As InstanceFactory\nSet factory = PartDest.GetCustomerFactory(\"InstanceFactory\")\n'------------------------------------------------------------------\nCatia.SystemService.Print \"BeginInstanceFactory\"\n\nfactory.BeginInstanceFactory \"MyUserFeature2\", \"e:\\tmp\\UserFeature_001_StartSweep.CATPart\"\n'------------------------------------------------------------------\nCatia.SystemService.Print \"Begin Instantiation\"\n\nfactory.BeginInstantiate\n'------------------------------------------------------------------\nCatia.SystemService.Print \"Set Inputs\"\n\nDim Centre As Object\nSet Centre = PartDest.FindObjectByName(\"Point.1\")\n\nDim Surface As Object\nSet Surface = PartDest.FindObjectByName(\"Surface.1\")\n\nfactory.PutInputData \"Centre\", Centre\nfactory.PutInputData \"Surface\", Surface\n'------------------------------------------------------------------\nCatia.SystemService.Print \"Modify Parameters\"\n\nDim param1 As Parameter\nSet param1 = factory.GetParameter(\"Hauteur\")\nparam1.ValuateFromString(\"40mm\")\n\nDim param2 As Parameter\nSet param2 = factory.GetParameter(\"Rayon\")\nparam2.ValuateFromString(\"30mm\")\n'------------------------------------------------------------------\nCatia.SystemService.Print \"Instantiate\"\n\nDim Instance As ShapeInstance\nSet Instance = factory.Instantiate\n'------------------------------------------------------------------\nCatia.SystemService.Print \"End of Instantiation\"\nfactory.EndInstantiate\n'------------------------------------------------------------------\nCatia.SystemService.Print \"Release the reference document\"\n\nfactory.EndInstanceFactory\n'------------------------------------------------------------------\nCatia.SystemService.Print \"Update\"\nPartDest.Update\n</code></pre>"},{"location":"DS-CODE/VBA/ModifyUDFParamaters/","title":"\u7b2c\u4e8c\u4e2aUDF\u7684\u53c2\u6570\u53d6\u503c\u4e3a\u4e0a\u4e00\u4e2aUDF\u7684\u67d0\u4e2a\u503c","text":""},{"location":"DS-CODE/VBA/ModifyUDFParamaters/#python","title":"python","text":"<pre><code>importwin32com\nfromicecreamimportic\nfromwin32com.clientimportDispatch\n\ncatia=win32com.client.Dispatch(\"CATIA.Application\")\npart=catia.ActiveEditor.activeobject\nobj=catia.ActiveEditor.Selection.Item(1).Value\nic(\"type:\",obj.Name)\nic(\"PartName:\",part.name)\n\nicount=obj.hybridshapes.count\n\nFor I in range(1,icount):\n    udf1=obj.hybridshapes.item(i)\n    udf2=obj.hybridshapes.item(i+1)\n    parms1=part.parameters.sublist(udf1,True)\n    parms2=part.parameters.sublist(udf2,True)\n\n    parm1=parms1.item(3)\n    parm2=parms2.item(4)\n\n    s1=parm1.valueasstring()\n    parm2.ValuateFromString(s1)\n    ic(udf1.name,parm1.valueasstring(),udf2.name,parm2.valueasstring())\n\n\nif__name__=='__main__':\nprint()\n</code></pre>"},{"location":"DS-CODE/VBA/ModifyUDFParamaters/#vb","title":"VB","text":"<pre><code>Sub main()\n\nSet Part = CATIA.ActiveDocument.Part\nSet obj = CATIA.ActiveDocument.Selection.Item(1).Value\n\nicount = obj.HybridShapes.Count\n\nFor i = 1 To 9\n\n    Set udf1 = obj.HybridShapes.Item(i)\n    Set udf2 = obj.HybridShapes.Item(i + 1)\n\n    Set parms1 = Part.Parameters.SubList(udf1, True)\n    Set parms2 = Part.Parameters.SubList(udf2, True)\n\n    Dim parm1 As Parameter\n    Dim parm2 As Parameter\n\n    Set parm1 = parms1.Item(5)\n    Set parm2 = parms2.Item(4)\n\n    Dim s1 As String\n    s1 = parm1.ValueAsString()\n    parm2.ValuateFromString s1\n\n    Part.Update\n\n\nNext\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/VBA/Reactions/","title":"Reactions","text":"<pre><code>Dim LoopNum as Integer \n\n\nset current =  MechanicalFeature \n\n\nfound = false \nWhile found = false \nset Current = Current.parent \nIf TypeName(Current) = \"Part\" then \nfound = true \nend if \nwend \n\n\nset CurrentParams = Current.Parameters.Sublist(MechanicalFeature,true) \n\n\nFor LoopNum = 1 to CurrentParams.count \nIf instr(CurrentParams.item(LoopNum).name,\"PowerCopyName\") then \nCurrentName = CurrentParams.item(LoopNum).value \nend if \nnext \n\n\ndim EndLoopNum as Integer \nEndLoopNum =  Current.HybridBodies.Count \n\n\ndim MySel as Selection \nset MySel = CATIA.ActiveDocument.Selection \n\n\nif MySel.Count &lt;0 then \nMySel.Clear \nend if \n\n\n'---- Delete MULLIONPREFIX SETS FIRST  \nFor LoopNum = 1 to EndLoopNum \nIf instr(Current.HybridBodies.Item(LoopNum).Name, \"MULLIONPREFIX_\") &lt;0 then \nset Mn = Current.HybridBodies.Item(LoopNum) \nMySel.Add Mn \nend if \nnext \n\n\nIf MySel.Count &lt;0 then \nMySel.Delete \nend if \n\n\nSet CurrentSURFACE = MechanicalFeature.HybridBodies.Item(\"TRANSITION\").HybridShapes.Item(\"DRIVER_SURFACE\") \n\n\nSet ShapeFact = Current.HybridShapeFactory \n\n\nDim InstFact as InstanceFactory \nSet InstFact = Current.GetCustomerFactory(\"InstanceFactory\") \n\n\nInstFact.EndInstanceFactory \nInstFact.BeginInstanceFactory \"SUB_BEAM_SURFACE\", (\"C:\\PowerCopies\\\" &amp; CurrentName   &amp; \".CATPart\") \n\nFor LoopNum = 1 To  MechanicalFeature.HybridBodies.Item(\"PERM_CURVESET\").HybridShapes.Count      'CurrentNum \n\n\nSet CurrentCURVE = MechanicalFeature.HybridBodies.Item(\"PERM_CURVESET\").HybridShapes.Item(LoopNum) \nSet CrvCURVERef = Current.CreateReferenceFromObject(CurrentCURVE )  \n\n\nInstFact.BeginInstantiate  \n\n\nInstFact.PutInputData \"MULLION_wireframe\", CurrentCURVE              'CrvCURVERef \nInstFact.PutInputData \"GLASS_surface\", CurrentSURFACE                 'CrvSURFACERef \n\n\nDim instance as ShapeInstance \nSet instance = InstFact.Instantiate \n\n\nInstFact.EndInstantiate \n\n\nNext \n\n\nInstFact.EndInstanceFactory \n\n\nFor CX = 1 to Current.HybridBodies.Count \nIf instr(Current.HybridBodies.Item(LoopNum).Name, \"MULLIONPREFIX_\") &lt;0 then \nset Mn2 = Current.HybridBodies.Item(LoopNum).HybridBodies.Item(\"OUTPUT\").HybridShapes.Item(1) \nCurrent.UpdateObject Mn2 \nend if \nnext \n\n\nEnd sub \n\n\n\u6765\u81ea &lt;http://www.gtwiki.org/mwiki/index.php?title=Reactions_that_Instantiate_Powercopies \n</code></pre>"},{"location":"DS-CODE/VBA/RenameTheDrawing/","title":"RenameTheDrawing","text":"<pre><code>Sub CATMain()\n\nDim oSht\nSet oSht = CATIA.ActiveEditor.ActiveObject.Sheets.Item(1)\nCATIA.ActiveEditor.ActiveObject.ActiveSheet = oSht\n\nFor i = 1 To CATIA.ActiveEditor.ActiveObject.Sheets.Count\n    'CATIA.ActiveEditor.ActiveObject.Sheets.Item(I).Name = \"DPG-SHEET-\" + CStr(I)\n\n    Dim cDrawingViews As DrawingViews\n    Set cDrawingViews = oSht.Views\n\n    For j = 1 To oSht.Views.Count\n        Dim MyView As DrawingView\n        Set MyView = oSht.Views.ActiveView\n\n        'MyView.Scale\n    Next\nNext\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/VBA/SUMMARY/","title":"Summary","text":"<ul> <li>CAA Tool list</li> <li>Create Bridge Skeleton</li> <li>CreatePointFromExcel</li> <li> <p>vba call exe</p> </li> <li> <p>Python Tools</p> </li> <li>\u81ea\u52a8\u7ffb\u9875\u622a\u56fe</li> </ul>"},{"location":"DS-CODE/VBA/SelectElement3%20Values/","title":"SelectElement3 Values","text":"<p>Values to use as selection filter. Role: Values which can be given as filter to Selection.SelectElement2, Selection.SelectElement3, Selection.IndicateOrSelectElement2D or Selection.IndicateOrSelectElement3D, beside the automation object names. Values:</p> <p>ZeroDim Topological 0-D entity (such as a Point2D )</p> <p>MonoDim Topological 1-D entity which cannot be infinite (such as a HybridShapeSpline)</p> <p>MonoDimInfinite Topological 1-D entity which may be infinite, such as a HybridShapeSpline (not infinite) or a HybridShapeLinePtDir for which a call to HybridShapeLinePtDir.GetLengthType would give 1, 2 or 3 (infinite)</p> <p>RectilinearMonoDim 1-D entity which cannot be infinite, the entity having a rectilinear geometry</p> <p>RectilinearMonoDimInfinite 1-D entity which may be infinite, the entity having a rectilinear geometry</p> <p>BiDim Topological 2-D entity which cannot be infinite (such as a HybridShapeCylinder )</p> <p>BiDimInfinite Topological 2-D entity which may be infinite, such as a HybridShapeCylinder (non infinite) or a HybridShapePlaneOffsetPt (infinite)</p> <p>PlanarBiDim 2-D entity which cannot be infinite, the entity having a planar geometry</p> <p>PlanarBiDimInfinite 2-D entity having a planar geometry</p> <p>CylindricalBiDim 2-D entity which cannot be infinite, the entity having a cylindrical geometry</p> <p>TriDim Topological 3-D entity (such as a Pad ) </p>"},{"location":"DS-CODE/VBA/VB%20create%20formula/","title":"VB create formula","text":""},{"location":"DS-CODE/VBA/VB%20create%20formula/#vb","title":"VB\u521b\u5efa\u516c\u5f0f","text":"<pre><code>Sub CATMain()\n    Dim Edit As Editor\n    Set Edit = CATIA.ActiveEditor\n\n    Dim part1 As Part\n    Set part1 = Edit.ActiveObject\n\n    Dim p1 As HybridShape\n    Set p1 = part1.MainBody.HybridShapes.Item(2)//\u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u7279\u5f81\u5373\u53ef\u521b\u5efa\u516c\u5f0f\n\n    Dim parameters1 As Parameters\n    Set parameters1 = part1.Parameters.SubList(p1, True)\n\n    Dim strParam1 As Parameter\n    Set strParam1 = parameters1.Item(2)//\u83b7\u53d6\u7279\u5f81\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\n\n\n    Dim strParam2 As Parameter\n      Set strParam2 = part1.Parameters.RootParameterSet.DirectParameters.Item(1)//\u83b7\u53d6\u9700\u8981\u5173\u8054\u7684\u53c2\u6570,\u6839\u53c2\u6570\u96c6\n\n    Dim str As String\n    str = part1.Parameters.GetNameToUseInRelation(strParam2)\n\n    MsgBox str\n    Dim Rel As Relations\n    Set Rel = part1.Relations\n    Dim massFormula As Formula\n    Set massFormula = Rel.CreateFormula(\"Test\", \"\", strParam1, str)//\u521b\u5efa\u516c\u5f0f\n\n    part1.Update\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/VBA/VBACallExE/","title":"vba call exe","text":"<pre><code>Sub CATMain()\n\nDim strProgramName As String\n\nstrProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\100-\u7acb\u9762\u56fe\u81ea\u52a8\u6807\u6ce82.exe\"\nstrProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\101-\u5e73\u9762\u56fe\u81ea\u52a8\u6807\u6ce82.exe\"\nstrProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\200-\u76d6\u6881\u9876\u90e8\u94a2\u7b4b\u6807\u6ce8.exe\"\nstrProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\201-\u76d6\u6881\u5e95\u90e8\u94a2\u7b4b\u6807\u6ce8.exe\"\nstrProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\202-\u76d6\u6881\u540e\u4fa7\u94a2\u7b4b\u6807\u6ce832.exe\"\nstrProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\203-\u76d6\u6881\u4fa7\u94a2\u7b4b\u6807\u6ce831.exe\"\nstrProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\204-\u5c01\u951a\u7aef\u90e8\u94a2\u7b4b\u6807\u6ce8.exe\"\nstrProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\300-\u6750\u6599\u7edf\u8ba1_\u4e2d\u6587\u73af\u5883.exe\"\nstrProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\301-\u6750\u6599\u7edf\u8ba1.exe\"\nstrProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\400-\u652f\u5ea7\u5206\u5e03\u56fe2.exe\"\nstrProgramName = \"D:\\003_Projects\\SUCDRI\\VIDEO\\YMA\\APP\\Macro\\500-\u5206\u677f\u56fe\u81ea\u52a8\u6807\u6ce8.exe\"\n\nCall Shell(\"\"\"\" &amp; strProgramName &amp; \"\"\"\", vbNormalFocus)\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/VBA/VBS%20Start%20CATIA/","title":"VBS Start CATIA","text":"VBSJavaScriptHtml <pre><code>Dim CATIA 'As Object\n\n'Get CATIA or Launch it if necessary.\nOn Error Resume Next\nSet CATIA = Wscript.GetObject(,\"CATIA.Application\")\nIf Err.Number &lt;&gt; 0 Then\n    Set CATIA = Wscript.CreateObject(\"CATIA.Application\")\n    CATIA.Visible = True\nEnd If\nOn Error GoTo 0\n\n' Add a new Part\nSet MyDocument = CATIA.Documents.Add(\"Part\")\nSet PartFactory = MyDocument.Part.ShapeFactory  ' Retrieve the Part Factory.\nSet MyBody1 = MyDocument.Part.Bodies.Item(\"\u96f6\u4ef6\u51e0\u4f55\u4f53\")\nCATIA.ActiveDocument.Part.InWorkObject = MyBody1 ' Activate \"PartDesign\"\n\n' Creating the Shaft\nSet ReferencePlane1 = MyDocument.Part.CreateReferenceFromGeometry(MyDocument.Part.OriginElements.PlaneYZ)\n\n' Create the sketch1 on ReferencePlane1\nSet Sketch1 = MyBody1.Sketches.Add(ReferencePlane1)\nSet MyFactory1 = Sketch1.OpenEdition() ' Define the sketch\n\nh1 = 80 ' height of the bolt\nh2 = 300 ' total height\nr1 = 120 ' external radius\nr2 = 60 ' Internal radius\ns1 = 20 ' Size of the chamfer\n\nSet l101 = MyFactory1.CreateLine(0, 0, r1 - 20, 0)\nSet l102 = MyFactory1.CreateLine(r1 - 20, 0, r1, -20)\nSet l103 = MyFactory1.CreateLine(r1, -20, r1, -h1 + 20)\nSet l104 = MyFactory1.CreateLine(r1, -h1 + 20, r1 - 20, -h1)\nSet l105 = MyFactory1.CreateLine(r1 - 20, -h1, r2, -h1)\nSet l106 = MyFactory1.CreateLine(r2, -h1, r2, -h2 + s1)\nSet l107 = MyFactory1.CreateLine(r2, -h2 + s1, r2 - s1, -h2)\nSet l108 = MyFactory1.CreateLine(r2 - s1, -h2, 0, -h2)\nSet l109 = MyFactory1.CreateLine(0, -h2, 0, 0)\nSketch1.CenterLine = l109\n\nSketch1.CloseEdition\nSet AxisPad1 = PartFactory.AddNewShaft(Sketch1)\n\n' Creating the Pocket\nSet ReferencePlane2 = MyDocument.Part.CreateReferenceFromGeometry(MyDocument.Part.OriginElements.PlaneXY)\n\n' Create the sketch2 on ReferencePlane2\nSet Sketch2 = MyBody1.Sketches.Add(ReferencePlane2)\nSet MyFactory2 = Sketch2.OpenEdition() ' Define the sketch\nD = 1 / 0.866\n\nSet l201 = MyFactory2.CreateLine(D * 100, 0, D * 50, D * 86.6)\nSet l202 = MyFactory2.CreateLine(D * 50, D * 86.6, D * -50, D * 86.6)\nSet l203 = MyFactory2.CreateLine(D * -50, D * 86.6, D * -100, 0)\nSet l204 = MyFactory2.CreateLine(D * -100, 0, D * -50, D * -86.6)\nSet l205 = MyFactory2.CreateLine(D * -50, D * -86.6, D * 50, D * -86.6)\nSet l206 = MyFactory2.CreateLine(D * 50, D * -86.6, D * 100, 0)\n\n' Create a big circle around the form to get a Hole\nSet c2 = MyFactory2.CreateClosedCircle(0, 0, 300)\n\nSketch2.CloseEdition\nSet AxisHole2 = PartFactory.AddNewPocket(Sketch2, h1)\n\nMyDocument.Part.Update\n</code></pre> <pre><code>var CATIA CATIA = WScript.GetObject(\"\",\"CATIA.Application\");\nif ( CATIA == null) {\nCATIA = WScript.CreateObject(\"CATIA.Application\");\n}\nCATIA.Visible = true;\n\n// Add a new Part\nMyDocument = CATIA.Documents.Add(\"Part\");\nPartFactory = MyDocument.Part.ShapeFactory ; //  Retrieve the Part Factory.\nMyBody1 = MyDocument.Part.Bodies.Item(\"\u96f6\u4ef6\u51e0\u4f55\u4f53\");\nCATIA.ActiveDocument.Part.InWorkObject = MyBody1; // Activate \"PartDesign\"\n\n// Creating the Shaft\nReferencePlane1 = MyDocument.Part.CreateReferenceFromGeometry(MyDocument.Part.OriginElements.PlaneYZ);\n\n// Create the sketch1 on ReferencePlane1\nSketch1 = MyBody1.Sketches.Add(ReferencePlane1);\nMyFactory1 = Sketch1.OpenEdition();// Define the sketch\n\nh1 = 80; // height of the bolt\nh2 = 300; // total height\nr1 = 120; // external radius\nr2 = 60; // Internal radius\ns1 = 20; // Size of the chamfer\n\nl101 = MyFactory1.CreateLine(0, 0, r1 - 20, 0);\nl102 = MyFactory1.CreateLine(r1 - 20, 0, r1, -20);\nl103 = MyFactory1.CreateLine(r1, -20, r1, -h1 + 20);\nl104 = MyFactory1.CreateLine(r1, -h1 + 20, r1 - 20, -h1);\nl105 = MyFactory1.CreateLine(r1 - 20, -h1, r2, -h1);\nl106 = MyFactory1.CreateLine(r2, -h1, r2, -h2 + s1);\nl107 = MyFactory1.CreateLine(r2, -h2 + s1, r2 - s1, -h2);\nl108 = MyFactory1.CreateLine(r2 - s1, -h2, 0, -h2);\nl109 = MyFactory1.CreateLine(0, -h2, 0, 0);\nSketch1.CenterLine = l109;\n\nSketch1.CloseEdition();\nAxisPad1 = PartFactory.AddNewShaft(Sketch1);\n\n// Creating the Pocket\nReferencePlane2 = MyDocument.Part.CreateReferenceFromGeometry(MyDocument.Part.OriginElements.PlaneXY);\n\n// Create the sketch2 on ReferencePlane2\nSketch2 = MyBody1.Sketches.Add(ReferencePlane2);\nMyFactory2 = Sketch2.OpenEdition(); // Define the sketch\nD = 1 / 0.866;\n\nl201 = MyFactory2.CreateLine(D * 100, 0, D * 50, D * 86.6);\nl202 = MyFactory2.CreateLine(D * 50, D * 86.6, D * -50, D * 86.6);\nl203 = MyFactory2.CreateLine(D * -50, D * 86.6, D * -100, 0);\nl204 = MyFactory2.CreateLine(D * -100, 0, D * -50, D * -86.6);\nl205 = MyFactory2.CreateLine(D * -50, D * -86.6, D * 50, D * -86.6);\nl206 = MyFactory2.CreateLine(D * 50, D * -86.6, D * 100, 0);\n\n// Create a big circle around the form to get a Hole\nc2 = MyFactory2.CreateClosedCircle(0, 0, 300);\n\nSketch2.CloseEdition();\nAxisHole2 = PartFactory.AddNewPocket(Sketch2, h1);\n\nMyDocument.Part.Update();\n</code></pre> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;JavaScript&lt;/title&gt;\n\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;h1&gt;Creating a BOLT in CATIA V5 from HTML with Javascript&lt;/h1&gt;\n\n&lt;FORM&gt;\n&lt;INPUT TYPE=\"button\" VALUE=\"BOLT\" ONCLICK=\"LaunchCATIAV5()\"&gt;\n&lt;/FORM&gt;\n\n&lt;script language=\"Javascript\"&gt;\n\nfunction LaunchCATIAV5()\n{\nvar CATIA CATIA = new ActiveXObject(\"CATIA.Application\");\nCATIA.Visible = true;\n\n// Add a new Part\nMyDocument = CATIA.Documents.Add(\"Part\");\nPartFactory = MyDocument.Part.ShapeFactory ; //  Retrieve the Part Factory.\nMyBody1 = MyDocument.Part.Bodies.Item(\"PartBody\");\nCATIA.ActiveDocument.Part.InWorkObject = MyBody1; // Activate \"PartDesign\"\n\n// Creating the Shaft\nReferencePlane1 = MyDocument.Part.CreateReferenceFromGeometry(MyDocument.Part.OriginElements.PlaneYZ);\n\n// Create the sketch1 on ReferencePlane1\nSketch1 = MyBody1.Sketches.Add(ReferencePlane1);\nMyFactory1 = Sketch1.OpenEdition();// Define the sketch\n\nh1 = 80; // height of the bolt\nh2 = 300; // total height\nr1 = 120; // external radius\nr2 = 60; // Internal radius\ns1 = 20; // Size of the chamfer\n\nl101 = MyFactory1.CreateLine(0, 0, r1 - 20, 0);\nl102 = MyFactory1.CreateLine(r1 - 20, 0, r1, -20);\nl103 = MyFactory1.CreateLine(r1, -20, r1, -h1 + 20);\nl104 = MyFactory1.CreateLine(r1, -h1 + 20, r1 - 20, -h1);\nl105 = MyFactory1.CreateLine(r1 - 20, -h1, r2, -h1);\nl106 = MyFactory1.CreateLine(r2, -h1, r2, -h2 + s1);\nl107 = MyFactory1.CreateLine(r2, -h2 + s1, r2 - s1, -h2);\nl108 = MyFactory1.CreateLine(r2 - s1, -h2, 0, -h2);\nl109 = MyFactory1.CreateLine(0, -h2, 0, 0);\nSketch1.CenterLine = l109;\n\nSketch1.CloseEdition();\nAxisPad1 = PartFactory.AddNewShaft(Sketch1);\n\n// Creating the Pocket\nReferencePlane2 = MyDocument.Part.CreateReferenceFromGeometry(MyDocument.Part.OriginElements.PlaneXY);\n\n// Create the sketch2 on ReferencePlane2\nSketch2 = MyBody1.Sketches.Add(ReferencePlane2);\nMyFactory2 = Sketch2.OpenEdition(); // Define the sketch\nD = 1 / 0.866;\n\nl201 = MyFactory2.CreateLine(D * 100, 0, D * 50, D * 86.6);\nl202 = MyFactory2.CreateLine(D * 50, D * 86.6, D * -50, D * 86.6);\nl203 = MyFactory2.CreateLine(D * -50, D * 86.6, D * -100, 0);\nl204 = MyFactory2.CreateLine(D * -100, 0, D * -50, D * -86.6);\nl205 = MyFactory2.CreateLine(D * -50, D * -86.6, D * 50, D * -86.6);\nl206 = MyFactory2.CreateLine(D * 50, D * -86.6, D * 100, 0);\n\n// Create a big circle around the form to get a Hole\nc2 = MyFactory2.CreateClosedCircle(0, 0, 300);\n\nSketch2.CloseEdition();\nAxisHole2 = PartFactory.AddNewPocket(Sketch2, h1);\n\nMyDocument.Part.Update();\n\n\n}\n&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"DS-CODE/VBA/chapter_1/","title":"\u524d\u8a00","text":""},{"location":"DS-CODE/VBA/%E5%9B%BE%E7%BA%B8%E6%A0%87%E6%B3%A8/","title":"\u56fe\u7eb8\u6807\u6ce8","text":""},{"location":"DS-CODE/VBA/%E5%9B%BE%E7%BA%B8%E6%A0%87%E6%B3%A8/#case1","title":"case1","text":"<p>The following example creates a drawing angle dimension between two lines and a partial curvilinear length dimension on an ellipse and retrieved in MyDimension1 and MyDimension2 in the drawing view collection of the MyView drawing view. This view belongs to the drawing view collection of the drawing sheet</p> <pre><code>Dim MyView As DrawingView\nSet MyView = MySheet.Views.ActiveView\nDim Fact2D  As Factory2D\nSet Fact2D = MyView.Factory2D\nDim Line1 As Line2D\nDim Line2 As Line2D\nSet Line1 = Fact2D.CreateLine(50, 10, 150, 10)\nSet Line2 = Fact2D.CreateLine(50, 10, 120, 100)\nDim Ellipse1 As Ellipse2D\nSet Ellipse1 = Fact2D.CreateEllipse(-40, 100, 120, 180,120,90,0, 3)\nDim Point1 As Point2D\nDim Point2 As Point2D\nSet Point1 = Fact2D.CreatePoint(-10,190)\nSet Point2 = Fact2D.CreatePoint(-120,90)\nDim iType As catDimType\niType = catDimAngle\nDim myElements1(1)\nmyElements1(1) = Array(Line1,Line2)\nDim selpoints(3)\nselpoints(3) = Array(150, 10, 120, 100)\nDim MyDimension1 As DrawingDimension\nSet MyDimension1 = MyView.Dimensions.Add(iType, myElements1(1), selpoints(3),catDimAuto)\niType = catDimLengthCurvilinear\nDim myElements2(2)\nmyElements2(2) = Array(Point1,Point2,Ellipse1)\nselpoints(3) = Array(0, 0, 0, 0)\nDim MyDimension2 As DrawingDimension\nSet MyDimension2 = MyView.Dimensions.Add(iType, myElements2(1), selpoints(3),catDimOffset)\n</code></pre>"},{"location":"DS-CODE/VBA/%E5%9B%BE%E7%BA%B8%E6%A0%87%E6%B3%A8/#case2","title":"case2","text":"<pre><code>Dim MyView As DrawingView\nSet MyView = MySheet.Views.ActiveView\nDim Fact2D  As Factory2D\nSet Fact2D = MyView.Factory2D\nDim Point1 As Point2D\nDim Point2 As Point2D\nSet Point1 = Fact2D.CreatePoint(40, 230)\nSet Point2 = Fact2D.CreatePoint(80, 210)\nDim Line1 As Line2D\nSet Line1 = Fact2D.CreateLine(50, 10, 150, 10)\nDim iType As catDimType\niType = catDimDistance\nDim myElements(1)\nmyElements(1) = Array(Point1,Point2)\nDim selpoints(3)\nselpoints(3) = Array(0, 0, 0, 0)\nDim MyDimension As DrawingDimension\nSet MyDimension = MyView.Dimensions.Add2(iType, myElements(1), selpoints(3), Line1, 0)\n</code></pre>"},{"location":"DS-CODE/VBA/%E6%9B%B4%E6%96%B0%E5%8F%82%E6%95%B0%E5%AF%BC%E5%87%BA%E6%88%AA%E5%9B%BE/","title":"\u66f4\u65b0\u53c2\u6570\u5bfc\u51fa\u622a\u56fe","text":"<pre><code>Sub CATMain()\n\nDim partDocument1 As PartDocument\nSet partDocument1 = CATIA.ActiveDocument\n\nDim part1 As Part\nSet part1 = partDocument1.Part\n\nDim parm1 As Parameter\nSet parm1 = part1.Parameters.Item(\"Angle.1\")\n\nMsgBox parm1.ValueAsString()\n\nFor i = 1 To 360\n\n    Dim str As String\n    str = CStr(i) &amp; \"deg\"\n\n    parm1.ValuateFromString (str)\n\n    CATIA.ActiveWindow.ActiveViewer.CaptureToFile catCaptureFormatJPEG, \"C:\\temp\\cc\\\" &amp; \"\\MyImage\" &amp; i &amp; \".jpg\"\n    part1.Update\n\nNext\n\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/VBA/%E6%A0%87%E6%B3%A8%E8%87%AA%E5%8A%A8%E5%8C%96/","title":"drafting","text":"<pre><code>Sub CATMain()\n\nDim partDocument1 As PartDocument\nSet partDocument1 = CATIA.ActiveDocument\n\nDim part1 As part\nSet part1 = partDocument1.part\n\nDim hybridShapeFactory1 As HybridShapeFactory\nSet hybridShapeFactory1 = part1.HybridShapeFactory\n\nDim hb1 As HybridBody\nSet hb1 = part1.HybridBodies.Item(\"DIM_UDF\")\n\nFor i = 1 To hb1.HybridShapes.Count\n\n    Dim udf1 As HybridShapeInstance\n    Set udf1 = hb1.HybridShapes.Item(i)\n\n    Dim tt As String\n    tt = GetAnnoUDFType(part1, udf1)\n\n\nNext\n\n\n\n\npart1.Update\n\nEnd Sub\n\nFunction GetAnnoUDFType(ByVal part1 As part, ByVal udf1 As HybridShapeInstance) As String\n\nDim parms As Parameters\nSet parms = part1.Parameters.SubList(udf1, True)\n\nDim parm1 As Parameter\nSet parm1 = parms.Item(\"Type\")\n\nDim strType As String\nstrType = parm1.ValueAsString()\n\nGetAnnoUDFType = strType\n\nEnd Function\n</code></pre>"},{"location":"DS-CODE/VBA/%E8%87%AA%E5%8A%A8%E6%A0%87%E6%B3%A8%E7%89%B9%E5%BE%81/","title":"\u81ea\u52a8\u6807\u6ce8\u7279\u5f81","text":"CATAECAnnOnePoint <pre><code>    Sub CATMain()\n\n    Dim PartDocumentDest As PartDocument\n    Set PartDocumentDest = CATIA.ActiveDocument\n\n    Dim PartDest As part\n    Set PartDest = PartDocumentDest.part\n\n    For i = 1 To CATIA.ActiveDocument.Selection.Count\n\n        Dim hb1 As HybridBody\n        Set hb1 = CATIA.ActiveDocument.Selection.Item(i).Value\n\n        For j = 1 To hb1.HybridShapes.Count\n\n            Dim factory As InstanceFactory\n            Set factory = PartDest.GetCustomerFactory(\"InstanceFactory\")\n\n            factory.BeginInstanceFactory \"CATAECAnnOnePoint\", \"D:\\project\\2211-ZJIC-TUNNEL\\MODEL\\V5-MODEL\\Template\\knowledgeResources\\DimTemp\\CATAECAnnOnePoint.CATPart\"\n\n            factory.BeginInstantiate\n\n\n            Dim Input1 As Object\n            Set Input1 = hb1.HybridShapes.Item(j)\n\n            Dim Input2 As Object\n            Set Input2 = PartDest.FindObjectByName(\"Axis System.1\")\n\n            factory.PutInputData \"pt\", Input1\n            factory.PutInputData \"axis\", Input2\n\n\n\n    '        Dim param1 As Parameter\n    '        Set param1 = factory.GetParameter(\"Radius1\")\n    '        param1.ValuateFromString (\"25mm\")\n    '\n    '        Dim param2 As Parameter\n    '        Set param2 = factory.GetParameter(\"Radius2\")\n    '        param2.ValuateFromString (\"15mm\")\n\n            Dim Instance As HybridShapeInstance\n            Set Instance = factory.Instantiate\n\n            factory.EndInstantiate\n            factory.EndInstanceFactory\n        Next\n    Next\n    PartDest.Update\n    End Sub\n</code></pre>"},{"location":"DS-CODE/VBA/%E9%81%8D%E5%8E%86V6%20product%20Tree/","title":"\u904d\u5386V6 product Tree","text":""},{"location":"DS-CODE/VBA/%E9%81%8D%E5%8E%86V6%20product%20Tree/#v6","title":"V6\u904d\u5386\u7ed3\u6784\u6811","text":"<pre><code>Sub CATMain()\n\nDim oEditor  As INFITF.Editor\nSet oEditor = CATIA.ActiveEditor\n\nDim oProductRootService As PLMProductService\nSet oProductRootService = oEditor.GetService(\"PLMProductService\")\n\nDim sel As Selection\nSet sel = CATIA.ActiveEditor.Selection\n\n'VPMRootOccurrence oVPMRootOccOnRoot =(VPMRootOccurrence)sel.Item(1).Value;//oProductRootService.RootOccurrence;\n'VPMReference oVPMRoot = oVPMRootOccOnRoot.ReferenceRootOccurrenceOf;\n\nDim oVPMRootOccOnRoot As VPMOccurrence\nSet oVPMRootOccOnRoot = sel.Item(1).Value\n\n\nDim MyRootOccurrences As VPMOccurrences\nSet MyRootOccurrences = oVPMRootOccOnRoot.Occurrences\n\n\nFor i = 1 To MyRootOccurrences.Count\n\n    Dim MyOccurrence As VPMOccurrence\n    Set MyOccurrence = MyRootOccurrences.Item(i)\n\n    Dim MyRepInstances As VPMRepInstances\n    Set MyRepInstances = MyOccurrence.InstanceOccurrenceOf.ReferenceInstanceOf\n\n    Dim oVPMRepInst As VPMRepInstance\n    Set oVPMRepInst = MyRepInstances.Item(1)\n    Dim oVPMRepRef As VPMRepReference\n    Set oVPMRepRef = oVPMRepInst.ReferenceInstanceOf\n\n    Dim part As part\n    Set part = oVPMRepRef.GetItem(\"Part\")\n\n    Debug.Print part.Name\n\n\n'    Dim hb As HybridBody\n'    Set hb = part.HybridBodies.Add()\n'    hb.Name = \"tesddddddtdd\"\n\nNext\n\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/VBA/CATIA%E5%87%BA%E5%9B%BE/DRAFTING-VBA%E5%87%BA%E5%9B%BE/","title":"Drafting","text":""},{"location":"DS-CODE/VBA/CATIA%E5%87%BA%E5%9B%BE/DRAFTING-VBA%E5%87%BA%E5%9B%BE/#_1","title":"\u83b7\u5f97\u5f53\u524d\u6587\u6863","text":"<pre><code>Sub CATMain()\n'Dim oDrwRoot As DrawingRootSet\n'oDrwRoot = CATIA.ActiveEditor.ActiveObject\nDim oSht\nSet oSht = CATIA.ActiveEditor.ActiveObject.Sheets.Item(1)\nCATIA.ActiveEditor.ActiveObject.ActiveSheet = oSht\nMsgBox oSht.Name\nEnd Sub\n</code></pre> <p>\u521b\u5efa\u89d2\u5ea6\u6807\u6ce8</p> <pre><code>Imports CATANNOTITF\nImports DRAFTINGITF\nImports MECMOD\n\nModule Module1\n\n    Sub Main()\n        CATMain()\n    End Sub\n    Sub CATMain()\n        Dim CATIA As INFITF.Application\n        CATIA = GetObject(, \"CATIA.Application\")\n        'Dim oDrwRoot As DrawingRoot\n        'oDrwRoot = CATIA.ActiveEditor.ActiveObject\n\n        Dim oSht\n        oSht = CATIA.ActiveEditor.ActiveObject.Sheets.Item(2)\n        'CATIA.ActiveEditor.ActiveObject.ActiveSheet = oSht\n\n        MsgBox(oSht.Name, Title:=\"Warning\")\n\n        Dim cDrawingViews As DrawingViews\n        cDrawingViews = oSht.Views\n\n        ' Debug.Print(cDrawingViews.Name)\n\n\n        Dim MyView As DrawingView\n        MyView = oSht.Views.ActiveView\n\n        Dim Fact2D As Factory2D\n        Fact2D = MyView.Factory2D\n\n        Dim Line1 As Line2D\n        Dim Line2 As Line2D\n        Line1 = Fact2D.CreateLine(50, 10, 150, 10)\n        Line2 = Fact2D.CreateLine(50, 10, 120, 100)\n\n        Dim Ellipse1 As Ellipse2D\n        Ellipse1 = Fact2D.CreateEllipse(-40, 100, 120, 180, 120, 90, 0, 3)\n\n        Dim Point1 As Point2D\n        Dim Point2 As Point2D\n\n        Point1 = Fact2D.CreatePoint(-10, 190)\n        Point2 = Fact2D.CreatePoint(-120, 90)\n\n        Dim iType As CatDimType\n        iType = CatDimType.catDimAngle\n\n        'Dim myElements1(1)\n        'myElements1(1) = Array{Line1, Line2}\n        'Dim selpoints(3)\n        'selpoints(3) = Array(150, 10, 120, 100)\n        Dim myElements1()\n        ReDim myElements1(1)\n        myElements1(0) = Line1\n        myElements1(1) = Line2\n\n        Dim selpoints()\n        ReDim selpoints(3)\n        selpoints(0) = 150\n        selpoints(1) = 10\n        selpoints(2) = 120\n        selpoints(3) = 100\n\n\n        Dim MyDimension1 'As DrawingDimension\n        MyDimension1 = MyView.Dimensions.Add(iType, myElements1, selpoints, CatDimLineRep.catDimAuto)\n        iType = CatDimType.catDimLengthCurvilinear\n        'Dim myElements2(2)\n        'myElements2(2) = Array(Point1, Point2, Ellipse1)\n        'selpoints(3) = Array(0, 0, 0, 0)\n        'Dim MyDimension2 As DrawingDimension\n        'MyDimension2 = MyView.Dimensions.Add(iType, myElements2(1), selpoints(3), CatDimLineRep.catDimOffset)\n\n        Console.ReadKey()\n\n    End Sub\nEnd Module\n</code></pre>"},{"location":"DS-CODE/VBA/CATIA%E5%87%BA%E5%9B%BE/DRAFTING-VBA%E5%87%BA%E5%9B%BE/#sheet-renamethedrawingbas","title":"SHEET \u6279\u91cf\u8be5\u540d\u79f0 -RenameTheDrawing.bas","text":"<pre><code>Sub CATMain()\nDim oSht\nSet oSht = CATIA.ActiveEditor.ActiveObject.Sheets.Item(1)\nCATIA.ActiveEditor.ActiveObject.ActiveSheet = oSht\nFor I = 1 To CATIA.ActiveEditor.ActiveObject.Sheets.Count\n    CATIA.ActiveEditor.ActiveObject.Sheets.Item(I).Name = \"DPG-SHEET-\" + CStr(I)\nNext\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/VBA/Draw%E3%81%A7%E9%80%A3%E7%95%AA%E3%81%AE%E6%96%87%E5%AD%97%E3%82%92%E4%BD%9C%E3%82%8B.md/Draw%E3%81%A7%E9%80%A3%E7%95%AA%E3%81%AE%E6%96%87%E5%AD%97%E3%82%92%E4%BD%9C%E3%82%8B/","title":"Draw\u3067\u9023\u756a\u306e\u6587\u5b57\u3092\u4f5c\u308b","text":""},{"location":"DS-CODE/VBA/Draw%E3%81%A7%E9%80%A3%E7%95%AA%E3%81%AE%E6%96%87%E5%AD%97%E3%82%92%E4%BD%9C%E3%82%8B.md/Draw%E3%81%A7%E9%80%A3%E7%95%AA%E3%81%AE%E6%96%87%E5%AD%97%E3%82%92%E4%BD%9C%E3%82%8B/#draw","title":"Draw\u3067\u9023\u756a\u306e\u6587\u5b57\u3092\u4f5c\u308b","text":"<p>CATIA_V5VBAKCL CATIA\u30cd\u30bf\u306e\u5ea6\u306b \"\u4e45\u3005\" \u3063\u3066\u66f8\u3044\u3061\u3083\u3046\u306e\u3067\u3059\u304c\u3001\u4e45\u3005\u306bCATIA\u306e\u30de\u30af\u30ed\u3067\u3059\u3002</p> <p>Draw\u306e\u4f5c\u696d\u3057\u3066\u3044\u308b\u3068\u3001\u7570\u69d8\u306b\u9023\u756a\u306e\u6587\u5b57\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u3059\u304c\u3001 \u4e16\u306e\u4e2d\u306e\u7686\u69d8\u306f\u3069\u306e\u69d8\u306b\u5bfe\u51e6\u3057\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b?</p> <p>\u76f8\u5909\u308f\u3089\u305a\u7a81\u8cab\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\u5fc5\u8981\u3060\u3063\u305f\u305f\u3081\u3002</p> <p>'vba Draw_RenBanMoji_ver0.0.1  using-'KCL0.0.12'  by Kantoku ':\u9023\u756a\u306e\u6587\u5b57\u3092\u65b0\u305f\u306a\u30d3\u30e5\u30fc\u306b\u4f5c\u6210\u3057\u307e\u3059 <pre><code>Option Explicit\n\nPrivate Const X_OFFSET = -30#\nPrivate Const Y_PICH = 10#\n\nSub CATMain()\n\n    '\uff84\uff9e\uff77\uff6d\uff92\uff9d\uff84\u306e\uff81\uff6a\uff6f\uff78\n    If Not CanExecute(Array(\"DrawingDocument\")) Then Exit Sub\n\n    Dim info As String\n    info = InputBox(\"\u30d8\u30c3\u30c0\u30fc,\u958b\u59cb\u306e\u6570,\u7d42\u4e86\u306e\u6570 (\u4f8b: T,5,10)\")\n\n    Dim ary As Variant\n    ary = getRange(info)\n\n    Dim msg As String\n    If IsEmpty(ary) Then\n        msg = \"\u5165\u529b\u5024\u3092\u518d\u5ea6\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\" &amp; vbCrLf &amp; info\n        MsgBox msg\n        Exit Sub\n    End If\n\n    Dim header As String\n    header = ary(0)\n\n    Dim s As Long\n    s = ary(1)\n\n    Dim e As Long\n    e = ary(2)\n\n    msg = \"[\" &amp; header &amp; str(s) &amp; \"] \u304b\u3089 [\" &amp; _\n        header &amp; str(e) &amp; \"] \u307e\u3067\u306e\u6587\u5b57\u3092\u4f5c\u308a\u307e\u3059\u304b\uff1f\"\n\n    If MsgBox(msg, vbOKCancel) = vbCancel Then\n        Exit Sub\n    End If\n\n    ' exec\n    Call initRenban(header, s, e)\n\nEnd Sub\n\nPrivate Sub initRenban( _\n    ByVal header As String, _\n    ByVal s As Long, _\n    ByVal e As Long)\n\n    Dim vw As DrawingView\n    Set vw = initView\n\n    Dim txts As DrawingTexts\n    Set txts = vw.Texts\n\n    Dim i As Long\n    For i = s To e\n        Call txts.Add(header &amp; Trim(str(i)), X_OFFSET, (i - s) * Y_PICH)\n    Next\n\nEnd Sub\n\nPrivate Function initView() As DrawingView\n\n    Dim doc As DrawingDocument\n    Set doc = CATIA.ActiveDocument\n\n    Dim views As DrawingViews\n    Set views = doc.Sheets.ActiveSheet.views\n\n    Set initView = views.Add(\"\")\n\nEnd Function\n\nPrivate Function getRange( _\n    ByVal txt As String) As Variant\n\n    getRange = Empty\n\n    Dim ary As Variant\n    ary = Split(txt, \",\")\n\n    If Not UBound(ary) = 2 Then Exit Function\n\n    If Not IsNumeric(ary(1)) Or Not IsNumeric(ary(2)) Then Exit Function\n\n    ary(1) = CLng(ary(1))\n    ary(2) = CLng(ary(2))\n\n    getRange = ary\n\nEnd Function\n</code></pre></p> <p>\"CSV\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6587\u5b57\u3092\u4f5c\u308b\" \u3068\u304b \"\u30af\u30ea\u30c3\u30af\u3057\u305f\u4f4d\u7f6e\u306b\u4f5c\u308b\" \u3068\u304b\u3082\u8003\u3048\u305f\u306e\u3067\u3059\u304c \u76f4\u3050\u306b\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u7c21\u5358\u306b\u3057\u307e\u3057\u305f\u3002(\"s\" \u3068\u304b \"e\" \u306a\u3093\u3066\u5909\u6570\u3001\u7d42\u308f\u3063\u3066\u308b)</p> <p>\u3053\u3093\u306a\u611f\u3058\u306e\u3082\u306e\u3092\u4f5c\u308b\u3060\u3051\u3067\u3059\u3002</p> <p></p> <p>\u6700\u521d\u306b\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4e16\u306e\u4e2d\u306e\u7686\u69d8\u306f\u3069\u3046\u3057\u3066\u3044\u308b\u306e\u3060\u308d\u3046\u3002 \u5fc5\u8981\u7121\u3044\u306e\u304b\u306a\u30fb\u30fb\u30fb\u3002</p>"},{"location":"DS-CODE/VBA/GetParameterOnSubString%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/GetParameterOnSubString%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/","title":"GetParameterOnSubString\u30e1\u30bd\u30c3\u30c9","text":""},{"location":"DS-CODE/VBA/GetParameterOnSubString%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/GetParameterOnSubString%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/#getparameteronsubstring","title":"GetParameterOnSubString\u30e1\u30bd\u30c3\u30c9","text":"<p>CATIA_V5VBA CATIA\u306eDrawingTxt\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eGetParameterOnSubString\u30e1\u30bd\u30c3\u30c9\u3092 \u4f7f\u3063\u305f\u3053\u3068\u304c\u7121\u3044\u306e\u3067\u3001\u6238\u60d1\u3063\u3066\u307e\u3059\u3002 \u5fa1\u5b58\u77e5\u306e\u65b9\u3044\u3089\u3063\u3057\u3083\u3044\u307e\u3057\u305f\u3089\u30a2\u30c9\u30d0\u30a4\u30b9\u9802\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002</p> <p>GetParameterOnSubString\u30e1\u30bd\u30c3\u30c9\u306fDrawingTxt\u306e\u90e8\u5206\u7684\u306a\u6587\u5b57\u306e\u60c5\u5831\u3092 \u53d6\u5f97\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3060\u3068\u601d\u3063\u3066\u307e\u3059\u3002 r1 DrawingText (Object)</p> <p>\u3053\u3093\u306a\u96d1\u306a\u30b3\u30fc\u30c9\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002 <pre><code>'vba\nSub test()\n    Dim doc As Document\n    Set doc = CATIA.ActiveDocument\n\n    Dim sel As Object 'selection\n    Set sel = doc.selection\n\n    Dim msg$: msg = \"\u9078\u629e\u3057\u3066\u4e0b\u3055\u3044 : ESC\uff77\uff70 \u7d42\u4e86\"\n    Dim txt As Variant 'DrawingText\n    Do\n        Select Case sel.SelectElement2(Array(\"DrawingText\"), msg, False)\n            Case \"Cancel\", \"Undo\", \"Redo\"\n                Exit Sub\n            End Select\n        Set txt = sel.Item(1).value\n\n        iParam = CatTextProperty.catFontSize\n        iFirst = 0\n        inbCharacter = 0\n        oval = txt.GetParameterOnSubString(iParam, iFirst, inbCharacter)\n\n        Debug.Print \"oval: \" &amp; oval\n        Stop\n    Loop\nEnd Sub\n</code></pre></p> <p>DrawingText\u3092\u9078\u629e\u3057\u3001GetParameterOnSubString\u306e\u7d50\u679c\u3092\u30a4\u30df\u30c7\u30a3\u30a8\u30a4\u30c8\u30a6\u30a3\u30f3\u30c9\u30a6\u306b \u5782\u308c\u6d41\u3057\u3066\u307e\u3059\u3002 \u7b2c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3053\u3061\u3089\u3067\u3059\u3002 r1 Enumeration CatTextProperty \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3057\u305f\u3044\u306e\u3067\u3059\u3002</p> <p>\u3053\u3093\u306a\u30c7\u30fc\u30bf\u3067\u8a66\u3057\u307e\u3057\u305f\u3002  \u4f8b\u3048\u3070\u300ca11\u300d\u306f\u5168\u3066\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba3\u3067\u3059\u3002\u3053\u308c\u3092\u9078\u629e\u3059\u308b\u3068</p> <p>oval: 3000 \u3093\uff1f\u5358\u4f4dmm\u3067\u8fd4\u3059\u3063\u3066Help\u306b\u66f8\u3044\u3066\u3042\u308b\u306e\u306b\u3002</p> <p>\u7d9a\u3044\u3066\u300ca8\u300d\u3092\u9078\u629e\u3002\u3053\u3061\u3089\u306f\u5168\u3066\u30b5\u30a4\u30ba10\u3067\u3059\u3002</p> <p>oval: 10000 \u3093\uff5e\u5358\u4f4d\u306e\u9593\u9055\u3044\u3060\u3051\u306a\u306e\u3060\u308d\u3046\u3002</p> <p>\u6b21\u306f\u300ca12\u300d\u3067\u3059\u3002\u300ca\u300d\u304c\u30b5\u30a4\u30ba5\u3067\u300c12\u300d\u306f\u30b5\u30a4\u30ba3\u3067\u3059\u3002</p> <p>oval: 0 \u306a\u308b\u307b\u3069\u30010\u306f\u6587\u5b57\u5217\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\u304c\u7d71\u4e00\u3055\u308c\u3066\u3044\u306a\u3044\u3063\u3066\u89e3\u91c8\u3067 \u826f\u3044\u3093\u3067\u3059\u304b\u306d\uff1f</p> <p>\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u304c \u3001\u4e0a\u8a18\u306e\u300c iFirst \u300d\u300c inbCharacter \u300d\u3002 \u8a66\u3059\u3068\u3001\u300c iFirst \u300d\u3067\u6307\u5b9a\u3059\u308b\u6587\u5b57\u5217\u306e\u5148\u982d\u306f1\u306e\u69d8\u3067\u3001\u5168\u3066\u306e\u5834\u5408\u306f0\u304b\u306a\uff1f \u6587\u5b57\u6570\u306e\u300c inbCharacter \u300d\u306f\u300c iFirst \u300d\u304b\u3089\u306e\u6587\u5b57\u6570\u3067\u3001\u300c iFirst \u300d\u4ee5\u964d\u5168\u3066\u306e \u5834\u5408\u306f0\u3067\u826f\u3044\u3088\u3046\u306a\u30fb\u30fb\u30fb\u3002</p> <p>\u89e3\u91c8\u5408\u3063\u3066\u307e\u3059\u304b\u306d\uff1f</p>"},{"location":"DS-CODE/VBA/How%20to%20get%20UDF%20sublist/%E8%8E%B7%E5%8F%96UDF%20%E5%AD%90%E9%9B%86/","title":"\u83b7\u53d6UDF \u5b50\u96c6","text":"<p>Well, you can retrieve currently selected object by calling CATIA.ActiveDocument.Selection.Item(1).Value. </p> <p>I also guess that features inside the UDF are exposed as parameters so you can get desired feature with Item method.</p> <p>Below code goes right from my head, I'm unable to test it, sorry: </p> <pre><code>' retrieve UDF from selection\n\nDim oUDF as AnyObject\nSet oUDF = CATIA.ActiveDocument.Selection.Item(1).Value\n\n' filter Parameters collection of the part leaving only those that are related to the UDF\nDim oUDFParams as Parameters\nSet oUDFParams = CATIA.ActiveDocument.Part.Parameters.SubList(oUDF, true)\n\n\n\n' get Center_Point on Parameter and on Point interfaces\n\nDim parPoint as Parameter\nDim pntPoint as Point\nSet parPoint = oUDFParams.Item(\"Center_Point\")\nSet pntPoint = parPoint \n\n' retrieve point coordinates\nDim varPoint \nDim aCoords(2)\nSet varPoint = pntPoint\nvarPoint.GetCoordinates aCoords\n</code></pre> <p>RE: Getting x,y,z from a udf   March 29, 2012 05:24 PM   (in response to Little Cthulhu)  </p> <p>I don't think that will work because a point as an output feature of a UDF is not a parameter. Even if it made with a datum and a formula.</p> <p>But I think you should be able to get the point by searching inside the UDF like this:</p> <p>Catia.ActiveDocument.Selection.Add(myUDF)</p> <p>Catia.ActiveDocument.Selection.Search(\"(Name=Center_Point &amp; 'Generative Shape Design'.Point).sel\")</p> <p>It is also pretty easy to get at an output feature of a UDF using KWA. Here is an Action that queries for UDFs in a PartBody and writes the coordinates of output points named COG to a list:</p> <p>Inputs:   </p> <p>pb :  BodyFeature,cogList :  List</p> <p>Body of Action:</p> <pre><code>```cs\nlet udf (UserFeature)\nlet udfs (List)\nlet cog (Point)\n\nudfs = pb -&gt;Query(\"UserFeature\",\"\")\ncogList-&gt;RemoveAll()\n\nfor udf inside udfs\n{\n    if udf-&gt;HasAttribute(\"COG\") == true\n    {\n        set cog = udf-&gt;Find(\"Point\",\"x.Name==\\\"COG\\\"\",true)\n        cogList-&gt;Append(udf-&gt;Name + \":\" + ToString(cog-&gt;coord(1)) + \",\" + ToString( cog-&gt;coord(2)) + \",\" + ToString( cog-&gt;coord(3)))\n    }\n}\n```\n</code></pre> <p>March 29, 2012 11:42 PM   (in response to Cliff Johnson, Cliff)  </p> <p>As far as I remember when UDF gets instantiated via script it is exposed to Automation as ShapeInstance class object. Investigate if following works:</p> <p>Set pntPoint = CATIA.ActiveDocument.Selection.Item(1).Value.GetOutput(\"Center_Point\")</p> <p>UPD</p> <p>Here's what I came up to. I wasn't able to cast HybridShapeInstance to a Point directly so I had to create temporary point: </p> <p>```vb ' retrieve UDF from selection Dim oUDF As HybridShapeInstance Set oUDF = CATIA.ActiveDocument.Selection.Item(1).Value</p> <p>' get UDF output feature by it's name Dim hsiPoint As HybridShapeInstance Set hsiPoint = oUDF.GetOutput(\"Point.5\")</p> <p>' create a Reference for output element Dim prtPart As Part Set prtPart = CATIA.ActiveDocument.Part Dim refPoint As Reference Set refPoint = prtPart.CreateReferenceFromObject(hsiPoint)</p> <p>' create temp point using output element as a reference Dim pntTempPoint As Point Set pntTempPoint = prtPart.HybridShapeFactory.AddNewPointCoordWithReference(0, 0, 0, refPoint) pntTempPoint.Compute</p> <p>' retrieve coordinates Dim varPoint Dim aCoord(2) Set varPoint = pntTempPoint varPoint.GetCoordinates aCoord</p> <p>' delete temp point prtPart.HybridShapeFactory.DeleteObjectForDatum pntTempPoint</p> <p>```</p>"},{"location":"DS-CODE/VBA/KP/kp/","title":"Kp","text":"<pre><code>Sub CATMain()\nDim KPColl As New Collection\nDim KPColl02 As New Collection\nDim KPColl03 As New Collection\n\nCATIA.ActiveDocument.Selection.Clear\nCATIA.ActiveDocument.Selection.Search \"Name=INSTANTIATE_TRUSS_KP* &amp; Knowledgeware.'Knowledge Pattern';all\"\n\nFor LoopNum = 1 To CATIA.ActiveDocument.Selection.Count\nCall KPColl.Add(CATIA.ActiveDocument.Selection.Item(LoopNum).Value)\nNext\n\nFor LoopNum = 1 To KPColl.Count\nCATIA.ActiveDocument.Selection.Clear\nCATIA.ActiveDocument.Selection.Add (KPColl.Item(LoopNum))\nCATIA.StartCommand (\"Execute\")\n'CATIA.ActiveDocument.Part.Update\nNext\n'MsgBox (\"Finished knowledge pattern execution.\")\n\nCATIA.ActiveDocument.Selection.Clear\nCATIA.ActiveDocument.Selection.Search \"Name=TRUSS* &amp; Knowledgeware.'Knowledge Pattern';all\"\n\nFor LoopNum = 1 To CATIA.ActiveDocument.Selection.Count\nCall KPColl02.Add(CATIA.ActiveDocument.Selection.Item(LoopNum).Value)\nNext\n\nFor LoopNum = 1 To KPColl02.Count\nCATIA.ActiveDocument.Selection.Clear\nCATIA.ActiveDocument.Selection.Add (KPColl02.Item(LoopNum))\nCATIA.StartCommand (\"Execute\")\n'CATIA.ActiveDocument.Part.Update\nNext\n\n\nEnd Sub\n</code></pre>"},{"location":"DS-CODE/VBA/MinimumBox/MinimumBox/","title":"MinimumBox","text":"<p>\u5c11\u3057\u524d\u306bMinimumBox\u3067\u691c\u7d22\u3055\u308c\u305f\u65b9\u304c\u3044\u3089\u3063\u3057\u3083\u3063\u305f\u306e\u3067 ???\u7248\u3068\u3057\u3066\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002 \"Unofficial CATIA User Forum\" \u3067\u3053\u3053\u306a\u3055\u3093\u304c????????\u306e ?????\u3068\u3057\u3066Up\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3057\u3001\u78ba\u304by4yama\u3055\u3093\u304c???\u7248\u3068\u3057\u3066 Up\u3057\u3066\u3044\u307e\u3057\u305f\u3002(\u4e2d\u8eab\u306f\u898b\u306a\u304b\u3063\u305f\u3067\u3059???)</p> <p>\u6298\u89d2\u4f5c\u308b\u306e\u3067\u3042\u308c\u3070\u3001\"\u305d\u306e\u9803\u306e\u3082\u306e\u3068\u9055\u3044\u306e\u3042\u308b\u3082\u306e\u3092\" \u3068\u601d\u3044 ???? + ?????\u3067\u4f5c\u3089\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002 (\u3042\u306e\u9803\u306e\u3082\u306e\u306f\u6050\u3089\u304f\u3001????? + \u539a\u307f????? \u3060\u3068\u601d\u3044\u307e\u3059\u3002)</p> <p>\u51e6\u7406\u304c\u5927\u3057\u305f\u4e8b\u7121\u3044\u306e\u306b\u3001\u76f8\u5909\u308f\u3089\u305a\u5927\u3052\u3055\u306a????\u306f\u3053\u3061\u3089\u3067\u3059\u3002</p> <p>'vba GetMinimumBox Option Explicit Private Const MacroName = \"GetMinimumBox\" Private Const DmyLng = 1000000# '????\u9762\u8ddd\u96e2 Private Enum MinMax '\u6e2c\u5b9a\u5024\u914d\u5217???????\u7528     MinX = 0     MaxX = 1     MinY = 2     MaxY = 3     MinZ = 4     MaxZ = 5 End Enum</p> <p>Sub CATMain()     '\u521d\u671f\u8a2d\u5b9a     '\u6e2c\u5b9a\u65b9\u5411\u7528?????\u3000???????\u306fEnum MinMax     Dim Vec As Variant     Vec = Array(Array(-1#, 0#, 0#), Array(1#, 0#, 0#), Array(0#, -1#, 0#), _                 Array(0#, 1#, 0#), Array(0#, 0#, -1#), Array(0#, 0#, 1#))     Dim Msg$</p> <pre><code>'PartDocument????\nIf Not TypeName(CATIA.ActiveDocument) = \"PartDocument\" Then\n    Msg = \"Part????\u3092??????\u306b\u3057\u3066\u4e0b\u3055\u3044!\"\n    MsgBox Msg, vbOKOnly + vbCritical, MacroName\n    Exit Sub\nEnd If\nDim Actdoc As PartDocument: Set Actdoc = CATIA.ActiveDocument\n\n'?????\u306e\u9078\u629e\nDim SelFilter  As Variant: SelFilter = Array(\"BiDim\")\nDim TargetBody As AnyObject\nMsg = \"\u5bfe\u8c61\u306e?????\u3092\u9078\u629e\u3057\u3066\u4e0b\u3055\u3044 : [Esc]=?????\"\nSet TargetBody = SelectBody(Msg, SelFilter, Actdoc)\nIf IsNothing(TargetBody) Then\n    Msg = \"\u4e2d\u6b62\u3057\u307e\u3059\"\n    MsgBox Msg, vbOKOnly + vbExclamation, MacroName\n    Exit Sub\nEnd If\n\n'\u6307\u5b9a?????\u306e????\u3092\u53d6\u5f97\nDim WorkPart As Part: Set WorkPart = GetParent_Of_T(TargetBody, \"Part\")\nIf IsNothing(WorkPart) Then\n    Msg = \"\u6307\u5b9a?????\u304b\u3089????\u304c\u53d6\u5f97\u3067\u304d\u306a\u3044\u70ba\u3001\u4e2d\u6b62\u3057\u307e\u3059\"\n    MsgBox Msg, vbOKOnly + vbCritical, MacroName\n    Exit Sub\nEnd If\n\n'\u5ea7\u6a19\u7cfb\u9078\u629e\nSelFilter = Array(\"AxisSystem\")\nDim Ax As AxisSystem\nDo\n    Msg = \"\u53d6\u5f97\u3059\u308b\u65b9\u5411\u306e\u5ea7\u6a19\u7cfb\u3092\u9078\u629e\u3057\u3066\u4e0b\u3055\u3044\" + _\n          \"[Esc]=????? \u53c8\u306f \u7d76\u5bfe\u5ea7\u6a19\"\n    Set Ax = SelectItem(Msg, SelFilter, Actdoc)\n    If IsNothing(Ax) Then\n        Msg = \"\u7d76\u5bfe\u5ea7\u6a19\u7cfb\u3067\u53d6\u5f97\u3057\u307e\u3059\u304b?\" + vbNewLine + _\n              \"\u300c\u306f\u3044\u300d- \u7d76\u5bfe\u5ea7\u6a19\" + vbNewLine + _\n              \"\u300c\u3044\u3044\u3048\u300d- ?????\"\n        If MsgBox(Msg, vbYesNo + vbQuestion, MacroName) = vbNo Then\n            Exit Sub\n        Else\n            Exit Do\n        End If\n    Else\n        If WorkPart.Name = GetParent_Of_T(Ax, \"Part\").Name Then Exit Do\n        Msg = \"\u6307\u5b9a?????\u3068\u540c\u4e00\u306e\u5ea7\u6a19\u7cfb\u3092\u9078\u629e\u3057\u3066\u4e0b\u3055\u3044!\"\n        MsgBox Msg, vbOKOnly + vbExclamation, MacroName\n    End If\nLoop\n\n'\u8ddd\u96e2\u6e2c\u5b9a\nDim MaxLeng As Variant:\nMaxLeng = GetMaxSize_Body(WorkPart, TargetBody, Ax, Vec)\n\n'?????\u4f5c\u6210\nDim MinBody As Body: Set MinBody = WorkPart.Bodies.Add\nMinBody.Name = \"MinimumBox\"\nCall ChangeColor(MinBody)\n\n'????\nDim SupportRef As Reference\nIf IsNothing(Ax) Then\n    Set SupportRef = WorkPart.CreateReferenceFromGeometry(WorkPart.OriginElements.PlaneXY)\nElse\n    Dim AxPlnRefs As Variant: AxPlnRefs = GetAxisPlaneRefs(Ax)\n    Set SupportRef = AxPlnRefs(0)\nEnd If\nDim Skt As Sketch: Set Skt = InitSketch(MinBody.Sketches, SupportRef, Ax)\nCall InitBox2D(Skt, MaxLeng)\n\n'?????\nCall InitPad(MinBody, Skt, MaxLeng)\nWorkPart.Update\n</code></pre> <p>End Sub</p> <p>'* PartDocument\u95a2\u9023 *** '\u5168\u65b9\u5411\u8ddd\u96e2\u53d6\u5f97-????? Private Function GetMaxSize_Body(ByVal Pt As Part, ByVal Body As AnyObject, _                                  ByVal Ax As AxisSystem, Vec As Variant) As Variant     Dim AxRef As Reference     If Not IsNothing(Ax) Then         Set AxRef = Pt.CreateReferenceFromObject(Ax)     End If     Dim Max#(): ReDim Max(UBound(Vec))     Dim I&amp;     For I = 0 To UBound(Vec)         Max(I) = (DmyLng - GetMaximumLength(Pt, Body, AxRef, Vec(I))) * IIf(I Mod 2 = 0, -1, 1)     Next     GetMaxSize_Body = Max End Function</p> <p>'\u8ddd\u96e2\u53d6\u5f97 Private Function GetMaximumLength#(ByVal Pt As Part, ByVal Body As AnyObject, _                                    ByVal AxRef As Reference, Vec As Variant)     Dim Pln As HybridShapePlaneEquation     Set Pln = CreatePlane(Pt, AxRef, Vec(0), Vec(1), Vec(2))     GetMaximumLength = Pt.Parent.GetWorkbench(\"SPAWorkbench\") _                         .GetMeasurable(Pt.CreateReferenceFromObject(Body)) _                         .GetMinimumDistance(Pt.CreateReferenceFromObject(Pln))     Call Pt.HybridShapeFactory.DeleteObjectForDatum(Pln) End Function</p> <p>'\u5e73\u9762\u4f5c\u6210 Private Function CreatePlane(ByVal Pt As Part, _                              ByVal AxRef As Reference, _                              ByVal A As Double, _                              ByVal B As Double, _                              ByVal C As Double) _                              As HybridShapePlaneEquation     Dim Fact As HybridShapeFactory: Set Fact = Pt.HybridShapeFactory     Set CreatePlane = Fact.AddNewPlaneEquation(A, B, C, DmyLng)     If Not AxRef Is Nothing Then         CreatePlane.RefAxisSystem = AxRef     End If     Call Pt.UpdateObject(CreatePlane)     Set Fact = Nothing End Function</p> <p>'T\u578b\u306eParent\u53d6\u5f97 Name\u3067\u306e????\u3082\u5fc5\u8981 Private Function GetParent_Of_T(ByVal AnyOj As AnyObject, ByVal t$) As AnyObject     If TypeName(AnyOj) = TypeName(AnyOj.Parent) And _        AnyOj.Name = AnyOj.Parent.Name Then         Set GetParent_Of_T = Nothing         Exit Function     End If     If TypeName(AnyOj) = t Then         Set GetParent_Of_T = AnyOj     Else         Set GetParent_Of_T = GetParent_Of_T(AnyOj.Parent, t)     End If End Function</p> <p>'?????\u9078\u629e Private Function SelectBody(ByVal SelMsg$, ByVal Filter As Variant, _                             ByVal Doc As PartDocument) As AnyObject     Dim SelItem As AnyObject, Msg$     Dim Pt As Part: Set Pt = Doc.Part     Dim LeafBody As Body, LastFuture As AnyObject     Do         Set SelItem = SelectItem(SelMsg, Filter, Doc)         If IsNothing(SelItem) Then Set SelectBody = SelItem: Exit Function '\u4e2d\u6b62         Set LeafBody = GetLeafBody(SelItem)         If Not IsNothing(LeafBody) Then             Set LastFuture = GetLastFuture(LeafBody, Pt)             If LastFuture Is Nothing Then                 Msg = \"\u7a7a\u306e?????\u306f\u6e2c\u5b9a\u3067\u304d\u307e\u305b\u3093!\"                 MsgBox Msg, vbOKOnly + vbExclamation, MacroName             Else                 Exit Do             End If             Msg = \"?????\u306e\u8981\u7d20\u3092\u9078\u629e\u3057\u3066\u4e0b\u3055\u3044!\"             MsgBox Msg, vbOKOnly + vbExclamation, MacroName         End If     Loop     Set SelectBody = LastFuture End Function</p> <p>'\u9078\u629e Private Function SelectItem(ByVal Msg$, ByVal Filter As Variant, _                             ByVal Doc As Document) As AnyObject     Dim Sel As Variant: Set Sel = Doc.Selection     Sel.Clear     Select Case Sel.SelectElement2(Filter, Msg, False)         Case \"Cancel\", \"Undo\", \"Redo\"             Set SelectItem = Nothing             Exit Function     End Select     Set SelectItem = Sel.Item(1).Value     Sel.Clear End Function</p> <p>'Tree\u306b\u76f4\u63a5\u3076\u3089\u4e0b\u304c\u3063\u3066\u3044\u308b?????\u306e\u53d6\u5f97 Private Function GetLeafBody(AnyOj As AnyObject) As Body     If TypeName(AnyOj) = TypeName(AnyOj.Parent) Then         Set GetLeafBody = Nothing         Exit Function     End If     If TypeName(AnyOj.Parent) = \"Bodies\" Then         If AnyOj.InBooleanOperation Then             Set GetLeafBody = GetLeafBody(AnyOj.Parent)         Else             Set GetLeafBody = AnyOj         End If     Else         Set GetLeafBody = GetLeafBody(AnyOj.Parent)     End If End Function</p> <p>'Shapes\u304b\u3089\u6700\u5f8c\u306e\u6d3b\u52d5\u5316\u3055\u308c\u305f??????\u3092\u53d6\u5f97 Private Function GetLastFuture(ByVal Shs As Shapes, ByVal Pt As Part) As AnyObject     Dim I As Long     For I = Shs.Count To 1 Step -1         If Not IsEmpty(Shs.Item(I)) Then             If False = Pt.IsInactive(Shs.Item(I)) Then '\u2190Not\u3058\u3083\u4e0a\u624b\u304f\u884c\u304b\u306a\u3044                 Set GetLastFuture = Shs.Item(I)                 Exit Function             End If         End If     Next End Function</p> <p>'\u5ea7\u6a19\u7cfb\u306e\u5404\u5e73\u9762\u306e??????\u306e\u53d6\u5f97 'Return : 0-XY,1-YZ,2-ZY \u306e?????? Private Function GetAxisPlaneRefs(ByVal Ax As AxisSystem) As Variant ' Reference()     Dim Pt As Part: Set Pt = GetParent_Of_T(Ax, \"Part\")     Dim PlaneRef(2) As Reference     Dim I&amp;     For I = 0 To UBound(PlaneRef)         Set PlaneRef(I) = Pt.CreateReferenceFromBRepName(GetAxisPlaneBrepName(Ax, I), Ax)     Next     GetAxisPlaneRefs = PlaneRef End Function</p> <p>'\u5ea7\u6a19\u7cfbBrepName\u306e\u53d6\u5f97 - InternalName\u7248 ' PlaneN0 : 0-XY,1-YZ,2-ZY\u306e\u4f55\u308c\u304b Private Function GetAxisPlaneBrepName$(ByVal Ax As AxisSystem, ByVal PlaneNo&amp;)     Dim IntName$: IntName = Ax.GetItem(\"ModelElement\").InternalName     GetAxisPlaneBrepName = \"RSur:(Face:(Brp:(\" + IntName + \";\" + CStr(PlaneNo + 1) + \");None:();Cf11:());\" + _                            \"WithPermanentBody;WithoutBuildError;WithSelectingFeatureSupport;MFBRepVersion_CXR15)\" End Function</p> <p>'\u5ea7\u6a19\u7cfb\u306e\u539f\u70b9XY?????\u53d6\u5f97 Private Function GetAxisOriVec(ByVal Ax As AxisSystem) As Variant     Dim AxVri As Variant: Set AxVri = Ax     Dim AryAxOri(2): Call AxVri.GetOrigin(AryAxOri)     Dim AryAxXVec(2), AryAxYVec(2)     Call AxVri.GetVectors(AryAxXVec, AryAxYVec)     Dim Ary As Variant: Ary = Array_Join(AryAxOri, AryAxXVec)     GetAxisOriVec = Array_Join(Ary, AryAxYVec) End Function</p> <p>'\u578b???? Private Function IsType_Of_T(ByVal AnyOj As AnyObject, ByVal t$) As Boolean     IsType_Of_T = IIf(TypeName(AnyOj) = t, True, False) End Function</p> <p>'* Sketch\u95a2\u9023 *** '????\u4f5c\u6210 Private Function InitSketch(ByVal Skts As Sketches, _                             ByVal SupportRef As Reference, _                             ByVal Ax As AxisSystem) As Sketch     Dim Skt As Sketch: Set Skt = Skts.Add(SupportRef)     Set InitSketch = Skt     If IsNothing(Ax) Then Exit Function</p> <pre><code>Dim AxVar As Variant: Set AxVar = Ax\nDim Ori(2) As Variant: Call AxVar.GetOrigin(Ori)\nDim VecX(2) As Variant, VecY(2) As Variant\nCall AxVar.GetVectors(VecX, VecY)\nDim SettingAbsData As Variant\nSettingAbsData = Array_Join(Ori, VecX)\nSettingAbsData = Array_Join(SettingAbsData, VecY)\n\nDim SktVar As Variant: Set SktVar = Skt\nCall SktVar.SetAbsoluteAxisData(SettingAbsData)\n</code></pre> <p>End Function</p> <p>'\u56db\u89d2\u4f5c\u6210 Private Sub InitBox2D(ByVal Skt As Sketch, ByVal Poss As Variant)     If Not UBound(Poss) = 5 Then Exit Sub</p> <pre><code>Dim Fact2D As Factory2D: Set Fact2D = Skt.OpenEdition()\n\nDim Pnt2D(3) As Point2D\nSet Pnt2D(0) = Fact2D.CreatePoint(Poss(MinMax.MinX), Poss(MinMax.MinY))\nSet Pnt2D(1) = Fact2D.CreatePoint(Poss(MinMax.MinX), Poss(MinMax.MaxY))\nSet Pnt2D(2) = Fact2D.CreatePoint(Poss(MinMax.MaxX), Poss(MinMax.MaxY))\nSet Pnt2D(3) = Fact2D.CreatePoint(Poss(MinMax.MaxX), Poss(MinMax.MinY))\n\nDim Consts As Constraints: Set Consts = Skt.Constraints\n\nCall InitLine2D(Fact2D, Consts, Pnt2D(0), Pnt2D(1))\nCall InitLine2D(Fact2D, Consts, Pnt2D(1), Pnt2D(2))\nCall InitLine2D(Fact2D, Consts, Pnt2D(2), Pnt2D(3))\nCall InitLine2D(Fact2D, Consts, Pnt2D(3), Pnt2D(0))\n\nSkt.CloseEdition\n</code></pre> <p>End Sub</p> <p>'\u7dda\u4f5c\u6210 - \u53ef\u80fd\u306a\u3089\u5782\u76f4\u6c34\u5e73\u62d8\u675f Private Sub InitLine2D(ByVal Fact2D As Factory2D, ByVal Csts As Constraints, _                        ByVal PntSt As Point2D, ByVal PntEd As Point2D)     Dim PntStVri As Variant: Set PntStVri = PntSt     Dim PosSt(1) As Variant: Call PntStVri.GetCoordinates(PosSt)     Dim PntEdVri As Variant: Set PntEdVri = PntEd     Dim PosEd(1) As Variant: Call PntEdVri.GetCoordinates(PosEd)     If Dist2D_Ary2Ary(PosSt, PosEd) &lt; 0.001 Then Exit Sub</p> <pre><code>Dim Line As Line2D\nSet Line = Fact2D.CreateLine(PosSt(0), PosSt(1), PosEd(0), PosEd(1))\nWith Line\n    .StartPoint = PntSt\n    .EndPoint = PntEd\nEnd With\n\nDim Ax2D As Axis2D\nSet Ax2D = GetParent_Of_T(Csts, \"Sketch\").GeometricElements.Item(1)\nSelect Case True\n    Case Abs(PosSt(0) - PosEd(0)) &lt; 0.001\n        Call InitConstraint(Csts, catCstTypeVerticality, Line, Ax2D.VerticalReference) '\u5f1f3,4\u9006NG\n        Call InitConstraint(Csts, catCstTypeDistance, Ax2D.VerticalReference, Line, PosSt(0))\n    Case Abs(PosSt(1) - PosEd(1)) &lt; 0.001\n        Call InitConstraint(Csts, catCstTypeHorizontality, Line, Ax2D.HorizontalReference) '\u5f1f3,4\u9006NG\n        Call InitConstraint(Csts, catCstTypeDistance, Ax2D.HorizontalReference, Line, PosSt(1))\nEnd Select\n</code></pre> <p>End Sub</p> <p>'\u62d8\u675f Private Sub InitConstraint(ByVal Csts As Constraints, ByVal CstType As CatConstraintType, _                            ByVal Itm1 As AnyObject, ByVal Itm2 As AnyObject, Optional ByVal Dist# = -1)     Dim Pt As Part: Set Pt = GetParent_Of_T(Csts, \"Part\")     Dim Cst As Constraint:     Set Cst = Csts.AddBiEltCst(CstType, _                                Pt.CreateReferenceFromObject(Itm1), _                                Pt.CreateReferenceFromObject(Itm2))     Cst.ModE = catCstModeDrivingDimension     If Dist &lt; 0.001 Then Exit Sub 'IsMissing(Dist)????     Dim Leng As Length: Set Leng = Cst.Dimension     Leng.Value = Dist End Sub</p> <p>'* Body\u95a2\u9023 *** '????? Private Sub InitPad(ByVal Bdy As Body, ByVal Skt As Sketch, ByVal Poss As Variant)     If Not UBound(Poss) = 5 Then Exit Sub</p> <pre><code>Dim Pt As Part: Set Pt = GetParent_Of_T(Bdy, \"Part\")\nDim Fact As ShapeFactory: Set Fact = Pt.ShapeFactory\nDim Pad As Pad: Set Pad = Fact.AddNewPad(Skt, Poss(MinMax.MaxZ))\nPad.DirectionOrientation = catRegularOrientation\nDim MinZ As Length: Set MinZ = Pad.SecondLimit.Dimension\nMinZ.Value = Poss(MinMax.MinZ) * -1\n</code></pre> <p>End Sub</p> <p>'\u8272\u7b49\u5909\u66f4 Private Sub ChangeColor(ByVal Itm As AnyObject)     Dim Doc As PartDocument: Set Doc = GetParent_Of_T(Itm, \"PartDocument\")     Dim Sel As Selection: Set Sel = Doc.Selection     Sel.Clear     Sel.Add Itm     Dim Vis As VisPropertySet: Set Vis = Sel.VisProperties     Call Vis.SetRealColor(128, 64, 64, 1)     Call Vis.SetRealOpacity(128, 1)     Call Vis.SetRealWidth(1, 1)     Call Vis.SetRealLineType(4, 1)     Sel.Clear End Sub</p> <p>'* Array\u95a2\u9023 *** '\u8ddd\u96e2-\u914d\u5217\u540c\u58eb Private Function Dist2D_Ary2Ary(ByVal XY1 As Variant, ByVal XY2 As Variant)     Dist2D_Ary2Ary = Sqr((XY2(0) - XY1(0)) * (XY2(0) - XY1(0)) + (XY2(1) - XY1(1)) * (XY2(1) - XY1(1))) End Function</p> <p>'\u914d\u5217\u306e\u5024\u304c\u4e00\u81f4\u3059\u308b\u304b? Private Function isArrayEqual(ByVal Ary1 As Variant, ByVal Ary2 As Variant) As Boolean     isArrayEqual = False     If Not IsArray(Ary1) Or Not IsArray(Ary2) Then Exit Function     If Not UBound(Ary1) = UBound(Ary2) Then Exit Function     Dim I&amp;     For I = 0 To UBound(Ary1)         If Not Ary1(I) = Ary2(I) Then Exit Function     Next     isArrayEqual = True End Function</p> <p>'\u914d\u5217\u306e\u9023\u7d50 Private Function Array_Join(ByVal Ary1 As Variant, ByVal Ary2 As Variant)     If Not IsArray(Ary1) Or Not IsArray(Ary2) Then Exit Function     Dim StCount&amp;: StCount = UBound(Ary1)     ReDim Preserve Ary1(UBound(Ary1) + UBound(Ary2) + 1)     Dim I&amp;     For I = StCount + 1 To UBound(Ary1)         Ary1(I) = Ary2(I - StCount - 1)     Next     Array_Join = Ary1 End Function</p> <p>'* \u305d\u306e\u4ed6 *** 'Nothing \u66f8\u304d\u65b9\u306b\u7d71\u4e00\u611f\u304c\u7121\u3044\u70ba Private Function IsNothing(ByVal OJ As Variant) As Boolean     IsNothing = OJ Is Nothing End Function \u500b\u4eba\u7684\u306b\u306f\u3001\u6750\u6599\u53d6\u308a\u7528\u3068\u3057\u3066\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u51fa\u6765\u4e0a\u304c\u308a\u304c\u7aef\u6570\u306b \u306a\u3089\u306a\u3044\u3088\u3046\u306b\u51e6\u7406\u3057\u3088\u3046\u3068\u3082\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3084\u3084\u3053\u3057\u304f\u306a\u3063\u305f\u306e\u3067 \u6b62\u3081\u307e\u3057\u305f\u3002 (GetMaxSize_Body\u95a2\u6570\u3067\u53d6\u5f97\u3057\u305f\u6570\u5024\u3092\u3001\u4e0a\u624b\u304f\u5207\u308a\u4e0a\u3052\u51e6\u7406\u3059\u308c\u3070 \u53ef\u80fd\u3067\u3059)</p> <p>\u307e\u305f\u3001\u3053\u3061\u3089\u306e\u65b9\u6cd5\u3092\u6d41\u7528\u3059\u308c\u3070</p>"},{"location":"DS-CODE/VBA/%E3%83%87%E3%82%A3%E3%83%86%E3%83%BC%E3%83%AB%E3%82%B7%E3%83%BC%E3%83%88%E3%81%AE%E6%9C%AA%E4%BD%BF%E7%94%A8%E3%81%AE%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E5%89%8A%E9%99%A4/%E3%83%87%E3%82%A3%E3%83%86%E3%83%BC%E3%83%AB%E3%82%B7%E3%83%BC%E3%83%88%E3%81%AE%E6%9C%AA%E4%BD%BF%E7%94%A8%E3%81%AE%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E5%89%8A%E9%99%A4/","title":"\u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306e\u672a\u4f7f\u7528\u306e\u30d3\u30e5\u30fc\u3092\u524a\u9664","text":""},{"location":"DS-CODE/VBA/%E3%83%87%E3%82%A3%E3%83%86%E3%83%BC%E3%83%AB%E3%82%B7%E3%83%BC%E3%83%88%E3%81%AE%E6%9C%AA%E4%BD%BF%E7%94%A8%E3%81%AE%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E5%89%8A%E9%99%A4/%E3%83%87%E3%82%A3%E3%83%86%E3%83%BC%E3%83%AB%E3%82%B7%E3%83%BC%E3%83%88%E3%81%AE%E6%9C%AA%E4%BD%BF%E7%94%A8%E3%81%AE%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E5%89%8A%E9%99%A4/#_1","title":"\u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306e\u672a\u4f7f\u7528\u306e\u30d3\u30e5\u30fc\u3092\u524a\u9664","text":"<p>CATIA_V5VBAKCL \u56f3\u9762\u3092\u4f5c\u6210\u3059\u308b\u969b\u3001\u9762\u5012\u306a\u306e\u3067\u65b0\u898f\u306eDraw\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u3067\u306f\u7121\u304f\u3066 \u4ed6\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6d41\u7528\u3057\u3066\u4f5c\u308a\u307e\u3059\u3088\u306d\uff1f\uff08\u30fb\u30fb\u30fb\u9055\u3046\u304b\u306a\uff09 \u6700\u5927\u306e\u7406\u7531\u306f\u30ab\u30bf\u30ed\u30b0\u304b\u3089\u547c\u3073\u51fa\u3057\u305f\u969b\u3001\u5206\u96e2\u3057\u3066\u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306b \u6b8b\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u518d\u5ea6\u540c\u3058\u3082\u306e\u3092\u30ab\u30bf\u30ed\u30b0\u304b\u3089\u547c\u3073\u51fa\u3059\u306e\u304c\u9762\u5012\u3060\u304b\u3089\u3067\u3059\u3002</p> <p>\u5dee\u3057\u66ff\u3048\u304c\u4e0a\u624b\u304f\u3044\u3051\u3070\u554f\u984c\u7121\u3044\u3067\u3059\u3057\u3001UUID\u9055\u3044\u3082\u3053\u3061\u3089\u306e\u30de\u30af\u30ed\u3067 \u305d\u308c\u306a\u308a\u306e\u4e8b\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u7570\u306a\u308bUUID\u306eDraw\u53c2\u7167\u5143\u30d5\u30a1\u30a4\u30eb\u3092\u5dee\u3057\u66ff\u3048\u308b3 - C#ATIA \uff08\u77e5\u308a\u5408\u3044\u306e\u65b9\u304b\u3089\u3001\u65b0\u898f\u306b\u4f5c\u6210\u3057\u305f\u65b9\u304c\u65e9\u3044\u3093\u3058\u3083\u306a\u3044\uff1f\u3000\u3068 \u30a2\u30c9\u30d0\u30a4\u30b9\u3092\u9802\u304d\u307e\u3057\u305f\u3002\u3000\u30fb\u30fb\u30fb\u78ba\u304b\u306b\u305d\u3046\u3067\u3059\u3002\uff09</p> <p>\u30d3\u30e5\u30fc\u306e\u539f\u70b9\u3082\uff08\uff72\uff9b\uff72\uff9b\u554f\u984c\u306f\u6709\u308a\u307e\u3059\u304c\uff09\u3053\u3061\u3089\u3067\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 Draw\uff8b\uff9e\uff6d\uff70\u306e\u539f\u70b9\u3092\u5909\u66f4\u3059\u308b1 - C#ATIA</p> <p>\u3053\u3093\u306a\u611f\u3058\u3067\u6d41\u7528\u3057\u3066\u3044\u308b\u3068\u3001\u3064\u307e\u3089\u306a\u3044\u610f\u5730\u3068\u8a00\u3044\u307e\u3059\u304b\u3001\u898b\u6804\u3068\u8a00\u3044\u307e\u3059\u304b \u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306b\u672a\u4f7f\u7528\u306e\u30d3\u30e5\u30fc\u304c\u5e7e\u3064\u304b\u6b8b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u5acc\u306a\u3093\u3067\u3059\u3002 \u4f7f\u7528\u3057\u3066\u3044\u308b\u7269\u3092\u524a\u9664\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u8b66\u544a\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u624b\u52d5\u3067\u3082\u51fa\u6765\u306a\u3044 \u3053\u3068\u306f\u7121\u3044\u306e\u3067\u3059\u304c\u3001\u3001\u3001\u9762\u5012\u306a\u3093\u3067\u3059\u3002</p> <p>\u305d\u3053\u3067Draw\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u30012D\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044 \u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306e\u30d3\u30e5\u30fc\u3092\u524a\u9664\u3059\u308b\u30de\u30af\u30ed\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002</p> <pre><code>'vba DetailSheetCleaner_ver0.0.1  using-'KCL0.0.13'  by Kantoku\nOption Explicit\n\nSub CATMain()\n\n    Dim msg As String\n\n    '\uff84\uff9e\uff77\uff6d\uff92\uff9d\uff84\u306e\uff81\uff6a\uff6f\uff78\n    If Not CanExecute(Array(\"DrawingDocument\")) Then Exit Sub\n\n    Dim doc As DrawingDocument\n    Set doc = CATIA.ActiveDocument\n\n    '\uff83\uff9e\uff68\uff83\uff70\uff99\uff7c\uff70\uff84\n    Dim dets As Collection\n    Set dets = GetDetailSheet(doc)\n    If dets.Count &lt; 1 Then\n        MsgBox \"\uff83\uff9e\uff68\uff83\uff70\uff99\uff7c\uff70\uff84\u304c\u6709\u308a\u307e\u305b\u3093!\"\n        Exit Sub\n    End If\n\n    '\u5168\uff7a\uff9d\uff8e\uff9f\uff70\uff88\uff9d\uff84 \u7a7a\u306e\u53ef\u80fd\u6027\u3082\u6709\u308a\n    Dim cmps As Collection\n    Set cmps = GetComps(doc.Sheets)\n\n    '\uff83\uff9e\uff68\uff83\uff70\uff99\uff7c\uff70\uff84\uff8b\uff9e\uff6d\uff70\u8f9e\u66f8\n    Dim compDic As Object\n    Set compDic = InitDetailDic(dets)\n\n    '\u672a\u4f7f\u7528\uff83\uff9e\uff68\uff83\uff70\uff99\uff7c\uff70\uff84\uff8b\uff9e\uff6d\uff70\n    Dim UnuseComps As Collection\n    Set UnuseComps = GetUnuseCompsList(compDic, cmps)\n    If UnuseComps.Count &lt; 1 Then\n        MsgBox \"\u524a\u9664\u5bfe\u8c61\u306e\uff8b\uff9e\uff6d\uff70\u304c\u6709\u308a\u307e\u305b\u3093!\"\n        Exit Sub\n    End If\n\n    '\u78ba\u8a8d\n    msg = UnuseComps.Count &amp; _\n        \"\u500b\u306e\u672a\u4f7f\u7528\uff83\uff9e\uff68\uff83\uff70\uff99\uff7c\uff70\uff84\u306e\uff8b\uff9e\uff6d\uff70\u304c\u6709\u308a\u307e\u3059\u3002\" &amp; vbCrLf &amp; _\n        \"\u5168\u3066\u524a\u9664\u3057\u307e\u3059\u304b?\"\n\n    If MsgBox(msg, vbQuestion + vbYesNo) = vbNo Then\n        Exit Sub\n    End If\n\n    '\u524a\u9664\n    Call RemoveComps(UnuseComps)\n\n    MsgBox \"Done\"\nEnd Sub\n\nPrivate Sub RemoveComps( _\n    ByVal lst As Collection)\n\n    Dim sel As selection\n    Set sel = CATIA.ActiveDocument.selection\n\n    CATIA.HSOSynchronized = False\n\n    Dim vi As DrawingView\n\n    With sel\n        .Clear\n        For Each vi In lst\n            .Add vi\n        Next\n        .Delete\n    End With\n\n    CATIA.HSOSynchronized = True\n\nEnd Sub\n\nPrivate Function GetComps( _\n    ByVal shts As DrawingSheets) As Collection\n\n    Dim cmps As Collection\n    Set cmps = New Collection\n\n    Dim st As DrawingSheet\n    Dim vi As DrawingView\n    Dim i As Long\n    For Each st In shts\n        For Each vi In st.views\n            For i = 1 To vi.Components.Count\n                cmps.Add vi.Components.Item(i)\n            Next\n        Next\n    Next\n\n    Set GetComps = cmps\n\nEnd Function\n\nPrivate Function GetUnuseCompsList( _\n    ByVal compDic As Object, ByVal cmps As Collection) _\n    As Collection\n\n    Dim cmp As DrawingComponent\n    Dim key As String\n    For Each cmp In cmps\n        key = GetKeyString(cmp.CompRef)\n        If compDic.Exists(key) Then\n            compDic(key) = Array(True, compDic(key)(1))\n        End If\n    Next\n\n    Dim lst As Collection\n    Set lst = New Collection\n\n    Dim ary As Variant\n    For Each ary In compDic.Items\n        If ary(0) = False Then\n            lst.Add ary(1)\n        End If\n    Next\n\n    Set GetUnuseCompsList = lst\n\nEnd Function\n\nPrivate Function GetKeyString( _\n    ByVal vi As DrawingView) As String\n\n    GetKeyString = vi.Parent.Parent.Name &amp; \"@\" &amp; _\n        KCL.GetInternalName(vi)\nEnd Function\n\nPrivate Function InitDetailDic( _\n    ByVal dets As Collection) As Object\n\n    Dim dic As Object\n    Set dic = KCL.InitDic()\n\n    Dim st As DrawingSheet\n    Dim i As Long\n    Dim vi As DrawingView\n    For Each st In dets\n        For i = 3 To st.views.Count\n            Set vi = st.views.Item(i)\n            dic.Add GetKeyString(vi), Array(False, vi)\n        Next\n    Next\n\n    Set InitDetailDic = dic\n\nEnd Function\n\nPrivate Function GetDetailSheet( _\n    ByVal doc As DrawingDocument) As Collection\n\n    Dim dets As Collection\n    Set dets = New Collection\n\n    Dim st As DrawingSheet\n    For Each st In doc.Sheets\n        If st.IsDetail Then\n            dets.Add st\n        End If\n    Next\n\n    Set GetDetailSheet = dets\n\nEnd Function\n</code></pre> <p>\u8a00\u8449\u3060\u3051\u3067\u306f\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002</p> <p>\u30c7\u30a3\u30c6\u30fc\u30eb\u30b7\u30fc\u30c8\u306b\u300cmaru\u300d\u3068\u300cshikaku\u300d\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 f:id:kandennti:20190410172837p:plain  \u3048\u3047\u30cd\u30fc\u30df\u30f3\u30b0\u30bb\u30f3\u30b90\u3067\u3059\u3002</p> <p>\u30b7\u30fc\u30c8\u3067\u300cmaru\u300d\u3060\u3051\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3066\u8cbc\u308a\u4ed8\u3051\u307e\u3059\u3002 f:id:kandennti:20190410172850p:plain  \u3053\u306e\u72b6\u614b\u3067\u30de\u30af\u30ed\u3092\u5b9f\u884c\u3059\u308b\u3068 f:id:kandennti:20190410172901p:plain  \u300cshikaku\u300d\u306f\u672a\u4f7f\u7528\u306a\u306e\u3067\u524a\u9664\u3057\u307e\u3059\u3002</p>"},{"location":"DS-CODE/VBA/%E5%90%8C%E4%B8%80UUID%E3%81%AEDraw%E5%8F%82%E7%85%A7%E5%85%83%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%B7%AE%E3%81%97%E6%9B%BF%E3%81%88%E3%82%8B3/%E5%90%8C%E4%B8%80UUID%E3%81%AEDraw%E5%8F%82%E7%85%A7%E5%85%83%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%B7%AE%E3%81%97%E6%9B%BF%E3%81%88%E3%82%8B3/","title":"\u540c\u4e00UUID\u306eDraw\u53c2\u7167\u5143\u30d5\u30a1\u30a4\u30eb\u3092\u5dee\u3057\u66ff\u3048\u308b3","text":"<p>\u3053\u3061\u3089\u306e\u7d9a\u304d\u3067\u3059\u3002</p>"},{"location":"DS-CODE/VBA/%E5%90%8C%E4%B8%80UUID%E3%81%AEDraw%E5%8F%82%E7%85%A7%E5%85%83%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%B7%AE%E3%81%97%E6%9B%BF%E3%81%88%E3%82%8B3/%E5%90%8C%E4%B8%80UUID%E3%81%AEDraw%E5%8F%82%E7%85%A7%E5%85%83%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%B7%AE%E3%81%97%E6%9B%BF%E3%81%88%E3%82%8B3/#uuiddraw3-catia","title":"\u540c\u4e00UUID\u306eDraw\u53c2\u7167\u5143\u30d5\u30a1\u30a4\u30eb\u3092\u5dee\u3057\u66ff\u3048\u308b3 - C#ATIA","text":"<p>\u307e\u3060\u3061\u3087\u3063\u3068\u4e0d\u5b89\u5b9a\u306a\u6c17\u3082\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u624b\u5143\u306e\u30c7\u30fc\u30bf\u3067\u306f \u4e0a\u624b\u304f\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u516c\u958b\u3057\u3066\u304a\u304d\u307e\u3059\u3002</p> <p>\u5148\u65e5\u306e\u7d44\u5408\u305b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307e\u305b\u3001Part\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u4e00\u540d\u306e Drawing\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <pre><code>'vba ReplaceDrawLink ver0.0.3  using-'KCL0.0.12'  by Kantoku\n'\uff8d\uff9e\uff70\uff7d\u3068\u306a\u308b\uff8c\uff67\uff72\uff99\u540d\u306fCATPart\u3068CATDrawing\u3067\u4e00\u81f4\u3057\u3066\u3044\u308b\u4e8b\u304c\u524d\u63d0\n'UUID\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u4e8b\u524d\u63d0\u3067\u3059\uff08\u9055\u3046\u3068\u7f6e\u63db\u3055\u308c\u306a\u3044\u3067\u3059\uff09\n\n'ver0.0.1:\u5b8c\u6210(\uff83\uff7d\uff84\uff7a\uff70\uff84\uff9e)\n'ver0.0.2:\uff8a\uff9e\uff6f\uff81\u51e6\u7406\u3067\u8907\u6570\u5909\u63db\u5bfe\u5fdc\n'ver0.0.3:Update\u6539\u5584(LockView\u306b\u3088\u308b\uff8f\uff78\uff9b\u505c\u6b62)\n'         \uff80\uff70\uff79\uff9e\uff6f\uff84Part\uff8c\uff67\uff72\uff99\u4e00\u6642\u7684\u306b\uff8a\uff9e\uff6f\uff78\uff71\uff6f\uff8c\uff9f\n\nOption Explicit\n\n'***********\nPrivate Const EXP_EXTENSION = \"comb\"\nPrivate Const SelectionType = \"*.\" &amp; EXP_EXTENSION\n\nPrivate Const BAT_CATVBS = \"ReplaceDrawLinkBat.catvbs\"\nPrivate Const BAT_SCRIPT = \"ReplaceDrawLink\" '\u91cd\u8981!\uff93\uff7c\uff9e\uff6d\uff70\uff99\u540d\nPrivate Const BAT_FUNCTION = \"ExecReplaceLink\" '\u91cd\u8981!\uff8a\uff9e\uff6f\uff81\uff93\uff70\uff84\uff9e\u306e\uff74\uff9d\uff84\uff98\uff70\uff8e\uff9f\uff72\uff9d\uff84\u95a2\u6570\u540d Private\u306fNG\n\nPrivate Const EVACUATION_NAME = \"EVAC\"\nPrivate Const DELIMTER = \"@\"\nPrivate Const DELIMTER_COMB = \"|\"\n\nPrivate Const DEBUGMODE = False\n\nSub CATMain()\n\n    '\uff98\uff9d\uff78\u4fee\u6b63\uff98\uff7d\uff84\uff8c\uff67\uff72\uff99\u9078\u629e\n    Dim msg As String\n    msg = \"Draw\uff98\uff9d\uff78\u3092\u4fee\u6b63\u3059\u308b\u70ba\u306e\uff98\uff7d\uff84\uff8c\uff67\uff72\uff99(\" &amp; EXP_EXTENSION &amp; \")\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\"\n\n    Dim lst_path As String\n    lst_path = CATIA.FileSelectionBox( _\n        msg, _\n        SelectionType, _\n        CatFileSelectionModeOpen)\n    If lst_path = vbNullString Then Exit Sub\n\n    '\uff98\uff9d\uff78\u4fee\u6b63\uff98\uff7d\uff84\uff8c\uff67\uff72\uff99\u8aad\u307f\u8fbc\u307f\n    Dim paths As Variant\n    paths = KCL.ReadFile(lst_path)\n\n    '\u78ba\u8a8d\n    msg = UBound(paths) + 1 &amp; \"\u500b\u306e\uff8a\uff9e\uff6f\uff81\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\u5b9c\u3057\u3044\u3067\u3059\u304b?\"\n    If MsgBox(msg, vbYesNo + vbQuestion) = vbNo Then\n        Exit Sub\n    End If\n\n    'catia\u306e\u5b9f\u884c\uff8c\uff67\uff72\uff99\uff8a\uff9f\uff7d\u53d6\u5f97\n    Dim catPathtmp As Variant\n    catPathtmp = Split(CATIA.SystemService.Environ(\"CATDLLPath\"), \";\")\n\n    Dim catPath As String\n    catPath = catPathtmp(0)\n\n    '\u74b0\u5883\uff8c\uff67\uff72\uff99\uff8a\uff9f\uff7d\u53d6\u5f97\n    Dim environmentPath As Variant\n    environmentPath = SplitPathName(CATIA.SystemService.Environ(\"CATEnvName\"))\n\n    'CATTemp\uff8a\uff9f\uff7d\u53d6\u5f97\n    Dim catTmp As Variant\n    catTmp = CATIA.SystemService.Environ(\"CATTemp\")\n\n    '\uff8a\uff9e\uff6f\uff81\u7528catvbs\n    Dim macroPath As String\n    macroPath = catTmp &amp; \"\\\" &amp; BAT_CATVBS\n\n    Dim code As String\n    code = GetCatvbsCode(Join(paths, DELIMTER), macroPath)\n    KCL.WriteFile macroPath, code\n\n    '\uff8a\uff9e\uff6f\uff81\uff7a\uff8f\uff9d\uff84\uff9e\n    Dim cmd As String\n    cmd = catPath &amp; \"\\CNEXT.exe -direnv \" &amp; _\n          environmentPath(0) &amp; \" -env \" &amp; _\n          environmentPath(1) &amp; \" -batch  -macro \" &amp; _\n          Chr(34) &amp; macroPath &amp; Chr(34)\n\n    '\uff8a\uff9e\uff6f\uff81\uff7d\uff80\uff70\uff84\n    Call CreateObject(\"Wscript.Shell\").exec(cmd)\n\n    MsgBox \"\uff8a\uff9e\uff6f\uff81\u51e6\u7406\u3092\uff7d\uff80\uff70\uff84\u3057\u307e\u3057\u305f\"\nEnd Sub\n\n\n'******* \uff8a\uff9e\uff6f\uff81\u51e6\u7406\u524d *********\n'\uff8a\uff9e\uff6f\uff81\u7528\uff7d\uff8c\uff9f\uff98\uff78\uff84\uff7f\uff70\uff7d\nPrivate Function GetCatvbsCode( _\n    ByVal path As String, _\n    ByVal me_path As String) As String\n\n    'VBProject\uff8a\uff9f\uff7d\u53d6\u5f97\n    Dim apc As Object\n    Set apc = GetApc()\n\n    Dim execPjt As Object\n    Set execPjt = apc.ExecutingProject\n\n    Dim pjtPath As String\n    pjtPath = execPjt.DisplayName\n\n    Dim code As String\n    code = _\n        \"Set SS = CATIA.SystemService\" &amp; vbCrLf &amp; _\n        \"VBAProjectPath = \" &amp; Chr(34) &amp; CStr(pjtPath) &amp; Chr(34) &amp; vbCrLf &amp; _\n        \"LibraryType = catScriptLibraryTypeVBAProject\" &amp; vbCrLf &amp; _\n        \"ScriptName = \" &amp; Chr(34) &amp; BAT_SCRIPT &amp; Chr(34) &amp; vbCrLf &amp; _\n        \"FunctionName = \" &amp; Chr(34) &amp; BAT_FUNCTION &amp; Chr(34) &amp; vbCrLf &amp; _\n        \"Dim Params(0)\" &amp; vbCrLf &amp; _\n        \"Params(0) = \" &amp; Chr(34) &amp; path &amp; Chr(34) &amp; vbCrLf &amp; _\n        \"Call SS.ExecuteScript(VBAProjectPath, LibraryType, ScriptName, FunctionName, Params)\" &amp; vbCrLf\n\n    If Not DEBUGMODE Then\n        code = code &amp; _\n            \"CreateObject(\" &amp; Chr(34) &amp; \"Scripting.FileSystemObject\" &amp; Chr(34) &amp; \").DeleteFile(\" &amp; _\n            Chr(34) &amp; me_path &amp; Chr(34) &amp; \")\" &amp; vbCrLf\n    End If\n\n    code = code &amp; _\n        \"CreateObject(\" &amp; Chr(34) &amp; \"WScript.Shell\" &amp; Chr(34) &amp; \").Popup \" &amp; Chr(34) &amp; \"Done\" &amp; _\n        Chr(34) &amp; \", 0 , \" &amp; Chr(34) &amp; \"ReplaceDrawLink\" &amp; Chr(34) &amp; \" , 0\"\n\n    GetCatvbsCode = code\nEnd Function\n\n'\uff8a\uff9f\uff7d\u3068\uff8c\uff67\uff72\uff99\u540d\u5206\u5272\n'Return: 0-Path 1-BaseName\nPrivate Function SplitPathName(ByVal FullPath) As Variant\n    Dim path(1) As String\n    With CreateObject(\"Scripting.FileSystemObject\")\n        path(0) = .GetParentFolderName(FullPath)\n        path(1) = .GetBaseName(FullPath)\n    End With\n    SplitPathName = path\nEnd Function\n\n'Apc\u53d6\u5f97\nPrivate Function GetApc() As Object\n    Set GetApc = Nothing\n\n    'VBA\uff8a\uff9e\uff70\uff7c\uff9e\uff6e\uff9d\uff81\uff6a\uff6f\uff78\n    Dim COMObjectName$\n    #If VBA7 Then\n        COMObjectName = \"MSAPC.Apc.7.1\"\n    #ElseIf VBA6 Then\n        COMObjectName = \"MSAPC.Apc.6.2\"\n    #Else\n        MsgBox \"VBA\u306e\uff8a\uff9e\uff70\uff7c\uff9e\uff6e\uff9d\u304c\u672a\u5bfe\u5fdc\u3067\u3059\"\n        Exit Function\n    #End If\n\n    'APC\u53d6\u5f97\n    Dim apc As Object: Set apc = Nothing\n    On Error Resume Next\n        Set apc = CreateObject(COMObjectName)\n    On Error GoTo 0\n\n    If apc Is Nothing Then\n        MsgBox \"MSAPC.Apc\u304c\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\"\n        Exit Function\n    End If\n\n    Set GetApc = apc\nEnd Function\n\n'******* \uff8a\uff9e\uff6f\uff81\u51e6\u7406\u7528 *********\n'\u5dee\u3057\u66ff\u3048\u51e6\u7406\nSub ExecReplaceLink(ByVal all_path As String)\n    Dim paths As Variant\n    paths = Split(all_path, DELIMTER)\n\n    Dim i As Long\n    Dim path As Variant\n    For i = 0 To UBound(paths)\n        path = Split(paths(i), DELIMTER_COMB)\n        If UBound(path) &lt; 1 Then GoTo continue\n        If IsExistsFiles(path) Then\n            Call ReplaceLink(path(0), path(1))\n        End If\ncontinue:\n    Next\n\n    If Not DEBUGMODE Then\n        CATIA.Quit\n    End If\nEnd Sub\n\n'\u5dee\u3057\u66ff\u3048\u305fDraw\uff8c\uff67\uff72\uff99\u4f5c\u6210\nPrivate Sub ReplaceLink( _\n    ByVal tgtPartPath As String, _\n    ByVal refDrawPath As String)\n\n    '\u907f\u96e3\u5148\uff8c\uff6b\uff99\uff80\uff9e\n    Dim evac As String\n    evac = GetEvacuationPath(refDrawPath)\n\n    'refPart\u306e\u907f\u96e3\n    Dim refPartAry As Variant\n    refPartAry = KCL.SplitPathName(refDrawPath)\n    refPartAry(2) = \"CATPart\"\n\n    Dim refPart As String\n    refPart = refPartAry(0) &amp; \"\\\" &amp; _\n              refPartAry(1) &amp; \".\" &amp; _\n              refPartAry(2)\n\n    Dim fso As Object\n    Set fso = KCL.GetFSO()\n\n    If KCL.IsExists(refPart) Then\n        fso.MoveFile refPart, evac &amp; \"\\\"\n        refPart = evac &amp; \"\\\" &amp; _\n                  refPartAry(1) &amp; \".\" &amp; _\n                  refPartAry(2)\n    Else\n        refPart = vbNullString\n    End If\n\n    'tgtPart\u306e\uff8a\uff9e\uff6f\uff78\uff71\uff6f\uff8c\uff9f\n    Dim tgtBackup As String\n    tgtBackup = tgtPartPath &amp; \".backup\"\n    fso.CopyFile tgtPartPath, tgtBackup\n\n    'tgtPart\u306e\uff98\uff88\uff70\uff91\n    Dim tgtPartAry As Variant\n    tgtPartAry = KCL.SplitPathName(tgtPartPath)\n\n    Dim tmpPart As String\n    tmpPart = refPartAry(1) &amp; \".\" &amp; _\n              tgtPartAry(2)\n    fso.GetFile(tgtPartPath).name = tmpPart\n    tmpPart = tgtPartAry(0) &amp; \"\\\" &amp; _\n              tmpPart\n\n    'tgt(tmp)Part\u306e\uff75\uff70\uff8c\uff9f\uff9d\n    Dim tgtDoc As PartDocument\n    Set tgtDoc = CATIA.Documents.Open(tmpPart)\n\n    'refDraw\u306e\uff75\uff70\uff8c\uff9f\uff9d\n    Dim refDoc As DrawingDocument\n    Set refDoc = CATIA.Documents.Open(refDrawPath)\n\n    'refDraw\u306eUpdate\n    Call UpdateUnlockViews(refDoc)\n\n    'SaveAs\n    Call SaveAs(tgtDoc, tgtPartPath)\n\n    Dim tgtDraw As String\n    tgtDraw = tgtPartAry(0) &amp; \"\\\" &amp; _\n              tgtPartAry(1) &amp; \".CATDrawing\"\n    Call SaveAs(refDoc, tgtDraw)\n\n    'tgtPart\u306e\uff8a\uff9e\uff6f\uff78\uff71\uff6f\uff8c\uff9f\u524a\u9664\n    fso.DeleteFile tgtBackup\n\n    'refPart\u623b\u3057\n    If Not refPart = vbNullString Then\n        fso.MoveFile refPart, refPartAry(0) &amp; \"\\\"\n    End If\n\n    '\u907f\u96e3\u5148\uff8c\uff6b\uff99\uff80\uff9e\u524a\u9664\n    fso.DeleteFolder evac\n\n    '\uff98\uff88\uff70\uff91\uff8c\uff67\uff72\uff99\u524a\u9664\n    fso.DeleteFile tmpPart\n\n    '\uff8c\uff67\uff72\uff99\u3092\u9589\u3058\u308b\n    tgtDoc.Close\n    refDoc.Close\nEnd Sub\n\n'\uff9b\uff6f\uff78\u3057\u3066\u3044\u306a\u3044\uff98\uff9d\uff78\u4ed8\u304d\uff8b\uff9e\uff6d\uff70\u306e\u66f4\u65b0\nPrivate Sub UpdateUnlockViews( _\n    ByVal doc As DrawingDocument)\n\n    Dim sht As DrawingSheet\n    Dim v As DrawingView\n    For Each sht In doc.Sheets\n        If sht.IsDetail Then GoTo continue_sheet\n\n        For Each v In sht.Views\n            If v.LockStatus Then GoTo continue_view\n            If Not HasLink(v) Then GoTo continue_view\n\n            v.GenerativeBehavior.Update\ncontinue_view:\n        Next\n\ncontinue_sheet:\n    Next\nEnd Sub\n\n'\uff98\uff9d\uff78\u4ed8\u304d\uff8b\uff9e\uff6d\uff70\u304b?\nPrivate Function HasLink( _\n    ByVal view As DrawingView) As Boolean\n\n    HasLink = False\n\n    On Error Resume Next\n\n    Dim behv As DrawingViewGenerativeBehavior\n    Set behv = view.GenerativeBehavior\n\n    Dim v As Document\n    Set v = behv.Document.Parent\n\n    On Error GoTo 0\n\n    If v Is Nothing Then Exit Function\n\n    HasLink = True\nEnd Function\n\n'\u907f\u96e3\uff8c\uff6b\uff99\uff80\uff9e\nPrivate Function GetEvacuationPath( _\n    ByVal path As String) As String\n\n    Dim evac As String\n    evac = KCL.GetFSO.GetParentFolderName(path) &amp; \"\\\" &amp; _\n           EVACUATION_NAME\n\n    evac = GetNewFolderName(evac)\n    GetEvacuationPath = evac\n\n    KCL.GetFSO.CreateFolder evac\nEnd Function\n\n'\u91cd\u8907\u3057\u306a\u3044\uff8c\uff6b\uff99\uff80\uff9e\u540d\nPrivate Function GetNewFolderName$(ByVal oldPath$)\n    Dim newPath As String\n    newPath = oldPath\n\n    If Not KCL.IsExists(newPath) Then\n        GetNewFolderName = newPath\n        Exit Function\n    End If\n    Dim TempName$, i&amp;: i = 0\n    Do\n        i = i + 1\n        TempName = newPath + \"_\" + CStr(i)\n        If Not KCL.IsExists(TempName) Then\n            GetNewFolderName = TempName\n            Exit Function\n        End If\n    Loop\nEnd Function\n\n'\u8907\u6570\uff8c\uff67\uff72\uff99\u6709\u7121\uff81\uff6a\uff6f\uff78\nPrivate Function IsExistsFiles( _\n    ByVal ary As Variant) As Boolean\n\n    IsExistsFiles = False\n\n    Dim i As Long\n    For i = 0 To UBound(ary)\n        If Not KCL.IsExists(ary(i)) Then Exit Function\n    Next\n\n    IsExistsFiles = True\nEnd Function\n\n'\uff80\uff9e\uff72\uff71\uff9b\uff78\uff9e\u3092\uff8c\uff9e\uff9b\uff6f\uff78\u3057\u305fSaveAs\nPrivate Sub SaveAs( _\n    ByVal doc As Document, _\n    ByVal path As String)\n\n    CATIA.DisplayFileAlerts = False\n    doc.SaveAs path\n    CATIA.DisplayFileAlerts = True\nEnd Sub\n</code></pre> <p>\u6700\u5927\u306e\u7279\u5fb4\u306f\u3001\uff8f\uff78\uff9b\u306e\u5b9f\u884c\u306f\uff8a\uff9e\uff6f\uff81\uff93\uff70\uff84\uff9e\u3067\u8d77\u52d5\u3055\u305b\u305fCATIA\u5074\u306b \u51e6\u7406\u3055\u305b\u308b\u70b9\u3067\u3059\u3002\u305d\u306e\u70ba\u3001\u4f5c\u696d\u3092\u884c\u3063\u3066\u3044\u308bCATIA\u306e\uff75\uff8d\uff9f\uff9a\uff70\uff7c\uff6e\uff9d\u306f \uff8f\uff78\uff9b\u306e\u8d77\u52d5\u307e\u3067\u3057\u304b\u596a\u308f\u308c\u307e\u305b\u3093\u3002</p> <p>\uff72\uff9b\uff72\uff9b\u3068\u6ce8\u610f\u3059\u3079\u304d\u70b9\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u6050\u3089\u304f\u4e16\u9593\u7684\u306b\u306f \u300c\u4eca\u66f4\u30fb\u30fb\u30fb\u300d\u306a\uff8f\uff78\uff9b\u3060\u308d\u3046\u3068\u306f\u601d\u3063\u3066\u307e\u3059\u3002</p> <p>\u5148\u65e5\u5ba2\u5148\u3088\u308a\u652f\u7d66\u3055\u308c\u305fDraw\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u30ea\u30f3\u30af\u5143\u306e\u5dee\u3057\u66ff\u3048\u306f \u884c\u308f\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001Update\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \u6050\u3089\u304f\u3001\u30ea\u30f3\u30af\u5143\u3092\u5dee\u3057\u66ff\u3048\u308b\u30de\u30af\u30ed\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u6301\u3063\u3066\u3044\u308b \u306e\u3067\u306f\u306a\u3044\u304b\u306a\uff1f\u3000\u3068\u52dd\u624b\u306b\u601d\u3063\u3066\u3044\u307e\u3059\u3002</p> <p>\u5b9f\u306f\u5358\u7d14\u306bUpdate\u3057\u305f\u969b\u3001\u30c7\u30fc\u30bf\u306e\u72b6\u614b\u306b\u3088\u3063\u3066\u306f\u30c0\u30a4\u30a2\u30ed\u30b0\u304c \u51fa\u73fe\u3057\u30de\u30af\u30ed\u304c\u505c\u6b62\u3057\u3066\u3057\u307e\u3046\u72b6\u6cc1\u306b\u906d\u9047\u3057\u307e\u3057\u305f\u3002 Update\u3057\u305f\u304f\u306a\u304f\u306a\u308b\u6c17\u6301\u3061\u3082\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u4e0a\u8a18\u306e\u30de\u30af\u30ed\u3067\u306f \u5bfe\u5fdc\u51fa\u6765\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002</p> <p>\u307e\u3060\u3001\u3061\u3087\u3063\u3068\u6a5f\u80fd\u4e0d\u8db3\u306a\u306e\u3067\u3059\u304c\u3001\u7d44\u5408\u305b\u30ea\u30b9\u30c8\u3092\u4f5c\u308b\u65b9\u306e \u30de\u30af\u30ed\u304c\u7570\u5e38\u306a\u307b\u3069\u4f7f\u3044\u306b\u304f\u3044\uff65\uff65\uff65\u3002</p>"},{"location":"DS-CODE/VBA/%E5%BD%A2%E7%8A%B6%E3%82%BB%E3%83%83%E3%83%88%E5%86%85%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%95%E3%82%A7%E3%82%B9%E3%81%A8%E7%B7%9A%E9%A1%9E%E3%82%92%E5%88%A5%E3%81%AE%E8%89%B2%E3%81%AB%E3%81%99%E3%82%8B/a/","title":"\u5f62\u72b6\u30bb\u30c3\u30c8\u5185\u306e\u30b5\u30fc\u30d5\u30a7\u30b9\u3068\u7dda\u985e\u3092\u5225\u306e\u8272\u306b\u3059\u308b","text":"<p>\u30b5\u30fc\u30d5\u30a7\u30b9\u3068\u7dda\u985e\u304c\u6df7\u5728\u3057\u9078\u629e\u3055\u308c\u305f\u72b6\u614b\u3067\u5225\u3005\u306e\u8272\u3092\u4ed8\u3051\u305f\u3044\u3000\u3068 \u6628\u5e74\u672b\u8fba\u308a\u3067\u3054\u76f8\u8ac7\u9802\u3044\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u9045\u304f\u306a\u308a\u307e\u3057\u305f\u3002</p> <p>CATIA\u306e\u5834\u5408\u306f\u8272\u3092\u5909\u66f4\u3059\u308b\u70ba\u306b\u306f\u4e00\u5ea6\u9078\u629e\u72b6\u614b\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001 \u4e00\u8fba\u306b\u30b5\u30fc\u30d5\u30a7\u30b9\u3068\u7dda\u985e\u3092\u5225\u3005\u306b\u8272\u4ed8\u3051\u3059\u308b\u4e8b\u306f\u51fa\u6765\u307e\u305b\u3093\u3002</p> <p>\u305d\u306e\u70ba\u3001\u30b5\u30fc\u30d5\u30a7\u30b9\u306e\u307f\u3000\u7dda\u985e\u306e\u307f\u3000\u306e\u9078\u629e\u72b6\u614b\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <pre><code>'catvba\nOption Explicit\n\nSub CATMain()\n\n    '\u6e96\u5099\n    Dim doc As PartDocument\n    Set doc = CATIA.ActiveDocument\n\n    Dim sel As Selection\n    Set sel = doc.Selection\n    sel.Clear\n\n    Dim pt As Part\n    Set pt = doc.Part\n\n    '\u4e00\u500b\u76ee\u306e\u5f62\u72b6\u30bb\u30c3\u30c8\n    Dim hyBdy As HybridBody\n    Set hyBdy = pt.HybridBodies.Item(1)\n\n    '\u9078\u629e\u51e6\u7406\u3092\u8efd\u304f\u3059\u308b\u305f\u3081\u306e\u9b54\u6cd5\n    'http://catiadoc.free.fr/online/interfaces/interface_Application.htm#HSOSynchronized\n    CATIA.HSOSynchronized = False\n\n    '\u610f\u56f3\u7684\u306b\u5f62\u72b6\u30bb\u30c3\u30c8\u5185\u306e\u5168GSD\u8981\u7d20\u3092\u9078\u629e\n    Dim entity As AnyObject\n    For Each entity In hyBdy.HybridShapes\n        sel.Add entity\n    Next\n\n\n    '---\u672c\u984c\u306f\u3053\u3053\u304b\u3089---\n\n    'HybridShapeFactory\u53d6\u5f97\n    'http://catiadoc.free.fr/online/interfaces/interface_HybridShapeFactory.htm#GetGeometricalFeatureType\n    Dim hyFact As HybridShapeFactory\n    Set hyFact = pt.HybridShapeFactory\n\n    '\u9078\u629e\u8981\u7d20\u304b\u3089HybridShapeFactory\u3067\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u30bf\u30a4\u30d7\u3092\n    '\u5224\u65ad\u3057\u9078\u629e\u304b\u3089\u5916\u3059\n    'For\u6587\u306f\u9006\u9806\u306b\u884c\u308f\u306a\u3044\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u30ba\u30ec\u307e\u3059\n    'Surface\u306f5\u3067\u3059\n    Dim idx As Long\n    Dim geoType As Long\n    For idx = sel.Count2 To 1 Step -1\n\n        'idx\u756a\u76ee\u306e\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u30bf\u30a4\u30d7\u3092\u53d6\u5f97\n        geoType = hyFact.GetGeometricalFeatureType(sel.Item(idx).Reference)\n\n        '\u30b5\u30fc\u30d5\u30a7\u30b9\u4ee5\u5916\u306f\u9078\u629e\u3092\u89e3\u9664\u3059\u308b\n        If Not geoType = 5 Then\n            Call sel.Remove(idx)\n        End If\n    Next\n\n    '\u3053\u306e\u6642\u70b9\u3067\u30b5\u30fc\u30d5\u30a7\u30b9\u306e\u307f\u304c\u9078\u629e\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b\n\n    '\u8272\u3092\u5909\u66f4\u3059\u308b\u70ba\u306eVisPropertySet\u3092\u53d6\u5f97\n    'http://catiadoc.free.fr/online/interfaces/interface_VisPropertySet.htm\n    Dim vis As VisPropertySet\n    Set vis = sel.VisProperties\n\n    'SetRealColor\u306e\u5f15\u6570\u306fR,G,B\u3067\n    '4\u756a\u76ee\u306f\u826f\u304f\u5206\u304b\u3063\u3066\u307e\u305b\u3093(\u4ee5\u524d\u6559\u308f\u3063\u305f\u3088\u3046\u306a\u6c17\u306f\u3057\u3066\u307e\u3059)\n    '\u8d64\u8272\u306b\u5909\u66f4\u3057\u3066\u307e\u3059\n    Call vis.SetRealColor(255, 0, 0, 1)\n    sel.Clear\n\n\n\n    '\u7121\u99c4\u3067\u3059\u304c\u3001\u3082\u3046\u4e00\u5ea6\u5f62\u72b6\u30bb\u30c3\u30c8\u5185\u306e\u5168GSD\u8981\u7d20\u3092\u9078\u629e\n    For Each entity In hyBdy.HybridShapes\n        sel.Add entity\n    Next\n\n    '\u9078\u629e\u8981\u7d20\u304b\u3089HybridShapeFactory\u3067\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u30bf\u30a4\u30d7\u3092\n    '\u5224\u65ad\u3057\u9078\u629e\u304b\u3089\u5916\u3059\n    'Curve\u306f2 Line\u306f3 Circle\u306f4\u3067\u3059\n    For idx = sel.Count2 To 1 Step -1\n\n        'idx\u756a\u76ee\u306e\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u30bf\u30a4\u30d7\u3092\u53d6\u5f97\n        geoType = hyFact.GetGeometricalFeatureType(sel.Item(idx).Reference)\n\n        '\u30b5\u30fc\u30d5\u30a7\u30b9\u4ee5\u5916\u306f\u9078\u629e\u3092\u89e3\u9664\u3059\u308b\n        Select Case geoType\n            Case 2, 3, 4\n                '\u4f55\u3082\u3057\u306a\u3044\n            Case Else\n                Call sel.Remove(idx)\n        End Select\n    Next\n\n    '\u3053\u306e\u6642\u70b9\u3067\u7dda\u306e\u307f\u304c\u9078\u629e\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b\n\n    '\u7dd1\u8272\u306b\u5909\u66f4\u3057\u3066\u307e\u3059\n    Call vis.SetRealColor(0, 255, 0, 1)\n    sel.Clear\n\nEnd Sub\n</code></pre> <p>\u5f62\u72b6\u30bb\u30c3\u30c8\u5185\u306b\u306f\u30b5\u30fc\u30d5\u30a7\u30b9\u3068\u7dda\u304c1\u500b\u3065\u3064\u3067\u3059\u304c\u3001\u5168\u3066\u306e\u8272\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 \u5b9f\u884c\u524d\u306f\u5de6\u3067\u5b9f\u884c\u5f8c\u306f\u53f3\u3067\u3059\u3002</p> <p> \u4e0a\u8a18\u306bSetRealColor\u30674\u756a\u76ee\u306e\u5f15\u6570\u306b\u3064\u3044\u3066</p> <pre><code>'SetRealColor\u306e\u5f15\u6570\u306fR,G,B\u3067\n'4\u756a\u76ee\u306f\u826f\u304f\u5206\u304b\u3063\u3066\u307e\u305b\u3093(\u4ee5\u524d\u6559\u308f\u3063\u305f\u3088\u3046\u306a\u6c17\u306f\u3057\u3066\u307e\u3059)\n</code></pre> <p>\u3068\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u3061\u3089\u306e\u30b5\u30a4\u30c8\u3067\u306f\u3088\u308a\u8a73\u3057\u304f\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002 VisPropertySet\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff5cCATIA\u30de\u30af\u30ed\u306e\u4f5c\u6210\u65b9\u6cd5 | LiCLOG \u52a9\u304b\u308a\u307e\u3059\u3002</p>"},{"location":"DS-CODE/VBA/%E6%B3%A8%E8%A8%98%E3%81%AE%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A32/%E6%B3%A8%E8%A8%98%E3%81%AE%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A32/","title":"\u6ce8\u8a18\u306e\u30c6\u30ad\u30b9\u30c8\u30d7\u30ed\u30d1\u30c6\u30a32","text":""},{"location":"DS-CODE/VBA/%E6%B3%A8%E8%A8%98%E3%81%AE%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A32/%E6%B3%A8%E8%A8%98%E3%81%AE%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A32/#2","title":"\u6ce8\u8a18\u306e\u30c6\u30ad\u30b9\u30c8\u30d7\u30ed\u30d1\u30c6\u30a32","text":"<p>\u3053\u3061\u3089\u306e\u7d9a\u304d\u3067\u3059\u3002 \u6ce8\u8a18\u306e\u30c6\u30ad\u30b9\u30c8\u30d7\u30ed\u30d1\u30c6\u30a31 - C#ATIA</p> <p>DrawingTextProperties\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u6050\u3089\u304f\u8aad\u307f\u66f8\u304d\u53ef\u80fd\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u3060\u308d\u3046 \u3068\u601d\u3044\u3001\u7d20\u76f4\u306b\u4ee3\u5165\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3068\u3053\u308d\u4e0a\u624b\u304f\u884c\u304d\u307e\u3057\u305f\u3002 \uff08Help\u306bSetFontSize\u3067\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u305d\u308c\u3092\u4f7f\u3044\u307e\u305b\u3093\u3067\u3057\u305f\uff09</p> <pre><code>Sub CATMain()\n\n    'Doc\n    Dim actdoc As PartDocument\n    Set actdoc = CATIA.ActiveDocument\n\n    'part\n    Dim pt As part\n    Set pt = actdoc.part\n\n    'Annotation\n    Dim annoSet As AnnotationSet\n    Set annoSet = pt.AnnotationSets.Item(1)\n\n    Dim anno As Annotation\n    Set anno = annoSet.Annotations.Item(1)\n\n    'TextProperties\n    Dim txtProp As DrawingTextProperties\n    Set txtProp = anno.Text.Get2dAnnot\n\n    '\u30d5\u30a9\u30f3\u30c8\u3068\u30b5\u30a4\u30ba\u5909\u66f4\n    txtProp.FONTNAME = \"Arial (TrueType)\"\n    txtProp.FONTSIZE = 10\n\n    '\u66f4\u65b0\n    'txtProp.Update '\u52b9\u679c\u306a\u3057\n\n    '\u7121\u99c4\u3067\u3059\u304c\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u6587\u5b57\u3092\u540c\u3058\u6587\u5b57\u3067\n    '\u4e0a\u66f8\u304d\u3059\u308b\u3053\u3068\u3067\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f\n    anno.Text.Text = anno.Text.Text\n\nEnd Sub\n</code></pre> <p>\u5b9f\u884c\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002</p> <p> \u6700\u5f8c\u306e</p> <pre><code>'\u66f4\u65b0\n'txtProp.Update '\u52b9\u679c\u306a\u3057\n\n'\u7121\u99c4\u3067\u3059\u304c\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u6587\u5b57\u3092\u540c\u3058\u6587\u5b57\u3067\n'\u4e0a\u66f8\u304d\u3059\u308b\u3053\u3068\u3067\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f\nanno.Text.Text = anno.Text.Text\n</code></pre> <p>\u3060\u3051\u3001\u3059\u3093\u306a\u308a\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3054\u8aac\u660e\u3092\u3002</p> <p>\u6700\u521d\u306f\u30d5\u30a9\u30f3\u30c8\u3084\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3057\u3066\u3082\u53cd\u5fdc\u304c\u7121\u304f\u3001GUI(\u624b\u52d5)\u3067\u30c6\u30ad\u30b9\u30c8\u3092 \u5909\u66f4\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u4fee\u6b63\u304c\u53cd\u6620\u3055\u308c\u307e\u3057\u305f\u3002 \u2019txtProp.Update' 'part.Update' \u3067\u5bfe\u5fdc\u51fa\u6765\u308b\u3060\u308d\u3046\u3068\u8003\u3048\u305f\u306e\u3067\u3059\u304c\u52b9\u679c\u304c\u7121\u304f\u3001 \u7d50\u679c\u7684\u306bGUI\u306e\u64cd\u4f5c\u540c\u69d8\u306e\u6587\u5b57\u3092\u4e0a\u66f8\u304d\u3059\u308b\u5f62\u3067\u3001\u5909\u66f4\u304c\u53cd\u6620\u3055\u308c\u307e\u3057\u305f\u3002 \u3072\u3087\u3063\u3068\u3057\u305f\u3089\u3001\u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3001\u3001\u3002</p>"},{"location":"ISE-AEC/","title":"Welcome to Knowledge","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"ISE-AEC/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"ISE-AEC/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"ISE-AEC/ARC-FacadeDesign/GT-%E5%B9%95%E5%A2%99%E6%A1%88%E4%BE%8B2/","title":"GT \u5e55\u5899\u6848\u4f8b2","text":""},{"location":"ISE-AEC/ARC-FacadeDesign/GT-%E5%B9%95%E5%A2%99%E6%A1%88%E4%BE%8B2/#ekl","title":"ekl","text":"<pre><code>let i (Integer)\nlet Int (Curve)\nlet lvlPl (Plane)\nlet L (List)\nlet Item (Plane)\nlet S (Surface)\nlet Ln (Line)\n\nlet j (Integer)\nlet Pt (Point)\nlet stPl (Plane)\nlet offPl (Plane)\n\nlet intCount (Integer)\nlet ptCount (Integer)\nlet pnlCount (Integer)\nlet extrCount (Integer)\n\nlet Extr (Surface)\nlet dirPt (Point)\nlet Dir (Direction)\nlet Dist (Length)\nlet maxDist (Length)\nlet jmax (Integer)\n\nlet endPt (Point)\nlet tngPt (Point)\n\nlet Pnl (Surface)\nlet prjB (Curve)\n\nlet Count (Integer)\nlet Lng (Length)\nlet maxLng (Length)\nlet gridLn (Line)\n\nlet Width (Length)\nlet cumWidth (Length)\nlet Found (Boolean)\nlet pnlClr (String)\nlet pnlType (String)\n\nlet Twr (String)\nlet fType (String)\nlet Face (String)\nlet lvlNum (Integer)\nlet unitNum (Integer)\nlet sType (String)\nlet floorType (String)\n\nlet lvlSt (String)\nlet unitSt (String)\nlet lvlMin (Integer)\nlet lvlMax (Integer)\n\nlet n (Integer)\n\nlet horDist (Length)\nlet nxtPt (Point)\nlet remDist (Length)\nlet G1 (Surface)\nlet G2 (Surface)\n\nL = SORTED_LIST_PLANES S = INPUT\\SURFACE i=1\nj=1\npnlCount = 1\nptCount = 1\nextrCount =1\nCount =1 maxDist =0m\nlvlMin = 1\nlvlMax = 1\n\nsType = \"G\"\n\nTwr = S.GetAttributeString(\"TOWER\")\nfType = S.GetAttributeString(\"FACADE_TYPE\")\nFace = S.GetAttributeString(\"FACE\")\nGLASS\\PARAMETERS\\LEVEL_COUNT =L-&gt;Size()-1\n\nfor i while i &lt;= L-&gt;Size()\n{\nItem = L-&gt;GetItem(i)\nlvlNum = Item.GetAttributeInteger(\"LEVEL\")\nfloorType = Item.GetAttributeString(\"FLOOR_TYPE\")\n\nif lvlNum &lt;=lvlMin {\nlvlMin = lvlNum\nGLASS\\PARAMETERS\\MIN_LEVEL  =lvlMin\n}\nif lvlNum &gt;=lvlMax {\nlvlMax = lvlNum\nGLASS\\PARAMETERS\\MAX_LEVEL   =lvlMax-1\n}\n\nif ToString( lvlNum)-&gt;Length() ==1  {\nlvlSt = \"0\"+ToString(lvlNum) }\nelse\n{\nlvlSt = ToString(lvlNum ) }\n\nInt = intersect(INPUT\\SURFACE, Item )\n\nSet stPl = CreateOrModifyDatum(\"Plane\",GLASS\\START_PLANE ,GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\START_PLANES ,i)\nstPl = planenormal(Int,intersect(GLASS\\CONSTRUCTION\\STAGER_LINE ,Item) ) stPl.Name = \"STPL_\"+lvlSt\n\nendPt = pointoncurveRatio(Int,NULL,1,true) maxLng = distance(stPl,GLASS\\CONSTRUCTION\\LIMIT_PLANE)\n\nSet gridLn = CreateOrModifyDatum(\"Line\",GLASS\\LINE_GRID ,GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\GRID_LINE ,i)\ngridLn = linenormal(stPl,project(endPt,stPl),0m,maxLng,true) gridLn.SetAttributeString(\"TOWER\",Twr)\ngridLn.SetAttributeString(\"FACADE_TYPE\", fType)\ngridLn.SetAttributeString(\"FACE\", Face)\ngridLn.SetAttributeInteger(\"LEVEL\", lvlNum)\ngridLn.Name = \"GRID_\"+Twr+fType+Face+lvlSt\n\nif GLASS\\PARAMETERS\\TESSELATION_TYPE ==\"BY_UNIFORM_GRID\"\n{\nif i&gt;1\n{\nj=1\n\nCount = ceil(maxLng/GLASS\\PARAMETERS\\GLS_WIDTH )+1\nfor j while j &lt;=Count\n{\npnlType = \"G\"\npnlClr = \"130,170,215\"\n\nif ToString( lvlNum-1)-&gt;Length() ==1    {\nlvlSt = \"0\"+ToString(lvlNum-1) }\nelse\n{\nlvlSt = ToString(lvlNum-1 ) }\n\noffPl = planeoffset(stPl,GLASS\\PARAMETERS\\GLS_WIDTH *(j-1),true) if ToString(j)-&gt;Length() == 1\n{\nunitSt = \"0\"+ToString(j) }\nelse\n{\nunitSt = ToString(j) }\nif distance(offPl,gridLn)&lt;=0.1mm\n{\nSet Pt = CreateOrModifyDatum(\"Point\",GLASS\\POINTS ,GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\POINTS, ptCount) Pt = intersect(gridLn,offPl) Pt.Name = \"PT_\"+lvlSt+\"_\"+unitSt\nptCount = ptCount +1\n\ndirPt = intersect(GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\GRID_LINE  -&gt;GetItem(i-1),offPl)\nDir = direction (line(Pt,dirPt))\nDist = distance(Pt,dirPt)\n\nif Dist &gt;=maxDist {\nmaxDist = Dist\nGLASS\\PARAMETERS\\MAX_HEIGHT =maxDist }\n\nLn = linetangent(gridLn,Pt,0m,GLASS\\PARAMETERS\\GLS_WIDTH ,true) Extr = extrude(Ln,Dir,0m,Dist,true) if distance(Extr,INPUT\\SURFACE ) &lt;=0.1mm\n{\nif distance(GLASS\\CONSTRUCTION\\SRF_BOUNDARY_EXTRUDE  , Extr)&lt;=0.1mm\n{\nSet Pnl = CreateOrModifyDatum(\"Surface\",GLASS\\PANEL ,GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\PANEL  ,pnlCount) Set prjB = project(GLASS\\CONSTRUCTION\\SURFACE_BOUNDARY ,Extr) Pnl = split(Extr,prjB,true) if area(Pnl) &lt;(Dist*GLASS\\PARAMETERS\\GLS_WIDTH)\n{\nsType =pnlType+ \"E\"\n}\nelse\n{\nsType =pnlType+\"R\"\n}\npnlCount=pnlCount+1\n}\nelse\n{\nSet Pnl = CreateOrModifyDatum(\"Surface\",GLASS\\PANEL ,GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\PANEL  ,pnlCount) Pnl = extrude(Ln,Dir,0m,Dist,true) sType =pnlType+ \"R\"\npnlCount = pnlCount+1\n}\n\nPnl.Name = Twr+fType+Face+lvlSt+unitSt\n\nPnl.SetAttributeString(\"TOWER\",Twr)\nPnl.SetAttributeString(\"FACADE_TYPE\", fType)\nPnl.SetAttributeString(\"FACE\", Face)\nPnl.SetAttributeInteger(\"LEVEL\", lvlNum-1)\nPnl.SetAttributeInteger(\"UNIT_NUMBER\", j)\nPnl.SetAttributeString(\"SUB_TYPE\", sType)\nPnl.SetAttributeString(\"FLOOR_TYPE\", floorType)\nPnl.SetAttributeDimension(\"AREA\",area(Pnl),\"Area\")\nPnl.SetAttributeDimension(\"LENGTH\",Dist,\"Length\")\n\nPnl.Color = pnlClr\n}       }\n}\n}\n\n}\n\nif GLASS\\PARAMETERS\\TESSELATION_TYPE ==\"BY_MODULAR_GRID\"\n{\nif i&gt;1\n{\nj=1\nFound =false\nWidth = GLASS\\PARAMETERS\\GLS_WIDTH cumWidth = 0m\n\nfor j while Found == false\n{\nif mod(j,3)==0\n{\nWidth = GLASS\\PARAMETERS\\VENT_WIDTH pnlClr = \"150,150,150\"\npnlType = \"V\"\n}\nelse\n{\nWidth = GLASS\\PARAMETERS\\GLS_WIDTH pnlClr = \"130,170,215\"\npnlType = \"G\"\n}\n\nif j==1\n{\ncumWidth = 0m\n}\n\noffPl = planeoffset(stPl,cumWidth,true) cumWidth = cumWidth+Width\n\nif distance (offPl,pointoncurveRatio(gridLn,NULL,1,true))&lt;Width\n{\nFound = true\n}\n\nif ToString( lvlNum-1)-&gt;Length() ==1        {\nlvlSt = \"0\"+ToString(lvlNum-1) }\nelse\n{\nlvlSt = ToString(lvlNum-1 ) }\n\n\nif ToString(j)-&gt;Length() == 1\n{\nunitSt = \"0\"+ToString(j) }\nelse\n{\nunitSt = ToString(j) }\nif distance(offPl,gridLn)&lt;=0.1mm\n{\nSet Pt = CreateOrModifyDatum(\"Point\",GLASS\\POINTS ,GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\POINTS, ptCount) Pt = intersect(gridLn,offPl) Pt.Name = \"PT_\"+lvlSt+\"_\"+unitSt\nptCount = ptCount +1\n\ndirPt = intersect(GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\GRID_LINE  -&gt;GetItem(i-1),offPl)\nDir = direction (line(Pt,dirPt))\nDist = distance(Pt,dirPt)\n\nif Dist &gt;=maxDist {\nmaxDist = Dist\nGLASS\\PARAMETERS\\MAX_HEIGHT =maxDist }\n\nLn = linetangent(gridLn,Pt,0m,Width ,true) Extr = extrude(Ln,Dir,0m,Dist,true) if distance(Extr,INPUT\\SURFACE ) &lt;=0.1mm\n{\n\nif distance(GLASS\\CONSTRUCTION\\SRF_BOUNDARY_EXTRUDE , Extr)&lt;=0.1mm\n{\nSet Pnl = CreateOrModifyDatum(\"Surface\",GLASS\\PANEL ,GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\PANEL  ,pnlCount) Set prjB = project(GLASS\\CONSTRUCTION\\SURFACE_BOUNDARY ,Extr) Pnl = split(Extr,prjB,true) if area(Pnl) &lt;(Dist*Width)\n{\nsType = pnlType +\"E\"\n}\nelse\n{\nsType =pnlType + \"R\"\n}\n\npnlCount=pnlCount+1\n}\nelse\n{\nSet Pnl = CreateOrModifyDatum(\"Surface\",GLASS\\PANEL ,GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\PANEL  ,pnlCount) Pnl = extrude(Ln,Dir,0m,Dist,true) sType =pnlType + \"R\"\npnlCount=pnlCount+1\n}\n\nPnl.Name = Twr+fType+Face+lvlSt+unitSt\n\nPnl.SetAttributeString(\"TOWER\",Twr)\nPnl.SetAttributeString(\"FACADE_TYPE\", fType)\nPnl.SetAttributeString(\"FACE\", Face)\nPnl.SetAttributeInteger(\"LEVEL\", lvlNum-1)\nPnl.SetAttributeInteger(\"UNIT_NUMBER\", j)\nPnl.SetAttributeString(\"SUB_TYPE\", sType)\nPnl.SetAttributeString(\"FLOOR_TYPE\", floorType)\nPnl.SetAttributeDimension(\"AREA\",area(Pnl),\"Area\")\nPnl.SetAttributeDimension(\"LENGTH\",Dist,\"Length\")\n\nPnl.Color = pnlClr }\n}\n}\n}\n}\n\n\n\nif GLASS\\PARAMETERS\\TESSELATION_TYPE ==\"BY_ISOCURVES\"\n{\nif i &gt;1\n{\nj=1\nfor j while j &lt;= SORTED_LIST_ISOCURVES_STEPPED  -&gt;Size()\n{\n\n\n\nif ToString( lvlNum-1)-&gt;Length() ==1        {\nlvlSt = \"0\"+ToString(lvlNum-1) }\nelse\n{\nlvlSt = ToString(lvlNum-1 ) }\n\n\nif ToString(j)-&gt;Length() == 1\n{\nunitSt = \"0\"+ToString(j) }\nelse\n{\nunitSt = ToString(j) }\nif distance(gridLn,SORTED_LIST_ISOCURVES_STEPPED  -&gt;GetItem(j) )&lt;=0.1mm\n{\nif j &lt;= SORTED_LIST_ISOCURVES_STEPPED  -&gt;Size()-1\n{\n\nSet Pt = CreateOrModifyDatum(\"Point\",GLASS\\POINTS ,GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\POINTS, ptCount) Pt = intersect(gridLn,SORTED_LIST_ISOCURVES_STEPPED -&gt;GetItem(j)  ) Pt.Name = \"PT_\"+lvlSt+\"_\"+unitSt\nptCount=ptCount+1\n\nif distance(gridLn,SORTED_LIST_ISOCURVES_STEPPED  -&gt;GetItem(j+1)) &gt;=0.1mm {\nif distance(gridLn,SORTED_LIST_ISOCURVES_STEPPED  -&gt;GetItem(j+2)) &lt;=0.1mm\n{\nnxtPt = intersect(gridLn,SORTED_LIST_ISOCURVES_STEPPED  -&gt;GetItem(j+2))\n}\nelse\n{\nnxtPt =  intersect(gridLn,SORTED_LIST_ISOCURVES_STEPPED  -&gt;GetItem(j+4))\n}\n\n}\nelse\n{\nnxtPt =  intersect(gridLn,SORTED_LIST_ISOCURVES_STEPPED  -&gt;GetItem(j+1))\n}\n\nhorDist = distance(Pt,nxtPt)\nremDist = horDist-GLASS\\PARAMETERS\\GLS_WIDTH -GLASS\\PARAMETERS\\VENT_WIDTH offPl = planenormal(gridLn,Pt)\nif distance(GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\GRID_LINE  -&gt;GetItem(i-1),offPl)&lt;=0.1mm\n{\ndirPt = intersect(GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\GRID_LINE  -&gt;GetItem(i-1),offPl)\nDir = direction (line(Pt,dirPt))\nDist = distance(Pt,dirPt)\n\nif Dist &gt;=maxDist {\nmaxDist = Dist\nGLASS\\PARAMETERS\\MAX_HEIGHT =maxDist }\n\nLn = linetangent(gridLn,Pt,0m,GLASS\\PARAMETERS\\VENT_WIDTH  ,true) Set Pnl =  CreateOrModifyDatum(\"Surface\",GLASS\\PANEL  , GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\PANEL  ,pnlCount) Pnl = extrude(Ln,Dir,0m,Dist,true) Pnl.Name = Twr+fType+Face+lvlSt+unitSt+\"V\"\n\nPnl.SetAttributeString(\"TOWER\",Twr)\nPnl.SetAttributeString(\"FACADE_TYPE\", fType)\nPnl.SetAttributeString(\"FACE\", Face)\nPnl.SetAttributeInteger(\"LEVEL\", lvlNum-1)\nPnl.SetAttributeInteger(\"UNIT_NUMBER\", j)\nPnl.SetAttributeString(\"SUB_TYPE\", \"V\")\nPnl.SetAttributeString(\"FLOOR_TYPE\", floorType)\nPnl.SetAttributeDimension(\"AREA\",area(Pnl),\"Area\")\nPnl.SetAttributeDimension(\"LENGTH\",GLASS\\PARAMETERS\\VENT_WIDTH ,\"Length\")\nPnl.Color = \"150,150,150\"\n\npnlCount=pnlCount+1\n\nLn = linetangent(gridLn,Pt,GLASS\\PARAMETERS\\VENT_WIDTH,GLASS\\PARAMETERS\\GLS_WIDTH+GLASS\\PARAMETERS\\VENT_WIDTH  ,true) Set Pnl =  CreateOrModifyDatum(\"Surface\",GLASS\\PANEL  , GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\PANEL  ,pnlCount) Pnl = extrude(Ln,Dir,0m,Dist,true) Pnl.Name = Twr+fType+Face+lvlSt+unitSt+\"A\"\nPnl.Color = \"130,170,215\"\nPnl.SetAttributeString(\"TOWER\",Twr)\nPnl.SetAttributeString(\"FACADE_TYPE\", fType)\nPnl.SetAttributeString(\"FACE\", Face)\nPnl.SetAttributeInteger(\"LEVEL\", lvlNum-1)\nPnl.SetAttributeInteger(\"UNIT_NUMBER\", j)\nPnl.SetAttributeString(\"SUB_TYPE\", \"A\")\nPnl.SetAttributeString(\"FLOOR_TYPE\", floorType)\nPnl.SetAttributeDimension(\"AREA\",area(Pnl),\"Area\")\nPnl.SetAttributeDimension(\"LENGTH\",GLASS\\PARAMETERS\\GLS_WIDTH ,\"Length\")\n\n\npnlCount=pnlCount+1\n\nLn = linetangent(gridLn,Pt,GLASS\\PARAMETERS\\VENT_WIDTH+GLASS\\PARAMETERS\\GLS_WIDTH,horDist ,true) Set Pnl =  CreateOrModifyDatum(\"Surface\",GLASS\\PANEL  , GLASS\\RELATIONS\\KP_LANDSCAPE_GLASS\\PANEL  ,pnlCount) Pnl = extrude(Ln,Dir,0m,Dist,true) Pnl.Name = Twr+fType+Face+lvlSt+unitSt+\"B\"\nPnl.Color = \"130,170,215\"\nPnl.SetAttributeString(\"TOWER\",Twr)\nPnl.SetAttributeString(\"FACADE_TYPE\", fType)\nPnl.SetAttributeString(\"FACE\", Face)\nPnl.SetAttributeInteger(\"LEVEL\", lvlNum-1)\nPnl.SetAttributeInteger(\"UNIT_NUMBER\", j)\nPnl.SetAttributeString(\"SUB_TYPE\", \"B\")\nPnl.SetAttributeString(\"FLOOR_TYPE\", floorType)\nPnl.SetAttributeDimension(\"AREA\",area(Pnl),\"Area\")\nPnl.SetAttributeDimension(\"LENGTH\",remDist ,\"Length\")\n\npnlCount=pnlCount+1\n}\n}\n}\n\n}\n\n}\n}   }\n</code></pre>"},{"location":"ISE-AEC/ARC-FacadeDesign/KP%E5%88%86%E6%A0%BC%E9%98%B5%E5%88%97/","title":"KP\u5206\u683c\u9635\u5217","text":"<pre><code>let i (Integer)\nlet L (List)\nlet S (Surface)\nlet j (Integer)\n\nlet Count (Integer)\nlet pnlType (String)\n\nlet F (Feature)\nlet PW (Feature)\n\nlet Twr (String)\nlet fType (String)\nlet Face (String)\nlet lvlNum (Integer)\nlet unitNum (Integer)\nlet sType (String)\nlet floorType (String)\n\nlet lvlSt (String)\nlet unitSt (String)\nlet subSt (String)\nlet Count (Integer)\n\nlet tPl (Plane)\nlet bPl (Plane)\nlet tLn (Line)\nlet bLn (Line)\n\nlet CrvR (Curve)\nlet CrvM (Curve)\nlet CrvL (Curve)\n\nlet vTypeR (String)\nlet vTypeL (String)\nlet vLimitR (Integer)\nlet vLimitL (Integer)\n\nlet vType (String)\nlet vLimit (Integer)\n\nlet PtR (Point)\nlet PtL (Point)\n\nlet Dist (Length)\n\nlet Limit5 (Length)\nlet Limit4 (Length)\nlet Limit3 (Length)\nlet Limit2 (Length)\nlet Limit1 (Length)\n\nlet glsW1 (Length)\nlet glsW2 (Length)\nlet ventW (Length)\n\nlet aR (Length)\nlet aL (Length)\n\nlet ListT (List)\nlet ListL (List)\n\nlet NPla (Plane)\nlet NPlb (Plane)\n\nlet PtA (Point)\nlet PtB (Point)\nlet PtC (Point)\nlet PtD (Point)\n\nlet PtM (Point)\n\nlet Pt (Point)\n\nlet Pnl (Surface)\nlet Bdry (Curve)\n\nlet ptCount (Integer)\nlet pnlCount (Integer)\nlet intCount (Integer)\nlet vCount (Integer)\n\nlet tempPl (Plane)\n\nlet PtV (Point)\nlet PtG (Point)\nlet tempW (Length)\nlet refPt (Point)\n\nlet pnlClr1 (String)\nlet pnlClr2 (String)\n\nlet pnlType (String)\n\nlet clrS (String)\nlet clrR (String)\nlet clrV (String)\n\nlet pltType (String)\nlet pltCrv (Curve)\nlet pltPt (Point)\nlet pltIndex (Integer)\n\n\nlet ptList (List)\n\nlet Item (Point)\n\nlet Found (Boolean) let topLn (Line)\n\nlet Dist1 (Length)\nlet prevDist (Length)\n\nlet unitType (String)\nlet unitCount (Integer)\nlet subCount (Integer)\n\nlet unitTypeL (List)\nlet unitCountL (List)\nlet subCountL (List)\n\nlet unitClr (String)\nlet unitType1 (String)\nlet unitType2 (String)\n\nlet AB (Line)\nlet BC (Line)\nlet CD (Line)\nlet DA (Line)\n\nlet lvlReal (Real)\nlet rowIndex (Integer)\nlet Case (Real)\nlet Dist1 (Length)\nlet Dist2 (Length)\nlet caseL (List)\nlet ptLCount (Integer)\nlet ptRCount (Integer)\n\nlet vType (String)\n\nlet tempL (List)\n\nlet vSheet (DTSheet)\nlet sSheet (DTSheet)\n\nlet PlA (Plane)\nlet PlB (Plane)\nlet plCount (Integer)\n\nlet PlR (Plane)\nlet PlL (Plane)\nlet PlM (Plane)\n\nlet Count1 (Integer)\nlet minOff (Real)\nlet Found (Boolean)\n\nlet pltRef (Point)\nlet pltOp (Integer)\n\nlet B (Boolean)\n\nlet pltFound (Boolean)\n\n\nif GENERATE_GEOMETRY ==true\n{\n`Relations\\VB Script\\VB_DELETE`    .Run(Relations\\KP_UNIT_INSTANTIATE\\PANELS  ,PANELS   )\n\n\nclrS = \"131,170,214\"\nclrR = \"129,192,232\" clrV = \"110,110,110\"\n\n\nTwr = `RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\TOWER` fType =`RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\FACADE_TYPE` Face = `RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\FACE` lvlNum = `RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\LEVEL` floorType = `RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\FLOOR_TYPE` pltType = `RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\LFC_PLT_TYPE_ABOVE` tPl = CONSTRUCTION\\PL_DATUM_TOP bPl = CONSTRUCTION\\PL_DATUM_BOT tLn = CONSTRUCTION\\LINE_TOP bLn = CONSTRUCTION\\LINE_BOT Limit3 = LIMIT_SUBDIVISION_03 Limit2 = LIMIT_SUBDIVISION_02 glsW1 = GLS_WIDTH_01 glsW2 = GLS_WIDTH_02 ventW = VENT_WIDTH if floorType ==\"M\"\n{\nlvlReal = lvlNum+0.5\n}\nelse\n{\nlvlReal = lvlNum\n}\n\nif Twr==\"1\"\n{\nvSheet = Relations\\DESIGN_TABLE\\T01_LFC_VENT_TYPES\\Sheet sSheet =Relations\\DESIGN_TABLE\\T01_LFC_SUBDIVISION_TYPES\\Sheet }\nif Twr ==\"2\"\n{\nvSheet = Relations\\DESIGN_TABLE\\T02_LFC_VENT_TYPES\\Sheet sSheet = Relations\\DESIGN_TABLE\\T02_LFC_SUBDIVISION_TYPES\\Sheet }\n\n\n\n\n\nrowIndex = sSheet -&gt;LocateInColumn(14,lvlReal) L = LIST_CRV Count =L-&gt;Size()\n\nunitTypeL-&gt;RemoveAll()\nunitCountL-&gt;RemoveAll()\nsubCountL-&gt;RemoveAll()\nLIST_CASES -&gt;RemoveAll()\nptList -&gt;RemoveAll()\n\ni=1\n\nif ToString( lvlNum)-&gt;Length() ==1  {\nlvlSt = \"0\"+ToString(lvlNum) }\nelse\n{\nlvlSt = ToString(lvlNum ) }\n\npltFound = false\n\nvCount = 1\nptCount=1\nplCount =1\ni=1\nfor i while i &lt;= Count\n{   if mod(i,2) ==1\n{\nif ToString(i) -&gt;Length() ==1\n{\nunitSt = \"0\"+ToString(i)    }\nelse\n{\n\nunitSt =ToString(i) }\n\nif i &gt;= 3 and i &lt;= 13\n{\nCase  = sSheet   -&gt;CellAsReal(rowIndex ,i) LIST_CASES -&gt;Append(Case)\n\nB=false\n\nif Case ==0\n\n{\nCase  = sSheet   -&gt;CellAsReal(rowIndex ,i+2) LIST_CASES -&gt;Append(Case)\n\n\n\nCrvR = L-&gt;GetItem (i+2)\nCrvM =L-&gt;GetItem (i)\nCrvL = L -&gt;GetItem (i-2)\n\nvTypeR = vSheet-&gt;CellAsString(rowIndex,i+2) vTypeL =  vSheet  -&gt;CellAsString(rowIndex,i-2) i=i+2\n\nB=true\n\n}\nelse\n{\n\nCrvR = L-&gt;GetItem (i)\nCrvM =L-&gt;GetItem (i-1)\nCrvL = L -&gt;GetItem (i-2)\n\nvTypeR = vSheet  -&gt;CellAsString(rowIndex,i) vTypeL =  vSheet -&gt;CellAsString(rowIndex,i-2) }\n\nif vTypeR ==\"N\"\n{\naR = 0mm\n}\nif vTypeR ==\"R\"\n{\naR = 0mm\n}\nif vTypeR ==\"M\"\n{\naR = -(ventW/2)\n}\n\nif vTypeR ==\"L\"\n{\naR = -ventW\n}\n\nif vTypeL ==\"N\"\n{\naL = 0m\n}\nif vTypeL ==\"R\"\n{\naL = ventW\n}\nif vTypeL ==\"M\"\n{\naL = ventW/2\n}\n\nif vTypeL ==\"L\"\n{\naL = 0m }\n\nSet  PtR = CreateOrModifyDatum(\"Point\",POINTS_R ,Relations\\KP_UNIT_INSTANTIATE\\POINTS_R ,ptCount) Set PtR =translate(intersect(CrvR,tPl),direction(tLn),aR)\nPtR.Name = \"PtR_\"+ToString(i)\n\nPlR = planenormal(tLn,PtR)\n\nPtM = intersect(CrvM,tPl)\nPlM = planenormal(tLn,PtM)\n\nSet  PtL = CreateOrModifyDatum(\"Point\",POINTS_L ,Relations\\KP_UNIT_INSTANTIATE\\POINTS_L ,ptCount) Set PtL = translate(intersect(CrvL,tPl),direction( tLn),aL)\nPtL.Name = \"PtL_\"+ToString(i)\n\nPlL = planenormal(tLn,PtL)\n\nptCount=ptCount+1\n\n/*CASE 04 - 4  Panels */\n\nintCount=1\nif Case == 4\n{\nDist1= distance(PtL,PtM)\nDist2 = distance (PtM,PtR)\n\nif Dist1&gt;= Limit2\n{\n/*S1*/\n\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planenormal(tLn,PtL)\n\nunitTypeL-&gt;Append(\"S1\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n\n/*X*/\n\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planeoffset(PlL,glsW1,true)\n\nunitTypeL-&gt;Append(\"R\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n\n\n\n}\nif Dist1&lt;=Limit2\n{\n/*X*/\n\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planenormal(tLn,PtL)\n\nunitTypeL-&gt;Append(\"R\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n\n/*S2*/\n\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planeoffset(PlM,-glsW2,true)\n\nunitTypeL-&gt;Append(\"S2\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n}\n\nif Dist2 &gt;= Limit2\n{\n/*X*/\n\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\n\u3002\nPlA = planenormal(tLn,PtM)\n\nunitTypeL-&gt;Append(\"R\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n\n/*S1*/\n\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planeoffset(PlR,-glsW1,true)\n\nunitTypeL-&gt;Append(\"S1\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n\n}\nif Dist2 &lt;=Limit2\n{\n/*S2*/\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\n\nPlA = planenormal(tLn,PtM)\n\nunitTypeL-&gt;Append(\"S2\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n\n/*X*/\n\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA =planeoffset(PlM,glsW2,true)\n\nunitTypeL-&gt;Append(\"R\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n}\n\n\n/*VENT*/\n\nif vTypeR &lt;&gt;\"N\"\n{\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\n\nPlA = planenormal(tLn,PtR)\n\nunitTypeL-&gt;Append(\"V\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n}\n}\n\n/*CASE 03 - 3 Panels */\n\nintCount=1\n\nif Case == 3\n{\nDist = distance(PtL,PtR)\n\nif Dist&gt;=Limit3\n{\n/*S1*/\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\n\nPlA = planenormal(tLn,PtL)\n\nunitTypeL-&gt;Append(\"S1\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n\n/*X*/\n\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planeoffset(PlL,glsW1,true)\n\nunitTypeL-&gt;Append(\"R\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n\n/*S1*/\n\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planeoffset(PlR,-glsW1,true) unitTypeL-&gt;Append(\"S1\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n\n/*VENT*/\n\nif  vTypeR &lt;&gt;\"N\"\n{\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\n\nPlA = planenormal(tLn,PtR)\n\nunitTypeL-&gt;Append(\"V\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n\n}\n}\nif Dist &lt;=Limit3\n{\n\n\n/*R*/\n\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planenormal(tLn,PtL)\n\nunitTypeL-&gt;Append(\"R\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n\n/*S2*/\n\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planeoffset(PlM,-(glsW2/2),true)\n\nunitTypeL-&gt;Append(\"S2\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n\n\n/*R*/\n\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planeoffset(PlM,glsW2/2,true)\n\nunitTypeL-&gt;Append(\"R\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n\n/*VENT*/\n\nif  vTypeR &lt;&gt;\"N\"\n{\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planenormal(tLn,PtR)\n\nunitTypeL-&gt;Append(\"V\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\n\nintCount=intCount+1\n\n}\n\n\n}\n\n}\n\n/*CASE 02 - 2 Panels */\n\nintCount=1\n\nif Case == 2\n{\nDist = distance(PtR,PtL)\n\nif Dist &gt; Limit2\n{\nif vTypeR &lt;&gt;\"N\"\n{\nrefPt = PtR tempW = -glsW1\nunitType1 = \"R\"\nunitType2 = \"S1\"\n}\nelse\n{\nrefPt = PtL\ntempW = glsW1\nunitType1 = \"S1\"\nunitType2 = \"R\"\n}\n}\nif Dist &lt; Limit2\n{\nif vTypeR &lt;&gt;\"N\"\n{\nrefPt = PtL tempW = glsW2\nunitType1 = \"S2\"\nunitType2 = \"R\"\n}\nelse\n{\nrefPt = PtR\ntempW = -glsW2\nunitType1 = \"R\"\nunitType2= \"S2\"\n\n}\n\n}\n\nSet PtM = translate(refPt,direction(tLn),tempW)\nPlM = planenormal(tLn,PtM)\n\n/*PANEL 01*/\n\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planenormal(tLn,PtL)\n\nunitTypeL-&gt;Append(unitType1)\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\nintCount=intCount+1\n\n\n/*PANEL 02*/\n\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planenormal(tLn,PtM)\n\nunitTypeL-&gt;Append(unitType2)\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\nintCount=intCount+1\n\n/*VENT*/\n\n\nif  vTypeR &lt;&gt;\"N\"\n{\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planenormal(tLn,PtR)\n\nunitTypeL-&gt;Append(\"V\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\nintCount=intCount+1\n}\n}\n\n/*CASE 04 - 1 Panel*/\nintCount =1\n\nif Case == 1\n{\n\n/*REST 01*/\nSet PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planenormal(tLn,PtL)\n\nunitTypeL-&gt;Append(\"R\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\nintCount=intCount+1\n\n/*VENT*/\n\nif  vTypeR &lt;&gt;\"N\"\n{   Set PlA = CreateOrModifyDatum(\"Plane\",PLANES  ,Relations\\KP_UNIT_INSTANTIATE\\PLANES ,plCount)\nPlA.Name = \"PlaneA_\"+ToString(i)+\"_\"+ToString(intCount)\nplCount = plCount+1\n\nPlA = planenormal(tLn,PtR)\n\nunitTypeL-&gt;Append(\"V\")\nunitCountL-&gt;Append(i)\nsubCountL-&gt;Append(intCount)\nintCount=intCount+1\n}\n}\n\nif  pltType ==\"LEFT\"\n{\nif `RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\LEVEL` ==5 or `RFL_ENV_T1_LFC_A_L08_GLS-SURFACES\\LEVEL` ==6\n{   pltIndex = 12\n}\nelse\n{   pltIndex = 10\n}\n\ntopLn =CONSTRUCTION\\LINE_SPN\nFound =true\nminOff = -0.01\npltRef = PtL\npltOp = 1\n}\nif pltType ==\"RIGHT\"\n{   pltIndex = 4\ntopLn = CONSTRUCTION\\LINE_TOP Found =false\nminOff = 0.03\npltRef = PtR\npltOp = -1\n}\nif pltType ==\"NONE\"\n{\npltIndex = 12\ntopLn = CONSTRUCTION\\LINE_TOP Found =false\nminOff = 0.03\npltRef = PtR\npltOp = -1\n}\n\n\n\n\nif pltFound == false\n{\n\n\nif i &gt; pltIndex\n{\nDist = distance(PtR,PtL)\nDist1 = distance(pltRef, PtM)\n\n\nif Case == 4\n{\nSet pltPt = CreateOrModifyDatum(\"Point\",POINT_PLT ,Relations\\KP_UNIT_INSTANTIATE\\POINT_PLT ,1) pltPt = intersect(tLn  ,L-&gt;GetItem(pltIndex))\n}\nif Case ==3\n{\nif Dist &gt;= Limit3\n{\nSet pltPt = CreateOrModifyDatum(\"Point\",POINT_PLT ,Relations\\KP_UNIT_INSTANTIATE\\POINT_PLT ,1) Set pltPt = translate(pltRef,direction(tLn), glsW1*pltOp)\n}\nif Dist&lt; Limit3\n{\nSet pltPt = CreateOrModifyDatum(\"Point\",POINT_PLT ,Relations\\KP_UNIT_INSTANTIATE\\POINT_PLT ,1) Set pltPt = translate(pltRef,direction(tLn), (Dist1 - (glsW2/2))*pltOp)\n}\n\n}\nif Case ==2\n{\nSet pltPt = CreateOrModifyDatum(\"Point\",POINT_PLT ,Relations\\KP_UNIT_INSTANTIATE\\POINT_PLT ,1) pltPt = intersect(tLn  ,L-&gt;GetItem(pltIndex-pltOp))\n}\nif Case ==1\n{\nSet pltPt = CreateOrModifyDatum(\"Point\",POINT_PLT ,Relations\\KP_UNIT_INSTANTIATE\\POINT_PLT ,1) pltPt = intersect(tLn  ,L-&gt;GetItem(pltIndex-pltOp))\n}\nif Case ==0\n{\nSet pltPt = CreateOrModifyDatum(\"Point\",POINT_PLT ,Relations\\KP_UNIT_INSTANTIATE\\POINT_PLT ,1) pltPt = intersect(tLn  ,L-&gt;GetItem(pltIndex-pltOp))\n}\npltPt.Name =\"POINT_PLT_START\"\n\npltFound = true\n}\n\n\n}\n\n\nif B==true\n{\ni = i+2\n}\n\n\n}\n}\n}\n\n\nLIST_UNIT_TYPES =unitTypeL\nLIST_UNITS =unitCountL\nLIST_SUB_UNITS =subCountL\nLIST_PLANES =ptList\n\n\n\n\n\n\n\n\nDist = 500m\nprevDist =1000m\nintCount =1\npnlCount = 1\nj=1\n\nCount1 = Relations\\KP_UNIT_INSTANTIATE\\PLANES -&gt;Size()\n\n\nfor j while j &lt;= Count1\n{\n\n\n\nPlA = Relations\\KP_UNIT_INSTANTIATE\\PLANES  -&gt;GetItem(j)\n\nif j==Count1\n{\nPlB = planenormal(tLn,CONSTRUCTION\\PT_TOP_END )\n\n}\nelse\n\n{\nPlB = Relations\\KP_UNIT_INSTANTIATE\\PLANES  -&gt;GetItem(j+1)\n}\n\nunitType = unitTypeL-&gt;GetItem(j)\nunitCount= unitCountL-&gt;GetItem(j)\nsubCount = subCountL -&gt;GetItem (j)\n\nif unitType ==\"V\"\n{\nunitClr = clrV\n}\nif unitType ==\"S1\" {\nunitClr = clrS  }\n\nif unitType ==\"S2\"\n{\nunitClr = clrS  }\nif unitType ==\"R\"\n{\nunitClr = clrR  }\n\nif ToString( unitCount)-&gt;Length() ==1   {\nunitSt = \"0\"+ToString(unitCount) }\nelse\n{\nunitSt = ToString(unitCount) }\n\nsubSt =  \"0\"+ToString(subCount) Dist1 = distance(pltPt,PlA)\n\nif  pltType ==\"LEFT\"\n{\nif Dist1 == 0m\n{\ntopLn = CONSTRUCTION\\LINE_TOP Found =false\nminOff = 0.03\n}\n}\nelse\n{\nif Dist1 == 0m\n{\ntopLn =CONSTRUCTION\\LINE_SPN Found =true\nminOff = -0.01\n}\n}\n\n\n\nif j ==1\n{\nSet PtA = CreateOrModifyDatum(\"Point\",POINTS ,Relations\\KP_UNIT_INSTANTIATE\\POINTS ,intCount)\nPtA = intersect( topLn,L-&gt;GetItem(1))\n}\nelse\n{\nSet PtA = CreateOrModifyDatum(\"Point\",POINTS ,Relations\\KP_UNIT_INSTANTIATE\\POINTS ,intCount)\nPtA = intersect( topLn, PlA)\n}\n\nPtA.Name = \"PT_\"+unitSt+\"_\"+subSt+\"_\"+\"A\"\nintCount = intCount+1\n\nif j == Count1\n{\nSet PtB = CreateOrModifyDatum(\"Point\",POINTS ,Relations\\KP_UNIT_INSTANTIATE\\POINTS ,intCount)\nPtB = intersect( topLn,L-&gt;GetItem(Count))\n}\n\nelse\n{\nSet PtB = CreateOrModifyDatum(\"Point\",POINTS ,Relations\\KP_UNIT_INSTANTIATE\\POINTS ,intCount)\nPtB = intersect( topLn, PlB)\n}\n\nPtB.Name = \"PT_\"+unitSt+\"_\"+subSt+\"_\"+\"B\"\nintCount = intCount+1\n\nif j == Count1\n{\nSet PtC = CreateOrModifyDatum(\"Point\",POINTS ,Relations\\KP_UNIT_INSTANTIATE\\POINTS ,intCount)\nPtC = intersect( bLn, L-&gt;GetItem(Count))\n}\nelse\n{\nSet PtC = CreateOrModifyDatum(\"Point\",POINTS ,Relations\\KP_UNIT_INSTANTIATE\\POINTS ,intCount)\nPtC = intersect( bLn, PlB)\n}\n\nPtC.Name =\"PT_\"+unitSt+\"_\"+subSt+\"_\"+\"C\"\nintCount = intCount+1\n\nif j==1\n{\nSet PtD = CreateOrModifyDatum(\"Point\",POINTS ,Relations\\KP_UNIT_INSTANTIATE\\POINTS ,intCount)\nPtD = intersect( bLn,L-&gt;GetItem(1) )\n}\nelse\n{\nSet PtD = CreateOrModifyDatum(\"Point\",POINTS ,Relations\\KP_UNIT_INSTANTIATE\\POINTS ,intCount)\nPtD = intersect( bLn, PlA)\n}\n\nPtD.Name =\"PT_\"+unitSt+\"_\"+subSt+\"_\"+\"D\"\nintCount = intCount+1\n\nif GEOMETRY_TYPE ==\"SURFACES\"\n\n{\n\nBdry = assemble(line(PtA,PtB),line(PtB,PtC),line(PtC,PtD),line(PtD,PtA))\n\nSet Pnl = CreateOrModifyDatum(\"Surface\",SURFACES  ,Relations\\KP_UNIT_INSTANTIATE\\SURFACES  ,pnlCount) Pnl = fill(Bdry)\n\nif floorType==\"M\"\n{\nPnl.Name = Twr+fType+Face+lvlSt+floorType+unitSt+\"-\"+subSt+\"-\"+unitType\n}\nelse\n{\nPnl.Name = Twr+fType+Face+lvlSt+unitSt+\"-\"+subSt+\"-\"+unitType\n}\n\nPnl.Color =  unitClr\npnlCount =pnlCount+1\nPnl.SetAttributeString(\"TOWER\",Twr)\nPnl.SetAttributeString(\"FACADE_TYPE\",fType)\nPnl.SetAttributeString(\"FACE\",Face)\nPnl.SetAttributeString(\"FLOOR_TYPE\",floorType)\nPnl.SetAttributeInteger(\"LEVEL\",lvlNum)\nPnl.SetAttributeInteger(\"UNIT\",unitCount)\nPnl.SetAttributeInteger(\"SUB_UNIT\",subCount)\nPnl.SetAttributeString(\"SUB_TYPE\", unitType)\n\n\n}\n/*else\n        {\n\n            if unitType&lt;&gt;\"V\"\n            {\n\n                F=InstantiateTemplate(\"UNS_RFL_CATALOG|LFC_STD_GLS_UNIT\",PANELS   )\n                F-&gt;SetAttributeObject(\"PT_A\",PtA)\n                F-&gt;SetAttributeObject(\"PT_B\",PtB)\n                F-&gt;SetAttributeObject(\"PT_C\",PtC)\n                F-&gt;SetAttributeObject(\"PT_D\",PtD)\n                F-&gt;SetAttributeObject(\"PL_DATUM_TOP\",CONSTRUCTION\\PL_DATUM_TOP  )\n                F-&gt;SetAttributeObject(\"PL_DATUM_BOT\",CONSTRUCTION\\PL_DATUM_BOT  )\n                F-&gt;SetAttributeObject(\"PL_SPANDREL\",CONSTRUCTION\\PL_SPANDREL )\n                EndModifyTemplate(F)\n\n                Relations\\KP_UNIT_INSTANTIATE\\PANELS  -&gt;SetItem( F-&gt;GetAttributeObject(\"LFC\"),pnlCount)\n                pnlCount = pnlCount+1\n\n            }\n\n            else\n            {\n                if Found ==true\n                {\n\n                    F=InstantiateTemplate(\"UNS_RFL_CATALOG|LFC_STD_VNT_UNIT_OP\",PANELS   )\n                    F-&gt;SetAttributeObject(\"PT_A\",PtA)\n                    F-&gt;SetAttributeObject(\"PT_B\",PtB)\n                    F-&gt;SetAttributeObject(\"PT_C\",PtC)\n                    F-&gt;SetAttributeObject(\"PT_D\",PtD)\n                    F-&gt;SetAttributeObject(\"PL_DATUM_TOP\",CONSTRUCTION\\PL_DATUM_TOP  )\n                    F-&gt;SetAttributeObject(\"PL_DATUM_BOT\",CONSTRUCTION\\PL_DATUM_BOT  )\n                    F-&gt;SetAttributeObject(\"BOT_PLANE\", `External References\\LVL_T1_8` )\n                    EndModifyTemplate(F)\n\n                    Relations\\KP_UNIT_INSTANTIATE\\PANELS  -&gt;SetItem( F-&gt;GetAttributeObject(\"LFC\"),pnlCount)\n                    pnlCount = pnlCount+1\n\n\n\n                }\n                if Found ==false\n                {\n                    F=InstantiateTemplate(\"UNS_RFL_CATALOG|LFC_STD_VNT_UNIT\",PANELS   )\n                    F-&gt;SetAttributeObject(\"PT_A\",PtA)\n                    F-&gt;SetAttributeObject(\"PT_B\",PtB)\n                    F-&gt;SetAttributeObject(\"PT_C\",PtC)\n                    F-&gt;SetAttributeObject(\"PT_D\",PtD)\n                    F-&gt;SetAttributeObject(\"PL_DATUM_TOP\",CONSTRUCTION\\PL_DATUM_TOP  )\n                    F-&gt;SetAttributeObject(\"PL_DATUM_BOT\",CONSTRUCTION\\PL_DATUM_BOT  )\n                    F-&gt;SetAttributeObject(\"PL_SPANDREL\",CONSTRUCTION\\PL_SPANDREL )\n                    F-&gt;SetAttributeObject(\"BOT_PLANE\", `External References\\LVL_T1_8` )\n                    EndModifyTemplate(F)\n\n                    Relations\\KP_UNIT_INSTANTIATE\\PANELS  -&gt;SetItem( F-&gt;GetAttributeObject(\"LFC\"),pnlCount)\n                    pnlCount = pnlCount+1\n\n\n                }\n            }\n\n            PW=F-&gt;GetAttributeObject(\"LFC\")\n\n\n            PW-&gt;SetAttributeString(\"TOWER\",Twr)\n            PW-&gt;SetAttributeString(\"FACADE_TYPE\",fType)\n            PW-&gt;SetAttributeString(\"FACE\",Face)\n            PW-&gt;SetAttributeInteger(\"LEVEL\",lvlNum)\n            PW-&gt;SetAttributeInteger(\"UNIT\",unitCount)\n            PW-&gt;SetAttributeString(\"FLOOR_TYPE\",floorType)\n            PW-&gt;SetAttributeString(\"SUB_TYPE\",unitType)\n            PW-&gt;SetAttributeInteger(\"SUB_UNIT\",subCount)\n            PW-&gt;SetAttributeReal(\"MIN_OFFSET_L2\",minOff)\n\n\n            if floorType==\"M\"\n            {\n                PW.Name = Twr+fType+Face+lvlSt+floorType+unitSt+\"-\"+subSt+\"-\"+unitType\n            }\n            else\n            {\n                PW.Name = Twr+fType+Face+lvlSt+unitSt+\"-\"+subSt+\"-\"+unitType\n            }\n\n\n        */\n}\n}\n\nelse\n{\n\n`Relations\\VB Script\\VB_DELETE`  .Run(Relations\\KP_UNIT_INSTANTIATE\\PANELS  ,PANELS   )\n}\n</code></pre>"},{"location":"ISE-AEC/ARC-FacadeDesign/facade1/","title":"Facade1","text":""},{"location":"ISE-AEC/ARC-FacadeDesign/facade1/#case","title":"case","text":"<pre><code>let i (integer)  let j (integer) let k (integer )\nlet P1(point)\nlet P2(point)\nlet P0(point)\nlet midpt (point)\n\nlet jList (list)\nlet pList (list)\nlet mList(list)\n\nmidpt=pointoncurveRatio(REF_PTS_01\\TOP_02\\CURVE\\Curve.2  ,NULL,0.5,true) midpt.Name = \"Mid_Point\"\n\n\njList -&gt; RemoveAll()\npList -&gt; RemoveAll()\nmList-&gt; RemoveAll()\n\ni=1\nfor i while  length(REF_PTS_01\\TOP_02\\CURVE\\Curve.2  )/2&gt;=(i*REF_PTS_01\\TOP_02\\Parameters\\Length  )+REF_PTS_01\\TOP_02\\Parameters\\MinLength {\nif  ( (length(REF_PTS_01\\TOP_02\\CURVE\\Curve.2  )/2-i*REF_PTS_01\\TOP_02\\Parameters\\Length  &lt;REF_PTS_01\\TOP_02\\Parameters\\MinLength  +REF_PTS_01\\TOP_02\\Parameters\\Length ) and ( (length(REF_PTS_01\\TOP_02\\CURVE\\Curve.2  )/2-i*REF_PTS_01\\TOP_02\\Parameters\\Length  &gt;=REF_PTS_01\\TOP_02\\Parameters\\MinLength  ))  ) {\n\nP1=pointoncurve(REF_PTS_01\\TOP_02\\CURVE\\Curve.2   ,midpt ,i*REF_PTS_01\\TOP_02\\Parameters\\Length  ,true) P1.Name = \"Point_\"+ToString(i)\njList -&gt; AddItem(P1,i)\n\nP1=pointoncurve(REF_PTS_01\\TOP_02\\CURVE\\Curve.2   ,midpt , length(REF_PTS_01\\TOP_02\\CURVE\\Curve.2  )/2 ,true)\nP1.Name = \"Point_\"+ToString(i+1)\n\njList -&gt; AddItem(P1,i+1)\n\n}\nelse\n{\nP1=pointoncurve(REF_PTS_01\\TOP_02\\CURVE\\Curve.2   ,midpt ,i* REF_PTS_01\\TOP_02\\Parameters\\Length  ,true) P1.Name = \"Point_\"+ToString(i)  jList -&gt; AddItem(P1,i)\n}\n\ni=i+1\n}\nj=1\nfor j while  length(REF_PTS_01\\TOP_02\\CURVE\\Curve.2  )/2&gt;=(j* REF_PTS_01\\TOP_02\\Parameters\\Length  )+ REF_PTS_01\\TOP_02\\Parameters\\MinLength  {\nif  ( (length(REF_PTS_01\\TOP_02\\CURVE\\Curve.2  )/2-j*  REF_PTS_01\\TOP_02\\Parameters\\Length &lt;  REF_PTS_01\\TOP_02\\Parameters\\MinLength  +REF_PTS_01\\TOP_02\\Parameters\\Length) and ( (length(REF_PTS_01\\TOP_02\\CURVE\\Curve.2  )/2-j*REF_PTS_01\\TOP_02\\Parameters\\Length &gt;=REF_PTS_01\\TOP_02\\Parameters\\MinLength  ))  ) {\nP2=pointoncurve(REF_PTS_01\\TOP_02\\CURVE\\Curve.2  ,midpt ,j*REF_PTS_01\\TOP_02\\Parameters\\Length ,false)  P2.Name = \"Point_\"+ToString(j)\npList -&gt; AddItem(P2,j)\n\nP2=pointoncurve(REF_PTS_01\\TOP_02\\CURVE\\Curve.2  ,midpt , length(REF_PTS_01\\TOP_02\\CURVE\\Curve.2  )/2 ,false)\nP2.Name = \"Point_\"+ToString(j+1)\npList -&gt; AddItem(P2,j+1)\n\n}\nelse\n{\nP2=pointoncurve(REF_PTS_01\\TOP_02\\CURVE\\Curve.2  ,midpt ,j*REF_PTS_01\\TOP_02\\Parameters\\Length ,false) P2.Name = \"Point_\"+ToString(j)\npList -&gt; AddItem(P2,j)\n}\nj=j+1\n}\n/*\u91cd\u65b0\u6392\u5e8f\u7f16\u7ec4*/\nk=1\ni=1\nj=1\nfor k while k&lt;=(jList.Size() + pList.Size() +1 )\n{\nfor i while i&lt;=jList .Size()\n{\nP0=CreateOrModifyDatum(\"Point\",REF_PTS_01\\TOP_02\\PTS ,REF_PTS_01\\TOP_02\\Relations\\GeneratePoint\\POINTS  ,k)\nP0=jList-&gt;GetItem( jList .Size()+1-i)\nP0.Name = \"Point_\"+ToString(k)\ni=i+1\nk=k+1\n}\n/*\u5c06\u4e2d\u70b9\u52a0\u5165\u5e8f\u5217*/\nP0=CreateOrModifyDatum(\"Point\",REF_PTS_01\\TOP_02\\PTS, REF_PTS_01\\TOP_02\\Relations\\GeneratePoint\\POINTS ,k)\nP0=midpt\nP0.Name = \"Point_\"+ToString(k)\nk=k+1\n\nfor j while j&lt;=pList .Size()\n{\nP0=CreateOrModifyDatum(\"Point\",REF_PTS_01\\TOP_02\\PTS   ,REF_PTS_01\\TOP_02\\Relations\\GeneratePoint\\POINTS ,k)\nP0=pList -&gt;GetItem( j)\nP0.Name = \"Point_\"+ToString(k)\nj=j+1\nk=k+1\n}\n\n}\n</code></pre>"},{"location":"ISE-AEC/ARC-FacadeResearch/facade%20research/","title":"Facade Research","text":""},{"location":"ISE-AEC/ARC-Generali%20Tower/GenerailTower/","title":"GenerailTower","text":""},{"location":"ISE-AEC/ARC-New%20Google%20Headquarters/New%20Google%20Headquarters/","title":"\u5e55\u5899-New Google Headquarters","text":""},{"location":"ISE-AEC/ARC-%E7%AB%8B%E9%9D%A2%E7%AE%97%E6%B3%95/","title":"Welcome to Knowledge","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"ISE-AEC/ARC-%E7%AB%8B%E9%9D%A2%E7%AE%97%E6%B3%95/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"ISE-AEC/ARC-%E7%AB%8B%E9%9D%A2%E7%AE%97%E6%B3%95/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/","title":"\u4e8c\u671f\u9879\u76ee\u4ee3\u7801","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#excel","title":"\u521b\u5efa\u6865\u6881\u5206\u5b54\u7ebf\u5e76\u4e14\u8f93\u51fa\u6570\u636e\u5230excel","text":"<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Collections;\nusing System.IO;\n\nusing MECMOD;\nusing INFITF;\nusing KnowledgewareTypeLib;\nusing HybridShapeTypeLib;\n\nusing System.Windows;\n\n\nnamespace Interop.CATCIVAxisDataLib.Code\n{\n\npublic  class CreatAxisFormExcel:MainWindow\n{\n\npublic void creatAxisAlongCurve(int installtype, INFITF.AnyObject planerCurve, INFITF.AnyObject Curve3d, INFITF.AnyObject StartPoint)\n{\nArrayList dislist = new ArrayList();\nArrayList namelist = new ArrayList();\nArrayList ispierlist = new ArrayList();\nArrayList anglelist = new ArrayList();\nexcel xle = new excel();\ndislist=xle.Open(out namelist,out ispierlist,out anglelist);\n\n//for (int i = 1; i &lt; dislist.Count; i++)\n//{\n//    MessageBox.Show(dislist[i].ToString());\n//}\n\nPart part = GetContainPart(planerCurve);\nHybridShapeFactory hsf = (HybridShapeFactory)part.HybridShapeFactory;\n\nHybridBody AXISHB = part.HybridBodies.Add(); AXISHB.set_Name(\"PIER_AXIS_SET\");\n\nHybridBody hbpts = AXISHB.HybridBodies.Add(); hbpts.set_Name(\"AXIS_PTS\");\nHybridBody hbref = AXISHB.HybridBodies.Add(); hbref.set_Name(\"AXIS_REF\");\nHybridBody hb = AXISHB.HybridBodies.Add(); hb.set_Name(\"AXIS_RESULT\");\n\nListParameter axislist = part.Parameters.CreateList(\"AXISLIST\");\n\n//MessageBox.Show(\"\u8ddd\u79bb\u6570\u91cf\uff1a\"+dislist.Count);\n\nfor (int i = 0; i &lt; dislist.Count; i++)\n{\n\ndouble dislens = Convert.ToDouble(dislist[i]) * 1000;\n\ndouble RoatateAngle = Convert.ToDouble(anglelist[i]);\n\npart.InWorkObject = hb;\n\nHybridShapeProject proj;\n\nif (installtype == 1)\n{\n\nHybridShape pts = hsf.AddNewPointOnCurveWithReferenceFromDistance((Reference)planerCurve, (Reference)StartPoint, dislens, false);\nStartPoint = pts;\npts.set_Name(namelist[i].ToString());\n\nhbpts.AppendHybridShape(pts);\n// HybridShape pts = hsf.AddNewPointOnCurveFromDistance((Reference)crv, aa, false); pts.Compute();\nproj = hsf.AddNewProject((Reference)pts, (Reference)Curve3d); proj.Compute();\n\nproj.SolutionType = 0;\nproj.Normal = false;\nproj.SmoothingType = 0;\nproj.ExtrapolationMode = 0;\nproj.Direction = hsf.AddNewDirectionByCoord(0, 0, 1);\nproj.set_Name( namelist[i].ToString());\nhbref.AppendHybridShape(proj);\nproj.Compute();\n\nAxisSystem pieraxis = Axis(part, (HybridShape)Curve3d, (HybridShape)proj, hb, RoatateAngle);\nParameters parms = part.Parameters.SubList(pieraxis, true);\nParameter distag = parms.CreateInteger(\"IsPier\",Convert.ToInt32(ispierlist[i]));\nParameter angletag = parms.CreateDimension(\"AxisAngle\",\"ANGLE\", Convert.ToInt32(anglelist[i]));\n\n}\nelse\n{\nif (i == 0)\n{\n\nHybridShape pts = hsf.AddNewPointOnCurveWithReferenceFromDistance((Reference)planerCurve, (Reference)StartPoint, dislens, false);\nStartPoint = pts;\n// HybridShape pts = hsf.AddNewPointOnCurveFromDistance((Reference)crv, aa, false); pts.Compute();\nproj = hsf.AddNewProject((Reference)pts, (Reference)Curve3d); proj.Compute();\n\nproj.SolutionType = 0;\nproj.Normal = false;\nproj.SmoothingType = 0;\nproj.ExtrapolationMode = 0;\nproj.Direction = hsf.AddNewDirectionByCoord(0, 0, 1);\nproj.set_Name( namelist[i].ToString());\nhbref.AppendHybridShape(proj);\nproj.Compute();\n\nAxisSystem pieraxis = Axis(part, (HybridShape)Curve3d, (HybridShape)proj, hb, RoatateAngle);\nParameters parms = part.Parameters.SubList(pieraxis, true);\nParameter distag = parms.CreateInteger(\"IsPier\", Convert.ToInt32(ispierlist[i]));\nParameter angletag = parms.CreateInteger(\"AxisAngle\", Convert.ToInt32(anglelist[i]));\n}\nelse\n{\nHybridShapeLineTangency tar1 = hsf.AddNewLineTangency((Reference)planerCurve, (Reference)StartPoint, 10, 0, false);\ntar1.Compute();\nHybridShapeSphere sph1 = hsf.AddNewSphere((Reference)StartPoint, null, dislens, -45, 45, 0, 180);\nsph1.Limitation = 1;\nsph1.Compute();\n\nHybridShapeIntersection intt1 = hsf.AddNewIntersection((Reference)sph1, (Reference)planerCurve);\nintt1.PointType = 0;\nintt1.Compute();\nHybridShapeNear near1 = hsf.AddNewNear((Reference)intt1, (Reference)tar1);\nStartPoint = near1;\nnear1.Compute();\n\n\n//hbref.AppendHybridShape(near1);\n\nproj = hsf.AddNewProject((Reference)near1, (Reference)Curve3d); proj.Compute();\n\nproj.SolutionType = 0;\nproj.Normal = false;\nproj.SmoothingType = 0;\nproj.ExtrapolationMode = 0;\nproj.Direction = hsf.AddNewDirectionByCoord(0, 0, 1);\nproj.set_Name(namelist[i].ToString());\nhbref.AppendHybridShape(proj);\nproj.Compute();                   proj.set_Name(namelist[i].ToString());\n\nAxisSystem pieraxis = Axis(part, (HybridShape)Curve3d, (HybridShape)proj, hb, RoatateAngle);\nParameters parms = part.Parameters.SubList(pieraxis, true);\nParameter distag = parms.CreateInteger(\"IsPier\", Convert.ToInt32(ispierlist[i]));\nParameter angletag = parms.CreateInteger(\"AxisAngle\", Convert.ToInt32(anglelist[i]));\n\n\n}\n\n}\n\n\n\npart.InWorkObject = hb;\n//xle = null;\n\n\n\n}\n\n//\u91ca\u653e\u8d44\u6e90\nxle = null;\n\n}\n\n\n\nstatic AxisSystem Axis(Part part, HybridShape crv, HybridShape pt, HybridBody hb, double rotateAngle)\n{\nHybridShapeFactory hsf = (HybridShapeFactory)part.HybridShapeFactory;\nHybridShapeDirection zdir = hsf.AddNewDirection((Reference)part.OriginElements.PlaneXY);\nHybridShape zln = hsf.AddNewLinePtDir((INFITF.Reference)pt, zdir, -100, 500, false); zln.Compute();\nHybridShape pln = hsf.AddNewPlaneOffsetPt((Reference)part.OriginElements.PlaneXY, (Reference)pt); pln.Compute();\nHybridShapeLineTangency tarln = hsf.AddNewLineTangency((Reference)crv, (Reference)pt, -100, 300, false); tarln.Compute();\nHybridShapeProject xdirln = hsf.AddNewProject((Reference)tarln, (Reference)pln); xdirln.Compute();\nxdirln.SolutionType = 0;\nxdirln.Normal = false;\nxdirln.SmoothingType = 0;\nxdirln.Direction = zdir;\nxdirln.ExtrapolationMode = 0;\n\nReference reference1 = part.CreateReferenceFromObject(xdirln);\nHybridShapeRotate hybridShapeRotate1 = hsf.AddNewEmptyRotate();\nhybridShapeRotate1.ElemToRotate = reference1;\nhybridShapeRotate1.VolumeResult = false;\nhybridShapeRotate1.RotationType = 0;\nhybridShapeRotate1.Compute();\nhybridShapeRotate1.Axis = (Reference)zln;\nhybridShapeRotate1.AngleValue = rotateAngle;\nhybridShapeRotate1.set_Name(\"Roatate_ln_\"+ Convert.ToString( rotateAngle));\nhybridShapeRotate1.Compute();\n\nAxisSystem axis = part.AxisSystems.Add();\naxis.OriginType = CATAxisSystemOriginType.catAxisSystemOriginByPoint;\naxis.OriginPoint = (Reference)pt;\n\naxis.XAxisType = CATAxisSystemAxisType.catAxisSystemAxisSameDirection;\naxis.XAxisDirection = (Reference)hybridShapeRotate1;\n\naxis.YAxisType = CATAxisSystemAxisType.catAxisSystemAxisOppositeDirection;\n\naxis.ZAxisType = CATAxisSystemAxisType.catAxisSystemAxisSameDirection;\naxis.ZAxisDirection = (Reference)zln;\npart.UpdateObject(axis);\naxis.IsCurrent = true;\n\naxis.set_Name(pt.get_Name());\npart.UpdateObject(axis);\n\n\nreturn axis;\n}\n\n\n\n\npublic static MECMOD.Part GetContainPart(INFITF.AnyObject obj)\n{\n\nINFITF.AnyObject a = (INFITF.AnyObject)obj;\nINFITF.AnyObject current = a;\nbool found = false;\nwhile (found == false)\n{\ncurrent = (INFITF.AnyObject)current.Parent;\n//Console.WriteLine(\"aaa___!\" + Microsoft.VisualBasic. Information.TypeName(current));\n\nif (Microsoft.VisualBasic.Information.TypeName(current) == \"Part\")\n{\nfound = true;\n// break;\n}\n}\nreturn (MECMOD.Part)current;\n}\n\nclass excel\n{\nArrayList dislist = new ArrayList();\n\n// public string Filename;\n\npublic ArrayList  Open(out ArrayList namelist, out ArrayList IsPierParm,out ArrayList angleList)//\u6253\u5f00\u4e00\u4e2aMicrosoft.Office.Interop.Excel\u6587\u4ef6\n{\n\n\ndislist.Clear();\n\nnamelist = new ArrayList();\nnamelist.Clear();\n\nIsPierParm = new ArrayList();\nIsPierParm.Clear();\n\nangleList = new ArrayList();\nangleList.Clear();\n\nint icount = 1000;\n\nint colnum = 3;\nint names = 5;\nint ispier = 24;\nint angleIndex = 21;\n\nfor (int i = 1; i &lt; icount; i++)\n{\n\nif (xlsheet.Cells[i + 6, colnum].Value !=null)\n{\nif (xlsheet.Cells[i + 6, names].Value != null)\n{\nif (xlsheet.Cells[i + 6, ispier].Value != null)\n{\ndislist.Add(xlsheet.Cells[i + 6, colnum].Value);\nnamelist.Add(xlsheet.Cells[i + 6, names].Value);\nIsPierParm.Add(xlsheet.Cells[i + 6, ispier].Value);\nangleList.Add(xlsheet.Cells[i + 6, angleIndex].Value);\n}\n}\n}\n}\nreturn dislist;\n}\n}\n\n\nclass attribure\n{\npublic void SetAttributeBooleanToObject(MECMOD.Part part, HybridShape obj,string name,Boolean value)\n{\nParameters parms = part.Parameters.SubList(obj,true);\nParameter distag = parms.CreateBoolean(name,value);\n}\n\npublic void GetAttributeBooleanToObject(MECMOD.Part part, HybridShape obj, string name, Boolean value)\n{\nParameters parms = part.Parameters.SubList(obj, true);\nParameter distag = parms.CreateBoolean(name, value);\n}\n\n}\n}\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_2","title":"\u8fde\u7eed\u6881\u6574\u4f53\u521b\u5efa","text":"<pre><code>//BeamProduct:ProductOccurrence,PierProduct:ProductOccurrence,AXIS_LIST:list,ROAD_CENTER:Curve,ROAD_PLANER:Curve\n\n/* Action created by 86156 2019/6/5 */\n\nlet i(integer)\nlet F1,F2(DocumentTemplate)\n\nlet destination1,destination2(ProductOccurrence)\ndestination1=BeamProduct\ndestination2=PierProduct\n\nlet axisList(list)\naxisList=AXIS_LIST\n\nlet xlsheet(DTSheetType)\nlet xls(string)\nxls=EXCEL\nset xlsheet=CreateSheet(xls)\nlet nb (Integer)\nnb = xlsheet.RowsNb\nNotify(\"\u4e2a\u6570:\",nb)    let resName,resExcel(string)\n\n//\u58f0\u660e\u5168\u5c40\u53d8\u91cf\nlet L1length(length)\nlet R1length(length)\nlet L2length(length)\nlet R2length(length)\nlet PierHeight(length)\nlet BeamCount(integer)\nlet GapStr(string)\nlet DirStr(string)\n\n//\u00a0*****************************\n//\u00a0ProgressBar\u00a0creation\n//\u00a0*****************************\nCreateProgressBar(\"ProgressBar\u00a0Name\")\n\ni=START\nfor i while i &lt;=END //axisList.Size ()\n{\nProgressBarSetValue(100*i/axisList.Size())\nProgressBarSetText(\" \uff1a\u5df2\u5b8c\u6210 \u5171\" + floor(END ))\n//\u6570\u636e\u5904\u7406\n\n//\u83b7\u5f97\u6881\u6570\nset BeamCount= xlsheet-&gt;CellAsReal(5+i,32)\nNotify(\"\u6881\u6570\u91cf\uff1a\",BeamCount)\nif (i&gt;1)\n{\n//\u83b7\u5f97\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6\nL1length=xlsheet-&gt;CellAsReal((5+(i-1)),22)*1m\nNotify(\"\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\",L1length) //\u83b7\u5f97\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 \nR1length=xlsheet-&gt;CellAsReal((5+(i-1)),23)*1m\nNotify(\"\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\",R1length)\n\n//\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6\nL2length=xlsheet-&gt;CellAsReal(5+i,24)*1m\nNotify(\"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\",L2length) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\nR2length=xlsheet-&gt;CellAsReal(5+i,25)*1m\nNotify(\"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\",R2length)\n\n//\u83b7\u5f97\u8fb9\u8de8\nGapStr=xlsheet-&gt;CellAsString((5+(i-1)),33)\nNotify(\"\u83b7\u5f97\u8fb9\u8de8:\",GapStr)\n\n//\u83b7\u5f97\u4f4d\u7f6e\u8bbe\u5b9a\nDirStr=xlsheet-&gt;CellAsString((5+(i-1)),34)\nNotify(\"\u4f4d\u7f6e\u8bbe\u5b9a:\",DirStr)\n\n\n//\u5b9e\u4f8b\u5316\u4e0a\u90e8\u6865\u6881\nF1=InstantiateTemplate(\"Re1\",destination1.Instance)\nF1-&gt;SetAttributeObject(\"P1\",axisList.GetItem (i-1))\nF1-&gt;SetAttributeObject(\"P2\",axisList.GetItem (i))\nF1-&gt;SetAttributeObject(\"ROAD_CENTER\",ROAD_CENTER )\nF1-&gt;SetAttributeObject(\"ROAD_PLANER\",ROAD_PLANER)\n\n//\u4fee\u6b63\u6570\u636e\n\nF1-&gt;SetAttributeDimension(\"P1_LW\",L1length,\"LENGTH\")\nF1-&gt;SetAttributeDimension(\"P1_RW\",R1length,\"LENGTH\")\nF1-&gt;SetAttributeDimension(\"P2_LW\",L2length,\"LENGTH\")\nF1-&gt;SetAttributeDimension(\"P2_RW\",R2length,\"LENGTH\")\nF1-&gt;SetAttributeInteger(\"BEAM_COUNT\",BeamCount)\n//F1-&gt;SetAttributeString(\"GapCheck\",GapStr)\nF1-&gt;SetAttributeString(\"DirCheck\",DirStr)\n\n//F1-&gt;SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) )\nEndModifyTemplate(F1)\n\n}\nif (i&gt;0)\n{\n//\u83b7\u5f97\u6865\u58a9\u9ad8\u5ea6\nPierHeight=xlsheet-&gt;CellAsReal(5+i,27)*1m\nNotify(\"PierHeight:\",PierHeight)\n\n//\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6\nL2length=xlsheet-&gt;CellAsReal(5+i,22)*1m\nNotify(\"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\",L2length) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\nR2length=xlsheet-&gt;CellAsReal(5+i,23)*1m\nNotify(\"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\",R2length)\n\nresExcel=xlsheet-&gt;CellAsString(5+ i,31)\nif resExcel==\"\u8fde\u7eed\u6881\u6865-\u6865\u53f0\"\n{\nresName=\"Res3\"  }else if   resExcel==\"\u8fde\u7eed\u6881\u6865-\u95e8\u67b6\"\n{\nresName=\"Res2\"      }else if resExcel==\"\u8fde\u7eed\u6881\u6865-\u60ac\u81c2\u76d6\u6881\u58a9\"\n{\nresName=\"Res1\"  }\nNotify(\"\u4e0b\u90e8\u7ed3\u6784\u8d44\u6e90\u540d\u79f0\u4e3a\uff1a\",resName)\n\n//\u5b9e\u4f8b\u5316\u4e0b\u90e8\u6865\u58a9\nF2=InstantiateTemplate(resName,destination2.Instance)\nF2-&gt;SetAttributeObject(\"AXIS\",axisList.GetItem (i))\n//\u4fee\u6b63\u6570\u636e\nF2-&gt;SetAttributeDimension(\"PIER_HEIGHT\",PierHeight,\"LENGTH\")\nF2-&gt;SetAttributeDimension(\"WIDTH_L\",L2length-824mm,\"LENGTH\")\nF2-&gt;SetAttributeDimension(\"WIDTH_R\",R2length-824mm,\"LENGTH\")\n\n//F2-&gt;SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) )\nEndModifyTemplate(F2)\n\n}\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_3","title":"\u7b80\u652f\u6881\u6574\u4f53\u521b\u5efa","text":"<pre><code>//BeamProduct:ProductOccurrence,PierProduct:ProductOccurrence,AXIS_LIST:list,ROAD_CENTER:Curve,ROAD_PLANER:Curve\n\n/* Action created by 86156 2019/6/5 */\n\nlet i(integer)\nlet F1,F2(DocumentTemplate)\n\nlet destination1,destination2(ProductOccurrence)\ndestination1=BeamProduct\ndestination2=PierProduct\n\nlet axisList(list)\naxisList=AXIS_LIST\n\nlet xlsheet(DTSheetType)\nlet xls(string)\nxls=EXCEL\nset xlsheet=CreateSheet(xls)\nlet nb (Integer)\nnb = xlsheet.RowsNb\nNotify(\"\u4e2a\u6570:\",nb)    let resExcel,resName(String)\n\n//\u58f0\u660e\u5168\u5c40\u53d8\u91cf\nlet L1length(length)\nlet R1length(length)\nlet L2length(length)\nlet R2length(length)\nlet PierHeight(length)\nlet BeamCount(integer)\nlet GapStr(string)\nlet DirStr(string)\n\n//\u00a0*****************************\n//\u00a0ProgressBar\u00a0creation\n//\u00a0*****************************\nCreateProgressBar(\"ProgressBar\u00a0Name\")\n\ni=START\nfor i while i &lt;= END  //axisList.Size ()\n{\nProgressBarSetValue(100*i/axisList.Size())\nProgressBarSetText(\" \uff1a\u5df2\u5b8c\u6210 \u5171\" + floor(axisList.Size()))\n//\u6570\u636e\u5904\u7406\n\n//\u83b7\u5f97\u6881\u6570\nset BeamCount= xlsheet-&gt;CellAsReal(5+i,32)\nNotify(\"\u6881\u6570\u91cf\uff1a\",BeamCount)\n\nif (i&gt;1)\n{\n//\u83b7\u5f97\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6\nL1length=xlsheet-&gt;CellAsReal((5+(i-1)),24)*1m\nNotify(\"\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\",L1length) //\u83b7\u5f97\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6 \nR1length=xlsheet-&gt;CellAsReal((5+(i-1)),25)*1m\nNotify(\"\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\",R1length)\n\n//\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6\nL2length=xlsheet-&gt;CellAsReal(5+i,24)*1m\nNotify(\"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\",L2length) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\nR2length=xlsheet-&gt;CellAsReal(5+i,25)*1m\nNotify(\"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\",R2length)\n\n//\u83b7\u5f97\u8fb9\u8de8\nGapStr=xlsheet-&gt;CellAsString((5+(i-1)),33)\nNotify(\"\u83b7\u5f97\u8fb9\u8de8:\",GapStr)\n\n//\u83b7\u5f97\u4f4d\u7f6e\u8bbe\u5b9a\nDirStr=xlsheet-&gt;CellAsString((5+(i-1)),34)\nNotify(\"\u4f4d\u7f6e\u8bbe\u5b9a:\",DirStr)\n\n\n//\u5b9e\u4f8b\u5316\u4e0a\u90e8\u6865\u6881\nF1=InstantiateTemplate(\"Re2\",destination1.Instance)\nF1-&gt;SetAttributeObject(\"P1\",axisList.GetItem (i-1))\nF1-&gt;SetAttributeObject(\"P2\",axisList.GetItem (i))\nF1-&gt;SetAttributeObject(\"ROAD_CENTER\",ROAD_CENTER )\nF1-&gt;SetAttributeObject(\"ROAD_PLANER\",ROAD_PLANER)\n\n//\u4fee\u6b63\u6570\u636e\n\nF1-&gt;SetAttributeDimension(\"P1_LW\",L1length,\"LENGTH\")\nF1-&gt;SetAttributeDimension(\"P1_RW\",R1length,\"LENGTH\")\nF1-&gt;SetAttributeDimension(\"P2_LW\",L2length,\"LENGTH\")\nF1-&gt;SetAttributeDimension(\"P2_RW\",R2length,\"LENGTH\")\nF1-&gt;SetAttributeInteger(\"BEAM_COUNT\",BeamCount)\n//F1-&gt;SetAttributeString(\"GapCheck\",GapStr)\n//F1-&gt;SetAttributeString(\"DirCheck\",DirStr)\n\n//F1-&gt;SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) )\nEndModifyTemplate(F1)\n\n}\n//\u83b7\u5f97\u6865\u58a9\u9ad8\u5ea6\nPierHeight=xlsheet-&gt;CellAsReal(5+i,27)*1m\nNotify(\"PierHeight:\",PierHeight)\n\n//\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6\nL2length=xlsheet-&gt;CellAsReal(5+i,24)*1m\nNotify(\"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\",L2length) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\nR2length=xlsheet-&gt;CellAsReal(5+i,25)*1m\nNotify(\"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\",R2length)\n\n\nresExcel=xlsheet-&gt;CellAsString(5+i,31)\nif resExcel==\"\u7b80\u652f\u6881\u6865-\u6865\u53f0\"\n{\nresName=\"Res3\"\n}else if   resExcel==\"\u7b80\u652f\u6881\u6865-\u95e8\u67b6\"\n{\nresName=\"ResB\"      }else if resExcel==\"\u7b80\u652f\u6881\u6865-\u60ac\u81c2\u76d6\u6881\u58a9\"\n{\nresName=\"ResA\"\n}\nNotify(\"\u4e0b\u90e8\u7ed3\u6784\u8d44\u6e90\u540d\u79f0\u4e3a\uff1a\",resName)\n\nF2=InstantiateTemplate(resName,destination2.Instance)\nF2-&gt;SetAttributeObject(\"AXIS\",axisList.GetItem(i))\nF2-&gt;SetAttributeDimension(\"PIER_HEIGHT\",PierHeight,\"LENGTH\")\nF2-&gt;SetAttributeDimension(\"WIDTH_L\",L2length,\"LENGTH\")\nF2-&gt;SetAttributeDimension(\"WIDTH_R\",R2length,\"LENGTH\")\n\n//F2-&gt;SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) )\nEndModifyTemplate(F2)       }\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_4","title":"\u6865\u6881\u7684\u521b\u5efa","text":"<pre><code>//BeamProduct:ProductOccurrence,PierProduct:ProductOccurrence,AXIS_LIST:list,ROAD_CENTER:Curve,ROAD_PLANER:Curve\n\n/* Action created by 86156 2019/6/5 */\n\nlet i(integer)\nlet F1,F2(DocumentTemplate)\n\nlet destination1,destination2(ProductOccurrence)\n//destination1=BeamProduct\ndestination2=PierProduct\n\nlet axisList(list)\naxisList=AXIS_LIST\n\nlet xlsheet(DTSheetType)\nlet xls(string)\nxls=\"Y:\\SHARE\\\u7248\u672c2\\0827\u6d4b\u8bd5\u6570\u636e\\\u8fde\u7eed\u6881_\u603b\u4f53\u8bbe\u8ba1\u8868.xlsx\"\nset xlsheet=CreateSheet(xls)\nlet nb (Integer)\nnb = xlsheet.RowsNb\nNotify(\"\u4e2a\u6570:\",nb)    //\u58f0\u660e\u5168\u5c40\u53d8\u91cf\nlet L1length(length)\nlet R1length(length)\nlet L2length(length)\nlet R2length(length)\nlet PierHeight(length)\nlet PileHeight(length)\nlet BeamCount(integer)\nlet GapStr(string)\nlet DirStr(string)\n\n//\u00a0*****************************\n//\u00a0ProgressBar\u00a0creation\n//\u00a0*****************************\nCreateProgressBar(\"ProgressBar\u00a0Name\")\n\ni=1\nfor i while i &lt;=axisList.Size ()\n{\nProgressBarSetValue(100*i/axisList.Size())\nProgressBarSetText(\" \uff1a\u5df2\u5b8c\u6210 \u5171\" + floor(axisList.Size()))\n//\u6570\u636e\u5904\u7406\n\n//\u83b7\u5f97\u6881\u6570\nset BeamCount= xlsheet-&gt;CellAsReal(5+i,32)\nNotify(\"\u6881\u6570\u91cf\uff1a\",BeamCount)\n\n//\u83b7\u5f97\u6865\u58a9\u9ad8\u5ea6\nPierHeight=xlsheet-&gt;CellAsReal(5+i,27)*1m\nNotify(\"PierHeight:\",PierHeight)\n\n//\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6\nL2length=xlsheet-&gt;CellAsReal(5+i,24)*1m\nNotify(\"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\",L2length) //\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\nR2length=xlsheet-&gt;CellAsReal(5+i,25)*1m\nNotify(\"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\",R2length)\n\n//\u6869\u957f\nPileHeight=xlsheet-&gt;CellAsReal(5+i,40)*1m\nNotify(\"\u6869\u957f:\",PileHeight)\n\nif (i==1)\n{\n\n//\u5b9e\u4f8b\u5316\u4e0b\u90e8\u6865\u58a9\nF1=InstantiateTemplate(\"Res3\",destination2.Instance)\nF1-&gt;SetAttributeObject(\"AXIS\",axisList.GetItem (i))\n//\u4fee\u6b63\u6570\u636e\n//F1-&gt;SetAttributeDimension(\"PIER_HEIGHT\",PierHeight,\"LENGTH\")\nF1-&gt;SetAttributeDimension(\"P1_RW\",L2length,\"LENGTH\")\nF1-&gt;SetAttributeDimension(\"P1_LW\",R2length,\"LENGTH\")\nF1-&gt;SetAttributeInteger(\"DIRECTION\",0)\nF1-&gt;SetAttributeDimension(\"PILE_H\",PileHeight,\"LENGTH\")             //F2-&gt;SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) )\nEndModifyTemplate(F1)\n\n}\nelse if (i==axisList.Size ())\n{\n\n//\u5b9e\u4f8b\u5316\u4e0b\u90e8\u6865\u58a9\nF2=InstantiateTemplate(\"Res3\",destination2.Instance)\nF2-&gt;SetAttributeObject(\"AXIS\",axisList.GetItem (i))\n//\u4fee\u6b63\u6570\u636e\nF2-&gt;SetAttributeDimension(\"P1_RW\",L2length,\"LENGTH\")\nF2-&gt;SetAttributeDimension(\"P1_LW\",R2length,\"LENGTH\")\nF2-&gt;SetAttributeInteger(\"DIRECTION\",1)\nF2-&gt;SetAttributeDimension(\"PILE_H\",PileHeight,\"LENGTH\")\n\n//F2-&gt;SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) )\nEndModifyTemplate(F2)\n}\n\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_5","title":"\u5bfc\u51fa\u6574\u4f53\u6570\u636e\u5230\u603b\u4f53\u8bbe\u8ba1\u8868","text":"<pre><code>/* \u5de5\u4f5c\u6307\u4ee4 \u521b\u5efa\u8005 liudi 2020/7/12 */\nlet i,j,k,a(Integer )\nlet myshape,mypart(VPMInstance)\nlet shapepoint,shapepoint1(PartFeature )\nlet shapelist,partlist,boxlist,boxlist1,pointlist,planelist(List)\nlet DT(DTSheetType )\nlet myname,sheetname,boxname,ptname,outstring,myout(String )\nlet box,onebox(OpenBodyFeature )\nlet pt,pt0,pt1,pt2,pt3(Point)\nlet L,D,x1,x2,x3,y1,y2,y3,z1,z2,z3(LENGTH )\nlet F(Feature)\nlet pla(Plane)\n\nshapepoint=GetPLMOwner(myplane)\nshapepoint1 = shapepoint.Find(\"PartFeature\", \"\", true)\nSetWorkingContext(shapepoint1 )\nonebox=new(\"OpenBodyFeature\" ,\"000\",shapepoint1)\npt1=new(\"Point\",\"1\",onebox)\npt1=pointonplane(myplane,point(0m,0m,0m),1m,10m)\npt2=new(\"Point\",\"2\",onebox)\npt2=pointonplane(myplane,point(0m,0m,0m),42m,35m)\npt3=new(\"Point\",\"3\",onebox)\npt3=pointonplane(myplane,point(0m,0m,0m),25m,18m)\nshapepoint1.Update ()\nx1=pt1.coord (1)\ny1=pt1.coord (2)\nz1=pt1.coord (3)\nx2=pt2.coord (1)\ny2=pt2.coord (2)\nz2=pt2.coord (3)\nx3=pt3.coord (1)\ny3=pt3.coord (2)\nz3=pt3.coord (3)\nonebox.Delete ()\nset DT=CreateSheet(strFileName)\nsheetname=\"\u8ddd\u79bb(m)\"\npartlist=Location.Query(\"VPMInstance\",NULL)\nshapelist=Location.Query(\"PartFeature\",NULL)\ni=1\n\nfor i while i&lt;=partlist.Size ()\n{\nmyshape=shapelist[i]\nboxlist=myshape.Children\nboxlist1=boxlist.Filter(\"OpenBodyFeature\",\"x.Name  == \\\"EXPORT_DIM\\\"\")\nif boxlist1.Size ()==0\n{\nbreak\n}\nelse\n{\nSetWorkingContext(myshape )\nbox=boxlist1[1]\npla=new(\"Plane\",\"000\",box)\npla=plane(point(x1,y1,z1),point(x2,y2,z2),point(x3,y3,z3))\npointlist=box.Children\nk=pointlist.Size ()\n\n/*********************/\npt=pointlist[1]\nD=distance(pt,pla)\nL=D/1000\noutstring=L\na=outstring.Length ()\nmyout=outstring.Extract (0,a-2)\nDT-&gt;SetCell(6+i,60,myout)\n/*********************/\n\n/*********************/\npt=pointlist[2]\nD=distance(pt,pla)\nL=D/1000\noutstring=L\na=outstring.Length ()\nmyout=outstring.Extract (0,a-2)\nDT-&gt;SetCell(6+i,61,myout)\n/*********************/\n\n/*********************/\npt=pointlist[2]\npt0=pointlist[3]\nD=distance(pt,pt0)\nL=D/1000\noutstring=L\na=outstring.Length ()\nmyout=outstring.Extract (0,a-2)\nDT-&gt;SetCell(6+i,62,myout)\n/*********************/\n\n/*********************/\npt=pointlist[3]\nD=distance(pt,pla)\nL=D/1000\noutstring=L\na=outstring.Length ()\nmyout=outstring.Extract (0,a-2)\nDT-&gt;SetCell(6+i,63,myout)\n/*********************/\n\npt=pointlist[4]\npt0=pointlist[3]\nD=distance(pt,pt0)\nL=D/1000\noutstring=L\na=outstring.Length ()\nmyout=outstring.Extract (0,a-2)\nDT-&gt;SetCell(6+i,64,myout)\n/*********************/\n\n/*********************/\npt=pointlist[4]\nD=distance(pt,pla)\nL=D/1000\noutstring=L\na=outstring.Length ()\nmyout=outstring.Extract (0,a-2)\nDT-&gt;SetCell(6+i,65,myout)\n/*********************/\n\n/*********************/\npt=pointlist[5]\nD=distance(pt,pla)\nL=D/1000\noutstring=L\na=outstring.Length ()\nmyout=outstring.Extract (0,a-2)\nDT-&gt;SetCell(6+i,66,myout)\n/*********************/\npla.Delete ()\n}\ni=i+1\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_6","title":"\u5bfc\u51fa\u57ab\u77f3\u6570\u636e","text":"<pre><code>//Location :  VPMReference,strFileName :  String,ReferAxis :  AxisSystem \n/* \u5de5\u4f5c\u6307\u4ee4 \u521b\u5efa\u8005 liudi 2020/7/21 */\nlet i,j,k,a,a1,b,c,d,e(Integer )\nlet myshape,mypart(VPMInstance)\nlet partlist,chlist1,chlist2,chlist3,mmlist1,mmlist2,mylist,mylist1,mylist2,onelist(List)\nlet DT(DTSheetType )\nlet box,onebox(OpenBodyFeature )\nlet partname,outpartname,username,outname,mylength,outmylength,myv,outmyv,x1,y1,z1,x2,y2,z2(String )\nlet yx1,yx2,yx3,yx4(MMOrderedGeometricalSet)\nlet mybody,mybody2,body1(BodyFeature )\nlet myuserfeature(UserFeature )\nlet sur(Surface )\nlet pt(Point )\nlet v,vo,outv(Real )\nlet xplane(Plane )\nlet xdir(Direction )\nlet x,y,z(LENGTH)\nlet myaxis(AxisSystem )\n\nset DT=CreateSheet(strFileName)\npartlist=Location.Query(\"PartFeature\",NULL)\n\ni=1\na1=1\nfor i while i&lt;=partlist.Size ()\n{\nmypart=partlist[i]\nSetWorkingContext(mypart)\npartname=mypart.Name\nb=partname.Length ()\noutpartname=partname.Extract (0,b-4)\nDT-&gt;SetCell(a1+1,1,outpartname)         //\u7b2c\u4e00\u680f\u6570\u636e\nchlist1=mypart.Children\nmmlist1=chlist1.Filter (\"MMOrderedGeometricalSet\",NULL)\nyx1=mmlist1[1]\nchlist2=yx1.Children\nmmlist2=chlist2.Filter (\"MMOrderedGeometricalSet\",NULL)\nyx2=mmlist2[3]\nchlist3=yx2.Children\nj=chlist3.Size ()\nyx3=chlist3[j]\n//body1=new(\"BodyFeature\",\"0000\",yx3)\nmylist=yx3.Children\nmybody=mylist[1]\nmybody2=mylist[2]\nmylist1=mybody.Children\nmylist2=mybody2.Children\nonelist=mylist1+mylist2\nk=onelist.Size ()\na=1\nfor a while a&lt;=k\n{\nmyuserfeature=onelist[a]\nusername=myuserfeature.Name c=username.Length ()\noutname=username.Extract(0,c-3)\nDT-&gt;SetCell(a1+1,2,username)                //\u7b2c\u4e8c\u680f\u6570\u636e\nv=myuserfeature.GetAttributeReal('\u4e0b\u57ab\u77f3\u4f53\u79ef')\nmyv=ToString(v)\nDT-&gt;SetCell(a1+1,6,myv)\nv=myuserfeature.GetAttributeReal('\u4e0a\u57ab\u77f3\u4f53\u79ef')\nmyv=ToString(v)\nDT-&gt;SetCell(a1+1,7,myv)\npt=myuserfeature.GetAttributeObject('COORD_PT')\nx=pt.coord (1,ReferAxis)\ny=pt.coord (2,ReferAxis)\nz=pt.coord (3,ReferAxis)\nx1=ToString(x)\nc=x1.Length ()\nx2=x1.Extract(0,c-2)\ny1=ToString(y)\nc=y1.Length ()\ny2=y1.Extract(0,c-2)\nz1=ToString(z)\nc=z1.Length ()\nz2=z1.Extract(0,c-2)\nDT-&gt;SetCell(a1+1,3,x2)\nDT-&gt;SetCell(a1+1,4,y2)\nDT-&gt;SetCell(a1+1,5,z2)\na1=a1+1\n}\n\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_7","title":"\u5bfc\u51fa\u57fa\u6869\u6570\u636e","text":"<pre><code>//Location :  VPMReference,strFileName :  String,ReferAxis :  AxisSystem \n/* \u5de5\u4f5c\u6307\u4ee4 \u521b\u5efa\u8005 liudi 2020/7/23 */\nlet i,j,k,a,b(Integer )\nlet myshape(VPMInstance)\nlet mypart(PartFeature)\nlet DT(DTSheetType )\nlet partlist,shapelist,boxlist,list1,list2,ptlist,yxlist1,yxlist2,yxlist3,bodylist,list3,culist(List )\nlet yx1,yx2,yx3,yx4(MMOrderedGeometricalSet)\nlet mybox,box(OpenBodyFeature )\nlet partname(String )\nlet pt,mypoint(Point )\nlet xplane,plane1,myplane(Plane )\nlet mybody(BodyFeature )\nlet allcu,mycu(Curve )\nlet tutai(Surface)\nlet x,y(LENGTH )\n\nset DT=CreateSheet(strFileName)\npartlist=Location.Query(\"VPMInstance\",NULL)\nshapelist=Location.Query(\"PartFeature\",NULL)\nj=partlist.Size ()\n\ni=1\nk=1\nfor i while i&lt;=j\n{\nmypart=partlist[i]\nmyshape=shapelist[i]\npartname=mypart.Name ()\nDT-&gt;SetCell(k+1,1,partname)\nSetWorkingContext(myshape)\nlist1=myshape.Children\nlist2=list1.Filter (\"OpenBodyFeature\",NULL)\nbox=list2[2]\nptlist=box.Children\npt=ptlist[4]\nmybox=new(\"OpenBodyFeature\",\"\u53c2\u7167\",myshape)\nxplane=new(\"Plane\" ,\"\u6c34\u5e73\u9762\",mybox)\nxplane=plane(point(0mm,0mm,0mm),point(1mm,0mm,0mm),point(0mm,1mm,0mm))\nplane1=new(\"Plane\" ,\"\u8fc7\u6e21\u5e73\u9762\",mybox)\nset plane1=planeoffset(xplane,pt)\nmyplane=new(\"Plane\" ,\"\u76f8\u4ea4\u5e73\u9762\",mybox)\nmyplane=planeoffset(plane1,-200mm,true)\n\nyxlist1=list1.Filter (\"MMOrderedGeometricalSet\",NULL)\nyx1=yxlist1[1]\nyxlist2=yx1.Children\nyxlist3=yxlist2.Filter (\"MMOrderedGeometricalSet\",NULL)\nyx2=yxlist3[3]\nbodylist=yx2.Children\nmybody=bodylist[5]\nlist3=mybody.Children\nallcu=new(\"Curve\" ,\"\u76f8\u4ea4\u7ebf\",mybox)\nallcu=intersect(myplane,list3[1])\nculist=disassemble(allcu,false)\na=culist.Size ()\nb=1\nfor b while b&lt;=a\n{\nmycu=culist[b]\nmypoint=new(\"Point\" ,\"\u70b9_\"+b,mybox)\nmypoint=centerofgravity(mycu)\nDT-&gt;SetCell(k+1,2,b)\nx=mypoint.coord (1,ReferAxis)\ny=mypoint.coord (2,ReferAxis)\nDT-&gt;SetCell(k+1,3,x)\nDT-&gt;SetCell(k+1,4,y)\nk=k+1\n}\nmybox.Update ()\nmybox.Delete ()\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_8","title":"\u8fde\u7eed\u6881\u4e0e\u7b80\u652f\u6881\u5de5\u7a0b\u6a21\u677f\u4ee3\u7801","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_9","title":"\u53cd\u8f6c\u8f93\u5165\u6761\u4ef6","text":"<pre><code>set ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\Curve.6=invert(ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\Sketch.242 )\nset ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\Curve.7=invert(ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\Sketch.243 )\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_10","title":"\u4e2d\u8de8\u4f4d\u7f6e\u8bbe\u5b9a","text":"<pre><code>/*\u89c4\u5219 \u521b\u5efa\u8005 DESKTOP 2020/4/26*/\n\nif `ALL_BEAMS\\PARAMETERS\\\u4f4d\u7f6e\u8bbe\u5b9a` ==\"\u4e2d\u8de8\"\n{\n`ALL_BEAMS\\PARAMETERS\\\u8fb9\u8de8\u5224\u65ad`=1\n}\nelse\n{\n`ALL_BEAMS\\PARAMETERS\\\u8fb9\u8de8\u5224\u65ad` =0\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_11","title":"\u4f4d\u7f6e\u53c2\u6570\u5b9a\u4e49","text":"<pre><code>/*\u89c4\u5219 \u521b\u5efa\u8005 DESKTOP 2020/4/27*/\n\nif `ALL_BEAMS\\PARAMETERS\\\u4f4d\u7f6e\u8bbe\u5b9a`==\"\u4e2d\u8de8\"\n`\u7aef\u5c01\u677f\u5224\u65ad`=\"ALL\"\nelse if `ALL_BEAMS\\PARAMETERS\\\u4f4d\u7f6e\u8bbe\u5b9a`==\"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\"\n`\u7aef\u5c01\u677f\u5224\u65ad`=\"P2\"\nelse if `ALL_BEAMS\\PARAMETERS\\\u4f4d\u7f6e\u8bbe\u5b9a`==\"\u5927\u91cc\u7a0b\u8fb9\u8de8\"\n`\u7aef\u5c01\u677f\u5224\u65ad`=\"P1\"\n</code></pre> <pre><code>/*\u89c4\u5219 \u521b\u5efa\u8005 DESKTOP 2020/4/27*/\n\nlet F(UserFeature)\n//let l(list)\n//  l=obj.Query(\"UserFeature\",\"\")\n\nif UDFList.Size()&gt;0\n{\nfor F inside UDFList\n{\nif `ALL_BEAMS\\PARAMETERS\\\u4f4d\u7f6e\u8bbe\u5b9a`==\"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\"\n{\nF-&gt;SetAttributeInteger(\"DIRECTION\",0)\n}\nelse if `ALL_BEAMS\\PARAMETERS\\\u4f4d\u7f6e\u8bbe\u5b9a`==\"\u5927\u91cc\u7a0b\u8fb9\u8de8\"\n{\nF-&gt;SetAttributeInteger(\"DIRECTION\",1)\n}\nelse\n{\nNotify(\"\u6881\u4e3a\u4e2d\u8de8\u7bb1\u6881\uff0c\u65e0\u9700\u65b9\u5411\u5224\u65ad\")\n}\n\n}   }\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_12","title":"\u6881\u8ddd\u79bb\u7684\u8ba1\u7b97","text":"<pre><code>/*Rule created by PZG4 4/28/2020*/\n\nlet i,j(Integer)\nlet ptlist1,ptlist2(List)\nlet pt1,pt2(point)\nlet dis1,dis2 (length)\nlet p1,p2,p3,p4(point)\n\nset ptlist1 =Point1\nset ptlist2 =Point2\n\nif ptlist1.Size()&gt;2\n{\np1=ptlist1[1]\np2=ptlist1[2]\nNotify(\"DIS:\",dis1)\ndis1=distance(p1,p2)\n`ALL_BEAMS\\PARAMETERS\\P1\u6881\u8ddd`=dis1\n}\nif ptlist2.Size()&gt;2\n{   p3=ptlist2[1]\np4=ptlist2[2]\n\nNotify(\"DIS:\",dis2)\ndis2=distance(p3,p4)\n`ALL_BEAMS\\PARAMETERS\\P2\u6881\u8ddd`=dis2\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_13","title":"\u5220\u9664\u548c\u521b\u5efa\u6881\u96c6\u5408","text":"<pre><code>If hb1.Bodies.Count &lt;&gt; 0 Then\nCATIA.ActiveEditor.Selection.Clear\nFor k = 1 To hb1.Bodies.Count\nDim hb0obj As Body\nSet hb0obj = hb1.Bodies.Item(k)\nCATIA.ActiveEditor.Selection.Add hb0obj      Next\nCATIA.ActiveEditor.Selection.Delete\nEnd If\n\nDim i as integer\nFor i = 1 To icount\nDim hb2 As Body\nSet hb2 = hb1.Bodies.Add\nhb2.Name = \"BEAM_\" + CStr(i)\nNext\n\nEnd Sub\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_14","title":"\u66f4\u65b0\u6881","text":"<pre><code>Dim part as Part\nSet part =ContainingPart(prt)\n\npart.InWorkObject=prt\nOn Error Resume Next\nPart.UpdateObject(prt)\n\nEnd Sub\n\n\nFunction ContainingPart(ByVal CatObject)\nDim found As Boolean\nDim Current\nSet Current = CatObject\nfound = False\nDo While found = False\nSet Current = Current.Parent\nIf TypeName(Current) = \"Part\" Then\nfound = True\nEnd If\nLoop\nSet ContainingPart = Current\nEnd Function\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_15","title":"\u5c0f\u7bb1\u6881\u96c6\u5408","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_16","title":"\u521b\u5efa\u5c0f\u7bb1\u6881","text":"<pre><code>//\u5b9a\u4e49\u53d8\u91cf\nlet i,j(integer)\nlet beamcount (integer)\nlet pt1,pt2,ptA1,pta1,ptA2,pta2(point)\nlet planerLn(line)\nlet pl1,pl2,pl3,pl4(plane)\nlet cu,cu1,cu2,cu3,cu4(curve)\nlet a1,a2(angle)\nlet D1,D2(length)\nlet F(feature)\nlet p1,p2,drwrailpt1,drwrailpt2(point)\nlet body1(body)\nset p1=ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\p1\nset p2=ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\p2\nset cu=project(ALL_BEAMS\\INPUT\\PLANER_CRV  ,`xy plane` ,direction(`xy plane` ))\n//\u76f8\u4ea4\u51fa\u4e24\u6761\u66f2\u7ebf\nset cu1=`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-1`\nset cu2=`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-2`\n\ni=1\n\nbeamcount=ALL_BEAMS\\PARAMETERS\\BEAM_COUNT\nfor i while i&lt;=beamcount\n{\npta1=CreateOrModifyDatum(\"point\",ALL_BEAMS\\DATUM\\POINTS_1  ,Point11  ,i)\nset pta1=pointoncurveRatio(ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\Line.8507  ,NULL,(i-1)/(beamcount-1),true)\n\nptA1=CreateOrModifyDatum(\"point\",ALL_BEAMS\\DATUM\\POINTS_1  ,Point1 ,i)\nset ptA1=project(pta1 ,`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\Multi-sections Surface.62`  ,direction(`xy plane` ))\n\npta2=CreateOrModifyDatum(\"point\",ALL_BEAMS\\DATUM\\POINTS_2  ,Point22  ,i)\nset pta2=pointoncurveRatio(ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\Line.8508  ,NULL,(i-1)/(beamcount-1),true)\n\nptA2=CreateOrModifyDatum(\"point\",ALL_BEAMS\\DATUM\\POINTS_2  ,Point2 ,i)\nset ptA2=project(pta2 ,`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\Multi-sections Surface.62`   ,direction(`xy plane` ))\n\nptA1.Name =\"PTA_1_\"+i\nptA2.Name =\"PTA_2_\"+i\npta1.Name =\"PTB_1_\"+i\npta1.Name =\"PTB_2_\"+i\n\nplanerLn=CreateOrModifyDatum(\"Line\",ALL_BEAMS\\DATUM\\LINES ,ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_BEAMS\\PlanerLnList ,i)\nplanerLn=line(pta1,pta2)\nplanerLn.Color=\"224,2,32\"\nplanerLn.Name=\"LN_\"+i\n}\n\nj=1\n\nALL_BEAMS\\RELATIONS\\REFERENCE_RELATIONS\\VBScriptNewBody\\CREATE_BODY.Run(ALL_BEAMS\\MODEL\\BEAMS_SETS ,beamcount)\nlet blist(List)\nblist = ALL_BEAMS\\MODEL\\BEAMS_SETS.Query(\"BodyFeature\",\"\")\nlet beambody(BodyFeature)\n\nfor j while j &lt;=beamcount\n{\nbeambody=blist[j]\nif (`ALL_BEAMS\\PARAMETERS\\\u8fb9\u8de8\u5224\u65ad`==\"1\")\n{\nF=CreateOrModifyTemplate(\"R1\" ,beambody  ,UDFList ,j)\nF-&gt;SetAttributeObject(\"p1\",Point1 .GetItem (j))\nF-&gt;SetAttributeObject(\"p2\", Point2 .GetItem (j))\nF-&gt;SetAttributeObject(\"curve1\",`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-01` )\nF-&gt;SetAttributeObject(\"curve2\",`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-02`)    F-&gt;SetAttributeObject(\"curve3\",ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\MiddleCrvDRV  )  //F-&gt;SetAttributeInteger(\"ORIENTATION\",1)\n\n\n}else if (`ALL_BEAMS\\PARAMETERS\\\u8fb9\u8de8\u5224\u65ad`==\"0\")\n{\nF=CreateOrModifyTemplate(\"R2\" ,beambody ,UDFList ,j)\nF-&gt;SetAttributeObject(\"p1\",Point1 .GetItem (j))\nF-&gt;SetAttributeObject(\"p2\", Point2 .GetItem (j))\nF-&gt;SetAttributeObject(\"curve1\",`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-01` )\nF-&gt;SetAttributeObject(\"curve2\",`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-02`)\nF-&gt;SetAttributeObject(\"curve3\",ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\MiddleCrvDRV  )  }\n\nEndModifyTemplate(F)\nF.Name =\"\u6881\u6bb5_\"+j\n\n\n}\n\ndrwrailpt1=CreateOrModifyDatum(\"point\",ALL_BEAMS\\DATUM\\OTHER_PTS ,ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_BEAMS\\DrwRail_List_1 ,1)\ndrwrailpt1=pointoncurveRatio(`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-01` ,NULL,0,true)\n\ndrwrailpt2=CreateOrModifyDatum(\"point\",ALL_BEAMS\\DATUM\\OTHER_PTS ,ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_BEAMS\\DrwRail_List_1 ,1)\ndrwrailpt2=pointoncurveRatio(`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-01` ,NULL,1,true)\nNotify(\"\u6881\u6bb5\u6570=\",beamcount)\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_17","title":"\u66f4\u65b0\u5c0f\u7bb1\u6881","text":"<pre><code>let p1list,p2list,udflist(List)\nlet udf,blockudf1,blockudf2 (Feature)\nlet i(integer)\nlet dis1,dis2,disa,disb(Length)\nset p1list=Point11\nset p2list=Point22\nset udflist=UDFList\nlet BeamType(string)\nBeamType=`ALL_BEAMS\\PARAMETERS\\\u4f4d\u7f6e\u8bbe\u5b9a`\ni=1\nset dis1=distance(p1list[1],p1list[2])\nset dis2=distance(p2list[1],p2list[2])\nfor i while i&lt;=p1list.Size()\n{\nNotify(\"Distance1:\",dis1)\nNotify(\"Distance2:\",dis2)\nif (BeamType==\"\u4e2d\u8de8\")\n{\nset udf=udflist[i]\nif i==1\n{\nudf.SetAttributeDimension(\"DIM_1_L\",(dis1-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6`-`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_L\",(dis2-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_1_R\",637mm,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_R\",637mm,\"LENGTH\")\nNotify(\"\u4fee\u6539\u6210\u529f\",udf.Name) }\nif i&gt;1 and i&lt; p1list.Size()\n{\nudf.SetAttributeDimension(\"DIM_1_L\",(dis1-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6`-`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_L\",(dis2-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_1_R\",(dis1-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_R\",(dis2-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")                }\nif i==p1list.Size()\n{\n\nudf.SetAttributeDimension(\"DIM_1_L\",637mm,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_L\",637mm,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_1_R\",(dis1-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_R\",(dis2-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")        }\n}\nelse if (BeamType==\"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\")\n{   set udf=udflist[i]\nif i==1\n{\nudf.SetAttributeDimension(\"DIM_1_R\",637mm,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_R\",637mm,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_1_L\",(dis1-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_L\",(dis2-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")        }\nif i&gt;1 and i&lt; p1list.Size()\n{\nudf.SetAttributeDimension(\"DIM_1_R\",(dis1-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6`-`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_R\",(dis2-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_1_L\",(dis1-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_L\",(dis2-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")    }\nif i==p1list.Size()\n{\nudf.SetAttributeDimension(\"DIM_1_R\",(dis1-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6`-`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_R\",(dis2-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_1_L\",637mm,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_L\",637mm,\"LENGTH\")     }\n}\nelse if (BeamType==\"\u5927\u91cc\u7a0b\u8fb9\u8de8\")\n{   set udf=udflist[i]\nif i==1\n{\nudf.SetAttributeDimension(\"DIM_1_L\",637mm,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_L\",637mm,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_R\",(dis1-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_1_R\",(dis2-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")        }\nif i&gt;1 and i&lt; p1list.Size()\n{\nudf.SetAttributeDimension(\"DIM_2_L\",(dis1-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6`-`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_1_L\",(dis2-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_R\",(dis1-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_1_R\",(dis2-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")    }\nif i==p1list.Size()\n{\nudf.SetAttributeDimension(\"DIM_2_L\",(dis1-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6`-`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_1_L\",(dis2-`ALL_BEAMS\\PARAMETERS\\\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u5bbd\u5ea6` -`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd` )/2,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_1_R\",637mm,\"LENGTH\")\nudf.SetAttributeDimension(\"DIM_2_R\",637mm,\"LENGTH\")     }\n}\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_18","title":"\u7aef\u5c01\u677f\u5224\u65ad","text":"<pre><code>let B1,B2(feature)\nlet i,j(Integer)\nlet ptlist1,ptlist2(List)\nlet pt1,pt2(point)\nlet dis1,dis2 (length)\nlet udf1,udf2(Feature)\nlet surf(surface)\nset surf =`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\Multi-sections Surface.62`\nset ptlist1 =Point1\nset ptlist2 =Point2\ni=1\nj=1\n\nif(`\u7aef\u5c01\u677f\u5224\u65ad`==\"P1\" )//P1\n{\n\nfor i while i&lt;=ptlist1.Size()\n{\n\nB1=CreateOrModifyTemplate(\"BB\" ,ALL_BEAMS\\MODEL\\MODEL_POURING_BEAM_P1   ,ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_BEAM_H\\list1  ,i)\nB1-&gt;SetAttributeObject(\"PT\",ptlist1 .GetItem (i))\nB1-&gt;SetAttributeObject(\"CRV\",`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-01` )\nB1-&gt;SetAttributeObject(\"SURFACE\",surf)\nB1.SetAttributeInteger(\"ORENTATION\",0)  B1.Name=\"B1-\"+i\n\nif i==1\n{\nB1.SetAttributeInteger(\"CHECK_A\",1)\nB1.SetAttributeInteger(\"CHECK_B\",0)\n\n}else if (i==ptlist1.Size())\n{\nB1.SetAttributeInteger(\"CHECK_A\",0)\nB1.SetAttributeInteger(\"CHECK_B\",1)\n}a\nEndModifyTemplate(B1)\n\n\n}\n}\nelse if (`\u7aef\u5c01\u677f\u5224\u65ad`==\"P2\") //P2\n{\n\nfor j while j&lt;=ptlist2.Size()\n{\n\nB2=CreateOrModifyTemplate(\"BB\" ,ALL_BEAMS\\MODEL\\MODEL_POURING_BEAM_P2   ,ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_BEAM_H\\list2 ,j)\nB2-&gt;SetAttributeObject(\"PT\",ptlist2 .GetItem (j))\nB2-&gt;SetAttributeObject(\"CRV\",`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-02` )\nB2-&gt;SetAttributeObject(\"SURFACE\",surf)\nB2.SetAttributeInteger(\"ORENTATION\",1)\nB2.Name=\"B2-\"+j\n\nif j==1\n{\nB2.SetAttributeInteger(\"CHECK_A\",0)\nB2.SetAttributeInteger(\"CHECK_B\",1)\n}else if (j==ptlist2.Size())\n{\nB2.SetAttributeInteger(\"CHECK_A\",1)\nB2.SetAttributeInteger(\"CHECK_B\",0)\n}\nEndModifyTemplate(B2)\n\n\n\n}\n\n\n}\nelse //all\n{\n\nfor i while i&lt;=ptlist1.Size()\n{\n\nB1=CreateOrModifyTemplate(\"BB\" ,ALL_BEAMS\\MODEL\\MODEL_POURING_BEAM_P1   ,ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_BEAM_H\\list1  ,i)\nB1-&gt;SetAttributeObject(\"PT\",ptlist1 .GetItem (i))\nB1-&gt;SetAttributeObject(\"CRV\",`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-01` )\nB1-&gt;SetAttributeObject(\"SURFACE\",surf)\nB1.SetAttributeInteger(\"ORENTATION\",0)  B1.Name=\"B1-\"+i\n\nif i==1\n{\nB1.SetAttributeInteger(\"CHECK_A\",1)\nB1.SetAttributeInteger(\"CHECK_B\",0)\n\n}else if (i==ptlist1.Size())\n{\nB1.SetAttributeInteger(\"CHECK_A\",0)\nB1.SetAttributeInteger(\"CHECK_B\",1)\n}\nEndModifyTemplate(B1)\n\n\n\n}\n\nfor j while j&lt;=ptlist2.Size()\n{\n\nB2=CreateOrModifyTemplate(\"BB\" ,ALL_BEAMS\\MODEL\\MODEL_POURING_BEAM_P2   ,ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_BEAM_H\\list2  ,j)\nB2-&gt;SetAttributeObject(\"PT\",ptlist2 .GetItem (j))\nB2-&gt;SetAttributeObject(\"CRV\",`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-02` )\nB2-&gt;SetAttributeObject(\"SURFACE\",surf)\nB2.SetAttributeInteger(\"ORENTATION\",1)\nB2.Name=\"B2-\"+j\n\nif j==1\n{\nB2.SetAttributeInteger(\"CHECK_A\",0)\nB2.SetAttributeInteger(\"CHECK_B\",1)\n}else if (j==ptlist2.Size())\n{\nB2.SetAttributeInteger(\"CHECK_A\",1)\nB2.SetAttributeInteger(\"CHECK_B\",0)\n}\nEndModifyTemplate(B2)\n\n}\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_19","title":"\u7aef\u90e8\u73b0\u6d47\u90e8\u4f4d\u81ea\u52a8\u9002\u5e94","text":"<pre><code>let p1list,p2list,udflist1,udflist2(List)\nlet udf1,udf2 (UserFeature)\nlet i,j(integer)\nlet dis1,dis2,disa,disb(Length)\nset p1list=Point11\nset p2list=Point22\nset udflist1=ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_BEAM_H\\list1\nset udflist2=ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_BEAM_H\\list2\nlet BeamType(string)\nlet gap(length)\ngap=`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd`/2\n\nBeamType=`ALL_BEAMS\\PARAMETERS\\\u4f4d\u7f6e\u8bbe\u5b9a`\n\nset dis1=distance(p1list[1],p1list[2])\nset dis2=distance(p2list[1],p2list[2])\nNotify(\"Name:\",dis1)\nNotify(\"Name:\",dis2)\ni=1\nj=1\nif udflist1.Size()&lt;&gt;0\n{\nfor i while i&lt;=p1list.Size()\n{\nudf1=udflist1[i]\nif i==1\n{\nudf1-&gt;SetAttributeDimension(\"Length1\",dis1/2-(2676mm/2),\"Length\")\nudf1-&gt;SetAttributeDimension(\"Length2\",637mm,\"Length\")\n}\nif i&gt;1 and i&lt; p1list.Size()\n{\nudf1-&gt;SetAttributeDimension(\"Length1\",dis1/2-(2676mm/2),\"Length\")\nudf1-&gt;SetAttributeDimension(\"Length2\",dis1/2-(2676mm/2),\"Length\")               }\nif i==p1list.Size()\n{\nudf1-&gt;SetAttributeDimension(\"Length1\",637mm,\"Length\")\nudf1-&gt;SetAttributeDimension(\"Length2\",dis1/2-(2676mm/2),\"Length\")\n}\n}\n}\n\nif udflist2.Size()&lt;&gt;0\n{\nfor j while j&lt;=p2list.Size()\n{\nudf2=udflist2[j]\nif j==1\n{\nudf2-&gt;SetAttributeDimension(\"Length1\",637mm,\"Length\")\nudf2-&gt;SetAttributeDimension(\"Length2\",dis2/2-(2676mm/2),\"Length\")\n}\nif j&gt;1 and j&lt; p2list.Size()\n{\nudf2-&gt;SetAttributeDimension(\"Length1\",dis2/2-(2676mm/2),\"Length\")\nudf2-&gt;SetAttributeDimension(\"Length2\",dis2/2-(2676mm/2),\"Length\")               }\nif j==p2list.Size()\n{\nudf2-&gt;SetAttributeDimension(\"Length1\",dis2/2-(2676mm/2),\"Length\")\nudf2-&gt;SetAttributeDimension(\"Length2\",637mm,\"Length\")\n}\n}\n}   </code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#udf","title":"\u66f4\u65b0\u8fb9\u8de8UDF\u6570\u636e","text":"<pre><code>/*\u89c4\u5219 \u521b\u5efa\u8005 DESKTOP 2020/7/7*/\nlet udf1,udf2(Feature)\nif `ALL_BEAMS\\PARAMETERS\\\u4f4d\u7f6e\u8bbe\u5b9a`==\"\u5927\u91cc\u7a0b\u8fb9\u8de8\"\n{\nudf1=UDFList[1]\nudf1-&gt;SetAttributeInteger(\"SIDEBEAM_LEFT_CHECK\",0)\nudf1-&gt;SetAttributeInteger(\"SIDEBEAM_RIGHT_CHECK\",1)\nudf2=UDFList[UDFList.Size()]\nudf2-&gt;SetAttributeInteger(\"SIDEBEAM_LEFT_CHECK\",1)\nudf2-&gt;SetAttributeInteger(\"SIDEBEAM_RIGHT_CHECK\",0)\n}\nelse if `ALL_BEAMS\\PARAMETERS\\\u4f4d\u7f6e\u8bbe\u5b9a`==\"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\"\n{\nudf1=UDFList[1]\nudf1-&gt;SetAttributeInteger(\"SIDEBEAM_LEFT_CHECK\",1)\nudf1-&gt;SetAttributeInteger(\"SIDEBEAM_RIGHT_CHECK\",0)\nudf2=UDFList[UDFList.Size()]\nudf2-&gt;SetAttributeInteger(\"SIDEBEAM_LEFT_CHECK\",0)\nudf2-&gt;SetAttributeInteger(\"SIDEBEAM_RIGHT_CHECK\",1)\n}\nelse\n{\nudf1=UDFList[1]\nudf1-&gt;SetAttributeInteger(\"SIDEBEAM_LEFT_CHECK\",1)\nudf1-&gt;SetAttributeInteger(\"SIDEBEAM_RIGHT_CHECK\",0)\nudf2=UDFList[UDFList.Size()]\nudf2-&gt;SetAttributeInteger(\"SIDEBEAM_LEFT_CHECK\",0)\nudf2-&gt;SetAttributeInteger(\"SIDEBEAM_RIGHT_CHECK\",1)\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_20","title":"\u57ab\u77f3\u7684\u521b\u5efa","text":"<pre><code>let B1,B2(feature)\nlet i,j(Integer)\nlet ptlist1,ptlist2(List)\nlet pt1,pt2(point)\nlet dis1,dis2 (length)\nlet udf1,udf2(Feature)\nlet cushionHeight(length)\nset ptlist1 =Point1\nset ptlist2 =Point2\n\nset cushionHeight=CUSHION_HEIGHT\ni=1\nj=1\n\nif(`ALL_BEAMS\\PARAMETERS\\\u4f4d\u7f6e\u8bbe\u5b9a` ==\"\u4e2d\u8de8\" )//P1\n{\nfor i while i&lt;=ptlist1.Size()\n{\nB1=CreateOrModifyTemplate(\"DIANKUAI\" ,ALL_BEAMS\\MODEL\\MODEL_CUSHION\\P1   ,ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_CUSHION\\List.1   ,i)\nB1-&gt;SetAttributeObject(\"PT\",ptlist1.GetItem (i))\nB1-&gt;SetAttributeObject(\"AXIS\",`ALL_BEAMS\\INPUT\\AX-P1`  )\nB1.SetAttributeDimension(\"OFFSET_Z\",1610mm,\"LENGTH\")\nB1.SetAttributeDimension(\"OFFSET_X\",0mm,\"LENGTH\")\nB1.Name=\"B1-\"+i B1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\",750mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\",1500mm,\"LENGTH\")\n//B1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u652f\u5ea7\u987a\u6865\u5411\u957f\",500mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u652f\u5ea7\u6a2a\u5411\u5bbd\",500mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\",750mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\",750mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\",1500mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u652f\u5ea7\u9ad8\",110mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u4e0b\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\",cushionHeight,\"LENGTH\")\nEndModifyTemplate(B1)\n}   for j while j&lt;=ptlist2.Size()\n{\nB2=CreateOrModifyTemplate(\"DIANKUAI\" ,ALL_BEAMS\\MODEL\\MODEL_CUSHION\\P2   ,ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_CUSHION\\List.2  ,j)\nB2-&gt;SetAttributeObject(\"PT\",ptlist2 .GetItem (j))\nB2-&gt;SetAttributeObject(\"AXIS\",`ALL_BEAMS\\INPUT\\AX-P2`  )\nB2.SetAttributeDimension(\"OFFSET_Z\",1610mm,\"LENGTH\")\nB2.SetAttributeDimension(\"OFFSET_X\",0mm,\"LENGTH\")\n\nB2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\",750mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\",1500mm,\"LENGTH\")\n//B2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u652f\u5ea7\u987a\u6865\u5411\u957f\",500mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u652f\u5ea7\u6a2a\u5411\u5bbd\",500mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\",750mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\",750mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\",1500mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u652f\u5ea7\u9ad8\",110mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u4e0b\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\",cushionHeight,\"LENGTH\")\n\nB2.Name=\"B2-\"+j EndModifyTemplate(B2)   }\n}\nelse if (`ALL_BEAMS\\PARAMETERS\\\u4f4d\u7f6e\u8bbe\u5b9a` ==\"\u5927\u91cc\u7a0b\u8fb9\u8de8\") //P2\n{\nfor i while i&lt;=ptlist1.Size()\n{\nB1=CreateOrModifyTemplate(\"DIANKUAI\" ,ALL_BEAMS\\MODEL\\MODEL_CUSHION\\P1   ,ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_CUSHION\\List.1   ,i)\nB1-&gt;SetAttributeObject(\"PT\",ptlist1 .GetItem (i))\nB1-&gt;SetAttributeObject(\"AXIS\",`ALL_BEAMS\\INPUT\\AX-P1`   )\nB1.SetAttributeDimension(\"OFFSET_Z\",1610mm,\"LENGTH\")\nB1.SetAttributeDimension(\"OFFSET_X\",-0mm,\"LENGTH\")\nB1.Name=\"B1-\"+i B1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\",750mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\",1500mm,\"LENGTH\")\n//B1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u652f\u5ea7\u987a\u6865\u5411\u957f\",500mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u652f\u5ea7\u6a2a\u5411\u5bbd\",500mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\",750mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\",750mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\",1500mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u652f\u5ea7\u9ad8\",110mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u4e0b\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\",cushionHeight,\"LENGTH\")\n\nEndModifyTemplate(B1)\n}   for j while j&lt;=ptlist2.Size()\n{\nB2=CreateOrModifyTemplate(\"DIANKUAI\" ,ALL_BEAMS\\MODEL\\MODEL_CUSHION\\P2   ,ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_CUSHION\\List.2   ,j)\nB2-&gt;SetAttributeObject(\"PT\",ptlist2 .GetItem (j))\nB2-&gt;SetAttributeObject(\"AXIS\",`ALL_BEAMS\\INPUT\\AX-P2`  )\nB2.SetAttributeDimension(\"OFFSET_Z\",1610mm,\"LENGTH\")\nB2.SetAttributeDimension(\"OFFSET_X\",-250mm,\"LENGTH\")\nB2.Name=\"B2-\"+j B2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\",500mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\",1500mm,\"LENGTH\")\n//B2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u652f\u5ea7\u987a\u6865\u5411\u957f\",400mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u652f\u5ea7\u6a2a\u5411\u5bbd\",350mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\",750mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\",500mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\",1500mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u652f\u5ea7\u9ad8\",110mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u4e0b\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\",cushionHeight,\"LENGTH\")\n\nEndModifyTemplate(B2)   }\n\n}\nelse  // \u5c0f\u91cc\u7a0b\u8fb9\u8de8\n{\nfor i while i&lt;=ptlist1.Size()\n{\n\nB1=CreateOrModifyTemplate(\"DIANKUAI\" ,ALL_BEAMS\\MODEL\\MODEL_CUSHION\\P1   ,ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_CUSHION\\List.1    ,i)\nB1-&gt;SetAttributeObject(\"PT\",ptlist1 .GetItem (i))\nB1-&gt;SetAttributeObject(\"AXIS\",`ALL_BEAMS\\INPUT\\AX-P1`  )\nB1.SetAttributeDimension(\"OFFSET_Z\",1610mm,\"LENGTH\")\nB1.SetAttributeDimension(\"OFFSET_X\",250mm,\"LENGTH\")\nB1.Name=\"B1-\"+i B1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\",500mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\",1500mm,\"LENGTH\")\n//B1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u652f\u5ea7\u987a\u6865\u5411\u957f\",400mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u652f\u5ea7\u6a2a\u5411\u5bbd\",350mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\",750mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\",500mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\",1500mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u652f\u5ea7\u9ad8\",110mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u4e0b\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\")\nB1.SetAttributeDimension(\"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\",cushionHeight,\"LENGTH\")   EndModifyTemplate(B1)   }   for j while j&lt;=ptlist2.Size()\n{\nB2=CreateOrModifyTemplate(\"DIANKUAI\" ,ALL_BEAMS\\MODEL\\MODEL_CUSHION\\P2   ,ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_CUSHION\\List.2  ,j)\nB2-&gt;SetAttributeObject(\"PT\",ptlist2 .GetItem (j))\nB2-&gt;SetAttributeObject(\"AXIS\",`ALL_BEAMS\\INPUT\\AX-P2`  )\nB2.SetAttributeDimension(\"OFFSET_Z\",1610mm,\"LENGTH\")\nB2.SetAttributeDimension(\"OFFSET_X\",0mm,\"LENGTH\")\nB2.Name=\"B2-\"+j\n\nB2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u987a\u6865\u5411\u957f\",750mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\",1500mm,\"LENGTH\")\n//B2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u652f\u5ea7\u987a\u6865\u5411\u957f\",500mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u652f\u5ea7\u6a2a\u5411\u5bbd\",500mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u652f\u5ea7\u4e2d\u5fc3\u95f4\u8ddd\",750mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u4e0b\u57ab\u77f3\u987a\u6865\u5411\u957f\",750mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u4e0a\u57ab\u77f3\u6a2a\u5411\u5bbd\",1500mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u652f\u5ea7\u9ad8\",110mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u4e0b\u57ab\u77f3\u9ad8\",150mm,\"LENGTH\")\nB2.SetAttributeDimension(\"\u652f\u627f\u7ec4\u5408\u9ad8\u5ea6\",cushionHeight,\"LENGTH\")\n\nEndModifyTemplate(B2)   }\n\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_21","title":"\u521b\u5efa\u6881\u7f1d\u9699\u73b0\u6d47\u5757","text":"<pre><code>let F(UserFeature)\nlet i(Integer)\nlet p1,p2,p3,p4,pa,pb(point)\nlet ln(curve)\ni=1\nfor i while i&lt;Point1.Size()\n{   /*\n    set pa=pointbetween(Point1[i],Point1[i+1],0.5,false)\n    set pa=CreateOrModifyDatum(\"Point\",`ALL_BEAMS\\RESULT\\MODEL_GAP\\Ordered Geometrical Set.63`  ,`ALL_BEAMS\\RELATIONS\\KP_MODEL\\Knowledge Pattern.18\\PA_List` ,i)\n    pa.Name=\"Pa_\"+ToString(i)\n    pa.Update()\n\n    set pb=pointbetween(Point2 [i],Point2 [i+1],0.5,false)\n    set pb=CreateOrModifyDatum(\"Point\",`ALL_BEAMS\\RESULT\\MODEL_GAP\\Ordered Geometrical Set.63`  ,`ALL_BEAMS\\RELATIONS\\KP_MODEL\\Knowledge Pattern.18\\PB_List` ,i)\n    pb.Name=\"Pb_\"+ToString(i)\n    pb.Update()\n    */\nln=CreateOrModifyDatum(\"Line\",ALL_BEAMS\\DATUM\\LINES ,ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_BEAM_GAP\\LineList ,i)\nset ln=project(line(pointbetween(Point1[i],Point1[i+1],0.5,false),pointbetween(Point2 [i],Point2 [i+1],0.5,false)),`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\Multi-sections Surface.62` ,direction(0,0,1))\nln.Name=\"LN-\"+i\nln.Update()\n\n\nF=CreateOrModifyTemplate(\"BEAM_GAP\",ALL_BEAMS\\MODEL\\MODEL_GAP\\Body.8  ,ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_BEAM_GAP\\BEAM_GAP_List  ,i)\nif `ALL_BEAMS\\PARAMETERS\\\u4f4d\u7f6e\u8bbe\u5b9a`  ==\"\u4e2d\u8de8\"\n{\nF-&gt;SetAttributeObject(\"LINE\",ln)\nF-&gt;SetAttributeObject(\"LINE1\",`ALL_BEAMS\\CONSTRUCTION\\DRW_REF\\Ordered Geometrical Set.33\\DRW_INT_LN` )\nF-&gt;SetAttributeObject(\"SURF\",`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\Multi-sections Surface.62`  )\nF-&gt;SetAttributeString(\"\u4f4d\u7f6e\u8bbe\u5b9a\",\"\u4e2d\u8de8\")\n}\nelse if `ALL_BEAMS\\PARAMETERS\\\u4f4d\u7f6e\u8bbe\u5b9a` ==\"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\"\n{\nF-&gt;SetAttributeObject(\"LINE\",ln)\nF-&gt;SetAttributeObject(\"LINE1\",`ALL_BEAMS\\CONSTRUCTION\\DRW_REF\\Ordered Geometrical Set.33\\DRW_INT_LN` )  F-&gt;SetAttributeObject(\"SURF\",`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\Multi-sections Surface.62`  )\nF-&gt;SetAttributeString(\"\u4f4d\u7f6e\u8bbe\u5b9a\",\"\u5c0f\u91cc\u7a0b\u8fb9\u8de8\")\n}\nelse\n{\n\nF-&gt;SetAttributeObject(\"LINE\",ln)\nF-&gt;SetAttributeObject(\"LINE1\",`ALL_BEAMS\\CONSTRUCTION\\DRW_REF\\Ordered Geometrical Set.33\\DRW_INT_LN` )  F-&gt;SetAttributeObject(\"SURF\",`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\Multi-sections Surface.62`  )\nF-&gt;SetAttributeString(\"\u4f4d\u7f6e\u8bbe\u5b9a\",\"\u5927\u91cc\u7a0b\u8fb9\u8de8\")\n}\nEndModifyTemplate(F)\nF.Name=\"GAP_\"+i\n\n\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_22","title":"\u51fa\u56fe\u6a21\u578b","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_23","title":"\u6881\u5e73\u9762\u56fe","text":"<pre><code>let pt,pt1,pt2(point)\nlet i(integer)\nlet ln(line)\nlet l1,l2(list)\nlet F(Feature)\n\nl1=Point11\nl2=Point22\n\ni=1\n\nfor i while i&lt; l1.Size()\n{\nln=CreateOrModifyDatum(\"line\",ALL_BEAMS\\DATUM\\PLANER_LN ,ALL_BEAMS\\RELATIONS\\KP_DRW\\KP_DRW_GAP_BEAM\\LineList ,i)\npt1=pointbetween(l1[i],l1[i+1],0.5,false)\npt2=pointbetween(l2[i],l2[i+1],0.5,false)\nln=line(pt1,pt2)\nln.Name=\"LN-\"+i\nln.Update()\n\nSet F=CreateOrModifyTemplate(\"DRW_BEAM_P1\",ALL_BEAMS\\MODEL\\DRW_PLANER_BEAM_GAP ,ALL_BEAMS\\RELATIONS\\KP_DRW\\KP_DRW_GAP_BEAM\\BeamGapList ,i)\nF-&gt;SetAttributeObject(\"LN\",ln)\nF-&gt;SetAttributeObject(\"CRV-1\",`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-1` )\nF-&gt;SetAttributeObject(\"CRV-2\",`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-2` )\nF-&gt;SetAttributeDimension(\"BEAM_WIDTH\",300mm,\"LENGTH\")\nF-&gt;SetAttributeString(\"TYPE\",\"B\")\nF.Name=\"BEAM-PLANER-\"+i\n//F.Color=\"0,255,255\"\nEndModifyTemplate(F)    }\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_24","title":"\u5355\u70b9\u6807\u6ce8","text":"<pre><code>let pt,pt1(point)\nlet i,j,k(integer)\nlet ln(line)\nlet l1(list)\n//\nlet F(ArcAnnotationOnePointFeature)\nlet F1(ArcAnnotationTwoPointFeature)\n//let DEMO1,\n//let DEMO2(feature)\n\nl1=ALL_BEAMS\\RELATIONS\\KP_MODEL\\KP_BEAMS\\PlanerLnList\nln=`ALL_BEAMS\\CONSTRUCTION\\DRW_REF\\Ordered Geometrical Set.33\\DRW_INT_LN`\n\ni=1\nfor i while i&lt;= l1.Size()\n{\npt=CreateOrModifyDatum(\"point\",ALL_BEAMS\\DATUM\\DRW_POINTS  ,ALL_BEAMS\\RELATIONS\\KP_DRW\\KP_DRW_LABEL_POSITION\\IntPointList  ,i)\npt=intersect(ln,l1[i])\npt.Name=\"INT-POINT-\"+i  }\nj=1\nfor j while j&lt;= l1.Size()\n{\n/*Set F=InstantiateTemplate(\"DRW_TAG_1\",ALL_BEAMS\\RESULT\\DRW_TAGS )\n    F-&gt;SetAttributeObject(\"PT\",ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\IntPointList [j])\n    //F-&gt;SetAttributeDimension(\"BEAM_WIDTH\",300mm,\"LENGTH\")\n    F-&gt;SetAttributeString(\"ComponentName\",\"demo\")\n    F-&gt;SetAttributeString(\"Name\",\"TEST-\"+j)\n    F-&gt;SetAttributeString(\"Value\",\"K-\"+`ALL_BEAMS\\PARAMETERS\\\u8de8\u53f7` +\"_\"+j+\"-\u53f7\u6881\")\n    EndModifyTemplate(F)    \n    ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\LabelList-&gt;SetItem(F-&gt;GetAttributeObject(\"LABEL\"),j)\n    DEMO1=F-&gt;GetAttributeObject(\"LABEL\")\n\n    DEMO1.Name=\"Label-\"+j\n    */\nF=CreateArcAnnotationOnePointFeature(`Annotation\\\u6881\u53f7\u6807\u6ce8`  ,ALL_BEAMS\\RELATIONS\\KP_DRW\\KP_DRW_LABEL_POSITION\\IntPointList [j],\"RTTT\",\"demo\",\"K-\"+`ALL_BEAMS\\PARAMETERS\\\u8de8\u53f7` +\"_\"+j+\"-\u53f7\u6881\")\nALL_BEAMS\\RELATIONS\\KP_DRW\\KP_DRW_LABEL_POSITION\\LabelList-&gt;SetItem(F,j)\n}\nk=1\nfor k while k&lt; l1.Size()\n{\n/*Set F1=InstantiateTemplate(\"DRW_DIM_1\",ALL_BEAMS\\RESULT\\DRW_DIM )\n    F1-&gt;SetAttributeObject(\"P1\",ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\IntPointList [k])\n    F1-&gt;SetAttributeObject(\"P2\",ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\IntPointList [k+1])\n    F1-&gt;SetAttributeString(\"Name\",\"Distance-\"+k)\n    F1-&gt;SetAttributeInteger(\"DimType\",3)\n    EndModifyTemplate(F1)   \n    ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\DimListM  -&gt;SetItem(F1-&gt;GetAttributeObject(\"DIM\"),k)\n    DEMO2=F1-&gt;GetAttributeObject(\"DIM\")\n    DEMO2-&gt;SetAttributeString(\"Value\",\"K-\"+k+\"-\u53f7\u6881\")\n    DEMO2.Name=\"Dim-M-\"+k\n    */\nF1=CreateArcAnnotationTwoPointFeature(`Annotation\\\u73b0\u6d47\u7f1d\u9699\u6807\u6ce8`,ALL_BEAMS\\RELATIONS\\KP_DRW\\KP_DRW_LABEL_POSITION\\IntPointList [k],ALL_BEAMS\\RELATIONS\\KP_DRW\\KP_DRW_LABEL_POSITION\\IntPointList [k+1],\"Distance-\"+k,\"K-\"+k+\"-\u53f7\u6881\",\"1\")\nALL_BEAMS\\RELATIONS\\KP_DRW\\KP_DRW_LABEL_POSITION\\DimListM  -&gt;SetItem(F1,k)\n}\n\n\n//\u5f97\u5230\u4e24\u8fb9\u6807\u6ce8\nk=1\nfor k while k&lt; l1.Size()\n{\n/*\n    Set F1=InstantiateTemplate(\"DRW_DIM_1\",ALL_BEAMS\\RESULT\\DRW_DIM )\n    F1-&gt;SetAttributeObject(\"P1\",Point11 [k] )\n    F1-&gt;SetAttributeObject(\"P2\",Point11  [k+1])\n    F1-&gt;SetAttributeString(\"Name\",\"Distance-\"+k)\n    F1-&gt;SetAttributeInteger(\"DimType\",3)\n    EndModifyTemplate(F1)   \n    ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\DimListL -&gt;SetItem(F1-&gt;GetAttributeObject(\"DIM\"),k)\n    DEMO2=F1-&gt;GetAttributeObject(\"DIM\")\n    DEMO2-&gt;SetAttributeString(\"Value\",\"K-\"+k+\"-\u53f7\u6881\")\n    DEMO2.Name=\"Dim-L-\"+k\n    */\nF1=CreateArcAnnotationTwoPointFeature(`Annotation\\\u73b0\u6d47\u7f1d\u5c0f\u91cc\u7a0b\u6807\u6ce8`,Point11[k],Point11[k+1],\"Distance-\"+k,\"K-\"+k+\"-\u53f7\u6881\",\"3\")\nALL_BEAMS\\RELATIONS\\KP_DRW\\KP_DRW_LABEL_POSITION\\DimListL  -&gt;SetItem(F1,k)\n}\n\n//\u5f97\u5230\u4e24\u8fb9\u6807\u6ce8\nk=1\nfor k while k&lt; l1.Size()\n{\n/*Set F1=InstantiateTemplate(\"DRW_DIM_1\",ALL_BEAMS\\RESULT\\DRW_DIM )\n    F1-&gt;SetAttributeObject(\"P1\",Point22 [k] )\n    F1-&gt;SetAttributeObject(\"P2\",Point22  [k+1])\n    F1-&gt;SetAttributeString(\"Name\",\"Distance-\"+k)\n    F1-&gt;SetAttributeInteger(\"DimType\",3)\n    EndModifyTemplate(F1)   \n    ALL_BEAMS\\RELATIONS\\KP\\KP_DRW_LABEL_POSITION\\DimList -&gt;SetItem(F1-&gt;GetAttributeObject(\"DIM\"),k)\n    DEMO2=F1-&gt;GetAttributeObject(\"DIM\")\n    DEMO2-&gt;SetAttributeString(\"Value\",\"K-\"+k+\"-\u53f7\u6881\")\n    DEMO2.Name=\"Dim-R-\"+k */\n\nF1=CreateArcAnnotationTwoPointFeature(`Annotation\\\u73b0\u6d47\u7f1d\u5927\u91cc\u7a0b\u6807\u6ce8`,Point22 [k],Point22[k+1],\"Distance-\"+k,\"K-\"+k+\"-\u53f7\u6881\",\"3\")\nALL_BEAMS\\RELATIONS\\KP_DRW\\KP_DRW_LABEL_POSITION\\DimList  -&gt;SetItem(F1,k)\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_25","title":"\u6a2a\u65ad\u9762\u56fe\u7eb8\u6a21\u677f\u7684\u751f\u6210","text":"<pre><code>let i,j(integer)\nlet p1,p2,p3,p4(point)\nlet dis1,dis2(LENGTH)\n\nlet L1,L2(list)\nL1=Point11\nL2=Point22\nlet F1,F2(Feature)\nlet gap(length)\ngap=`ALL_BEAMS\\PARAMETERS\\\u73b0\u6d47\u95f4\u8ddd`/2\ni=1\nj=1\n\np1=Point1[1]\np2=Point1[2]\nNotify(\"DIS:\",dis1)\ndis1=distance(p1,p2)\n\np3=Point2[1]\np4=Point2[2]\n\nNotify(\"DIS:\",dis2)\ndis2=distance(p3,p4)\n\nfor i while i&lt;=Point11.Size()\n{\nF1=CreateOrModifyTemplate(\"S1\" ,ALL_BEAMS\\MODEL\\DRW_SECTION_UDFS_P1  ,ALL_BEAMS\\RELATIONS\\KP_DRW\\KP_DRW_BEAM_SECTION\\BeamSectionList_1   ,i)\nF1-&gt;SetAttributeObject(\"CRV\",`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-01` )\nF1-&gt;SetAttributeObject(\"PT\", Point1.GetItem (i))    if i==1\n{\nF1-&gt;SetAttributeDimension(\"Length_L\",1975mm,\"Length\")\nF1-&gt;SetAttributeDimension(\"Length_R\",dis1/2-gap,\"Length\")\n}\nif i&gt;1 and i&lt; Point11.Size()\n{\nF1-&gt;SetAttributeDimension(\"Length_L\",dis1/2-gap,\"Length\")\nF1-&gt;SetAttributeDimension(\"Length_R\",dis1/2-gap,\"Length\")               }\nif i==Point11.Size()\n{\nF1-&gt;SetAttributeDimension(\"Length_L\",dis1/2-gap,\"Length\")\nF1-&gt;SetAttributeDimension(\"Length_R\",1975mm,\"Length\")\n}\nEndModifyTemplate(F1)\n\n\nF2=CreateOrModifyTemplate(\"S1\" ,ALL_BEAMS\\MODEL\\DRW_SECTION_UDFS_P2  ,ALL_BEAMS\\RELATIONS\\KP_DRW\\KP_DRW_BEAM_SECTION\\BeamSectionList_2   ,i)\nF2-&gt;SetAttributeObject(\"CRV\",`ALL_BEAMS\\CONSTRUCTION\\CONSTRUCTION\\CRV-02` )\nF2-&gt;SetAttributeObject(\"PT\", Point2 .GetItem (i))\n\nif i==1\n{\nF2-&gt;SetAttributeDimension(\"Length_L\",1975mm,\"Length\")\nF2-&gt;SetAttributeDimension(\"Length_R\",dis2/2-gap,\"Length\")\n}\nif i&gt;1 and i&lt; Point11.Size()\n{\nF2-&gt;SetAttributeDimension(\"Length_L\",dis2/2-gap,\"Length\")\nF2-&gt;SetAttributeDimension(\"Length_R\",dis2/2-gap,\"Length\")               }\nif i==Point11.Size()\n{\nF2-&gt;SetAttributeDimension(\"Length_L\",dis2/2-gap,\"Length\")\nF2-&gt;SetAttributeDimension(\"Length_R\",1975mm,\"Length\")\n}\nEndModifyTemplate(F2)\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%9C%9F%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/#_26","title":"\u6881\u6570\u91cf\u8ba1\u7b97\u5668","text":"<pre><code>void BrdLogical::mainLoop(double brd_width)\n{\n\nstd::cout &lt;&lt; \"\u5f00\u59cb\u8ba1\u7b97!\\n\";\n\ndouble B = 0;\ndouble maxgap = 4300;//\u6700\u5927\u6881\u8ddd\ndouble mingap = 3000;//\u6700\u5c0f\u6881\u8ddd\ndouble stdgap = 300;//\u73b0\u6d47\u6bb5\u8ddd\u79bb\ndouble stdLength = 4250;//\u6807\u51c6\u6881\u8ddd\u79bb\ndouble DS0 = 1975;//\u8fb9\u6881\u5916\u4fa7\u5bbd\ndouble guardrailwidth = 150;//\u9632\u649e\u62a4\u680f\u5916\u5305\u5bbd\ndouble beamTF = 0;//\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\ndouble NB = 0; //\u6881\u6570\uff08\u521d\u59cb\uff09\ndouble DT = 0.0;//\u4e24\u4fa7\u8fb9\u6881\u4e2d\u5fc3\u8ddd\ndouble beamdistance = 0;\ndouble beamdis3 = 0;\ndouble beamdis4_3 = 0;\ndouble beamdisTF = 0;\ndouble NB2 = 0;\ndouble DL2 = 0.0;\ndouble DL3 = 0.000;//\u6881\u8ddd\uff08\u4fee\u6b633\uff09\n\n\n\n\n//B = i*500;\nB = brd_width;\ncout &lt;&lt; \"\" &lt;&lt; endl;\ncout &lt;&lt; \"\u6865\u5bbd=\" &lt;&lt; B &lt;&lt; endl;\n\nDT = B - 2 * guardrailwidth - 2 * DS0;\ncout &lt;&lt; \"-----\u4e24\u4fa7\u8fb9\u6881\u4e2d\u5fc3\u8ddd=\" &lt;&lt; DT &lt;&lt; endl;\n\n//\u6881\u6570\u6700\u5c0f\u503c\uff08\u4f30\u7b97\uff09\uff1b\nif (int(B / maxgap) &lt; 2)\n{\nbeamdistance = 2;\n}\nelse\n{\nbeamdistance = (int(B / maxgap));\n}\ncout &lt;&lt; \"-----\u6881\u6570\u6700\u5c0f\u503c\uff08\u4f30\u7b97\uff09=\" &lt;&lt; beamdistance &lt;&lt; endl;\n\n//\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09\nif (int(B / mingap) &lt; 2)\n{\nbeamdistance = 2;\n}\nelse\n{\nbeamdistance = (int(B / mingap));\n}\ncout &lt;&lt; \"-----\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09=\" &lt;&lt; beamdistance &lt;&lt; endl;\n\n//***************************************\n//**\u6b64\u5faa\u73af\u5224\u5b9a\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\uff08\u5f88\u7a84\uff09\n//***************************************\ncout &lt;&lt; \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\uff08\u5f88\u7a84\uff09**\" &lt;&lt; endl;\n\n//\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\nif (DT &lt; stdLength)\n{\nbeamTF = 1;\n}\nelse\n{\nbeamTF = 0;\n}\ncout &lt;&lt; \"-----\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001=\" &lt;&lt; beamTF &lt;&lt; endl;\n\n//\u6881\u6570\uff08\u521d\u59cb\uff09\nNB = int(DT / stdLength);\ncout &lt;&lt; \"-----\u6881\u6570\uff08\u521d\u59cb\uff09=\" &lt;&lt; NB &lt;&lt; endl;\n\n//\u6881\u6570\uff08\u4fee\u6b631\uff09\nif (beamTF == 1)\n{\nNB = NB + 2;\n}\nelse\n{\nNB = NB + 1;\n}\ncout &lt;&lt; \"-----\u6881\u6570\uff08\u4fee\u6b631\uff09=\" &lt;&lt; NB &lt;&lt; endl;\n//\u6881\u8ddd\uff08\u4fee\u6b631\uff09\nbeamdistance = DT / (NB - 1);\ncout &lt;&lt; \"-----\u6881\u8ddd\uff08\u4fee\u6b631\uff09=\" &lt;&lt; beamdistance &lt;&lt; endl;\n\n\n//\u6881\u8ddd\u5224\u5b9a &gt;=3.0\nif (beamdistance &gt;= mingap)\n{\nbeamdis3 = 1;\n}\nelse\n{\nbeamdis3 = 0;\n}\n//**********************\n//**\u6b64\u5faa\u73af\u5224\u5b9a\u6881\u8ddd\u662f\u5426\u5408\u7406\n//**********************\ncout &lt;&lt; \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u6881\u8ddd\u662f\u5426\u5408\u7406**\" &lt;&lt; endl;\ncout &lt;&lt; \"-----\u6881\u8ddd\u5224\u5b9a &gt;=3.0=\" &lt;&lt; beamdis3 &lt;&lt; endl;\n\n//\u6881\u8ddd\u5224\u5b9a &lt;=4.3\nif (beamdistance &lt;= maxgap)\n{\nbeamdis4_3 = 1;\n}\nelse\n{\nbeamdis4_3 = 0;\n}\ncout &lt;&lt; \"-----\u6881\u8ddd\u5224\u5b9a &lt;=4.3=\" &lt;&lt; beamdis4_3 &lt;&lt; endl;\n\n//\u6881\u8ddd\u662f\u5426\u5408\u7406\nif (beamdis3 * beamdis4_3 == 1)\n{\nbeamdisTF = 1;\n}\nelse\n{\nbeamdisTF = 0;\n}\ncout &lt;&lt; \"-----\u6881\u8ddd\u662f\u5426\u5408\u7406=\" &lt;&lt; beamdisTF &lt;&lt; endl;\n\n\n//\u6881\u6570\uff08\u4fee\u6b632\uff09\nif (beamdisTF == 1)\n{\nNB2 = NB;\n\n}\nelse if (beamdis3 == 0)\n{\nif (beamdistance &lt; mingap)\n{\nNB2 = NB;\n\n}\nelse\n{\nNB2 = NB - 1;\n}\n}\nelse if (beamdis4_3 == 0)\n{\nNB2 = NB + 1;\n}\ncout &lt;&lt; \"-----\u6881\u6570\uff08\u4fee\u6b632\uff09=\" &lt;&lt; NB2 &lt;&lt; endl;\n\n//\u6881\u8ddd\uff08\u4fee\u6b632\uff09\nDL2 = DT / (NB2 - 1);\ncout &lt;&lt; \"-----\u6881\u8ddd\uff08\u4fee\u6b632\uff09=\" &lt;&lt; DL2 &lt;&lt; endl;\n\n//**********************\n//**\u6b64\u5faa\u73af\u5224\u5b9a\u8fb9\u6881\u5916\u4fa7\u5bbd\u662f\u5426\u9700\u8c03\u6574\n//**********************\n\n//\u6881\u8ddd\u5224\u5b9a &gt;= 3.0\nint beamDisCheck2_3 = 0;\nif (DL2 &gt; mingap)\n{\nbeamDisCheck2_3 = 1;\n}\nelse {\nbeamDisCheck2_3 = 0;\n}\ncout &lt;&lt; \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u8fb9\u6881\u5916\u4fa7\u5bbd\u662f\u5426\u9700\u8c03\u6574**\" &lt;&lt; endl;\ncout &lt;&lt; \"-----\u6881\u8ddd\u5224\u5b9a &gt;= 3.0=\" &lt;&lt; beamDisCheck2_3 &lt;&lt; endl;\n\n//\u6881\u8ddd\u5224\u5b9a &lt;= 4.3\nint beamDisCheck2_4_3 = 0;\nif (DL2 &lt;= maxgap)\n{\nbeamDisCheck2_4_3 = 1;\n}\nelse\n{\nbeamDisCheck2_4_3 = 0;\n}\ncout &lt;&lt; \"-----\u6881\u8ddd\u5224\u5b9a &lt;= 4.3=\" &lt;&lt; beamDisCheck2_4_3 &lt;&lt; endl;\n\n//\u6881\u8ddd\u662f\u5426\u5408\u7406\nint beamdisTF2 = 0;\nif (beamDisCheck2_3 * beamDisCheck2_4_3 == 1)\n{\nbeamdisTF2 = 1;\n}\nelse\n{\nbeamdisTF2 = 0;\n}\ncout &lt;&lt; \"-----\u6881\u8ddd\u662f\u5426\u5408\u7406=\" &lt;&lt; beamdisTF2 &lt;&lt; endl;\n\n\nif (beamDisCheck2_3 == 1)\n{\nDL3 = DL2;\n}\nelse\n{\nDL3 = B / NB2;\n}\ncout &lt;&lt; \"-----\u6881\u8ddd\uff08\u4fee\u6b633\uff09=\" &lt;&lt; DL3 &lt;&lt; endl;\n\n//\u8fb9\u6881\u5916\u4fa7\u5bbd\uff08\u4fee\u6b631\uff09\ndouble DS01 = 0;\nDS01 = (B - (2 * guardrailwidth) - (NB2 - 1) * DL3) / 2;\ncout &lt;&lt; \"-----\u8fb9\u6881\u5916\u4fa7\u5bbd\uff08\u4fee\u6b631\uff09=\" &lt;&lt; DS01 &lt;&lt; endl;\n\ncout &lt;&lt; \"\\n\" &lt;&lt; endl;\ncout &lt;&lt; \"\u8ba1\u7b97\u7ed3\u675f!\\n\" &lt;&lt; endl;\n}\n\nvoid BrdLogical::GetCount(double BW ,int &amp;A,int &amp;B )\n{\n//declare variables;\ndouble minLength = 3.000;\ndouble maxLength = 4.300;\ndouble stdLength = 4.250;\n\ndouble DT = 0.000;\ndouble DL1 = 0.000;\n\n\nMaxCount = int(BW / minLength);\nif (MaxCount &lt; 2)\n{\nMaxCount = 2;\n}\nelse\n{\nMaxCount = int(BW / minLength);\n}\nMinCount = int(BW / maxLength);\nif (MinCount &lt; 2)\n{\nMinCount = 2;\n}\nelse\n{\nMinCount = int(BW / maxLength);\n}\n\nDT = BW - (1.975 * 2 + 0.150 * 2);\ncout &lt;&lt; \"-----\u4e24\u4fa7\u8fb9\u6881\u4e2d\u5fc3\u8ddd=\" &lt;&lt; DT &lt;&lt; endl;\nif (DT &lt; stdLength)\n{\ncout &lt;&lt; \"-----\u6881\u8ddd\u4e0d\u6ee1\u8db3\u4e00\u4e2a\u6807\u51c6\u68814.25\u7c73\u7684\u8ddd\u79bb\u3002\" &lt;&lt; endl;\n//\u8ba1\u7b97\u521d\u59cb\u503c\nBcount = (DT / stdLength) + 2;\ncout &lt;&lt; \"-----\u6881\u6570\uff08\u4fee\u6b631\uff09=\" &lt;&lt; Bcount &lt;&lt; endl;\n}\nelse\n{\n//\u8ba1\u7b97\u521d\u59cb\u503c\nBcount = (DT / stdLength) + 1;\ncout &lt;&lt; \"-----\u6881\u6570\uff08\u4fee\u6b631\uff09=\" &lt;&lt; Bcount &lt;&lt; endl;\n\nDL1 = DT / (Bcount - 1);\ncout &lt;&lt; \"-----\u6881\u8dddDL1=\" &lt;&lt; DL1 &lt;&lt; endl;\n}\n\n//\u7ea0\u6b63\nif (DL1 &lt; minLength)\n{\nBcount = (DT / stdLength) + 2;\n}\nelse if (DL1 &gt; minLength &amp;&amp; DL1 &lt;= maxLength)\n{\nBcount = (DT / stdLength) + 1;\n}\nelse if (DL1 &gt;= maxLength)\n{\nBcount = Bcount + 1;\n}\ncout &lt;&lt; \"-----\u6881\u6570\uff08\u4fee\u6b632\uff09=\" &lt;&lt; Bcount &lt;&lt; endl;\nA = Bcount;\n//\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09\u7684 \u6881\u8ddd\ndouble MaxBeamLength = 0;\nMaxBeamLength = DT / (MaxCount - 1);\ncout &lt;&lt; \"-----\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09\u7684 \u6881\u8ddd = \" &lt;&lt; MaxBeamLength &lt;&lt; endl;\n\n//\u6881\u6570\u6700\u5927\u503c\uff08\u53d6\u7528 \u8bd5\u7b971\uff09\ndouble MaxBeamCount = 0;\nif (MaxBeamLength&gt;minLength &amp;&amp; MaxBeamLength&lt;=maxLength)\n{\nMaxBeamCount = MaxCount;// (DT / stdLength) + 2;\n//cout &lt;&lt; \"-----\u6881\u6570\u6700\u5927\u503c[if (MaxBeamLength&lt;minLength)]\uff08\u53d6\u7528 \u8bd5\u7b971\uff09=\" &lt;&lt; MaxBeamCount &lt;&lt; endl;\n} else if(MaxCount-1&gt;= Bcount)\n{\nMaxBeamCount = MaxCount-1;\n//cout &lt;&lt; \"-----\u6881\u6570\u6700\u5927\u503c[(MaxCount-1&gt;= Bcount)]\uff08\u53d6\u7528 \u8bd5\u7b971\uff09=\" &lt;&lt; MaxBeamCount &lt;&lt; endl;\n}\nelse {\nMaxBeamCount = Bcount;\n//cout &lt;&lt; \"-----\u6881\u6570\u6700\u5927\u503c[else]\uff08\u53d6\u7528 \u8bd5\u7b971\uff09=\" &lt;&lt; MaxBeamCount &lt;&lt; endl;\n}\ncout &lt;&lt; \"-----\u6881\u6570\u6700\u5927\u503c\uff08\u53d6\u7528 \u8bd5\u7b971\uff09=\" &lt;&lt; MaxBeamCount &lt;&lt; endl;\nB = MaxBeamCount;\n\n}\n\nvoid BrdLogical::Compare(double P1Length, double P2Length, int&amp; oCount)\n{\nBrdLogical aa;\n// P1\nint CountA = 0;\nint CountB = 0;\naa.GetCount(P1Length, CountA, CountB);\ncout &lt;&lt; \"-----\u6700\u7ec8P1\uff1a=\" &lt;&lt; \"\u6865\u5bbd\uff1a\" &lt;&lt; P1Length &lt;&lt; \"_\" &lt;&lt; \"A:\" &lt;&lt; CountA &lt;&lt; \"_\" &lt;&lt; \"B:\" &lt;&lt; CountB &lt;&lt; endl;\n// P2\nint Counta = 0;\nint Countb = 0;\naa.GetCount(P2Length, Counta, Countb);\ncout &lt;&lt; \"-----\u6700\u7ec8P2\uff1a=\" &lt;&lt; \"\u6865\u5bbd\uff1a\" &lt;&lt; P2Length &lt;&lt; \"_\" &lt;&lt; \"A:\" &lt;&lt; Counta &lt;&lt; \"_\" &lt;&lt; \"B:\" &lt;&lt; Countb &lt;&lt; endl;\n//----------------------------------------------------------------------\n//\u4ea4\u96c6\u7684\u7c7b\u578b 1\uff08\u5c0f\u91cc\u7a0b\u6700\u5c0f\u6881\u6570&lt;\u5927\u91cc\u7a0b\u6700\u5c0f\u6881\u6570\uff09\nint type1 = 0;\nif (CountA &lt; Counta &amp;&amp; CountB &gt;= Counta)\n{\ntype1 = 1;\n} else\n{\ntype1 = 0;\n}\ncout &lt;&lt; \"-----\u4ea4\u96c6\u7684\u7c7b\u578b 1\uff08\u5c0f\u91cc\u7a0b\u6700\u5c0f\u6881\u6570&lt;\u5927\u91cc\u7a0b\u6700\u5c0f\u6881\u6570\uff09\uff1a\" &lt;&lt; type1 &lt;&lt; endl;\n//\u4ea4\u96c6\u7684\u7c7b\u578b 2\uff08\u5c0f\u91cc\u7a0b\u6700\u5c0f\u6881\u6570&gt;=\u5927\u91cc\u7a0b\u6700\u5c0f\u6881\u6570\uff09\nint type2 = 0;\nif (CountA &gt;= Counta &amp;&amp; CountA &gt;= Countb)\n{\ntype2 = 1;\n}\nelse\n{\ntype2 = 0;\n}\ncout &lt;&lt; \"-----\u4ea4\u96c6\u7684\u7c7b\u578b 2\uff08\u5c0f\u91cc\u7a0b\u6700\u5c0f\u6881\u6570&gt;=\u5927\u91cc\u7a0b\u6700\u5c0f\u6881\u6570\uff09\uff1a\" &lt;&lt; type2 &lt;&lt; endl;\n//----------------------------------------------------------------------\n//\u6881\u6570 \u662f\u5426\u6709\u4ea4\u96c6\nint beamintbool = 0;\nif (type1==0 &amp;&amp; type2==0)\n{\nbeamintbool = 0;\n}\nelse\n{\nbeamintbool = 1;\n}\ncout &lt;&lt; \"-----\u6881\u6570 \u662f\u5426\u6709\u4ea4\u96c6\uff1a\" &lt;&lt; beamintbool &lt;&lt; endl;\n//----------------------------------------------------------------------\n//\u5982\u6709\u4ea4\u96c6 \u6881\u6570\uff08\u53d6\u516c\u6709\u6570\u7684\u6700\u5c0f\u503c\uff09\n\nint beamGetMin = 0;\n\nif (type1==1)\n{\nbeamGetMin = Counta;\n} else\n{\nif (type1==0)\n{\nbeamGetMin = CountA;\n}\n}\ncout &lt;&lt; \"-----\u6881\u6570 \u5982\u6709\u4ea4\u96c6 \u6881\u6570\uff08\u53d6\u516c\u6709\u6570\u7684\u6700\u5c0f\u503c\uff09\uff1a\" &lt;&lt; beamGetMin &lt;&lt; endl;\n\n// \u5982\u65e0\u4ea4\u96c6 \u6881\u6570\uff08\u53d6\u56db\u4e2a\u6570\u4e2d\uff0c\u7b2c\u4e8c\u5927\u7684\u90a3\u4e2a\u6570\uff09\u63a8\u8350\nint noInterVal = 0;\nif (beamintbool==0)\n{\nif (CountA&lt;Counta)\n{\nnoInterVal = Counta;\n} else\n{\nnoInterVal = CountA;\n}\n} else\n{\nnoInterVal = beamGetMin;\ncout &lt;&lt; \"-----\u6881\u6570  \u67e5\u770b\u6709\u4ea4\u96c6\u89e3\uff1a\" &lt;&lt; noInterVal &lt;&lt; endl;\n}\n\ncout &lt;&lt; \"-----\u6881\u6570  \u5982\u65e0\u4ea4\u96c6 \u6881\u6570\uff08\u53d6\u56db\u4e2a\u6570\u4e2d\uff0c\u7b2c\u4e8c\u5927\u7684\u90a3\u4e2a\u6570\uff09\u63a8\u8350\uff1a\" &lt;&lt; noInterVal &lt;&lt; endl;\n\n//noInterVal \u4e3a\u6700\u7ec8\u89e3\n\n//----------------------------------------------------------------------\n//\u5982\u65e0\u4ea4\u96c6 \u9700\u4fee\u6539\u6865\u5bbd\u7684\u4e00\u4fa7\n//----------------------------------------------------------------------\nint NoBeamCheck = 0;\nif (beamintbool==0)\n{\nif (CountA&lt; Counta)\n{\ncout &lt;&lt; \"-----\u6881\u6570  \u8c03\u8282\u5c0f\u91cc\u7a0b\u4fa7 \" &lt;&lt; endl;\n}\nelse\n{\ncout &lt;&lt; \"-----\u6881\u6570  \u8c03\u8282\u5927\u91cc\u7a0b\u4fa7 \" &lt;&lt; endl;\n}\n} else\n{\nNoBeamCheck = noInterVal;\ncout &lt;&lt; \"-----\u6881\u6570  \u67e5\u770b\u6709\u4ea4\u96c6\u89e3 \" &lt;&lt; endl;\n}\n\n//----------------------------------------------------------------------\n//  \u5982\u65e0\u4ea4\u96c6 \u9700\u4fee\u6539\u6865\u5bbd\u7684\u4e00\u4fa7 \u6865\u5bbd\u63a8\u8350\n//----------------------------------------------------------------------\n\nint beamFixVal = 0;\nif (beamintbool == 1)\n{\ncout &lt;&lt; \"-----\u6881\u6570  \u67e5\u770b\u6709\u4ea4\u96c6\u89e3 \" &lt;&lt; endl;\n}\nelse\n{\n\ncout &lt;&lt; \"-----\u6881\u6570  \u6865\u5bbd\u63a8\u8350 \" &lt;&lt; endl;\n}\n\n//\u4ee5\u4e0b\u4e3a\u5176\u4ed6\u7b97\u6cd5\u8ba1\u7b97\u7ed3\u679c\uff0c\u53ef\u4ee5\u53c2\u8003\uff0c\u53ef\u4ee5\u5220\u9664\uff1b\n\n//----------------------------------------------------------------------\nint sresult = 0;\nif (type1==1)\n{\nsresult = Counta;\n} else if ( type2==1)\n{\nsresult = CountA;\n}\nelse if (beamintbool ==1)\n{\nif (CountA&lt;Counta)\n{\nsresult = Counta;\n} else if(CountA&gt;Counta)\n{\nsresult = CountA;\n}\n} else if (beamintbool == 0)\n{\nif (CountA&lt;Counta)\n{\nsresult = Counta;\n} else if(CountA &gt; Counta)\n{\nsresult = CountA;\n}\n}\nelse\n{\n\n////----------------------------------------------------------------------\nvector&lt;int&gt;dArr;\ndArr.push_back(CountA);\ndArr.push_back(CountB);\ndArr.push_back(Counta);\ndArr.push_back(Countb);\nint icoutt = GetSmallNumber(dArr);\ncout &lt;&lt; \"\u6700\u7ec8\u6881\u5f97\u6570\u91cf\u4e3a:\" &lt;&lt; icoutt &lt;&lt; endl;\n//////----------------------------------------------------------------------\noCount = icoutt;\n}\n\noCount = sresult;\n\n\n\n////----------------------------------------------------------------------\n//vector&lt;int&gt;dArr;\n//dArr.push_back(CountA);\n//dArr.push_back(CountB);\n//dArr.push_back(Counta);\n//dArr.push_back(Countb);\n//int icoutt = GetSmallNumber(dArr);\n//cout &lt;&lt; \"\u6700\u7ec8\u6881\u5f97\u6570\u91cf\u4e3a:\" &lt;&lt; icoutt &lt;&lt; endl;\n//////----------------------------------------------------------------------\n//oCount = icoutt;\n\n\n//----------------------------------------------------------------------\n\n\n}\n\nvoid BrdLogical::run()\n{\n\nstd::cout &lt;&lt; \"\u5f00\u59cb\u8ba1\u7b97!\\n\";\n\ndouble B = 0;\ndouble maxgap = 4300;//\u6700\u5927\u6881\u8ddd\ndouble mingap = 3000;//\u6700\u5c0f\u6881\u8ddd\ndouble stdgap = 300;//\u73b0\u6d47\u6bb5\u8ddd\u79bb\ndouble stdLength = 4250;//\u6807\u51c6\u6881\u8ddd\u79bb\ndouble DS0 = 1975;//\u8fb9\u6881\u5916\u4fa7\u5bbd\ndouble guardrailwidth = 150;//\u9632\u649e\u62a4\u680f\u5916\u5305\u5bbd\ndouble beamTF = 0;//\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\ndouble NB = 0; //\u6881\u6570\uff08\u521d\u59cb\uff09\ndouble DT = 0.0;//\u4e24\u4fa7\u8fb9\u6881\u4e2d\u5fc3\u8ddd\ndouble beamCount = 0;\ndouble beamdis3 = 0;\ndouble beamdis4_3 = 0;\ndouble beamdisTF = 0;\ndouble NB2 = 0;\ndouble DL2 = 0.0;\ndouble DL3 = 0.000;//\u6881\u8ddd\uff08\u4fee\u6b633\uff09\n\n\n\nfor (int i = 0; i &lt; 150; i++)\n{\nB = i * 500;\n\n\ncout &lt;&lt; \"\" &lt;&lt; endl;\ncout &lt;&lt; \"\u6865\u5bbd=\" &lt;&lt; B &lt;&lt; endl;\n\nDT = B - 2 * guardrailwidth - 2 * DS0;\ncout &lt;&lt; \"-----\u4e24\u4fa7\u8fb9\u6881\u4e2d\u5fc3\u8ddd=\" &lt;&lt; DT &lt;&lt; endl;\n\n//\u6881\u6570\u6700\u5c0f\u503c\uff08\u4f30\u7b97\uff09\uff1b\nif (int(B / maxgap) &lt; 2)\n{\nbeamCount = 2;\n}\nelse\n{\nbeamCount = (int(B / maxgap));\n}\ncout &lt;&lt; \"-----\u6881\u6570\u6700\u5c0f\u503c\uff08\u4f30\u7b97\uff09=\" &lt;&lt; beamCount &lt;&lt; endl;\n\n//\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09\nif (int(B / mingap) &lt; 2)\n{\nbeamCount = 2;\n}\nelse\n{\nbeamCount = (int(B / mingap));\n}\ncout &lt;&lt; \"-----\u6881\u6570\u6700\u5927\u503c\uff08\u4f30\u7b97\uff09=\" &lt;&lt; beamCount &lt;&lt; endl;\n\n//***************************************\n//**\u6b64\u5faa\u73af\u5224\u5b9a\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\uff08\u5f88\u7a84\uff09\n//***************************************\ncout &lt;&lt; \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\uff08\u5f88\u7a84\uff09**\" &lt;&lt; endl;\n\n//\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001\nif (DT &lt; stdLength)\n{\nbeamTF = 1;\n}\nelse\n{\nbeamTF = 0;\n}\ncout &lt;&lt; \"-----\u662f\u5426\u5904\u4e8e\u5c11\u6881\u72b6\u6001 =\" &lt;&lt; beamTF &lt;&lt; endl;\n\n//\u6881\u6570\uff08\u521d\u59cb\uff09\nNB = int(DT / stdLength);\ncout &lt;&lt; \"-----\u6881\u6570\uff08\u521d\u59cb\uff09=\" &lt;&lt; NB &lt;&lt; endl;\n\n//\u6881\u6570\uff08\u4fee\u6b631\uff09\nif (beamTF == 1)\n{\nNB = NB + 2;\n}\nelse\n{\nNB = NB + 1;\n}\ncout &lt;&lt; \"-----\u6881\u6570\uff08\u4fee\u6b631\uff09=\" &lt;&lt; NB &lt;&lt; endl;\n//\u6881\u8ddd\uff08\u4fee\u6b631\uff09\nbeamCount = DT / (NB - 1);\ncout &lt;&lt; \"-----\u6881\u8ddd\uff08\u4fee\u6b631\uff09=\" &lt;&lt; beamCount &lt;&lt; endl;\n\n\n//\u6881\u8ddd\u5224\u5b9a &gt;=3.0\nif (beamCount &gt;= mingap)\n{\nbeamdis3 = 1;\n}\nelse\n{\nbeamdis3 = 0;\n}\n//**********************\n//**\u6b64\u5faa\u73af\u5224\u5b9a\u6881\u8ddd\u662f\u5426\u5408\u7406\n//**********************\ncout &lt;&lt; \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u6881\u8ddd\u662f\u5426\u5408\u7406**\" &lt;&lt; endl;\ncout &lt;&lt; \"-----\u6881\u8ddd\u5224\u5b9a &gt;=3.0=\" &lt;&lt; beamdis3 &lt;&lt; endl;\n\n//\u6881\u8ddd\u5224\u5b9a &lt;=4.3\nif (beamCount &lt;= maxgap)\n{\nbeamdis4_3 = 1;\n}\nelse\n{\nbeamdis4_3 = 0;\n}\ncout &lt;&lt; \"-----\u6881\u8ddd\u5224\u5b9a &lt;=4.3=\" &lt;&lt; beamdis4_3 &lt;&lt; endl;\n\n//\u6881\u8ddd\u662f\u5426\u5408\u7406\nif (beamdis3 * beamdis4_3 == 1)\n{\nbeamdisTF = 1;\n}\nelse\n{\nbeamdisTF = 0;\n}\ncout &lt;&lt; \"-----\u6881\u8ddd\u662f\u5426\u5408\u7406=\" &lt;&lt; beamdisTF &lt;&lt; endl;\n\n\n//\u6881\u6570\uff08\u4fee\u6b632\uff09\nif (beamdisTF == 1)\n{\nNB2 = NB;\n\n}\nelse if (beamdis3 == 0)\n{\nif (beamCount &lt; mingap)\n{\nNB2 = NB;\n\n}\nelse\n{\nNB2 = NB - 1;\n}\n}\nelse if (beamdis4_3 == 0)\n{\nNB2 = NB + 1;\n}\ncout &lt;&lt; \"-----\u6881\u6570\uff08\u4fee\u6b632\uff09=\" &lt;&lt; NB2 &lt;&lt; endl;\n\n\n//\u6881\u8ddd\uff08\u4fee\u6b632\uff09\nDL2 = DT / (NB2 - 1);\ncout &lt;&lt; \"-----\u6881\u8ddd\uff08\u4fee\u6b632\uff09=\" &lt;&lt; DL2 &lt;&lt; endl;\n\n//**********************\n//**\u6b64\u5faa\u73af\u5224\u5b9a\u8fb9\u6881\u5916\u4fa7\u5bbd\u662f\u5426\u9700\u8c03\u6574\n//**********************\n\n//\u6881\u8ddd\u5224\u5b9a &gt;= 3.0\nint beamDisCheck2_3 = 0;\nif (DL2 &gt; mingap)\n{\nbeamDisCheck2_3 = 1;\n}\nelse {\nbeamDisCheck2_3 = 0;\n}\ncout &lt;&lt; \"-----**\u6b64\u5faa\u73af\u5224\u5b9a\u8fb9\u6881\u5916\u4fa7\u5bbd\u662f\u5426\u9700\u8c03\u6574**\" &lt;&lt; endl;\ncout &lt;&lt; \"-----\u6881\u8ddd\u5224\u5b9a &gt;= 3.0=\" &lt;&lt; beamDisCheck2_3 &lt;&lt; endl;\n\n//\u6881\u8ddd\u5224\u5b9a &lt;= 4.3\nint beamDisCheck2_4_3 = 0;\nif (DL2 &lt;= maxgap)\n{\nbeamDisCheck2_4_3 = 1;\n}\nelse\n{\nbeamDisCheck2_4_3 = 0;\n}\ncout &lt;&lt; \"-----\u6881\u8ddd\u5224\u5b9a &lt;= 4.3=\" &lt;&lt; beamDisCheck2_4_3 &lt;&lt; endl;\n\n//\u6881\u8ddd\u662f\u5426\u5408\u7406\nint beamdisTF2 = 0;\nif (beamDisCheck2_3 * beamDisCheck2_4_3 == 1)\n{\nbeamdisTF2 = 1;\n}\nelse\n{\nbeamdisTF2 = 0;\n}\ncout &lt;&lt; \"-----\u6881\u8ddd\u662f\u5426\u5408\u7406=\" &lt;&lt; beamdisTF2 &lt;&lt; endl;\n\n\nif (beamDisCheck2_3 == 1)\n{\nDL3 = DL2;\n}\nelse\n{\nDL3 = B / NB2;\n}\ncout &lt;&lt; \"-----\u6881\u8ddd\uff08\u4fee\u6b633\uff09=\" &lt;&lt; DL3 &lt;&lt; endl;\n\n//\u8fb9\u6881\u5916\u4fa7\u5bbd\uff08\u4fee\u6b631\uff09\ndouble DS01 = 0;\nDS01 = (B - (2 * guardrailwidth) - (NB2 - 1) * DL3) / 2;\ncout &lt;&lt; \"-----\u8fb9\u6881\u5916\u4fa7\u5bbd\uff08\u4fee\u6b631\uff09=\" &lt;&lt; DS01 &lt;&lt; endl;\n\n\n//\u6881\u6570\u6700\u5c0f\u503c\uff08\u4f30\u7b97\uff09\u7684 \u6881\u8ddd\n\n\n\n}\n\n\n//cout &lt;&lt; \"_groupMaxCount \u6570\u7ec4\u7684\u6570\u91cf\u662f\uff1a\" &lt;&lt; _groupMaxCount.Size() &lt;&lt; endl;\n//cout &lt;&lt; \"_groupMinCount \u6570\u7ec4\u7684\u6570\u91cf\u662f\uff1a\" &lt;&lt; _groupMinCount.Size() &lt;&lt; endl;\n\n\n\n\n\n\n\n\ncout &lt;&lt; \"\\n\" &lt;&lt; endl;\ncout &lt;&lt; \"\u8ba1\u7b97\u7ed3\u675f!\\n\" &lt;&lt; endl;\n\n}\n\nbool BrdLogical::sortFun(const int&amp; p1, const int&amp; p2)\n{\nreturn p1 &lt; p2;\n}\n\nint BrdLogical::GetSmallNumber(vector&lt;int&gt; dArr)\n{\nvector&lt;int&gt; dArrVec;\nfor (int i = 0; i &lt; dArr.size(); i++)\n{\nint dOne = dArr[i];\nfor (int j = i + 1; j &lt; dArr.size(); j++)\n{\nif (dOne == dArr[j])\n{\ndArrVec.push_back(dOne);\ncout &lt;&lt; \"ONE:\" &lt;&lt; dOne &lt;&lt; endl;\n}\n}\n}\n\nsort(dArrVec.begin(), dArrVec.end(), sortFun);\nif (dArrVec.size() &lt;= 0)\n{\nreturn 0;\n}\ncout &lt;&lt; dArrVec[0] &lt;&lt; endl;\nreturn dArrVec[0];\n}\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E5%9F%BA%E4%BA%8E3DEXPERIENCE%E5%B0%8F%E7%AE%B1%E6%A2%81%E5%8F%AA%E8%83%BD%E5%BB%BA%E6%A8%A1%E7%A0%94%E7%A9%B6/","title":"\u57fa\u4e8e3DEXPERIENCE\u5c0f\u7bb1\u6881\u53ea\u80fd\u5efa\u6a21\u7814\u7a76","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E5%9F%BA%E4%BA%8E3DEXPERIENCE%E5%B0%8F%E7%AE%B1%E6%A2%81%E5%8F%AA%E8%83%BD%E5%BB%BA%E6%A8%A1%E7%A0%94%E7%A9%B6/#3dexperience","title":"\u57fa\u4e8e3DEXPERIENCE\u5c0f\u7bb1\u6881\u53ea\u80fd\u5efa\u6a21\u7814\u7a76","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E5%9F%BA%E4%BA%8E3DEXPERIENCE%E5%B0%8F%E7%AE%B1%E6%A2%81%E5%8F%AA%E8%83%BD%E5%BB%BA%E6%A8%A1%E7%A0%94%E7%A9%B6/#3dexperience_1","title":"\u57fa\u4e8e3DEXPERIENCE\u5c0f\u7bb1\u6881\u53ea\u80fd\u5efa\u6a21\u7814\u7a76","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/%E5%9F%BA%E4%BA%8E3DEXPERIENCE%E5%B0%8F%E7%AE%B1%E6%A2%81%E5%8F%AA%E8%83%BD%E5%BB%BA%E6%A8%A1%E7%A0%94%E7%A9%B6/#_1","title":"\u9876\u90e8\u94a2\u7b4b\u521b\u5efa\u65b9\u6cd5","text":"<pre><code>    \u8fde\u7eed\u6881\u4e2d\u8de8\u6881 A.1\n\u5835\u5934\u677f\u4e2d\u5fc3\u8ddd\u4e2d\u58a9\u5206\u5b54\u7ebf\u987a\u6865\u5411\u957f_625mm\n\u4e2d\u652f\u70b9\u6a2a\u6881\u73b0\u6d47\u6bb5\u7eb5\u6865\u5411\u957f(\u9876\u7f18)_406mm\n\u5835\u5934\u677f\u539a_80mm\n\u4e2d\u652f\u70b9\u6a2a\u6881\u539a/2_350mm\n\u4e2d\u652f\u70b9\u6a2a\u6881\u9ad8[\u5916\u90e8]_1380mm\n\u6881\u9ad8_1600mm\n\u9884\u5236\u6881\u5728\u4e2d\u652f\u70b9\u6a2a\u6881\u73b0\u6d47\u6bb5\u5916\u51f8\u7684\u7ad6\u5411\u9ad8_1200mm\n\u4e2d\u652f\u70b9\u6a2a\u6881\u73b0\u6d47\u6bb5\u7eb5\u6865\u5411\u957f(\u5e95\u7f18)_425mm\n\u5e95\u677f\u548c\u8179\u677f\u52a0\u539a\u6bb5\u987a\u6865\u5411\u957f_825mm\n\u5e95\u677f\u548c\u8179\u677f\u53d8\u539a\u6bb5\u987a\u6865\u5411\u957f_4000mm\n\u8de8\u5f84(\u5206\u5b54\u7ebf\u4e4b\u95f4\u7684\u51c0\u8ddd)/2_31473.384mm\n\u8de8\u4e2d\u9694\u677f\u539a/2_150mm\n\u8de8\u4e2d\u9694\u677f\u9ad8_1380mm\n\u4e2d\u6881\u9884\u5236\u603b\u5bbd_3276mm\n\u4e2d\u6881\u9884\u5236\u56fa\u5b9a\u533a\u5bbd\u5ea6_2676mm\n\u9876\u677f\u5916\u627f\u6258\u6c34\u5e73\u5411\u957f_250mm\n\u9876\u677f\u5916\u4fa7\u539a_200mm\n\u9876\u677f\u627f\u6258\u7ad6\u5411\u9ad8_50mm\n\u9876\u677f\u5185\u627f\u6258\u6c34\u5e73\u5411\u957f_180mm\n\u9876\u677f\u5185\u4fa7\u539a_200mm\n\u8179\u677f\u52a0\u539a_320mm\n\u5e95\u677f\u52a0\u539a_300mm\n\u5e95\u677f\u8fb9\u7f18\u5012\u89d2\u534a\u5f84_50mm\n\u8179\u677f\u539a_190mm\n\u5e95\u677f\u539a_200mm\n\u5e95\u677f\u603b\u5bbd_1500mm\n\u652f\u70b9\u6a2a\u6881\u53ca\u9694\u677f\u4eba\u5b54\u4e2d\u5fc3\u81f3\u5e95\u677f\u5e95\u7f18\u9ad8_800mm\n\u652f\u70b9\u6a2a\u6881\u53ca\u9694\u677f\u4eba\u5b54\u76f4\u5f84_700mm\nDIM_1_L_1000mm\nDIM_1_R_1000mm\nDIM_2_L_1000mm\nDIM_2_R_1000mm\n\u4e2d\u652f\u70b9\u9884\u5e94\u529b\u5f2f\u8d77\u89d2\u5ea6_5deg\nSIDEBEAM_LEFT_CHECK_1\nSIDEBEAM_RIGHT_CHECK_1\n\u5e95\u677f\u6cc4\u6c34\u5b54\u76f4\u5f84_80mm\n\u8fb9\u652f\u5ea7\u578b\u53f7_GYZF4-375X77\n\u4e2d\u652f\u5ea7\u578b\u53f7_GYZ-375X77\n\u8fb9\u652f\u5ea7\u4e2a\u6570_2\n\u4e2d\u652f\u5ea7\u4e2a\u6570_2\n\u5c0f\u7bb1\u6881\u65bd\u5de5\u65b9\u6cd5_\u9884\u5236\n\u5c0f\u7bb1\u6881\u6df7\u51dd\u571f\u6750\u6599_C50\n\u9884\u5236\u6df7\u51dd\u571f\u4f53\u79ef_56.747m3\n\u73b0\u6d47\u6df7\u51dd\u571f\u4f53\u79ef_0m3\n\u6df7\u51dd\u571f\u603b\u4f53\u79ef_56.747m3\n\u94a2\u7b4b\u603b\u91cd\u91cf_0kg\n\u94a2\u7ede\u7ebf\u603b\u91cd\u91cf_0kg\n\u6df7\u51dd\u571f\u4f53\u79ef-C15_0m3\n\u6df7\u51dd\u571f\u4f53\u79ef-C20_0m3\n\u6df7\u51dd\u571f\u4f53\u79ef-C25_0m3\n\u6df7\u51dd\u571f\u4f53\u79ef-C30_0m3\n\u6df7\u51dd\u571f\u4f53\u79ef-C35_0m3\n\u6df7\u51dd\u571f\u4f53\u79ef-C40_0m3\n\u6df7\u51dd\u571f\u4f53\u79ef-C45_0m3\n\u6df7\u51dd\u571f\u4f53\u79ef-C50_0m3\n\u6df7\u51dd\u571f\u4f53\u79ef-C55_0m3\n\u6df7\u51dd\u571f\u4f53\u79ef-C60_0m3\n\u6df7\u51dd\u571f\u4f53\u79ef-C65_0m3\n\u6df7\u51dd\u571f\u4f53\u79ef-C70_0m3\n\u6df7\u51dd\u571f\u4f53\u79ef-C80_0m3\n\n```cs\n\n\n\n```cs\n\nLet A(AxisSystem)\nLet pt,pt1(Point)\nLet li1,li2,li3(Line )\nLet pl(Plane)\nLet ptlist,oplist(List)\nLet i,j(Integer)\nLet mybox(openBodyFeature)\nLet L(LENGTH)\nLet na(String)\nlet shapeContainingPoint(PartFeature)\nshapeContainingPoint = GetPLMOwner(My_Curve)\noplist=shapeContainingPoint.Children\nset na=My_Curve.Name\nset mybox=new(\"openBodyFeature\",na+\"_\u5b9a\u4f4d\u8f74\u7cfb\",oplist[1])\nset pl=plane(point(0mm,0mm,0mm),point(1mm,0mm,0mm),point(0mm,1mm,0mm))\nL=length(My_Curve)\nj=floor(L/D)\ni=1\nfor i while i&lt;=j\n{\nset pt=pointoncurve(My_Curve,NULL,D*i,true)\nset pt1=project(pt,pl,direction(pl))\nset li1=linetangent(My_Curve,pt,0mm,20mm,true)\nset li2=project(li1,pl,direction(pl))\nset li3=lineangle(li2,pl,pt1,true,20mm,0mm,90deg,true)\nA=new(\"AxisSystem\",\"\u8f74\u7cfb_\"+i,mybox)\nA=axisSystem(pt,direction(li2),direction(li3),direction(pl))\n}\nshapeContainingPoint.Update()\n</code></pre> <pre><code>\u8fde\u7eed\u6881\u6574\u4f53\u5b9e\u4f8b\u5316\u903b\u8f91\u4ee3\u7801\n//BeamProduct:ProductOccurrence,PierProduct:ProductOccurrence,AXIS_LIST:list,ROAD_CENTER:Curve,ROAD_PLANER:Curve,EXECL:String\n/* Action created by 86156 2019/6/5 */\nlet i(integer)\nlet F1,F2(DocumentTemplate)\nlet destination1,destination2(ProductOccurrence)\ndestination1=BeamProduct\ndestination2=PierProduct\nlet axisList(list)\naxisList=AXIS_LIST\nlet xlsheet(DTSheetType)\nlet xls(string)\nxls=EXCEL\nset xlsheet=CreateSheet(xls)\nlet nb (Integer)\nnb = xlsheet.RowsNb\nNotify(\"\u4e2a\u6570:\",nb)\n//\u58f0\u660e\u5168\u5c40\u53d8\u91cf\nlet L1length(length)\nlet R1length(length)\nlet L2length(length)\nlet R2length(length)\nlet PierHeight(length)\nlet BeamCount(integer)\nlet GapStr(string)\nlet DirStr(string)\n// *****************************\n// ProgressBar creation\n// *****************************\nCreateProgressBar(\"ProgressBar Name\")\ni=1\nfor i while i &lt;=axisList.Size ()\n{\nProgressBarSetValue(100*i/axisList.Size())\nProgressBarSetText(\" \uff1a\u5df2\u5b8c\u6210 \u5171\" + floor(axisList.Size()))\n//\u6570\u636e\u5904\u7406\n//\u83b7\u5f97\u6881\u6570\nset BeamCount= xlsheet-&gt;CellAsReal(5+i,32)\nNotify(\"\u6881\u6570\u91cf\uff1a\",BeamCount)\nif (i&gt;1)\n{\n//\u83b7\u5f97\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6\nL1length=xlsheet-&gt;CellAsReal((5+(i-1)),24)*1m\nNotif\ny(\"\u5c0f\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\",L1length)\n//\u83b7\u5f97\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\nR1length=xlsheet-&gt;CellAsReal((5+(i-1)),25)*1m\nNotif\ny(\"\u5c0f\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\",R1length)\n//\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6\nL2length=xlsheet-&gt;CellAsReal(5+i,24)*1m\nNotif\ny(\"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\",L2length)\n//\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\nR2length=xlsheet-&gt;CellAsReal(5+i,25)*1m\nNotif\ny(\"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\",R2length)\n//\u83b7\u5f97\u8fb9\u8de8\nGapStr=xlsheet-&gt;CellAsString((5+(i-1)),33)\nNotif\ny(\"\u83b7\u5f97\u8fb9\u8de8:\",GapStr)\n//\u83b7\u5f97\u4f4d\u7f6e\u8bbe\u5b9a\nDirStr=xlsheet-&gt;CellAsString((5+(i-1)),34)\nNotif\ny(\"\u4f4d\u7f6e\u8bbe\u5b9a:\",DirStr)\n//\u5b9e\u4f8b\u5316\u4e0a\u90e8\u6865\u6881\nF1=InstantiateTemplate(\"Re1\",destination1.Instance)\nF1-&gt;SetA\nttributeObject(\"P1\",axisList.GetItem (i-1))\nF1-&gt;SetA\nttributeObject(\"P2\",axisList.GetItem (i))\nF1-&gt;SetA\nttributeObject(\"ROAD_CENTER\",ROAD_CENTER )\nF1-&gt;SetAttributeObject(\"ROAD_PLANER\",ROAD_PLANER)\n//\u4fee\u6b63\u6570\u636e\nF1-&gt;SetAttributeDimension(\"P1_LW\",L1length,\"LENGTH\")\nF1-&gt;SetAttributeDimension(\"P1_RW\",R1length,\"LENGTH\")\nF1-&gt;SetAttributeDimension(\"P2_LW\",L2length,\"LENGTH\")\nF1-&gt;SetAttributeDimension(\"P2_RW\",R2length,\"LENGTH\")\nF1-&gt;SetAttributeInteger(\"BEAM_COUNT\",BeamCount)\nF1-&gt;SetAttributeString(\"GapCheck\",GapStr)\nF1-&gt;SetAttributeString(\"DirCheck\",DirStr)\n//F1-&gt;SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) )\nEndModifyTemplate(F1)\n}\nif (i&gt;1) and (i&lt;axisList.Size())\n{\n//\u83b7\u5f97\u6865\u58a9\u9ad8\u5ea6\nPierHeight=xlsheet-&gt;CellAsReal(5+i,27)*1m\nNotify(\"PierHeight:\",PierHeight)\n//\u83b7\u5f97\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6\nL2length=xlsheet-&gt;CellAsReal(5+i,24)*1m\nNotify(\"\u5927\u91cc\u7a0b\u5de6\u4fa7\u5bbd\u5ea6:\",L2length)\n//\u83b7\u5f97\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6\nR2length=xlsheet-&gt;CellAsReal(5+i,25)*1m\nNotify(\"\u5927\u91cc\u7a0b\u53f3\u4fa7\u5bbd\u5ea6:\",R2length)\n//\u5b9e\u4f8b\u5316\u4e0b\u90e8\u6865\u58a9\nF2=InstantiateTemplate(\"P2\",destination2.Instance)\nF2-&gt;SetAttributeObject(\"AXIS\",axisList.GetItem (i))\n//\u4fee\u6b63\u6570\u636e\nF2-&gt;SetAttributeDimension(\"PIER_HEIGHT\",PierHeight,\"LENGTH\")\nF2-&gt;SetAttributeDimension(\"WIDTH_L\",L2length-824mm,\"LENGTH\")\nF2-&gt;SetAttributeDimension(\"WIDTH_R\",R2length-824mm,\"LENGTH\")\n//F2-&gt;SetAttributeString(\"\u8de8\u53f7\" , \"\u8de8\u53f7-\"+ToString(i) )\nEndModifyTemplate(F2)\n}\n}\n</code></pre> <pre><code>\u603b\u4f53\u6570\u636e\u7684\u5bfc\u51fa\n\u5728\u603b\u4f53Excel\u8868\u4e2d\u8f93\u51fa\u6570\u636e\uff1a\n\u2022 \u76d6\u6881\u4e2d\u90e8\u9876\u6807\u9ad8\n\u2022 \u5728\u6a21\u677f\u4e2d\u7684EXPORT_DIM\u4e2d\uff0c\u83b7\u53d6 \u7b2c\u4e00\u5143\u7d20\uff081\uff09\uff0c\u6d4b\u91cf\u8f93\u5165\u5e73\u9762\u4e0e\u8be5\u70b9\u7684\u8ddd\n\u79bb\uff0c\u5199\u5165Excel\u7684Ceil(7,57)\u5217\uff1b\n\u2022 \u58a9\u9876\u6807\u9ad8\n\u2022 \u5728\u6a21\u677f\u4e2d\u7684EXPORT_DIM\u4e2d\uff0c\u83b7\u53d6 \u7b2c2\u5143\u7d20\uff082\uff09\uff0c\u6d4b\u91cf\u8f93\u5165\u5e73\u9762\u4e0e\u8be5\u70b9\u7684\u8ddd\n\u79bb\uff0c\u5199\u5165Excel\u7684Ceil(7,58)\u5217\uff1b\n\u2022 \u58a9\u9ad8\n\u2022 \u5728\u6a21\u677f\u4e2d\u7684EXPORT_DIM\u4e2d\uff0c\u83b7\u53d6 \u7b2c2,3\u5143\u7d20\uff082,3\uff09\uff0c\u6d4b\u91cf\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u8ddd\n\u79bb\uff0c\u5199\u5165Excel\u7684Ceil(7,59)\u5217\uff1b\n\u2022 \u627f\u53f0\u9876\u90e8\u6807\u9ad8\n\u2022 \u5728\u6a21\u677f\u4e2d\u7684EXPORT_DIM\u4e2d\uff0c\u83b7\u53d6 \u7b2c3\u5143\u7d20\uff083\uff09\uff0c\u6d4b\u91cf\u8f93\u5165\u5e73\u9762\u4e0e\u8be5\u70b9\u7684\u8ddd\n\u79bb\uff0c\u5199\u5165Excel\u7684Ceil(7,60)\u5217\uff1b\n\u2022 \u627f\u53f0\u539a\n\u2022 \u5728\u6a21\u677f\u4e2d\u7684EXPORT_DIM\u4e2d\uff0c\u83b7\u53d6 \u7b2c3\uff0c4\u5143\u7d20\uff083\uff0c4\uff09\uff0c\u6d4b\u91cf\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\n\u7684\u8ddd\u79bb\uff0c\u5199\u5165Excel\u7684Ceil(7,61)\u5217\uff1b\n\u2022 \u6869\u9876\u6807\u9ad8\n\u2022 \u5728\u6a21\u677f\u4e2d\u7684EXPORT_DIM\u4e2d\uff0c\u83b7\u53d6 \u7b2c4\u5143\u7d20\uff084\uff09\uff0c\u6d4b\u91cf\u8f93\u5165\u5e73\u9762\u4e0e\u8be5\u5143\u7d20\u7684\n\u8ddd\u79bb\uff0c\u5199\u5165Excel\u7684Ceil(7,62)\u5217\uff1b\n\u2022\n\u2022 \u6869\u5e95\u6807\u9ad8\n\u2022 \u5728\u6a21\u677f\u4e2d\u7684EXPORT_DIM\u4e2d\uff0c\u83b7\u53d6 \u7b2c5\u5143\u7d20\uff085\uff09\uff0c\u6d4b\u91cf\u8f93\u5165\u5e73\u9762\u4e0e\u8be5\u5143\u7d20\u7684\n\u8ddd\u79bb\uff0c\u5199\u5165Excel\u7684Ceil(7,63)\u5217\uff1b\n</code></pre> <pre><code>    Location : VPMReference,myplane : Plane\n--------------------------\n/* \u5de5\u4f5c\u6307\u4ee4 \u521b\u5efa\u8005 liudi 2020/7/12 */ //\u96f7\u533alet i,j,k(Integer )\nlet myshape,mypart(VPMInstance)\nlet shapepoint,shapepoint1(PartFeature )\nlet shapelist,partlist,boxlist,boxlist1,pointlist,planelist(let DT(DTSheetType )\nlet myname,sheetname,boxname,ptname(String )\nlet box,onebox(OpenBodyFeature )\nlet pt,pt1,pt2,pt3(Point)\nlet L,x1,x2,x3,y1,y2,y3,z1,z2,z3(LENGTH )\nlet F(Feature)\nlet pla(Plane)\nshapepoint=GetPLMOwner(myplane)\nshapepoint1 = shapepoint.Find(\"PartFeature\", \"\", true)\nSetWorkingContext(shapepoint1 )\nonebox=new(\"OpenBodyFeature\" ,\"000\",shapepoint1)\npt1=new(\"Point\",\"1\",onebox)\npt1=pointonplane(myplane,point(0m,0m,0m),1m,10m)\npt2=new(\"Point\",\"2\",onebox)\npt2=pointonplane(myplane,point(0m,0m,0m),42m,35m)\npt3=new(\"Point\",\"3\",onebox)\npt3=pointonplane(myplane,point(0m,0m,0m),25m,18m)\nshapepoint1.Update ()\nx1=pt1.coord (1)\ny1=pt1.coord (2)\nz1=pt1.coord (3)\nx2=pt2.coord (1)\ny2=pt2.coord (2)\nz2=pt2.coord (3)\nx3=pt3.coord (1)\ny3=pt3.coord (2)\nz3=pt3.coord (3)\nonebox.Delete ()\nset DT=CreateSheet(\"*The file path*\\output_point_dis.sheetname=\"\u8ddd\u79bb\"\npartlist=Location.Query(\"VPMInstance\",NULL)\nshapelist=Location.Query(\"PartFeature\",NULL)\ni=1\nfor i while i&lt;=partlist.Size ()\n{\nmypart=partlist[i]\nmyname=mypart.Name\nDT-&gt;SetCell(2*i-1,1,myname)\nDT-&gt;SetCell(2*i,1,sheetname)\nmyshape=shapelist[i]\nboxlist=myshape.Children\nboxlist1=boxlist.Filter(\"OpenBodyFeature\",\"OpenBodyFeature\",\"x.Name == \\\"EXPORT_DIM\\\"\")\n\nif boxlist1.Size ()==0\n{\nbreak\n}\nelse\n{\nSetWorkingContext(myshape box=boxlist1[1]\npla=new(\"Plane\",\"000\",box)\npla=plane(point(x1,y1,z1),point(pointlist=box-&gt;Query (\"Point\",k=pointlist.Size ()\nj=1\nfor j while j&lt;=k\n{\npt=pointlist[j]\nptname=pt.Name DT-&gt;SetCell(2*i-L=distance(pt,pla)\nDT-&gt;SetCell(2*i,j+j=j+1\n}\npla.Delete ()\n}\ni=i+1\n}\n//\u533a\u6bd4\u8f83\u591a\uff0c\u505a\u7684\u8f83\u590d\u6742\nplanelist(List)\ntrue)\nshapepoint1)\n10m)\n35m)\n18m)\ndis.xlsx\")\n\nmyshape )\npoint(x2,y2,z2),point(x3,y3,z3))\nPoint\",NULL)\nName ()\ni-1,j+1,ptname)\npla)\nj+1,L)\n</code></pre>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/","title":"\u5c0f\u7bb1\u6881\u7684\u81ea\u52a8\u5220\u9664","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/#automatic-deletion-of-small-box-beams","title":"Automatic deletion of small box beams","text":"<p>\u7531\u4e8e\u5728\u505a\u5c0f\u7bb1\u6881\u6a21\u578b\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u8ba1\u7b97\u6bcf\u8de8\u7bb1\u6881\u7684\u4e2a\u6570\uff0c\u8fd9\u4e2a\u662fKP\u81ea\u52a8\u8ba1\u7b97\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6d4b\u91cf\u4f53\u79ef\u7684\u51c6\u786e\u6027\uff0c\u6bcf\u4e2a\u7bb1\u6881\u90fd\u5728\u81ea\u5df1\u7684Body\u4e2d\uff0c\u4e3a\u4e86\u589e\u5f3a\u6a21\u677f\u7684\u6027\u80fd\uff0c\u66f4\u65b0\u6881\u6570\u5220\u9664\u65e7\u7684\u5143\u7d20\uff0cEKL\u7a33\u5b9a\u6027\u4f1a\u5dee\u4e00\u4e9b\uff0c\u53ef\u4ee5\u5728KP\u4e2d\u5d4c\u5957VB\u811a\u672c\u5b9e\u73b0\u81ea\u52a8\u5220\u9664\u4e0e\u81ea\u52a8\u751f\u6210\u3002</p> <ol> <li> <p>\u5728\u4e3b\u6846\u67b6\u7ed3\u6784\u6811\u4e2d\u65b0\u589eVBAction\uff1b </p> </li> <li> <p>\u5199\u4e0a\u51fd\u6570\uff0c\u53c2\u6570\u4e3a\u4e00\u4e2a\u6709\u5e8f\u51e0\u4f55\u56fe\u5f62\u96c6\uff0c\u548c\u751f\u6210\u7684\u4e2a\u6570\u3002 \u8fd9\u4e2a\u51fd\u6570\u4e3b\u8981\u7684\u529f\u80fd\u662f\u4e00\u4e2a\u96c6\u5408\u56fe\u5f62\u96c6\u5185\u6240\u6709\u7684Body\uff0c\u5e76\u4e14\u65b0\u5efa\u540c\u6837\u591a\u6570\u91cf\u7684\u3002\u8d77\u5230\u4e00\u4e2a\u66f4\u65b0\u7684\u4f5c\u7528\u3002</p> </li> <li>\u5185\u90e8\u4ee3\u7801 </li> </ol> <pre><code>Main (hb1,icount)\n</code></pre> <pre><code>If hb1.Bodies.Count &lt;&gt; 0 Then\n    CATIA.ActiveEditor.Selection.Clear\n    For k = 1 To hb1.Bodies.Count\n        Dim hb0obj As Body\n        Set hb0obj = hb1.Bodies.Item(k)\n                CATIA.ActiveEditor.Selection.Add hb0obj      \n    Next\n    CATIA.ActiveEditor.Selection.Delete\nEnd If\n\n\nDim i as integer\nFor i = 1 To icount\n    Dim hb2 As Body\n    Set hb2 = hb1.Bodies.Add\n    hb2.Name = \"BEAM_\" + CStr(i)\nNext\nEnd Sub\n</code></pre> <p>\u5728\u751f\u6210\u6881\u7684KP\u4e2d\uff0c\u63d0\u524d\u8fd0\u884c\u4e00\u4e0b\u8fd9\u4e2aVB\u51fd\u6570\uff0c\u5b83\u4f1a\u5220\u9664\u65e7\u7684\uff0c\u5e76\u4e14\u521b\u5efa\u65b0\u7684Body\u3002</p> <p></p> <p>\u6700\u540e\u68c0\u7d22Body\u4f4d\u7f6e\u7684\u7236\u7ea7\uff0c\u904d\u5386\u5f97\u5230\u65b0\u7684Body\u7684list\u3002</p> <p></p> <p>\u8fd9\u6837KP\u6267\u884c\u4e86\u5220\u9664\u4e86\u65e7\u7684Body,\u548c\u521b\u5efa\u65b0\u7684Body\u4e24\u4e2a\u8fc7\u7a0b\uff0c\u5e76\u4e14\u5c06\u65b0\u7684Body\u52a0\u5165\u5217\u8868\u4e2d\uff0c\u4e3a\u540e\u7eed\u7684UDF\u7684\u653e\u7f6e\u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u7ed3\u6784\u6811\u89c4\u8303\u5982\u4e0b\u3002</p> <p></p>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/","title":"\u57fa\u4e8e\u8fbe\u7d22\u7cfb\u7edf\u5e73\u53f0\u7684\u6865\u6881\u5feb\u901f\u8bbe\u8ba1(SUCDRI)","text":"<p>\u4f5c\u8005\uff1a\u80e1\u65b9\u5065\u3001\u738b\u5229\u5f3a\u3001\u5218\u8fea\u3001\u7530\u826f</p> <p></p>"},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#1","title":"1.\u6458\u8981","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#2","title":"2.\u5f15\u8a00","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#3","title":"3. \u6280\u672f\u8def\u7ebf","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#31","title":"3.1\u53c2\u6570\u5316\u6a21\u578b","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#32","title":"3.2\u8bbe\u8ba1\u6570\u636e\u540c\u6b65","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#4","title":"4.\u56fe\u7eb8\u751f\u6210","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#5","title":"5.\u9879\u76ee\u5e94\u7528","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#6","title":"6.\u7ed3\u8bed","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#7","title":"7.\u4f5c\u8005\u7b80\u4ecb","text":""},{"location":"ISE-AEC/BRD-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%A0%94%E5%8F%91/SUCDRI-%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%A5%E6%A2%81%E5%BF%AB%E9%80%9F%E8%AE%BE%E8%AE%A1/#8","title":"8.\u611f\u8c22\u8bed","text":"<p>\u8fbe\u7d22\u7cfb\u7edf\u611f\u8c22\u4e0a\u6d77\u57ce\u5efa\u9662\u6295\u7a3f\u4eba\u80e1\u65b9\u5065\u5148\u751f\u548c\u8fbe\u8d62\u4fe1\u606f\u5408\u4f5c\u4f19\u4f34\u738b\u5229\u5f3a\u5148\u751f\u3001\u5218\u8fea\u5148\u751f\u3001\u7530\u826f\u5148\u751f\u8d21\u732e\u7684\u9ad8\u8d28\u91cf\u6587\u7ae0\uff0c\u8fbe\u667a\u6c47\u4e09\u91cd\u798f\u5229\u5c06\u5373\u65f6\u5949\u4e0a\u3002\u79ef\u6c99\u6210\u6ee9\uff0c\u79ef\u6d41\u6210\u6e0a\u3002\u8fbe\u7d22\u7cfb\u7edf\u5c06\u5168\u5e74\u6301\u7eed\u9762\u5411\u57fa\u7840\u8bbe\u65bd\u884c\u4e1a\u5e7f\u53ec\u82f1\u96c4\u5e16\uff0c\u5f81\u96c63DEXPERIENCE\u5e73\u53f0\u4f18\u79c0\u884c\u4e1a\u6587\u7ae0\uff0c\u5171\u540c\u6253\u9020\u884c\u4e1a\u77e5\u8bc6\u5171\u4eab\u3001\u7ecf\u9a8c\u4ea4\u6d41\u7684\u65b0\u751f\u6001\uff0c\u52a9\u529b\u6570\u5b57\u5316\u8f6c\u578b\u3002</p>"},{"location":"ISE-AEC/BRD-%E6%A1%A5%E6%A2%81%E7%A0%94%E5%8F%91/TSY/","title":"\u94a2\u6841\u6881\u6865\u667a\u6167\u8bbe\u8ba1\u5efa\u8bbe\u65b9\u6848 (TSY)","text":"<p>\u6839\u636e\u94c1\u5efa\u8fd0\u7ba1\u7f51\u30102022\u301188\u53f7\u6587\u7684\u8981\u6c42\u5236\u5b9a\u672c\u5efa\u8bbe\u65b9\u6848\u3002 \u672c\u7740\u6280\u672f\u6210\u719f\u53ef\u9760\uff0c\u6210\u679c\u53ef\u5b9e\u73b0\u3001\u53ef\u6838\u67e5\u3001\u53ef\u63a8\u5e7f\u3001\u53ef\u5ef6\u7533\u3001\u7ec8\u70b9\u805a\u7126\u8bbe\u8ba1\uff0c\u8003\u8651\u884c\u4e1a\u5168\u8fc7\u7a0b\u7684\u7406\u5ff5\u5236\u5b9a\u672c\u5efa\u8bbe\u65b9\u6848\u3002</p>"},{"location":"ISE-AEC/BRD-%E6%A1%A5%E6%A2%81%E7%A0%94%E5%8F%91/TSY/#_1","title":"\u4e00\u3001   \u6982\u8ff0","text":"<p>\u7ed3\u5408\u67d0\u9879\u76ee\u7684\u94a2\u6841\u659c\u62c9\u6865\u65bd\u5de5\u56fe\u8bbe\u8ba1\uff0c\u5f00\u5c55\u94a2\u6841\u6881\u7684\u4e09\u7ef4\u8bbe\u8ba1\u3002\u9996\u5148\u9488\u5bf9\u5de5\u70b9\u8bbe\u8ba1\uff0c\u5229\u7528\u4e09\u7ef4\u53c2\u6570\u9a71\u52a8\u6280\u672f\u548c\u77e5\u8bc6\u5de5\u7a0b\u6280\u672f\uff0c\u6784\u5efa\u94a2\u6841\u6881\u7684\u4e09\u7ef4\u8bbe\u8ba1\u7cfb\u7edf\uff0c\u5b8c\u6210\u5de5\u70b9\u6865\u7684\u4e09\u7ef4\u53c2\u6570\u9a71\u52a8\u6a21\u578b\uff0c\u5b9e\u73b0\u4e09\u7ef4\u8bbe\u8ba1\u6a21\u578b\u7684\u6570\u5b57\u4ea4\u4ed8\u80fd\u529b\u3002\u65b9\u6848\u5b9e\u73b0\u540e\uff0c\u80fd\u591f\u79ef\u7d2f\u8d77\u4e00\u5957\u94a2\u6841\u6881\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u5e93\u548c\u8f85\u52a9\u8bbe\u8ba1\u5e94\u7528\u7a0b\u5e8f\uff0c\u5f62\u6210\u4e00\u4e2a\u7a33\u5b9a\u53ef\u9760\u7684\u6570\u5b57\u5316\u94a2\u6841\u6881\u4e09\u7ef4\u8bbe\u8ba1\u7cfb\u7edf\u548c\u4e00\u5957\u64cd\u4f5c\u6d41\u7a0b\uff0c\u5e76\u5177\u5907\u63a8\u5e7f\u5230\u5176\u4ed6\u8bbe\u8ba1\u9879\u76ee\u4e2d\u7684\u80fd\u529b\u3002</p> <p> \u4e09\u7ef4\u53c2\u6570\u9a71\u52a8\u6a21\u578b\u548c\u77e5\u8bc6\u5de5\u7a0b\u4ee3\u7801</p>"},{"location":"ISE-AEC/BRD-%E6%A1%A5%E6%A2%81%E7%A0%94%E5%8F%91/TSY/#_2","title":"\u4e8c\u3001   \u76ee\u6807","text":"<p>1\u3001  \u5efa\u7acb\u4e00\u5957\u94a2\u6841\u6881\u4e09\u7ef4\u53c2\u6570\u9a71\u52a8\u6a21\u578b\u7684\u8bbe\u8ba1\u7cfb\u7edf\u3002 \u8fd9\u5305\u62ec\u4e00\u5957\u9488\u5bf9\u94a2\u6841\u6881\u7684\u96f6\u4ef6\u5e93\uff0c\u4e00\u5957\u6587\u6863\u6a21\u677f\u5e93\uff0c\u4e00\u4e2a\u914d\u5957\u7684\u8f85\u52a9\u8bbe\u8ba1\u8f6f\u4ef6\u3002\u94a2\u6841\u6881\u96f6\u4ef6\u4e3b\u8981\u5305\u62ec\uff0c\u6574\u4f53\u8282\u70b9\u677f\u3001\u94a2\u677f\u3001\u6a2a\u9694\u677f\u3001\u677f\u578b\u52a0\u52b2\u808b\u3001U\u5f62\u52a0\u52b2\u808b\u3001\u6a2a\u6881\u3001\u4e0e\u52a0\u52b2\u808b\u76f8\u5bf9\u7684\u8fc7\u710a\u5b54\u7b49\u3002 \u6587\u6863\u6a21\u677f\uff08\u4ea7\u54c1\u7ea7\u7684\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\uff09\u5305\u62ec\u4e0e\u96f6\u4ef6\u5bf9\u5e94\u7684\u6a21\u677f\u548c\u5b50\u7ed3\u6784\u7684\u6a21\u677f\u3002\u5b50\u7ed3\u6784\u6a21\u677f\u4e3b\u8981\u5305\u62ec\u6574\u4f53\u8282\u70b9\u6a21\u677f\uff0cH\u5f62\u6746\u4ef6\u6a21\u677f\u3001\u7bb1\u578b\u6746\u4ef6\u6a21\u677f\u3001\u6865\u9762\u6a2a\u6881\u6a21\u677f\u7b49\u3002 \u8f85\u52a9\u8bbe\u8ba1\u8f6f\u4ef6\u9488\u5bf9\u53c2\u6570\u9a71\u52a8\u6a21\u578b\u7684\u7279\u70b9\u63d0\u4f9b\u66f4\u4e3a\u7cfb\u7edf\u7684\u53c2\u6570\u8c03\u6574\u529f\u80fd\uff0c\u914d\u4ee5\u76f4\u89c2\u7684\u793a\u610f\u56fe\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u53c2\u6570\u7684\u542b\u4e49\uff0c\u8fbe\u5230\u4e00\u5904\u4fee\u6539\u5173\u8054\u66f4\u65b0\u7684\u6548\u679c\u3002</p> <p> \u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u5b9e\u4f8b\u5316</p> <p>2\u3001  \u4e09\u7ef4\u53ef\u89c6\u5316\u4ea4\u5e95\u3002 \u5bf9\u590d\u6742\u7ed3\u6784\u5236\u4f5c\u62c6\u89e3\u56fe\uff0c\u5c55\u793a\u6784\u9020\u7ec6\u8282\u548c\u6784\u4ef6\u95f4\u5173\u7cfb\u3002\u5236\u4f5c\u590d\u6742\u5b50\u7ed3\u6784\u7684\u62fc\u88c5\u52a8\u753b\uff0c\u6f14\u793a\u7ed3\u6784\u7684\u88c5\u914d\u8fc7\u7a0b\u3002</p> <p> Composer\u4e2d\u7bb1\u578b\u6746\u4ef6\u7684\u5c55\u793a\u56fe</p> <p>3\u3001  \u8bbe\u8ba1\u6210\u679c\u6570\u5b57\u4ea4\u4ed8\u3002 \u6574\u4f53\u6a21\u578b\u548c\u6784\u4ef6\u6a21\u578b\u4ee5\u901a\u7528\u7684\u683c\u5f0f\u5bfc\u51fa\uff0c\u63d0\u4f9b\u7ed9\u65bd\u5de5\u4f01\u4e1a\u548c\u94a2\u7ed3\u6784\u52a0\u5de5\u4f01\u4e1a\uff0c\u4ee5\u4fbf\u540e\u7eed\u73af\u8282\u7684\u65bd\u5de5\u6a21\u62df\u548c\u6570\u5b57\u5316\u52a0\u5de5\u3002</p>"},{"location":"ISE-AEC/BRD-%E6%A1%A5%E6%A2%81%E7%A0%94%E5%8F%91/TSY/#_3","title":"\u4e09\u3001   \u6280\u672f\u8def\u7ebf","text":"<p>1\u3001  \u5efa\u6a21\u5de5\u5177 \u8fbe\u7d22 3DEXPERIENCE\u4f53\u9a8c\u5e73\u53f0\uff08R2021x\uff09\u4e0b\u7684CATIA\uff0c\u4e3b\u8981\u5e94\u7528\u6a21\u5757\u5305\u62ecCIENC\u3001CIDEC\u3001TEO\u3001FRST0\u3001SDV\u3002</p> <p>2\u3001  \u4e09\u7ef4\u5c55\u793a\u5de5\u5177 \u8fbe\u7d22 CATIA Composer R2021</p> <p>3\u3001  \u8f6f\u4ef6\u5f00\u53d1\u5de5\u5177 Microsoft Visual Studio 2019</p> <p>4\u3001  \u6280\u672f\u8def\u7ebf</p> <p>1)  \u7ed3\u5408\u81ea\u9876\u5411\u4e0b\u548c\u81ea\u5e95\u5411\u4e0a\u7684\u5efa\u6a21\u65b9\u6cd5\u5efa\u7acb\u6a21\u578b \u81ea\u9876\u5411\u4e0b\u5efa\u6a21\u3002\u5bf9\u6841\u67b6\u5355\u5143\uff0c\u5148\u5efa\u7acb\u6841\u6881\u5de5\u4f5c\u7ebf\u4f5c\u4e3a\u6a21\u578b\u9aa8\u67b6\uff0c\u5728\u9aa8\u67b6\u7684\u57fa\u7840\u4e0a\u88c5\u914d\u6841\u67b6\u6784\u4ef6\u3002</p> <p> \u81ea\u9876\u5411\u4e0b\u5efa\u6a21\u2014\u2014\u9aa8\u67b6\u548c\u6784\u4ef6</p> <p>\u81ea\u5e95\u5411\u4e0a\u5efa\u6a21\u3002\u5bf9\u5c40\u90e8\u5b50\u7ed3\u6784\uff0c\u5148\u5efa\u7acb\u5404\u4e2a\u96f6\u4ef6\u6a21\u578b\uff0c\u7136\u540e\u518d\u5c06\u96f6\u4ef6\u88c5\u914d\u6210\u6784\u4ef6\u3002</p> <p> \u81ea\u5e95\u5411\u4e0a\u5efa\u6a21\u2014\u2014\u96f6\u4ef6\u88c5\u914d\u4e3a\u6784\u4ef6</p> <p>2)  \u6784\u5efa\u4e09\u4e2a\u590d\u6742\u7ea7\u522b\u7684\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u4ee5\u53d6\u5f97\u4e09\u4e2a\u7ea7\u522b\u7684\u7075\u6d3b\u6027\u548c\u6548\u7387\u5e73\u8861 \u5728\u6700\u5e95\u5c42\uff0c\u5148\u5236\u4f5c\u5e38\u7528\u96f6\u4ef6\u7684\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u3002\u7531\u4e8e\u662f\u5355\u4e2a\u96f6\u4ef6\u7684\u6a21\u677f\uff0c\u53ef\u4e0e\u5176\u4ed6\u96f6\u4ef6\u7ec4\u5408\u53ef\u4ee5\u88c5\u914d\u51fa\u5404\u79cd\u7ed3\u6784\uff0c\u5e94\u7528\u8303\u56f4\u5e7f\uff0c\u7075\u6d3b\u6027\u6700\u9ad8\uff0c\u4f46\u901a\u8fc7\u5355\u4e2a\u96f6\u4ef6\u7ec4\u88c5\u6210\u5b8c\u6574\u6a21\u578b\uff0c\u5de5\u4f5c\u4f1a\u5f88\u7410\u788e\uff0c\u6548\u7387\u6700\u4f4e\u3002 \u7b2c\u4e8c\u5c42\u5c06\u96f6\u4ef6\u88c5\u914d\u6210\u7ed3\u6784\u6784\u4ef6\uff0c\u518d\u5236\u4f5c\u6784\u4ef6\u7684\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u3002\u8fd9\u4e2a\u7ea7\u522b\u7684\u6a21\u677f\u5728\u5e94\u7528\u8fc7\u7a0b\u4e2d\u76f8\u8f83\u4e8e\u5355\u96f6\u4ef6\u6a21\u677f\u6548\u7387\u63d0\u9ad8\uff0c\u4f46\u53ea\u80fd\u751f\u6210\u7279\u70b9\u6784\u4ef6\u7684\u6a21\u578b\uff0c\u7075\u6d3b\u6027\u964d\u4f4e\u3002 \u6700\u9ad8\u5c42\u5c06\u6784\u4ef6\u88c5\u914d\u6210\u6841\u67b6\u5355\u5143\uff0c\u7136\u540e\u5236\u4f5c\u6841\u67b6\u5355\u5143\u7684\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u3002\u8fd9\u7c7b\u6a21\u677f\u4f7f\u7528\u65f6\u53ef\u4ee5\u4e00\u6b21\u751f\u6210\u591a\u4e2a\u7ed3\u6784\u6784\u4ef6\uff0c\u6548\u7387\u6700\u9ad8\uff0c\u4f46\u53ea\u80fd\u751f\u6210\u7279\u5b9a\u6841\u67b6\u5355\u5143\u7684\u6a21\u578b\uff0c\u7075\u6d3b\u6027\u8fdb\u4e00\u6b65\u964d\u4f4e\u3002</p> <p>5\u3001  \u5176\u4ed6\u65b9\u9762</p> <p>1)  \u4e09\u7ef4\u6a21\u578b\u7684\u4e8c\u7ef4\u51fa\u56fe\u3002</p> <p>\u5728\u638c\u63e1\u57fa\u672c\u7684\u4e8c\u7ef4\u51fa\u56fe\u65b9\u5f0f\u7684\u57fa\u7840\u4e0a\uff0c\u7814\u7a76\u66f4\u4e3a\u76f4\u89c2\u7684\u6807\u6ce8\u65b9\u5f0f\u6807\u6ce8\u5c3a\u5bf8\uff0c\u6bd4\u5982\u66f4\u591a\u5730\u7528\u8f74\u6d4b\u56fe\u505a\u4e09\u7ef4\u6807\u6ce8\u3002</p> <p> \u4e09\u7ef4\u6a21\u578b\u5230\u4e8c\u7ef4\u51fa\u56fe</p> <p>2)  \u6784\u4ef6\u7684\u4e09\u7ef4\u5c55\u793a</p> <p>\u7531\u4e8eComposer\u548cCATIA\u90fd\u662f\u8fbe\u7d22\u7684\u4ea7\u54c1\uff0cCATIA\u4e2d\u7684\u6a21\u578b\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\u5230Composer\u4e2d\u7528\u4e8e\u4e09\u7ef4\u5c55\u793a\u3002\u7528Composer\u505a\u4e09\u7ef4\u5c55\u793a\u7684\u65b9\u5f0f\u6709\u6784\u4ef6\u7684\u7206\u70b8\u89c6\u56fe\u3001\u4ea7\u54c1\u7684\u6280\u672f\u56fe\u89e3\u4ee5\u53ca\u6784\u4ef6\u7684\u62c6\u89e3\u6216\u88c5\u914d\u52a8\u753b\u7b49\u3002\u5fc5\u987b\u901a\u8fc7\u5b66\u4e60\u548c\u53cd\u590d\u5b9e\u8df5\uff0c\u624d\u80fd\u719f\u7ec3\u638c\u63e1Composer\u7684\u4f7f\u7528\u65b9\u6cd5\u548c\u6280\u5de7\u3002\u5728\u6b64\u57fa\u7840\u4e4b\u4e0a\u65b9\u80fd\u6839\u636e\u6784\u4ef6\u7684\u7279\u70b9\u9009\u62e9\u5408\u9002\u7684\u5c55\u793a\u65b9\u5f0f\uff0c\u8f85\u4ee5\u827a\u672f\u5316\u7684\u8868\u73b0\u624b\u6cd5\uff0c\u7a81\u7834\u4f20\u7edf\u4e8c\u7ef4\u56fe\u7eb8\u7684\u9650\u5236\uff0c\u8fbe\u5230\u6e05\u6670\u76f4\u89c2\u5730\u4f20\u9012\u8bbe\u8ba1\u601d\u60f3\u7684\u76ee\u7684\u3002</p> <p> \u4e0b\u5f26\u8282\u70b9\u6280\u672f\u56fe\u89e3\u548c\u6750\u6599\u8868</p>"},{"location":"ISE-AEC/BRD-%E6%A1%A5%E6%A2%81%E7%A0%94%E5%8F%91/TSY/#_4","title":"\u56db\u3001   \u8ba1\u5212\u5b89\u6392","text":"<p>2022\u5e749\u670830\u65e5\uff0c\u5b8c\u6210\u6784\u4ef6\u5e93\u548c\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u7684\u5236\u4f5c\u3002</p> <p>2022\u5e7412\u670831\u65e5\uff0c\u7ed3\u5408\u9879\u76ee\u8bbe\u8ba1\u8fdb\u5ea6\u5b8c\u6210\u6865\u6881\u6a21\u578b\u7684\u5efa\u7acb\uff1b\u4ee3\u8868\u6027\u6784\u4ef6\u548c\u4ea7\u54c1\u7684\u4e8c\u7ef4\u56fe\u7eb8\uff1b\u4ee3\u8868\u6027\u6784\u4ef6\u7684\u4e09\u7ef4\u5c55\u793a\uff08\u53ef\u89c6\u5316\u4ea4\u5e95\uff09\u3002</p> <p>2023\u5e743\u670830\u65e5\uff0c\u5b8c\u6210\u8f85\u52a9\u8bbe\u8ba1\u8f6f\u4ef6\u7684\u5f00\u53d1\u3002</p> <p>2023\u5e743\u6708\u4e4b\u540e\uff0c\u5728\u5176\u4ed6\u9879\u76ee\u4e2d\u4f7f\u7528\u7cfb\u7edf\uff1b\u7ed3\u5408\u5176\u4ed6\u9879\u76ee\u590d\u5236\u5f53\u524d\u9879\u76ee\u7684\u7ecf\u9a8c\u548c\u505a\u6cd5\uff0c\u5f00\u53d1\u9488\u5bf9\u65b0\u7ed3\u6784\u7684\u65b0\u7cfb\u7edf\u3002</p>"},{"location":"ISE-AEC/BRD-%E6%A1%A5%E6%A2%81%E7%A0%94%E5%8F%91/TSY/#_5","title":"\u4e94\u3001   \u6210\u679c","text":"<p>\u4e00\u4e2a\u94a2\u6841\u659c\u62c9\u6865\u7684\u4e09\u7ef4\u6570\u5b57\u6a21\u578b\uff08LOD350\uff09</p> <p>\u4e00\u5957\u53ef\u7528\u4e8e\u673a\u52a0\u5de5\u7684\u94a2\u6841\u67b6\u96f6\u4ef6\u6a21\u578b\uff08LOD350~LOD400\uff09</p> <p>\u4e00\u5957\u94a2\u6841\u6881\u96f6\u4ef6\u5e93\u3002</p> <p>\u4e00\u5957\u94a2\u6841\u6881\u77e5\u8bc6\u5de5\u7a0b\u6a21\u677f\u5e93\u3002</p> <p>\u4e00\u4e2a\u8f85\u52a9\u6784\u5efa\u94a2\u6841\u6881\u6a21\u578b\u7684\u4e13\u7528\u7a0b\u5e8f\u3002</p> <p> \u94a2\u6841\u6881\u96f6\u4ef6\u5e93</p> <p> \u94a2\u6841\u6881\u6587\u6863\u6a21\u677f\u5e93</p> <p></p> <p>\u94a2\u6841\u6881\u8f85\u52a9\u8bbe\u8ba1\u8f6f\u4ef6\uff08\u539f\u578b\u7a0b\u5e8f\uff09</p>"},{"location":"ISE-AEC/BRD-%E6%A1%A5%E6%A2%81%E7%A0%94%E5%8F%91/TSY/#_6","title":"\u516d\u3001   \u8fdc\u671f\u76ee\u6807","text":"<p>\u76ee\u524d\u4f5c\u4e3a\u4e00\u4e9b\u8bbe\u60f3\uff0c\u6709\uff1a</p> <p>1\u3001  \u6a21\u62df\uff0c\u5728\u4e09\u7ef4\u6a21\u578b\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6570\u5b57\u5316\u6a21\u62df\u88c5\u914d\uff0c\u4ee5\u9a8c\u8bc1\u8bbe\u8ba1\u65b9\u6848\u548c\u65bd\u5de5\u65b9\u6848\u7684\u53ef\u884c\u6027\u3002</p> <p>2\u3001  \u4ea7\u54c1\u4f18\u5316\u7684\u53ef\u89c6\u5316\uff0c\u5229\u75283DEXPERIENCE\u5e73\u53f0\u4e0a\u7684TEO\u6a21\u5757\u5728\u53c2\u6570\u5316\u6a21\u578b\u57fa\u7840\u4e0a\u505a\u7279\u5b9a\u53c2\u6570\u7684\u4f18\u5316\u3002</p> <p>3\u3001  \u4e0e\u94a2\u7ed3\u6784\u8ba1\u7b97\u8f6f\u4ef6\u8fde\u63a5\uff0c\u63d0\u53d6\u6a21\u578b\u4e2d\u7684\u6784\u5efa\u53c2\u6570\u8f93\u5165\u94a2\u7ed3\u6784\u8ba1\u7b97\u8f6f\u4ef6\u4e2d\u8fdb\u884c\u7ed3\u6784\u68c0\u7b97</p> <p> CATIA\u4ea7\u54c1\u4f18\u5316\u529f\u80fd</p> <p>  \u57fa\u4e8e\u6d4f\u89c8\u5668\u7684\u94a2\u7ed3\u6784\u6784\u4ef6\u68c0\u7b97\u8f6f\u4ef6</p>"},{"location":"ISE-AEC/BRD-%E9%92%A2%E6%A2%81%E6%89%B9%E9%87%8F%E5%BB%BA%E6%A8%A1%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6/doc/","title":"\u94a2\u6881\u6279\u91cf\u5efa\u6a21\u65b9\u6cd5\u7814\u7a76","text":""},{"location":"ISE-AEC/BRIDGE-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/","title":"\u5c0f\u7bb1\u6881\u7684\u81ea\u52a8\u5220\u9664","text":""},{"location":"ISE-AEC/BRIDGE-%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/%E5%B0%8F%E7%AE%B1%E6%A2%81%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4/#automatic-delete-box-beams","title":"Automatic delete box beams","text":"<p>\u7531\u4e8e\u5728\u505a\u5c0f\u7bb1\u6881\u6a21\u578b\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u8ba1\u7b97\u6bcf\u8de8\u7bb1\u6881\u7684\u4e2a\u6570\uff0c\u8fd9\u4e2a\u662fKP\u81ea\u52a8\u8ba1\u7b97\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6d4b\u91cf\u4f53\u79ef\u7684\u51c6\u786e\u6027\uff0c\u6bcf\u4e2a\u7bb1\u6881\u90fd\u5728\u81ea\u5df1\u7684Body\u4e2d\uff0c\u4e3a\u4e86\u589e\u5f3a\u6a21\u677f\u7684\u6027\u80fd\uff0c\u66f4\u65b0\u6881\u6570\u5220\u9664\u65e7\u7684\u5143\u7d20\uff0cEKL\u7a33\u5b9a\u6027\u4f1a\u5dee\u4e00\u4e9b\uff0c\u53ef\u4ee5\u5728KP\u4e2d\u5d4c\u5957VB\u811a\u672c\u5b9e\u73b0\u81ea\u52a8\u5220\u9664\u4e0e\u81ea\u52a8\u751f\u6210\u3002</p> <ol> <li> <p>\u5728\u4e3b\u6846\u67b6\u7ed3\u6784\u6811\u4e2d\u65b0\u589eVBAction\uff1b </p> </li> <li> <p>\u5199\u4e0a\u51fd\u6570\uff0c\u53c2\u6570\u4e3a\u4e00\u4e2a\u6709\u5e8f\u51e0\u4f55\u56fe\u5f62\u96c6\uff0c\u548c\u751f\u6210\u7684\u4e2a\u6570\u3002 \u8fd9\u4e2a\u51fd\u6570\u4e3b\u8981\u7684\u529f\u80fd\u662f\u4e00\u4e2a\u96c6\u5408\u56fe\u5f62\u96c6\u5185\u6240\u6709\u7684Body\uff0c\u5e76\u4e14\u65b0\u5efa\u540c\u6837\u591a\u6570\u91cf\u7684\u3002\u8d77\u5230\u4e00\u4e2a\u66f4\u65b0\u7684\u4f5c\u7528\u3002</p> </li> <li>\u5185\u90e8\u4ee3\u7801 </li> </ol> <pre><code>Main (hb1,icount)\n</code></pre> <pre><code>If hb1.Bodies.Count &lt;&gt; 0 Then\n    CATIA.ActiveEditor.Selection.Clear\n    For k = 1 To hb1.Bodies.Count\n        Dim hb0obj As Body\n        Set hb0obj = hb1.Bodies.Item(k)\n                CATIA.ActiveEditor.Selection.Add hb0obj      \n    Next\n    CATIA.ActiveEditor.Selection.Delete\nEnd If\n\n\nDim i as integer\nFor i = 1 To icount\n    Dim hb2 As Body\n    Set hb2 = hb1.Bodies.Add\n    hb2.Name = \"BEAM_\" + CStr(i)\nNext\nEnd Sub\n</code></pre> <p>\u5728\u751f\u6210\u6881\u7684KP\u4e2d\uff0c\u63d0\u524d\u8fd0\u884c\u4e00\u4e0b\u8fd9\u4e2aVB\u51fd\u6570\uff0c\u5b83\u4f1a\u5220\u9664\u65e7\u7684\uff0c\u5e76\u4e14\u521b\u5efa\u65b0\u7684Body\u3002</p> <p></p> <p>\u6700\u540e\u68c0\u7d22Body\u4f4d\u7f6e\u7684\u7236\u7ea7\uff0c\u904d\u5386\u5f97\u5230\u65b0\u7684Body\u7684list\u3002</p> <p></p> <p>\u8fd9\u6837KP\u6267\u884c\u4e86\u5220\u9664\u4e86\u65e7\u7684Body,\u548c\u521b\u5efa\u65b0\u7684Body\u4e24\u4e2a\u8fc7\u7a0b\uff0c\u5e76\u4e14\u5c06\u65b0\u7684Body\u52a0\u5165\u5217\u8868\u4e2d\uff0c\u4e3a\u540e\u7eed\u7684UDF\u7684\u653e\u7f6e\u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u7ed3\u6784\u6811\u89c4\u8303\u5982\u4e0b\u3002</p> <p></p>"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/","title":"\u540c\u6d4e\u5e02\u653f\u9662\u57fa\u4e8e\u8fbe\u7d22\u7cfb\u7edf3DEXPERIENCE\u5e73\u53f0\u7684\u4e8c\u4e09\u7ef4\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u7a0b\u5e8f\u5f00\u53d1","text":""},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#_1","title":"\u6458\u8981","text":"<p>\u4e3a\u4e86\u6539\u5584\u4e8c\u4e09\u7ef4\u8def\u7ebf\u6570\u636e\u7684\u4ea4\u4e92\u65b9\u5f0f\uff0c\u540c\u6d4e\u5e02\u653f\u9662\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8eIFC 4.1\uff08industry foundation classes\uff0c\u5de5\u4e1a\u57fa\u7840\u7c7b\uff09\u6807\u51c6\u7684\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u65b9\u6cd5\uff0c\u5e76\u4ee5EICAD\u4e3a\u4f8b\u8fdb\u884c\u4e86\u529f\u80fd\u5f00\u53d1\u3002\u9274\u4e8e\u8fbe\u7d22\u7cfb\u7edf\u5bf9IFC 4.1\u683c\u5f0f\u7684\u826f\u597d\u517c\u5bb9\u6027\uff0c\u91c7\u75283DEXPERIENCE R2019x\u5e73\u53f0\u6765\u9a8c\u8bc1\u65b9\u6cd5\u7684\u53ef\u884c\u6027\u3002</p> <p>\u7ed3\u679c\u8868\u660e\uff1a\u6211\u9662\u81ea\u4e3b\u5f00\u53d1\u7684\u8def\u7ebf\u8f6c\u6362\u7a0b\u5e8f\u80fd\u591f\u5b9e\u73b0\u5c06EICAD\u5e73\u7ad6\u66f2\u7ebf\u8bbe\u8ba1\u6587\u4ef6\u8f6c\u6362\u4e3aIFC\u8def\u7ebf\u6587\u4ef6\uff0c\u4e14\u5728\u5bfc\u51653DEXPERIENCE\u5e73\u53f0\u540e\u53ef\u4ee5\u8f83\u4e3a\u5b8c\u6574\u5730\u8fd8\u539f\u8def\u7ebf\u8bbe\u8ba1\u4fe1\u606f\uff0c\u4e0e\u4f20\u7edf\u57fa\u4e8eDWG\u6587\u4ef6\u7684\u4ea4\u4e92\u65b9\u5f0f\u76f8\u6bd4\uff0c\u80fd\u591f\u5728\u4fdd\u8bc1\u8def\u7ebf\u7cbe\u5ea6\u548c\u8f6f\u4ef6\u517c\u5bb9\u6027\u7684\u6761\u4ef6\u4e0b\uff0c\u5b9e\u73b0\u8def\u7ebf\u6570\u636e\u4e0e3DEXPERIENCE\u5e73\u53f0\u95f4\u7684\u6709\u6548\u4f20\u9012\u3002\u76f8\u5173\u6210\u679c\u5df2\u53d1\u8868\u5728\u300a\u6e05\u534e\u5927\u5b66\u5b66\u62a5(\u81ea\u7136\u79d1\u5b66\u7248)\u300b\u3002</p> <ul> <li> <p>\u5173\u952e\u8bcd\uff1a\u5de5\u4e1a\u57fa\u7840\u7c7b(IFC 4.1)\u3001EICAD\u3001\u8def\u7ebf\u4fe1\u606f\u3001\u5e73\u7ad6\u66f2\u7ebf\u3001\u6570\u636e\u8f6c\u6362\u3001xBIM</p> </li> <li> <p>\u6210\u679c\u8bba\u6587\uff1a\u66f9\u70b3\u52c7, \u65bd\u65b0\u6b23. \u57fa\u4e8eIFC 4.1\u6807\u51c6\u7684EICAD\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u65b9\u6cd5 [J]. \u6e05\u534e\u5927\u5b66\u5b66\u62a5(\u81ea\u7136\u79d1\u5b66\u7248), 2022, 62(02): 321-330.</p> </li> <li> <p>\u8bba\u6587\u94fe\u63a5\uff1a http://jst.tsinghuajournals.com/article/2022/4306/20220216.htm</p> </li> </ul>"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#_2","title":"\u5f15\u8a00","text":"<p>\u5e02\u653f\u52d8\u5bdf\u8bbe\u8ba1\u884c\u4e1a\u6b63\u5904\u4e8e\u7531\u4e8c\u7ef4\u8bbe\u8ba1\u5411\u4e09\u7ef4\u8bbe\u8ba1\u8f6c\u578b\u5347\u7ea7\u7684\u6478\u7d22\u9636\u6bb5\u3002\u5bf9\u4e8e\u7ebf\u6027\u5de5\u7a0b\u800c\u8a00\uff0c\u8def\u7ebf\u4fe1\u606f\u662f\u6700\u4e3a\u57fa\u7840\u7684\u8bbe\u8ba1\u8981\u7d20\u4e4b\u4e00\uff0c\u4e5f\u662f\u591a\u4e13\u4e1a\u534f\u540c\u7684\u6838\u5fc3\u6570\u636e\u3002\u7136\u800cBIM\u6280\u672f\u5728\u7ebf\u6027\u5de5\u7a0b\u4e2d\u5e94\u7528\u7684\u666e\u53ca\u5ea6\u548c\u6210\u719f\u5ea6\u8fdc\u4e0d\u53ca\u5efa\u7b51\u5de5\u7a0b\uff0c\u4e09\u7ef4\u8def\u7ebf\u8bbe\u8ba1\u6a21\u5f0f\u63a8\u5e7f\u7f13\u6162\uff0c\u4e00\u65b9\u9762\u73b0\u884c\u8def\u7ebf\u8bbe\u8ba1\u89c4\u8303\u5bf9\u8def\u7ebf\u7684\u5e73\u7ad6\u66f2\u7ebf\u6709\u660e\u786e\u89c4\u5b9a\uff0c\u5373\u4f7f\u91c7\u7528\u4e09\u7ef4\u8def\u7ebf\u8bbe\u8ba1\u8f6f\u4ef6\u4e5f\u9700\u8981\u5728\u5e73\u9762\u548c\u7eb5\u65ad\u9762\u4e0a\u5206\u522b\u8fdb\u884c\u8bbe\u8ba1\uff0c\u518d\u8f6c\u6362\u4e3a\u4e09\u7ef4\u8def\u7ebf\uff1b\u53e6\u4e00\u65b9\u9762\u73b0\u6709\u7684\u4e8c\u7ef4\u8def\u7ebf\u8bbe\u8ba1\u8f6f\u4ef6\u5177\u6709\u529f\u80fd\u5b8c\u5584\u3001\u6613\u7528\u6027\u597d\u3001\u8bbe\u8ba1\u6548\u7387\u9ad8\u7b49\u4f18\u52bf\uff0c\u800c\u5f53\u524d\u901a\u7528\u7684BIM\u8f6f\u4ef6\u5e76\u4e0d\u63d0\u4f9b\u8def\u7ebf\u8bbe\u8ba1\u6a21\u5757\uff0c\u9700\u8981\u8bbe\u8ba1\u4f01\u4e1a\u901a\u8fc7\u4e8c\u6b21\u5f00\u53d1\u6765\u5b9e\u73b0\u8fd9\u90e8\u5206\u529f\u80fd\uff0c\u5f00\u53d1\u6210\u672c\u8f83\u9ad8\u3002\u6b64\u5916\uff0c\u5728\u57ce\u5e02\u4fe1\u606f\u5316\u5efa\u8bbe\u7684\u80cc\u666f\u4e0b\uff0c\u5927\u91cf\u5df2\u5efa\u7684\u7ebf\u6027\u5de5\u7a0b\u4e9f\u9700\u5c06\u4e8c\u7ef4\u6210\u679c\u6570\u636e\u5411\u4e09\u7ef4BIM\u6570\u636e\u8f6c\u6362\u3002\u56e0\u6b64\uff0c\u5229\u7528\u6570\u636e\u683c\u5f0f\u8f6c\u6362\u5b9e\u73b0\u8def\u7ebf\u4fe1\u606f\u4e0eBIM\u8f6f\u4ef6\u7684\u65e0\u7f1d\u8854\u63a5\u5177\u6709\u91cd\u8981\u7684\u5b9e\u9645\u5e94\u7528\u4ef7\u503c\u3002</p> <p>BIM\u5f02\u6784\u6570\u636e\u4ee5\u53ca\u201c\u4fe1\u606f\u5b64\u5c9b\u201d\u95ee\u9898\u4e25\u91cd\u5236\u7ea6\u4e86\u4e8c\u4e09\u7ef4\u5e94\u7528\u8f6f\u4ef6\u4e4b\u95f4\u7684\u4fe1\u606f\u5171\u4eab\u548c\u534f\u540c\u5de5\u4f5c\uff0c\u5bfc\u81f4\u8def\u7ebf\u4fe1\u606f\u5728\u4f20\u9012\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u6570\u636e\u4e22\u5931\u6216\u5931\u771f\u7684\u73b0\u8c61\u3002IFC\u4f5c\u4e3a\u4e00\u79cd\u56fd\u9645\u5316\u7684BIM\u6570\u636e\u6807\u51c6\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u5177\u4f53\u7cfb\u7edf\u7684\uff0c\u673a\u5668\u53ef\u8bfb\u7684\uff0c\u9002\u5408\u4e8e\u63cf\u8ff0\u8d2f\u7a7f\u6574\u4e2a\u5efa\u7b51\u751f\u547d\u671f\u5185\u4ea7\u54c1\u6570\u636e\u7684\u4e2d\u6027\u673a\u5236\uff0c\u5e76\u56e0\u6b64\u5f97\u5230\u4e86\u5927\u91cfBIM\u5e94\u7528\u8f6f\u4ef6\u7684\u652f\u6301\u3002\u4f46\u5728\u8def\u7ebf\u8bbe\u8ba1\u9886\u57df\u5e94\u7528\u8f83\u4e3a\u5e7f\u6cdb\u7684EICAD\u8f6f\u4ef6\u4ecd\u4e0d\u652f\u6301IFC\u6570\u636e\u683c\u5f0f\u7684\u8f93\u51fa\uff0c\u56e0\u6b64\u73b0\u6709\u7684\u5de5\u4f5c\u6d41\u53ea\u80fd\u91c7\u7528\u57fa\u4e8eDWG\u6587\u4ef6\u7684\u8def\u7ebf\u6570\u636e\u4ea4\u4e92\u65b9\u5f0f\uff0c\u8be5\u65b9\u5f0f\u4e0b\u4ec5\u80fd\u4f20\u9012\u8def\u7ebf\u7684\u51e0\u4f55\u4fe1\u606f\uff0c\u4e14\u5b58\u5728\u7f13\u548c\u66f2\u7ebf\u7ed8\u5236\u4e0d\u7cbe\u786e\uff0c\u5e73\u7ad6\u66f2\u7ebf\u4fe1\u606f\u4e22\u5931\u7b49\u95ee\u9898\u3002\u9274\u4e8e\u4e0a\u8ff0\u95ee\u9898\uff0c\u901a\u8fc7\u7814\u7a76IFC\u6807\u51c6\u6846\u67b6\uff0c\u81ea\u4e3b\u5f00\u53d1\u7a0b\u5e8f\u5b9e\u73b0EICAD\u8def\u7ebf\u6570\u636e\u5bfc\u51fa\u4e3aIFC\u6570\u636e\u7684\u601d\u8def\u5df2\u7136\u6210\u4e3a\u4e00\u79cd\u53ef\u884c\u7684\u6280\u672f\u65b9\u6848\u3002</p>"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#ifc","title":"\u6570\u636e\u6d41\u8f6c\u65b0\u8303\u5f0f\uff1a\u57fa\u4e8eIFC\u6807\u51c6\u7684\u8def\u7ebf\u4fe1\u606f\u6a21\u578b","text":""},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#ifc_1","title":"IFC\u6807\u51c6\u6982\u8ff0","text":"<p>IFC\u4f5c\u4e3a\u5b9e\u73b0BIM\u5168\u751f\u547d\u5468\u671f\u7406\u5ff5\u7684\u91cd\u8981\u5de5\u5177\uff0c\u662f\u4e00\u79cd\u9762\u5411\u5efa\u7b51\u9886\u57df\u7684\u6570\u636e\u8868\u8fbe\u548c\u4ea4\u6362\u6807\u51c6\u3002\u5b83\u7531\u56fd\u9645\u534f\u540c\u5de5\u4f5c\u8054\u76dfIAI\uff08\u5df2\u66f4\u540d\u4e3abuildingSMART\uff09\u4e8e\u4e8c\u5341\u4e16\u7eaa\u4e5d\u5341\u5e74\u4ee3\u5f00\u59cb\u8d77\u8349\u5e76\u66f4\u65b0\u8fed\u4ee3\u81f3\u4eca\uff0c\u5f53\u524d\u6700\u65b0\u7248\u672c\u4e3aIFC4.3 RC2\u3002\u957f\u671f\u4ee5\u6765\uff0c\u8be5\u6807\u51c6\u4e3b\u8981\u81f4\u529b\u4e8e\u5efa\u7b51\u9886\u57df\u4fe1\u606f\u8868\u8fbe\u7684\u6807\u51c6\u5316\u5de5\u4f5c\uff0c\u800c\u81eaIFC 4.1\u7248\u672c\u5f00\u59cb\uff0cbuildingSMART\u7ec4\u7ec7\u9010\u6b65\u5c06IFC\u6807\u51c6\u5ef6\u4f38\u81f3\u57fa\u7840\u8bbe\u65bd\u9886\u57df\uff0c\u5305\u62ec\u9053\u8def\u3001\u94c1\u8def\u3001\u6865\u6881\u3001\u96a7\u9053\u7b49\u7ebf\u6027\u5de5\u7a0b\u5747\u5728\u6b64\u7248\u672c\u4e4b\u540e\u5f97\u5230\u4e86\u4e0d\u540c\u7a0b\u5ea6\u7684\u652f\u6301\uff0c\u5176\u663e\u8457\u7279\u5f81\u5728\u4e8eIFC 4.1\u6807\u51c6\u7248\u672c\u4e2d\u65b0\u589e\u4e86IfcAlignment\u5b9e\u4f53\uff0c\u53ef\u7528\u4e8e\u63cf\u8ff0\u7ebf\u6027\u57fa\u7840\u8bbe\u65bd\u5de5\u7a0b\u4e2d\u7684\u8def\u7ebf\u4fe1\u606f\u3002</p> <p></p> <p>\u5728IFC 4.1\u4e4b\u540e\u7684\u8fed\u4ee3\u7248\u672c\u4e2d\uff0cIFC 4.2\u5f15\u5165IfcBridge\u548cIfcBridgePart\u5b9e\u4f53\uff0c\u7531\u6b64\u5c55\u5f00\u5bf9\u6865\u6881\u7ed3\u6784\u7684\u63cf\u8ff0\uff0c\u5176\u4e2d\u8fd8\u6db5\u76d6\u4e86\u5bf9\u652f\u5ea7\u3001\u6df1\u57fa\u7840\u548c\u9884\u5e94\u529b\u7ba1\u9053\u7b49\u79bb\u6563\u6784\u4ef6\u7684\u5b9a\u4e49\uff1b\u800cIFC 4.3\u5219\u8fdb\u4e00\u6b65\u52a0\u5927\u5bf9\u57fa\u7840\u8bbe\u65bd\u9886\u57df\u7684\u8986\u76d6\uff0c\u5f15\u5165IfcPort\u3001IfcRailway\u548cIfcRoad\u5b9e\u4f53\uff0c\u5e76\u65b0\u589e\u6807\u8bc6\u724c\u3001\u4fe1\u53f7\u8bbe\u5907\u3001\u586b\u6316\u65b9\u4ee5\u53ca\u94fa\u88c5\u7b49\u4e00\u7cfb\u5217\u57fa\u7840\u8bbe\u65bd\u76f8\u5173\u7684\u5b9e\u4f53\u6982\u5ff5\uff0c\u540c\u65f6\u4f18\u5316\u4e86\u8def\u7ebf\u7684\u8bed\u4e49\u5316\u8868\u8fbe\uff0c\u5c06\u6a2a\u65ad\u9762\u8f6e\u5ed3\u548c\u6a2a\u5761\u4fe1\u606f\u7eb3\u5165\u8def\u7ebf\u7684\u6807\u51c6\u5316\u8868\u8fbe\u8303\u7574\u3002</p>"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#ifc-41","title":"\u57fa\u4e8eIFC 4.1\u6807\u51c6\u7684\u8def\u7ebf\u4fe1\u606f\u6a21\u578b","text":"<p>\u867d\u7136\u4e3b\u6d41\u7684BIM\u6838\u5fc3\u5efa\u6a21\u8f6f\u4ef6\u5747\u5df2\u652f\u6301IFC\u6807\u51c6\uff0c\u4f46\u5176\u66f4\u65b0\u901f\u5ea6\u5f80\u5f80\u6bd4\u8f83\u6ede\u540e\uff0c\u76ee\u524d\u7edd\u5927\u591a\u6570BIM\u5e94\u7528\u8f6f\u4ef6\u6700\u9ad8\u652f\u6301IFC 4.1\u7248\u672c\uff0c\u56e0\u6b64\u672c\u7814\u7a76\u4ee5IFC 4.1\u7248\u672c\u7684\u6587\u4ef6\u683c\u5f0f\u4f5c\u4e3a\u8def\u7ebf\u8f6c\u6362\u7684\u76ee\u6807\u683c\u5f0f\u3002</p> <p>\u56fe1\u4e3a\u57fa\u4e8eIFC\u6807\u51c6\u7684\u8def\u7ebf\u4fe1\u606f\u6a21\u578b\u3002\u6b63\u5982\u524d\u6587\u6240\u8ff0\uff0cIFC\u6807\u51c6\u4e2d\u4f7f\u7528IfcAlignment\u5b9e\u4f53\u8868\u793a\u8def\u7ebf\u4fe1\u606f\uff0cIfcProject\u548cIfcSite\u5219\u5206\u522b\u4ee3\u8868\u9879\u76ee\u4fe1\u606f\u548c\u573a\u5730\u4fe1\u606f\u3002IfcAlignment\u5b9e\u4f53\u7684\u8def\u7ebf\u51e0\u4f55\u4fe1\u606f\u7531Axis\u5c5e\u6027\u8868\u8fbe\uff0c\u5373IfcAlignmentCurve\u5b9e\u4f53\uff0c\u8be5\u5b9e\u4f53\u4e2dHorizontal\u548cVertical\u5c5e\u6027\u5206\u522b\u5bf9\u5e94\u8def\u7ebf\u4fe1\u606f\u4e2d\u7684\u5e73\u66f2\u7ebf\u548c\u7ad6\u66f2\u7ebf\u3002IFC\u6807\u51c6\u4e2d\u7684\u7ebf\u5143\u7c7b\u522b\u4e0e\u6211\u56fd\u73b0\u884c\u7684\u516c\u8def\u8def\u7ebf\u8bbe\u8ba1\u89c4\u8303\uff08JTG D20-2017\uff09\u4e00\u81f4\u3002\u5e73\u7ad6\u66f2\u7ebf\u7ebf\u5143\u5b9e\u4f53\u7684\u5c5e\u6027\u7ee7\u627f\u5982\u56fe2\u6240\u793a\u3002\u5bf9\u4e8e\u56fd\u5185\u63a8\u8350\u7ebf\u5143\u5b58\u5728\u5dee\u5f02\u7684\u60c5\u51b5\uff0c\u9700\u5bf9\u7ebf\u5143\u5c5e\u6027\u8fdb\u884c\u76f8\u5e94\u8bbe\u7f6e\u4ee5\u9002\u5e94\u672c\u571f\u5316\u9700\u6c42\u3002\u5177\u4f53\u8bbe\u7f6e\u89e3\u6790\u8be6\u89c1\u6210\u679c\u8bba\u6587\u3002</p> <p>\u56fe1 \u57fa\u4e8eIFC\u6807\u51c6\u7684\u8def\u7ebf\u4fe1\u606f\u6a21\u578b </p> <p>\u56fe2 IFC\u7ebf\u5143\u5b9e\u4f53\u5c5e\u6027\u7ee7\u627f\u56fe </p>"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#eicadifcalignment","title":"\u4ee5\u5c0f\u89c1\u5927\uff0c\u521d\u7aa5\u795e\u5a01\uff1aEICAD\u6570\u636e\u4e0eIfcAlignment\u7684\u8f6c\u6362","text":""},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#eicad","title":"EICAD\u6570\u636e\u89e3\u6790","text":"<p>EICAD\u662f\u4e00\u6b3e\u57fa\u4e8eAutoCAD\u5e73\u53f0\u7684\u96c6\u6210\u4ea4\u4e92\u5f0f\u9053\u8def\u4e0e\u7acb\u4ea4\u8bbe\u8ba1\u8f6f\u4ef6\uff0c\u5176\u8def\u7ebf\u8bbe\u8ba1\u6210\u679c\u53ef\u5bfc\u51fa\u4e3a\u76f8\u5e94\u7684\u6587\u672c\u6587\u4ef6\u8fdb\u884c\u5b58\u50a8\u548c\u4f20\u9012\uff0c\u5176\u4e2d\u5305\u62ec\u4ea4\u70b9\u8bbe\u8ba1\u6587\u4ef6.JD\u3001\u79ef\u6728\u6cd5\u7ebf\u5143\u5355\u5143\u6587\u4ef6.ICD\u3001\u7ad6\u66f2\u7ebf\u6587\u4ef6.SQX\u4ee5\u53ca\u6869\u53f7\u65ad\u94fe\u6587\u4ef6.DL\u7b49\u3002\u5bf9\u4e8e\u5e73\u66f2\u7ebf\u800c\u8a00\uff0cEICAD\u63d0\u4f9b\u4e86\u4ea4\u70b9\u6cd5\u548c\u79ef\u6728\u6cd5\u4e24\u79cd\u8f93\u51fa\u65b9\u5f0f\uff0c\u800cIFC\u6807\u51c6\u4e2d\u7684\u8def\u7ebf\u8868\u8fbe\u5219\u91c7\u7528\u7684\u662f\u7ebf\u5143\u6cd5\u7684\u601d\u60f3\uff0c\u4e0e\u79ef\u6728\u6cd5\u7c7b\u4f3c\uff0c\u6240\u4ee5\u672c\u6587\u4ec5\u4ee5ICD\u6587\u4ef6\u4f5c\u4e3a\u5e73\u66f2\u7ebf\u7684\u6210\u679c\u6587\u4ef6\u5c55\u5f00\u7814\u7a76\uff0c\u5177\u4f53\u8bba\u8ff0\u8be6\u89c1\u6210\u679c\u8bba\u6587\u3002 \u56fe3 EICAD\u5b9e\u4f8b\u6587\u4ef6 </p> <p>\u88681 EICAD\u4e0eIFC\u7ebf\u5143\u63cf\u8ff0\u5bf9\u7167\u8868 </p>"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#ifc_2","title":"IFC\u7ebf\u5143\u5c5e\u6027\u503c\u6620\u5c04","text":"<p>\u5bf9\u6bd4EICAD\u8def\u7ebf\u8f93\u51fa\u6587\u4ef6\uff08\u56fe3\uff09\u4e0eIFC\u7ebf\u5143\u5b9e\u4f53\u5c5e\u6027\u7ee7\u627f\uff08\u56fe2\uff09\uff0c\u4e0d\u96be\u53d1\u73b0\u4e24\u8005\u5747\u901a\u8fc7\u8bb0\u5f55\u8def\u7ebf\u7ebf\u578b\u5355\u5143\u7684\u51e0\u4f55\u7279\u5f81\u6570\u636e\u6765\u63cf\u8ff0\u8def\u7ebf\u4fe1\u606f\uff0c\u56e0\u6b64\u5728\u7ebf\u5143\u53c2\u6570\u65b9\u9762\u5b58\u5728\u4e00\u4e9b\u4ea4\u96c6\u3002\u4f46\u662f\uff0c\u6b63\u5982\u524d\u6587\u6240\u8ff0\uff0c\u57fa\u4e8e\u79ef\u6728\u6cd5\u548c\u4ea4\u70b9\u6cd5\u7684\u8def\u7ebf\u8bbe\u8ba1\u601d\u8def\u5927\u5927\u7b80\u5316\u4e86EICAD\u5e73\u7ad6\u66f2\u7ebf\u7684\u6587\u4ef6\u6570\u636e\uff0c\u800cIFC\u8def\u7ebf\u4fe1\u606f\u7684\u63cf\u8ff0\u65b9\u5f0f\u867d\u91c7\u7528\u4e86\u7ebf\u5143\u6cd5\u7684\u8bbe\u8ba1\u7406\u5ff5\uff0c\u4f46\u5404\u4e2a\u7ebf\u5143\u7684\u53c2\u6570\u8868\u8fbe\u66f4\u52a0\u5b8c\u6574\uff08\u88682\uff09\uff0c\u5373\u6bcf\u4e2a\u7ebf\u578b\u5355\u5143\u53ef\u72ec\u7acb\u5b58\u5728\uff0c\u56e0\u6b64\u5728\u6570\u636e\u6620\u5c04\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u7ecf\u8fc7\u516c\u5f0f\u6362\u7b97\u624d\u80fd\u83b7\u5f97\u5b8c\u6574\u7684IFC\u7ebf\u5143\u5c5e\u6027\u503c\uff0c\u5177\u4f53\u516c\u5f0f\u89c1\u6210\u679c\u8bba\u6587\u3002</p> <p>\u88682 EICAD\u7ebf\u5143\u53c2\u6570\u4e0eIFC\u7ebf\u5143\u5c5e\u6027\u7684\u5bf9\u6bd4 </p>"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#_3","title":"\u7a0b\u5e8f\u5b9e\u73b0\u4e0e\u5e94\u7528\u6848\u4f8b","text":"<p>\u4e3a\u4e86\u9a8c\u8bc1\u4e0a\u8ff0\u65b9\u6cd5\u7684\u53ef\u884c\u6027\uff0c\u6211\u9662\u81ea\u4e3b\u5f00\u53d1\u4e86\u57fa\u4e8eIFC 4.1\u6807\u51c6\u7684EICAD\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u7a0b\u5e8f\uff0c\u8be5\u7a0b\u5e8f\u4e3b\u8981\u5206\u4e3a3\u4e2a\u6a21\u5757\uff1a\u2460\u8f93\u5165\u6a21\u5757\uff0c\u8be5\u6a21\u5757\u7528\u4e8e\u8f93\u5165EICAD\u5e73\u7ad6\u66f2\u7ebf\u8bbe\u8ba1\u6587\u4ef6\u4ee5\u53ca\u65ad\u94fe\u8bbe\u8ba1\u6587\u4ef6\uff1b\u2461\u6570\u636e\u8f6c\u6362\u6a21\u5757\uff0c\u662f\u7a0b\u5e8f\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u627f\u62c5\u5bf9\u8f93\u5165\u6570\u636e\u7684\u53cd\u5e8f\u5217\u5316\u548c\u53c2\u6570\u6620\u5c04\u7684\u4efb\u52a1\uff1b\u2462\u8f93\u51fa\u6a21\u5757\uff0c\u8be5\u6a21\u5757\u501f\u52a9\u4e8exBIM\u89e3\u6790\u5de5\u5177\u5305\u5b9e\u73b0IFC\u5b9e\u4f53\u7684\u521b\u5efa\u3001\u5c5e\u6027\u8d4b\u503c\u4ee5\u53ca\u6570\u636e\u5bfc\u51fa\u7684\u529f\u80fd\u3002</p> <p>\u91c7\u75283DEXPERIENCE R2019x\u5bf9\u5bfc\u51fa\u7684IFC\u6587\u4ef6\u8fdb\u884c\u9a8c\u8bc1\uff0c\u8be5\u8f6f\u4ef6\u652f\u6301IFC 4.1\u8def\u7ebf\u5bfc\u5165\u529f\u80fd\u3002\u5728\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u7a0b\u5e8f\u80fd\u591f\u5feb\u901f\u5730\u5b8c\u6210\u6570\u636e\u8f6c\u6362\u5de5\u4f5c\u3002\u5c06\u8f6c\u6362\u540e\u7684IFC\u6587\u4ef6\u5bfc\u5165CATIA\u8f6f\u4ef6\u540e\u7684\u53ef\u89c6\u5316\u6548\u679c\u5982\u56fe4\u6240\u793a\u3002\u7ed3\u679c\u8868\u660eCATIA\u80fd\u591f\u51c6\u786e\u5730\u8bc6\u522b\u51faIFC\u8def\u7ebf\u4fe1\u606f\uff0c\u5e76\u5728\u7ed3\u6784\u6811\u4e2d\u4fdd\u7559\u5e73\u7ad6\u66f2\u7ebf\u7684\u5b9a\u4e49\uff0c\u4e14\u751f\u6210\u7684\u8def\u7ebf\u5177\u6709\u53ef\u7f16\u8f91\u6027\u3002</p> <p></p> <p>\u56fe4 IFC\u8def\u7ebf\u5bfc\u5165\u7ed3\u679c</p>"},{"location":"ISE-AEC/CASE-%E5%90%8C%E6%B5%8E%E5%B8%82%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/TJAD-%E5%90%8C%E6%B5%8E%E5%B8%82%E6%94%BF%E9%99%A2%E5%9F%BA%E4%BA%8E%E8%BE%BE%E7%B4%A2%E7%B3%BB%E7%BB%9F3DEXPERIENCE%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BA%8C%E4%B8%89%E7%BB%B4%E8%B7%AF%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/#_4","title":"\u7ed3\u8bed","text":"<p>\u6211\u9662\u6240\u5f00\u53d1\u7684\u8def\u7ebf\u6570\u636e\u8f6c\u6362\u7a0b\u5e8f\u89e3\u51b3\u4e86\u5229\u7528\u8fbe\u7d22\u7cfb\u7edf3DEXPERIENCE\u5e73\u53f0\u8fdb\u884c\u4e8c\u4e09\u7ef4\u534f\u540c\u8bbe\u8ba1\u65f6\u8def\u7ebf\u6570\u636e\u65e0\u6cd5\u6709\u6548\u4f20\u9012\u7684\u95ee\u9898\uff0c\u5177\u6709\u7cbe\u5ea6\u9ad8\u3001\u517c\u5bb9\u6027\u5f3a\u3001\u9ad8\u5ea6\u96c6\u6210\u7b49\u4f18\u70b9\uff0c\u4e14\u80fd\u591f\u8f83\u4e3a\u5b8c\u6574\u5730\u8fd8\u539f\u8def\u7ebf\u8bbe\u8ba1\u4fe1\u606f\uff0c\u5bf9\u63a8\u8fdb\u7ebf\u6027\u5de5\u7a0b\u9879\u76ee\u7684\u6b63\u5411\u8bbe\u8ba1\u548c\u57fa\u4e8eBIM\u6a21\u578b\u7684\u8def\u7ebf\u8bbe\u8ba1\u5408\u89c4\u5ba1\u67e5\u5177\u6709\u91cd\u8981\u610f\u4e49</p>"},{"location":"ISE-AEC/CIV-Tunnel%20R%26D%20Process/Tunnel%20R%26D%20Process/","title":"\u96a7\u9053\u521b\u5efa/Tunnel R&amp;D Process","text":"<ul> <li>\u52a0\u8f7dPC\u6a21\u677f</li> </ul> <ul> <li>\u8bbe\u7f6e\u8f93\u5165\u6761\u4ef6<ul> <li>\u96a7\u9053\u4e2d\u5fc3\u7ebf</li> <li>\u8d77\u59cb\u8f74\u7cfb</li> <li>\u534a\u5f84\u53c2\u6570</li> <li>\u539a\u5ea6\u53c2\u6570</li> </ul> </li> </ul>"},{"location":"ISE-AEC/CIV-Tunnel%20R%26D%20Process/Tunnel%20R%26D%20Process/#ds-code","title":"DS CODE","text":"<pre><code>Let i (Integer)\nLet obj1 (Feature)\nLet Axs (AxisSystem)\nLet Agl (ANGLE)\ni=1\n\nlet rootFeat(PartFeature)\nlet repRef(VPMRepReference)\n\nlet temp(Feature)\nlet Destination_Body(BodyFeature)\nlet testangle(ANGLE)\n\nrepRef=GetPLMOwner(`xy \u5e73\u9762` )\nrootFeat=repRef-&gt;Find(\"PartFeature\",\"\",TRUE)\nDestination_Body=new(\"OpenBodyFeature\",\"UDF_Rings\",rootFeat)\n\nFor i while i&lt;=int(length(`\u5bf9\u9f50\u96c6.2\\\u5bf9\u9f50.2\\3D \u5bf9\u9f50.1`,First_Axis\\First_Ring_Position ,Pattern_Limit\\Last_Ring_Limit  )/((2*Lmax-p )/2 ))\n{\nset obj1 = CreateOrModifyTemplate(\"Resource1\", Destination_Body  ,`\u5173\u7cfb\\KP_Rings_Instantiation\\\u5217\u8868.1`    , i )\n\nif i==1 {\nobj1-&gt;SetAttributeObject (\"Axis System\",`First_Axis\\\u8f74\u7cfb.984`    ) obj1-&gt;SetAttributeObject (\"3D_Alignment\",`\u5bf9\u9f50\u96c6.2\\\u5bf9\u9f50.2\\3D \u5bf9\u9f50.1`    ) obj1-&gt;SetAttributeDimension(\"Rotation_computed_from_previous_ring\", 0deg,\"ANGLE\")\nobj1-&gt;SetAttributeDimension(\"Lmax\",Lmax   ,\"LENGTH\")    obj1-&gt;SetAttributeDimension(\"p\",p   ,\"LENGTH\") obj1-&gt;SetAttributeDimension(\"Thickness\", Thickness   ,\"LENGTH\")     obj1-&gt;SetAttributeReal(\"Coef\",Coef ) obj1-&gt;SetAttributeDimension(\"Radius\",Radius  ,\"LENGTH\") }\n\nelse\n{\nobj1-&gt;SetAttributeObject (\"Axis System\",Axs   ) obj1-&gt;SetAttributeObject (\"3D_Alignment\",`\u5bf9\u9f50\u96c6.2\\\u5bf9\u9f50.2\\3D \u5bf9\u9f50.1`    )  obj1-&gt;SetAttributeDimension(\"Radius\",Radius  ,\"LENGTH\") obj1-&gt;SetAttributeDimension(\"Lmax\",Lmax   ,\"LENGTH\")    obj1-&gt;SetAttributeDimension(\"p\",p   ,\"LENGTH\") obj1-&gt;SetAttributeDimension(\"Thickness\", Thickness   ,\"LENGTH\")     obj1-&gt;SetAttributeDimension(\"Rotation_computed_from_previous_ring\", Agl  ,\"ANGLE\") obj1-&gt;SetAttributeReal(\"Coef\",Coef ) }\n\nEndModifyTemplate(obj1)\n\nobj1.Name=\"Ring #\"+ToString(i) Axs=obj1-&gt;GetAttributeObject(\"Output_Axis_System\")\ntestangle=obj1-&gt;GetAttributeReal(\"Angle_for_next_ring\")\n\n/* we force a 30deg angle betwen 2 rings to avoid having the keystone ring segment at the same position between 2 consecutive rings */  if testangle&lt; 30 deg        Agl= (testangle+30deg)*180deg/PI else if testangle&gt; 330 deg Agl= (testangle-30deg)*180deg/PI\nelse\nAgl=testangle\n/*Notify(\"angle #\",Agl)*/\n\ni = i +1\n\n}\n</code></pre>"},{"location":"ISE-AEC/DRW-Drafting/%E5%87%BA%E5%9B%BE/","title":"\u51fa\u56fe","text":""},{"location":"ISE-AEC/DRW-Drafting/%E5%87%BA%E5%9B%BE/#_1","title":"\u51fa\u56fe","text":"<p>1\u3001\u6574\u4f53\u6a21\u578b\u7684\u89c6\u56fe\u5982\u4f55\u548c\u5c40\u90e8\u96f6\u4ef6\u7684\u89c6\u56fe\u7ec4\u7ec7\u5728\u4e00\u5f20\u56fe\u7eb8\u4e2d\uff1f \u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff1a</p> <p> </p> <p>\u9009\u62e9\u51fa\u56fe\u6309\u94ae\uff1b</p> <p></p> <p>\u9009\u62e9\u4f60\u60f3\u8981\u7684\u72ec\u7acb\u6784\u4ef6\uff1b</p> <p></p> <p>\u5982\u679c\u76f4\u63a5\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff0c\u5c06\u751f\u6210\u6240\u6709\u7684\u6784\u4ef6\u7ec4\u5408\u7684\u56fe\u7eb8\uff1b \u5982\u679c\u5148\u9009\u62e9\u6784\u4ef6\uff0c\u518d\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff0c\u5982\u679c\u51fa\u56fe\u5728\u4e00\u4e2apart \u5185\uff0c\u5148\u9009\u51e0\u4f55\u56fe\u5f62\u96c6\uff0c\u518d\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff1b</p> <p></p> <p></p> <p></p> <p>\u6700\u7ec8\u7ed3\u679c\u5982\u4e0b\uff0c\u5177\u4f53\u4f4d\u7f6e\u5982\u679c\u60f3\u5355\u72ec\u5c55\u793a\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u53e0\u5408\uff1b</p> <p></p> <p>2\u3001\u6807\u6ce8\u80fd\u5b9e\u73b0\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u81ea\u52a8\u5316\u5417\uff1f\u5982\u679c\u80fd\uff0c\u7528\u4ec0\u4e48\u6280\u672f\uff1f</p> <p>\u53c2\u8003\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u5728\u5efa\u6a21\u73af\u5883\u4e2d\uff0c\u91ca\u653e\u51fa\u6807\u6ce8\u7684\u5173\u952e\u70b9\u4f4d\uff0c  </p> <ul> <li>\u5982\u679c\u60f3\u901a\u8fc7\u5f00\u53d1\u53bb\u81ea\u52a8\u6807\u6ce8\uff0c\u9700\u8981\u4ee3\u7801\u5148\u56de\u5230\u7b2c\u4e00\u4e2a\u4ea7\u54c1\u7684\u7b2c\u4e00\u4e2a\u96f6\u4ef6\uff0c\u83b7\u5f97\u6807\u6ce8\u70b9\u6240\u5728\u76843D\u5750\u6807\u503c\uff0c\u7136\u540e\u56de\u52302D\u56fe\u7eb8\u4e2d\uff0c\u83b7\u5f97\u5750\u6807\u503c\u7684\u4e24\u4e2a\u7ef4\u5ea6\u7684\u503c\uff0c\u5b83\u4eec\u90fd\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u518d\u6839\u636eAPI\u63a5\u53e3\u8fdb\u884c\u6839\u636e\u5750\u6807\u503c\uff0c\u91cd\u65b0\u7ed8\u5236\u4e24\u4e2a\u70b9\uff0c\u5bf9\u8fd9\u4e24\u4e2a\u70b9\u8fdb\u884c\u6807\u6ce8\uff1b</li> <li>\u6240\u6709\u89d2\u5ea6\u6807\u6ce8\uff0c\u6587\u5b57\u6807\u6ce8\u90fd\u9700\u8981\u8fdb\u884c\u4ee5\u4e0a\u7684\u64cd\u4f5c\uff1b</li> <li>\u5bf9\u4e8e\u672c\u4f8b\u6765\u8bf4\u6ca1\u6709\u5fc5\u8981\uff0c\u5b83\u4eec\u7684\u53d8\u5316\u90fd\u662f\u5c3a\u5bf8\u8303\u56f4\u5185\u7684\uff0c\u628a\u6807\u6ce8\u505a\u5728\u6a21\u677f\u6587\u4ef6\u91cc\u9762\uff0c\u5b9e\u4f8b\u5316\u540e\u5373\u53ef\u81ea\u52a8\u751f\u6210\u6807\u6ce8\uff0c\u4e5f\u80fd\u81ea\u52a8\u66f4\u65b0\uff1b</li> <li>\u53ea\u6709\u5728\u52a8\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u9002\u7528\u4e0e\u4ee3\u7801\u8fdb\u884c\u6807\u6ce8\uff0c\u4f8b\u5982\u4f60\u60f3\u751f\u6210\u8fde\u7eed\u6881\u7684\u7acb\u9762\u5c55\u5f00\u56fe\uff0c\u5728\u5e76\u4e0d\u786e\u5b9a\u6709\u591a\u5c11\u8de8\u6881\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u52a8\u5f00\u53d1\u6807\u6ce8\uff1b</li> </ul> <p>3\u3001\u50cf\u6841\u67b6\u8282\u6bb5\u8fd9\u6837\u7684\u7ed3\u6784\u662f\u4e0d\u65ad\u91cd\u590d\u7684\u7ed3\u6784\uff0c\u5176\u4e8c\u7ef4\u56fe\u80fd\u505a\u6210\u6a21\u677f\u5417\uff1f</p> <p>\u53c2\u8003 1 \u7684\u6b65\u9aa4\uff0c\u7136\u540e\u5bf9\u6784\u4ef6\u8fdb\u884c\u6807\u6ce8\uff0c\u628a\u8fd9\u4e9b\u6574\u4f53\u505a\u6210\u5de5\u7a0b\u6a21\u677f\uff0c\u5b9e\u4f8b\u5316\u4e4b\u540e\u5373\u53ef\u81ea\u52a8\u751f\u6210\u56fe\u7eb8\u3002</p>"},{"location":"ISE-AEC/ISE-%E9%92%A2%E7%BB%93%E6%9E%84/%E9%92%A2%E7%BB%93%E6%9E%84%E6%A2%81/","title":"\u94a2\u7ed3\u6784\u6881\u5efa\u6a21\u601d\u8003","text":"<ul> <li>\u5148\u6784\u9020\u51fa\u5916\u56f4\u77e9\u5f62\u5708\uff1b</li> <li>\u5728\u5916\u56f4\u56db\u4e2a\u66f2\u9762\u7ed8\u5236\u51fa\u52a0\u5f3a\u808b\u677f\uff1b</li> <li>\u57fa\u4e8e\u5df2\u7ecf\u751f\u6210\u7684\u808b\u677f\u5b9e\u4f8b\u5316\u8d2f\u7a7f\u5b54\u66f2\u7ebf\u548c\u56db\u4e2a\u62d0\u89d2\u901a\u710a\u5b54\uff1b</li> <li>\u586b\u5145\u5916\u56f4\u66f2\u9762\uff1b</li> <li>\u8ba9\u586b\u5145\u7684\u66f2\u9762\u4e0e\u8d2f\u7a7f\u5b54\u66f2\u7ebf\u505a\u9012\u5f52\u4fee\u526a\uff1b</li> <li>\u52a0\u539a\u6240\u6709\u66f2\u9762\uff1b</li> </ul>"},{"location":"ISE-AEC/REBAR-%E5%9F%BA%E4%BA%8E%E9%92%A2%E7%AD%8B%E7%9A%84%E5%BB%BA%E6%A8%A1%E8%AE%BA%E6%96%87/%E6%95%B0%E5%AD%97%E5%8C%96%E8%BE%85%E5%8A%A9%E8%AE%BE%E8%AE%A1%E6%A1%A5%E6%A2%81%E9%92%A2%E7%AD%8B%E5%BB%BA%E6%A8%A1/","title":"\u6570\u5b57\u5316\u8f85\u52a9\u8bbe\u8ba1\u6865\u6881\u94a2\u7b4b\u5efa\u6a21","text":""},{"location":"ISE-AEC/REBAR-%E5%9F%BA%E4%BA%8E%E9%92%A2%E7%AD%8B%E7%9A%84%E5%BB%BA%E6%A8%A1%E8%AE%BA%E6%96%87/%E6%95%B0%E5%AD%97%E5%8C%96%E8%BE%85%E5%8A%A9%E8%AE%BE%E8%AE%A1%E6%A1%A5%E6%A2%81%E9%92%A2%E7%AD%8B%E5%BB%BA%E6%A8%A1/#catia","title":"\u57fa\u4e8eCATIA \u7684\u94a2\u7b4b\u5efa\u6a21","text":""},{"location":"ISE-AEC/REBAR-%E5%9F%BA%E4%BA%8E%E9%92%A2%E7%AD%8B%E7%9A%84%E5%BB%BA%E6%A8%A1%E8%AE%BA%E6%96%87/%E6%95%B0%E5%AD%97%E5%8C%96%E8%BE%85%E5%8A%A9%E8%AE%BE%E8%AE%A1%E6%A1%A5%E6%A2%81%E9%92%A2%E7%AD%8B%E5%BB%BA%E6%A8%A1/#_1","title":"\u9876\u90e8\u76d6\u6881\u94a2\u7b4b\u521b\u5efa\u65b9\u6cd5","text":"<pre><code>        let icount(integer)\nlet i (integer)\nlet pt(point)\nlet ln,ln1,ln2(line)\nlet pln(plane)\nlet crv,ocrv (curve)\nlet surf(surface)\n\nln = `TOP_REBAR\\CONSTRUCTION\\\u76f4\u7ebf.1`\nsurf = `\u51e0\u4f55\u56fe\u5f62\u96c6.6\\TOP_SURF` icount = length(ln)/150mm\ni=1\n\nfor i while i&lt;=icount\n{\npt = CreateOrModifyDatum(\"Point\",TOP_REBAR\\KP_DATUM\\POINTS ,TOP_REBAR\\KP_GEN_REBAR\\Point ,i)\npt = pointoncurveRatio(ln,NULL,(i-1)/(icount-1),false)\npt.Name=\"PT_\"+ToString(i)\n\npln =CreateOrModifyDatum(\"plane\",TOP_REBAR\\KP_DATUM\\PLANES ,TOP_REBAR\\KP_GEN_REBAR\\Plane ,i)\npln = planenormal(ln,pt)\npln.Name = \"PLN_\"+ToString(i)\n\n\ncrv= intersect(pln,surf) ln1=linetangent(crv,pointoncurveRatio(crv,NULL,0,false),-400mm,0mm,false)\nln2=linetangent(crv,pointoncurveRatio(crv,NULL,1,false),-400mm,0mm,true)\nocrv=CreateOrModifyDatum(\"curve\",TOP_REBAR\\KP_DATUM\\CURVES ,TOP_REBAR\\KP_GEN_REBAR\\Curves ,i)\nocrv= assemble(ln1,ln2,crv)\nocrv.Name = \"CRV_\"+ToString(i)\n\n}    </code></pre>"},{"location":"ISE-AEC/REBAR-%E5%9F%BA%E4%BA%8E%E9%92%A2%E7%AD%8B%E7%9A%84%E5%BB%BA%E6%A8%A1%E8%AE%BA%E6%96%87/%E6%95%B0%E5%AD%97%E5%8C%96%E8%BE%85%E5%8A%A9%E8%AE%BE%E8%AE%A1%E6%A1%A5%E6%A2%81%E9%92%A2%E7%AD%8B%E5%BB%BA%E6%A8%A1/#_2","title":"\u94a2\u7b4b\u5957\u7b52\u7684\u521b\u5efa\u65b9\u6cd5","text":"<p>\u94a2\u7b4b\u5957\u7b52\u53ef\u4ee5\u4e0e\u6df7\u51dd\u571f\u653e\u5728\u4e00\u8d77\u521b\u5efa\uff0c\u6700\u7ec8\u751f\u6210\u7684\u5b54\u6d1e\u4e0e\u6df7\u51dd\u571f\u5b9e\u4f53\u8fdb\u884c\u5e03\u5c14\u8fd0\u7b97\uff0c\u81ea\u52a8\u5c31\u526a\u6389\u591a\u4f59\u7684\u6df7\u51dd\u571f\u3002</p>"},{"location":"ISE-AEC/REBAR-%E5%9F%BA%E4%BA%8E%E9%92%A2%E7%AD%8B%E7%9A%84%E5%BB%BA%E6%A8%A1%E8%AE%BA%E6%96%87/%E6%95%B0%E5%AD%97%E5%8C%96%E8%BE%85%E5%8A%A9%E8%AE%BE%E8%AE%A1%E6%A1%A5%E6%A2%81%E9%92%A2%E7%AD%8B%E5%BB%BA%E6%A8%A1/#_3","title":"\u6321\u5757\u7684\u5efa\u6a21","text":""},{"location":"ISE-AEC/SLN-drafting/%E5%87%BA%E5%9B%BE/","title":"\u51fa\u56fe/Drafting Q&amp;A","text":""},{"location":"ISE-AEC/SLN-drafting/%E5%87%BA%E5%9B%BE/#_1","title":"\u6574\u4f53\u6a21\u578b\u7684\u89c6\u56fe\u5982\u4f55\u548c\u5c40\u90e8\u96f6\u4ef6\u7684\u89c6\u56fe\u7ec4\u7ec7\u5728\u4e00\u5f20\u56fe\u7eb8\u4e2d\uff1f","text":"<p>\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff1a</p> <p> </p> <p>\u9009\u62e9\u51fa\u56fe\u6309\u94ae\uff1b</p> <p></p> <p>\u9009\u62e9\u4f60\u60f3\u8981\u7684\u72ec\u7acb\u6784\u4ef6\uff1b</p> <p></p> <p>\u5982\u679c\u76f4\u63a5\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff0c\u5c06\u751f\u6210\u6240\u6709\u7684\u6784\u4ef6\u7ec4\u5408\u7684\u56fe\u7eb8\uff1b \u5982\u679c\u5148\u9009\u62e9\u6784\u4ef6\uff0c\u518d\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff0c\u5982\u679c\u51fa\u56fe\u5728\u4e00\u4e2apart \u5185\uff0c\u5148\u9009\u51e0\u4f55\u56fe\u5f62\u96c6\uff0c\u518d\u9009\u62e9\u53c2\u8003\u5e73\u9762\uff1b</p> <p></p> <p></p> <p></p> <p>\u6700\u7ec8\u7ed3\u679c\u5982\u4e0b\uff0c\u5177\u4f53\u4f4d\u7f6e\u5982\u679c\u60f3\u5355\u72ec\u5c55\u793a\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u53e0\u5408\uff1b</p> <p></p>"},{"location":"ISE-AEC/SLN-drafting/%E5%87%BA%E5%9B%BE/#_2","title":"\u6807\u6ce8\u80fd\u5b9e\u73b0\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u81ea\u52a8\u5316\u5417\uff1f\u5982\u679c\u80fd\uff0c\u7528\u4ec0\u4e48\u6280\u672f\uff1f","text":"<p>\u53c2\u8003\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u5728\u5efa\u6a21\u73af\u5883\u4e2d\uff0c\u91ca\u653e\u51fa\u6807\u6ce8\u7684\u5173\u952e\u70b9\u4f4d\uff0c  </p> <ul> <li>\u5982\u679c\u60f3\u901a\u8fc7\u5f00\u53d1\u53bb\u81ea\u52a8\u6807\u6ce8\uff0c\u9700\u8981\u4ee3\u7801\u5148\u56de\u5230\u7b2c\u4e00\u4e2a\u4ea7\u54c1\u7684\u7b2c\u4e00\u4e2a\u96f6\u4ef6\uff0c\u83b7\u5f97\u6807\u6ce8\u70b9\u6240\u5728\u76843D\u5750\u6807\u503c\uff0c\u7136\u540e\u56de\u52302D\u56fe\u7eb8\u4e2d\uff0c\u83b7\u5f97\u5750\u6807\u503c\u7684\u4e24\u4e2a\u7ef4\u5ea6\u7684\u503c\uff0c\u5b83\u4eec\u90fd\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u518d\u6839\u636eAPI\u63a5\u53e3\u8fdb\u884c\u6839\u636e\u5750\u6807\u503c\uff0c\u91cd\u65b0\u7ed8\u5236\u4e24\u4e2a\u70b9\uff0c\u5bf9\u8fd9\u4e24\u4e2a\u70b9\u8fdb\u884c\u6807\u6ce8\uff1b</li> <li>\u6240\u6709\u89d2\u5ea6\u6807\u6ce8\uff0c\u6587\u5b57\u6807\u6ce8\u90fd\u9700\u8981\u8fdb\u884c\u4ee5\u4e0a\u7684\u64cd\u4f5c\uff1b</li> <li>\u5bf9\u4e8e\u672c\u4f8b\u6765\u8bf4\u6ca1\u6709\u5fc5\u8981\uff0c\u5b83\u4eec\u7684\u53d8\u5316\u90fd\u662f\u5c3a\u5bf8\u8303\u56f4\u5185\u7684\uff0c\u628a\u6807\u6ce8\u505a\u5728\u6a21\u677f\u6587\u4ef6\u91cc\u9762\uff0c\u5b9e\u4f8b\u5316\u540e\u5373\u53ef\u81ea\u52a8\u751f\u6210\u6807\u6ce8\uff0c\u4e5f\u80fd\u81ea\u52a8\u66f4\u65b0\uff1b</li> <li>\u53ea\u6709\u5728\u52a8\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u9002\u7528\u4e0e\u4ee3\u7801\u8fdb\u884c\u6807\u6ce8\uff0c\u4f8b\u5982\u4f60\u60f3\u751f\u6210\u8fde\u7eed\u6881\u7684\u7acb\u9762\u5c55\u5f00\u56fe\uff0c\u5728\u5e76\u4e0d\u786e\u5b9a\u6709\u591a\u5c11\u8de8\u6881\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u52a8\u5f00\u53d1\u6807\u6ce8\uff1b</li> </ul>"},{"location":"ISE-AEC/SLN-drafting/%E5%87%BA%E5%9B%BE/#_3","title":"\u50cf\u6841\u67b6\u8282\u6bb5\u8fd9\u6837\u7684\u7ed3\u6784\u662f\u4e0d\u65ad\u91cd\u590d\u7684\u7ed3\u6784\uff0c\u5176\u4e8c\u7ef4\u56fe\u80fd\u505a\u6210\u6a21\u677f\u5417\uff1f","text":"<p>\u53c2\u8003 1 \u7684\u6b65\u9aa4\uff0c\u7136\u540e\u5bf9\u6784\u4ef6\u8fdb\u884c\u6807\u6ce8\uff0c\u628a\u8fd9\u4e9b\u6574\u4f53\u505a\u6210\u5de5\u7a0b\u6a21\u677f\uff0c\u5b9e\u4f8b\u5316\u4e4b\u540e\u5373\u53ef\u81ea\u52a8\u751f\u6210\u56fe\u7eb8\u3002</p>"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/","title":"\u57fa\u4e8e\u8fbe\u7d22\u7cfb\u7edf\u5e73\u53f0\u7684\u76fe\u6784\u96a7\u9053\u5feb\u901f\u51fa\u56fe\u5e94\u7528(SZJY)","text":"<p>\u4f5c\u8005\uff1aXXX\u3001\u738b\u5229\u5f3a\u3001\u5218\u8fea\u3001\u7530\u826f</p> <p></p>"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#1","title":"1.\u6458\u8981","text":""},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#2","title":"2.\u5f15\u8a00","text":""},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#3","title":"3.\u7814\u53d1\u8def\u7ebf","text":""},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#31","title":"3.1\u53c2\u6570\u5316\u6a21\u578b","text":""},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#31_1","title":"3.1\u8d44\u6599\u7ba1\u7406","text":""},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#32","title":"3.2\u8bbe\u8ba1\u6570\u636e\u540c\u6b65","text":""},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#4","title":"4.\u56fe\u7eb8\u751f\u6210","text":""},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#5","title":"5.\u9879\u76ee\u5e94\u7528","text":""},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#6","title":"6.\u7ed3\u8bed","text":""},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#7","title":"7.\u4f5c\u8005\u7b80\u4ecb","text":""},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/%E9%9A%A7%E9%81%93BIM%E7%A0%94%E5%8F%91/#8","title":"8.\u611f\u8c22\u8bed","text":"<p>\u8fbe\u7d22\u7cfb\u7edf\u611f\u8c22XXX\u6295\u7a3f\u4ebaXXXX\u5148\u751f\u548c\u8fbe\u8d62\u4fe1\u606f\u5408\u4f5c\u4f19\u4f34\u738b\u5229\u5f3a\u5148\u751f\u3001\u5218\u8fea\u5148\u751f\u3001\u7530\u826f\u5148\u751f\u8d21\u732e\u7684\u9ad8\u8d28\u91cf\u6587\u7ae0\uff0c\u8fbe\u667a\u6c47\u4e09\u91cd\u798f\u5229\u5c06\u5373\u65f6\u5949\u4e0a\u3002\u79ef\u6c99\u6210\u6ee9\uff0c\u79ef\u6d41\u6210\u6e0a\u3002\u8fbe\u7d22\u7cfb\u7edf\u5c06\u5168\u5e74\u6301\u7eed\u9762\u5411\u57fa\u7840\u8bbe\u65bd\u884c\u4e1a\u5e7f\u53ec\u82f1\u96c4\u5e16\uff0c\u5f81\u96c63DEXPERIENCE\u5e73\u53f0\u4f18\u79c0\u884c\u4e1a\u6587\u7ae0\uff0c\u5171\u540c\u6253\u9020\u884c\u4e1a\u77e5\u8bc6\u5171\u4eab\u3001\u7ecf\u9a8c\u4ea4\u6d41\u7684\u65b0\u751f\u6001\uff0c\u52a9\u529b\u6570\u5b57\u5316\u8f6c\u578b\u3002</p>"},{"location":"ISE-AEC/TUNNEL-%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91%E6%B5%81%E7%A8%8B/%E9%9A%A7%E9%81%93%E7%A0%94%E5%8F%91/","title":"tunnel","text":""},{"location":"ISE-AEC/Tunnel%20R%26D%20Process/Tunnel%20R%26D%20Process/","title":"Tunnel R&amp;D Process","text":""},{"location":"ISE-AEC/%E9%9A%A7%E9%81%93/aaa/","title":"Aaa","text":"<p>Sub CATMain() Call UpdatePrtData</p> <p>End Sub</p> <p>Sub UpdatePrtData()</p> <p>Dim MyPart As Part Set MyPart = CATIA.ActiveDocument.Part</p> <p>Dim parms1 As Parameters Set parms1 = MyPart.Parameters</p> <p>Dim parms As Parameters Set parms = prd1.Parameters ' 'Dim pams(14) As Parameter 'Set pams(0) = parms.Item(\"\u5c01\u9876\u5757\u89d2\u5ea6\") 'Set pams(1) = parms.Item(\"\u7ba1\u7247\u5206\u5757\u6570\") 'Set pams(2) = parms.Item(\"\u5747\u5206\u89d2\u5ea6\") 'Set pams(3) = parms.Item(\"\u5bf9\u79f0\u7ba1\u7247\u4f4d\u7f6e\") 'Set pams(4) = parms.Item(\"\u7ba1\u7247\u5916\u5f84\") 'Set pams(5) = parms.Item(\"\u7ba1\u7247\u5185\u5f84\") 'Set pams(6) = parms.Item(\"\u7ba1\u7247\u6954\u5f62\u91cf\") 'Set pams(7) = parms.Item(\"\u7ba1\u7247\u5bbd\u5ea6\") 'Set pams(8) = parms.Item(\"\u6807\u51c6\u5757\u89d2\u5ea6\") 'Set pams(9) = parms.Item(\"\u90bb\u63a5\u5757\u89d2\u5ea6\") 'Set pams(10) = parms.Item(\"\u5c01\u9876\u5757\u73af\u5411\u63a5\u7f1d\u8f6c\u89d2\") 'Set pams(11) = parms.Item(\"\u73af\u5411\u87ba\u6813\u5b54\u89d2\u5ea6\") 'Set pams(12) = parms.Item(\"\u7eb5\u5411\u87ba\u6813\u5b54\u89d2\u5ea6\") 'Set pams(13) = parms.Item(\"\u526a\u529b\u9500\u65cb\u8f6c\u89d2\u5ea6\") 'Set pams(14) = parms.Item(\"\u5c01\u9876\u5757\u4e2d\u5fc3\u504f\u79fb\u91cf\") ' 'If i = 1 Then '    aaa = -6.5 'Else '    aaa = 6.5 + (stangle * (i - 2)) 'End If</p> <p>'6.029deg '45.003deg '83.574deg '122.145deg '160.716deg '360-160.713deg '360-122.142deg '360-83.571deg '360-45deg</p> <p>Dim i As Integer i = 1</p> <p>If i = 1 Then     parms1.Item(\"RotateAngle\").ValuateFromString (-6.029 &amp; \"deg\") ElseIf i = 2 Then     parms1.Item(\"RotateAngle\").ValuateFromString (6.029 &amp; \"deg\") ElseIf i = 3 Then     parms1.Item(\"RotateAngle\").ValuateFromString (45.003 &amp; \"deg\") ElseIf i = 4 Then     parms1.Item(\"RotateAngle\").ValuateFromString (83.574 &amp; \"deg\") ElseIf i = 5 Then     parms1.Item(\"RotateAngle\").ValuateFromString (122.145 &amp; \"deg\") ElseIf i = 6 Then     parms1.Item(\"RotateAngle\").ValuateFromString (160.716 &amp; \"deg\") ElseIf i = 7 Then     parms1.Item(\"RotateAngle\").ValuateFromString (360 - 160.713 &amp; \"deg\") ElseIf i = 8 Then     parms1.Item(\"RotateAngle\").ValuateFromString (360 - 122.142 &amp; \"deg\") ElseIf i = 9 Then     parms1.Item(\"RotateAngle\").ValuateFromString (360 - 83.571 &amp; \"deg\") ElseIf i = 10 Then     parms1.Item(\"RotateAngle\").ValuateFromString (360 - 45 &amp; \"deg\") End If</p> <p>For j = 1 To parms1.Count</p> <p>If parms1.Item(j).Name = \"Radius\" Then        parms1.Item(j).ValuateFromString (pams(4).ValueAsString)    End If</p> <p>If parms1.Item(j).Name = \"RadiusInside\" Then        parms1.Item(j).ValuateFromString (pams(5).ValueAsString)    End If</p> <pre><code>If parms1.Item(j).Name = \"p\" Then\n    parms1.Item(j).ValuateFromString (pams(6).ValueAsString)\nEnd If\n</code></pre> <p>Next</p> <p>MyPart.Update</p> <p>Next</p> <p>End Sub</p>"},{"location":"RHINO-CODE/","title":"HOME","text":""},{"location":"RHINO-CODE/#_1","title":"\u8f6f\u4ef6\u652f\u6301","text":"<p>\u5728\u7ebf\u95ee\u9898\u54a8\u8be2</p> <ul> <li> <p>\u667a\u80fd\u95ee\u7b54\u5e73\u53f0</p> </li> <li> <p>\u5982\u679c\u6709\u95ee\u9898\uff0c\u8bf7\u76f4\u63a5\u5728\u6b64\u9875\u9762\u8fdb\u884c\u63d0\u95ee\uff0c\u51e0\u4e4e\u6bcf\u5929\u90fd\u7ef4\u62a4</p> </li> <li>\u8f93\u5165\u8f6c\u4eba\u5de5\uff0c\u4e4b\u540e\uff0c\u5199\u4e0a\u4f60\u7684\u8be6\u7ec6\u95ee\u9898\uff0c\u6211\u7684\u5fae\u4fe1\u5c31\u4f1a\u6536\u5230\u4f60\u7684\u63d0\u95ee\uff0c\u6211\u5c06\u56de\u590d\u60a8\u7684\u95ee\u9898</li> </ul>"},{"location":"UE/","title":"HOME","text":""},{"location":"UE/#_1","title":"\u8f6f\u4ef6\u652f\u6301","text":"<p>\u5728\u7ebf\u95ee\u9898\u54a8\u8be2</p> <ul> <li> <p>\u667a\u80fd\u95ee\u7b54\u5e73\u53f0</p> </li> <li> <p>\u5982\u679c\u6709\u95ee\u9898\uff0c\u8bf7\u76f4\u63a5\u5728\u6b64\u9875\u9762\u8fdb\u884c\u63d0\u95ee\uff0c\u51e0\u4e4e\u6bcf\u5929\u90fd\u7ef4\u62a4</p> </li> <li>\u8f93\u5165\u8f6c\u4eba\u5de5\uff0c\u4e4b\u540e\uff0c\u5199\u4e0a\u4f60\u7684\u8be6\u7ec6\u95ee\u9898\uff0c\u6211\u7684\u5fae\u4fe1\u5c31\u4f1a\u6536\u5230\u4f60\u7684\u63d0\u95ee\uff0c\u6211\u5c06\u56de\u590d\u60a8\u7684\u95ee\u9898</li> </ul>"},{"location":"Unity/","title":"HOME","text":""},{"location":"Unity/#_1","title":"\u8f6f\u4ef6\u652f\u6301","text":"<p>\u5728\u7ebf\u95ee\u9898\u54a8\u8be2</p> <ul> <li> <p>\u667a\u80fd\u95ee\u7b54\u5e73\u53f0</p> </li> <li> <p>\u5982\u679c\u6709\u95ee\u9898\uff0c\u8bf7\u76f4\u63a5\u5728\u6b64\u9875\u9762\u8fdb\u884c\u63d0\u95ee\uff0c\u51e0\u4e4e\u6bcf\u5929\u90fd\u7ef4\u62a4</p> </li> <li>\u8f93\u5165\u8f6c\u4eba\u5de5\uff0c\u4e4b\u540e\uff0c\u5199\u4e0a\u4f60\u7684\u8be6\u7ec6\u95ee\u9898\uff0c\u6211\u7684\u5fae\u4fe1\u5c31\u4f1a\u6536\u5230\u4f60\u7684\u63d0\u95ee\uff0c\u6211\u5c06\u56de\u590d\u60a8\u7684\u95ee\u9898</li> </ul>"}]}